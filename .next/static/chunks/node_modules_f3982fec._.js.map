{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@sanity/client/dist/_chunks-es/config.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40sanity/client/src/generateHelpUrl.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40sanity/client/src/validators.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40sanity/client/src/util/once.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40sanity/client/src/warnings.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40sanity/client/src/config.ts"],"sourcesContent":["const BASE_URL = 'https://www.sanity.io/help/'\n\nexport function generateHelpUrl(slug: string) {\n  return BASE_URL + slug\n}\n","import type {Any, InitializedClientConfig, SanityDocumentStub} from './types'\n\nconst VALID_ASSET_TYPES = ['image', 'file']\nconst VALID_INSERT_LOCATIONS = ['before', 'after', 'replace']\n\nexport const dataset = (name: string) => {\n  if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name)) {\n    throw new Error(\n      'Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters',\n    )\n  }\n}\n\nexport const projectId = (id: string) => {\n  if (!/^[-a-z0-9]+$/i.test(id)) {\n    throw new Error('`projectId` can only contain only a-z, 0-9 and dashes')\n  }\n}\n\nexport const validateAssetType = (type: string) => {\n  if (VALID_ASSET_TYPES.indexOf(type) === -1) {\n    throw new Error(`Invalid asset type: ${type}. Must be one of ${VALID_ASSET_TYPES.join(', ')}`)\n  }\n}\n\nexport const validateObject = (op: string, val: Any) => {\n  if (val === null || typeof val !== 'object' || Array.isArray(val)) {\n    throw new Error(`${op}() takes an object of properties`)\n  }\n}\n\nexport const validateDocumentId = (op: string, id: string) => {\n  if (typeof id !== 'string' || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes('..')) {\n    throw new Error(`${op}(): \"${id}\" is not a valid document ID`)\n  }\n}\n\nexport const requireDocumentId = (op: string, doc: Record<string, Any>) => {\n  if (!doc._id) {\n    throw new Error(`${op}() requires that the document contains an ID (\"_id\" property)`)\n  }\n\n  validateDocumentId(op, doc._id)\n}\n\nexport const validateDocumentType = (op: string, type: string) => {\n  if (typeof type !== 'string') {\n    throw new Error(`\\`${op}()\\`: \\`${type}\\` is not a valid document type`)\n  }\n}\n\nexport const requireDocumentType = (op: string, doc: Record<string, Any>) => {\n  if (!doc._type) {\n    throw new Error(`\\`${op}()\\` requires that the document contains a type (\\`_type\\` property)`)\n  }\n\n  validateDocumentType(op, doc._type)\n}\n\nexport const validateVersionIdMatch = (builtVersionId: string, document: SanityDocumentStub) => {\n  if (document._id && document._id !== builtVersionId) {\n    throw new Error(\n      `The provided document ID (\\`${document._id}\\`) does not match the generated version ID (\\`${builtVersionId}\\`)`,\n    )\n  }\n}\n\nexport const validateInsert = (at: string, selector: string, items: Any[]) => {\n  const signature = 'insert(at, selector, items)'\n  if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n    const valid = VALID_INSERT_LOCATIONS.map((loc) => `\"${loc}\"`).join(', ')\n    throw new Error(`${signature} takes an \"at\"-argument which is one of: ${valid}`)\n  }\n\n  if (typeof selector !== 'string') {\n    throw new Error(`${signature} takes a \"selector\"-argument which must be a string`)\n  }\n\n  if (!Array.isArray(items)) {\n    throw new Error(`${signature} takes an \"items\"-argument which must be an array`)\n  }\n}\n\nexport const hasDataset = (config: InitializedClientConfig): string => {\n  if (!config.dataset) {\n    throw new Error('`dataset` must be provided to perform queries')\n  }\n\n  return config.dataset || ''\n}\n\nexport const requestTag = (tag: string) => {\n  if (typeof tag !== 'string' || !/^[a-z0-9._-]{1,75}$/i.test(tag)) {\n    throw new Error(\n      `Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.`,\n    )\n  }\n\n  return tag\n}\n\nexport const resourceConfig = (config: InitializedClientConfig): void => {\n  if (!config['~experimental_resource']) {\n    throw new Error('`resource` must be provided to perform resource queries')\n  }\n  const {type, id} = config['~experimental_resource']\n\n  switch (type) {\n    case 'dataset': {\n      const segments = id.split('.')\n      if (segments.length !== 2) {\n        throw new Error('Dataset resource ID must be in the format \"project.dataset\"')\n      }\n      return\n    }\n    case 'dashboard':\n    case 'media-library':\n    case 'canvas': {\n      return\n    }\n    default:\n      // @ts-expect-error - handle all supported resource types\n      throw new Error(`Unsupported resource type: ${type.toString()}`)\n  }\n}\n\nexport const resourceGuard = (service: string, config: InitializedClientConfig): void => {\n  if (config['~experimental_resource']) {\n    throw new Error(`\\`${service}\\` does not support resource-based operations`)\n  }\n}\n","import type {Any} from '../types'\n\nexport function once(fn: Any) {\n  let didCall = false\n  let returnValue: Any\n  return (...args: Any[]) => {\n    if (didCall) {\n      return returnValue\n    }\n    returnValue = fn(...args)\n    didCall = true\n    return returnValue\n  }\n}\n","import {generateHelpUrl} from './generateHelpUrl'\nimport {type Any} from './types'\nimport {once} from './util/once'\n\nconst createWarningPrinter = (message: string[]) =>\n  // eslint-disable-next-line no-console\n  once((...args: Any[]) => console.warn(message.join(' '), ...args))\n\nexport const printCdnAndWithCredentialsWarning = createWarningPrinter([\n  `Because you set \\`withCredentials\\` to true, we will override your \\`useCdn\\``,\n  `setting to be false since (cookie-based) credentials are never set on the CDN`,\n])\n\nexport const printCdnWarning = createWarningPrinter([\n  `Since you haven't set a value for \\`useCdn\\`, we will deliver content using our`,\n  `global, edge-cached API-CDN. If you wish to have content delivered faster, set`,\n  `\\`useCdn: false\\` to use the Live API. Note: You may incur higher costs using the live API.`,\n])\n\nexport const printCdnPreviewDraftsWarning = createWarningPrinter([\n  `The Sanity client is configured with the \\`perspective\\` set to \\`drafts\\` or \\`previewDrafts\\`, which doesn't support the API-CDN.`,\n  `The Live API will be used instead. Set \\`useCdn: false\\` in your configuration to hide this warning.`,\n])\n\nexport const printPreviewDraftsDeprecationWarning = createWarningPrinter([\n  `The \\`previewDrafts\\` perspective has been renamed to  \\`drafts\\` and will be removed in a future API version`,\n])\n\nexport const printBrowserTokenWarning = createWarningPrinter([\n  'You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.',\n  `See ${generateHelpUrl(\n    'js-client-browser-token',\n  )} for more information and how to hide this warning.`,\n])\n\nexport const printCredentialedTokenWarning = createWarningPrinter([\n  'You have configured Sanity client to use a token, but also provided `withCredentials: true`.',\n  'This is no longer supported - only token will be used - remove `withCredentials: true`.',\n])\n\nexport const printNoApiVersionSpecifiedWarning = createWarningPrinter([\n  'Using the Sanity client without specifying an API version is deprecated.',\n  `See ${generateHelpUrl('js-client-api-version')}`,\n])\n\nexport const printNoDefaultExport = createWarningPrinter([\n  'The default export of @sanity/client has been deprecated. Use the named export `createClient` instead.',\n])\n\nexport const printCreateVersionWithBaseIdWarning = createWarningPrinter([\n  'You have called `createVersion()` with a defined `document`. The recommended approach is to provide a `baseId` and `releaseId` instead.',\n])\n","import {generateHelpUrl} from './generateHelpUrl'\nimport type {ClientConfig, ClientPerspective, InitializedClientConfig} from './types'\nimport * as validate from './validators'\nimport * as warnings from './warnings'\n\nconst defaultCdnHost = 'apicdn.sanity.io'\nexport const defaultConfig = {\n  apiHost: 'https://api.sanity.io',\n  apiVersion: '1',\n  useProjectHostname: true,\n  stega: {enabled: false},\n} satisfies ClientConfig\n\nconst LOCALHOSTS = ['localhost', '127.0.0.1', '0.0.0.0']\nconst isLocal = (host: string) => LOCALHOSTS.indexOf(host) !== -1\n\nfunction validateApiVersion(apiVersion: string) {\n  if (apiVersion === '1' || apiVersion === 'X') {\n    return\n  }\n\n  const apiDate = new Date(apiVersion)\n  const apiVersionValid =\n    /^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0\n\n  if (!apiVersionValid) {\n    throw new Error('Invalid API version string, expected `1` or date in format `YYYY-MM-DD`')\n  }\n}\n\n/**\n * @internal - it may have breaking changes in any release\n */\nexport function validateApiPerspective(\n  perspective: unknown,\n): asserts perspective is ClientPerspective {\n  if (Array.isArray(perspective) && perspective.length > 1 && perspective.includes('raw')) {\n    throw new TypeError(\n      `Invalid API perspective value: \"raw\". The raw-perspective can not be combined with other perspectives`,\n    )\n  }\n}\n\nexport const initConfig = (\n  config: Partial<ClientConfig>,\n  prevConfig: Partial<ClientConfig>,\n): InitializedClientConfig => {\n  const specifiedConfig = {\n    ...prevConfig,\n    ...config,\n    stega: {\n      ...(typeof prevConfig.stega === 'boolean'\n        ? {enabled: prevConfig.stega}\n        : prevConfig.stega || defaultConfig.stega),\n      ...(typeof config.stega === 'boolean' ? {enabled: config.stega} : config.stega || {}),\n    },\n  }\n  if (!specifiedConfig.apiVersion) {\n    warnings.printNoApiVersionSpecifiedWarning()\n  }\n\n  const newConfig = {\n    ...defaultConfig,\n    ...specifiedConfig,\n  } as InitializedClientConfig\n  const projectBased = newConfig.useProjectHostname && !newConfig['~experimental_resource']\n\n  if (typeof Promise === 'undefined') {\n    const helpUrl = generateHelpUrl('js-client-promise-polyfill')\n    throw new Error(`No native Promise-implementation found, polyfill needed - see ${helpUrl}`)\n  }\n\n  if (projectBased && !newConfig.projectId) {\n    throw new Error('Configuration must contain `projectId`')\n  }\n\n  if (newConfig['~experimental_resource']) {\n    validate.resourceConfig(newConfig)\n  }\n\n  if (typeof newConfig.perspective !== 'undefined') {\n    validateApiPerspective(newConfig.perspective)\n  }\n\n  if ('encodeSourceMap' in newConfig) {\n    throw new Error(\n      `It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMap' is not supported in '@sanity/client'. Did you mean 'stega.enabled'?`,\n    )\n  }\n  if ('encodeSourceMapAtPath' in newConfig) {\n    throw new Error(\n      `It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMapAtPath' is not supported in '@sanity/client'. Did you mean 'stega.filter'?`,\n    )\n  }\n  if (typeof newConfig.stega.enabled !== 'boolean') {\n    throw new Error(`stega.enabled must be a boolean, received ${newConfig.stega.enabled}`)\n  }\n  if (newConfig.stega.enabled && newConfig.stega.studioUrl === undefined) {\n    throw new Error(`stega.studioUrl must be defined when stega.enabled is true`)\n  }\n  if (\n    newConfig.stega.enabled &&\n    typeof newConfig.stega.studioUrl !== 'string' &&\n    typeof newConfig.stega.studioUrl !== 'function'\n  ) {\n    throw new Error(\n      `stega.studioUrl must be a string or a function, received ${newConfig.stega.studioUrl}`,\n    )\n  }\n\n  const isBrowser = typeof window !== 'undefined' && window.location && window.location.hostname\n  const isLocalhost = isBrowser && isLocal(window.location.hostname)\n\n  const hasToken = Boolean(newConfig.token)\n  if (newConfig.withCredentials && hasToken) {\n    warnings.printCredentialedTokenWarning()\n    newConfig.withCredentials = false\n  }\n\n  if (isBrowser && isLocalhost && hasToken && newConfig.ignoreBrowserTokenWarning !== true) {\n    warnings.printBrowserTokenWarning()\n  } else if (typeof newConfig.useCdn === 'undefined') {\n    warnings.printCdnWarning()\n  }\n\n  if (projectBased) {\n    validate.projectId(newConfig.projectId!)\n  }\n\n  if (newConfig.dataset) {\n    validate.dataset(newConfig.dataset)\n  }\n\n  if ('requestTagPrefix' in newConfig) {\n    // Allow setting and unsetting request tag prefix\n    newConfig.requestTagPrefix = newConfig.requestTagPrefix\n      ? validate.requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, '')\n      : undefined\n  }\n\n  newConfig.apiVersion = `${newConfig.apiVersion}`.replace(/^v/, '')\n  newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost\n\n  if (newConfig.useCdn === true && newConfig.withCredentials) {\n    warnings.printCdnAndWithCredentialsWarning()\n  }\n\n  // If `useCdn` is undefined, we treat it as `true`\n  newConfig.useCdn = newConfig.useCdn !== false && !newConfig.withCredentials\n\n  validateApiVersion(newConfig.apiVersion)\n\n  const hostParts = newConfig.apiHost.split('://', 2)\n  const protocol = hostParts[0]\n  const host = hostParts[1]\n  const cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host\n\n  if (projectBased) {\n    newConfig.url = `${protocol}://${newConfig.projectId}.${host}/v${newConfig.apiVersion}`\n    newConfig.cdnUrl = `${protocol}://${newConfig.projectId}.${cdnHost}/v${newConfig.apiVersion}`\n  } else {\n    newConfig.url = `${newConfig.apiHost}/v${newConfig.apiVersion}`\n    newConfig.cdnUrl = newConfig.url\n  }\n\n  return newConfig\n}\n"],"names":["warnings.printNoApiVersionSpecifiedWarning","validate.resourceConfig","warnings.printCredentialedTokenWarning","warnings.printBrowserTokenWarning","warnings.printCdnWarning","validate.projectId","validate.dataset","validate.requestTag","warnings.printCdnAndWithCredentialsWarning"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,WAAW;AAEV,SAAS,gBAAgB,IAAA,EAAc;IAC5C,OAAO,WAAW;AACpB;ACFA,MAAM,oBAAoB;IAAC;IAAS,MAAM;CAAA,EACpC,yBAAyB;IAAC;IAAU;IAAS,SAAS;CAAA,EAE/C,UAAU,CAAC,SAAiB;IACnC,IAAA,CAAC,qDAAqD,IAAA,CAAK,IAAI,GACjE,MAAM,IAAI,MACR;AAGN,GAEa,YAAY,CAAC,OAAe;IACnC,IAAA,CAAC,gBAAgB,IAAA,CAAK,EAAE,GACpB,MAAA,IAAI,MAAM,uDAAuD;AAE3E,GAEa,oBAAoB,CAAC,SAAiB;IAC7C,IAAA,kBAAkB,OAAA,CAAQ,IAAI,MAAM,CAAA,GAChC,MAAA,IAAI,MAAM,8BAAuB,IAAI,EAAA,qBAAgD,CAAE,MAA9B,kBAAkB,IAAA,CAAK,IAAI,CAAC;AAE/F,GAEa,iBAAiB,CAAC,IAAY,QAAa;IACtD,IAAI,QAAQ,QAAQ,OAAO,OAAQ,YAAY,MAAM,OAAA,CAAQ,GAAG,GAC9D,MAAM,IAAI,MAAM,GAAK,OAAF,EAAE,EAAA,iCAAkC;AAE3D,GAEa,qBAAqB,CAAC,IAAY,OAAe;IACxD,IAAA,OAAO,MAAO,YAAY,CAAC,iCAAiC,IAAA,CAAK,EAAE,KAAK,GAAG,QAAA,CAAS,IAAI,GAC1F,MAAM,IAAI,MAAM,GAAa,EAAE,KAAZ,EAAE,EAAA,SAAU,WAAA,6BAA8B;AAEjE,GAEa,oBAAoB,CAAC,IAAY,QAA6B;IACzE,IAAI,CAAC,IAAI,GAAA,EACP,MAAM,IAAI,MAAM,GAAK,OAAF,EAAE,EAAA,8DAA+D;IAGnE,mBAAA,IAAI,IAAI,GAAG;AAChC,GAEa,uBAAuB,CAAC,IAAY,SAAiB;IAChE,IAAI,OAAO,QAAS,UAClB,MAAM,IAAI,MAAM,IAAkB,IAAI,GAAjB,EAAE,EAAA,UAAe,aAAA,gCAAiC;AAE3E,GAEa,sBAAsB,CAAC,IAAY,QAA6B;IAC3E,IAAI,CAAC,IAAI,KAAA,EACP,MAAM,IAAI,MAAM,IAAO,OAAF,EAAE,EAAA,0DAAsE;IAG1E,qBAAA,IAAI,IAAI,KAAK;AACpC,GAEa,yBAAyB,CAAC,gBAAwB,aAAiC;IAC1F,IAAA,SAAS,GAAA,IAAO,SAAS,GAAA,KAAQ,gBACnC,MAAM,IAAI,MACR,8BAA6F,OAA9D,OAA4E,EAAnE,GAAG,EAAA,iDAAgE,uBAAA;AAGjH,GAEa,iBAAiB,CAAC,IAAY,UAAkB,UAAiB;IAC5E,MAAM,YAAY;IAClB,IAAI,uBAAuB,OAAA,CAAQ,EAAE,MAAM,CAAA,GAAI;QACvC,MAAA,QAAQ,uBAAuB,GAAA,CAAI,CAAC,MAAQ,IAAO,EAAG,KAAN,GAAG,EAAA,MAAK,IAAA,CAAK,IAAI;QACvE,MAAM,IAAI,MAAM,UAAG,SAAS,EAAA,6CAAiD,CAAE,MAAP,KAAK;IAAE;IAGjF,IAAI,OAAO,YAAa,UACtB,MAAM,IAAI,MAAM,GAAY,OAAT,SAAS,EAAA,oDAAqD;IAG/E,IAAA,CAAC,MAAM,OAAA,CAAQ,KAAK,GACtB,MAAM,IAAI,MAAM,GAAY,OAAT,SAAS,EAAA,kDAAmD;AAEnF,GAEa,aAAa,CAAC,WAA4C;IACrE,IAAI,CAAC,OAAO,OAAA,EACJ,MAAA,IAAI,MAAM,+CAA+C;IAGjE,OAAO,OAAO,OAAA,IAAW;AAC3B,GAEa,aAAa,CAAC,QAAgB;IACzC,IAAI,OAAO,OAAQ,YAAY,CAAC,uBAAuB,IAAA,CAAK,GAAG,GAC7D,MAAM,IAAI,MACR;IAIG,OAAA;AACT,GAEa,iBAAiB,CAAC,WAA0C;IACnE,IAAA,CAAC,MAAA,CAAO,wBAAwB,CAAA,EAC5B,MAAA,IAAI,MAAM,yDAAyD;IAE3E,MAAM,EAAC,IAAA,EAAM,EAAA,EAAA,GAAM,MAAA,CAAO,wBAAwB,CAAA;IAElD,OAAQ,MAAM;QACZ,KAAK;YAAW;gBAEd,IADiB,GAAG,KAAA,CAAM,GAAG,EAChB,MAAA,KAAW,GAChB,MAAA,IAAI,MAAM,6DAA6D;gBAE/E;YAAA;QAEF,KAAK;QACL,KAAK;QACL,KAAK;YACH;QAEF;YAEE,MAAM,IAAI,MAAM,8BAA6C,CAAE,MAAjB,KAAK,QAAA,CAAU,CAAA;IAAE;AAErE,GAEa,gBAAgB,CAAC,SAAiB,WAA0C;IACvF,IAAI,MAAA,CAAO,wBAAwB,CAAA,EACjC,MAAM,IAAI,MAAM,IAAY,OAAP,OAAO,EAAA,8BAA+C;AAE/E;AChIO,SAAS,KAAK,EAAA,EAAS;IAC5B,IAAI,UAAU,CAAA,GACV;IACG,OAAA;;YAAI;;eACL,WAAA,CAGJ,cAAc,GAAG,GAAG,IAAI,GACxB,UAAU,CAAA,CAAA,GACH;;AAEX;ACTA,MAAM,uBAAuB,CAAC,UAAA,sCAAA;IAE5B,KAAK;;YAAI;;eAAgB,QAAQ,IAAA,CAAK,QAAQ,IAAA,CAAK,GAAG,GAAG,GAAG,IAAI,CAAC;QAEtD,oCAAoC,qBAAqB;IACpE;IACA;CACD,GAEY,kBAAkB,qBAAqB;IAClD;IACA;IACA;CACD,GAEY,+BAA+B,qBAAqB;IAC/D;IACA;CACD,GAEY,uCAAuC,qBAAqB;IACvE;CACD,GAEY,2BAA2B,qBAAqB;IAC3D;IACA,OAEC,OAFM,gBACL,4BACD;CACF,GAEY,gCAAgC,qBAAqB;IAChE;IACA;CACD,GAEY,oCAAoC,qBAAqB;IACpE;IACA,OAA+C,OAAxC,gBAAgB,uBAAuB,CAAC;CAChD,GAEY,uBAAuB,qBAAqB;IACvD;CACD,GAEY,sCAAsC,qBAAqB;IACtE;CACD,GC9CK,iBAAiB,oBACV,gBAAgB;IAC3B,SAAS;IACT,YAAY;IACZ,oBAAoB,CAAA;IACpB,OAAO;QAAC,SAAS,CAAA;IAAK;AACxB,GAEM,aAAa;IAAC;IAAa;IAAa,SAAS;CAAA,EACjD,UAAU,CAAC,OAAiB,WAAW,OAAA,CAAQ,IAAI,MAAM,CAAA;AAE/D,SAAS,mBAAmB,UAAA,EAAoB;IAC1C,IAAA,eAAe,OAAO,eAAe,KACvC;IAGI,MAAA,UAAU,IAAI,KAAK,UAAU;IAI/B,IAAA,CAAA,CAFF,sBAAsB,IAAA,CAAK,UAAU,KAAK,mBAAmB,QAAQ,QAAQ,OAAA,CAAY,IAAA,CAAA,GAGnF,MAAA,IAAI,MAAM,yEAAyE;AAE7F;AAKO,SAAS,uBACd,WAAA,EAC0C;IACtC,IAAA,MAAM,OAAA,CAAQ,WAAW,KAAK,YAAY,MAAA,GAAS,KAAK,YAAY,QAAA,CAAS,KAAK,GACpF,MAAM,IAAI,UACR;AAGN;AAEa,MAAA,aAAa,CACxB,QACA,eAC4B;IAC5B,MAAM,kBAAkB;QACtB,GAAG,UAAA;QACH,GAAG,MAAA;QACH,OAAO;YACL,GAAI,OAAO,WAAW,KAAA,IAAU,YAC5B;gBAAC,SAAS,WAAW,KAAA;YAAA,IACrB,WAAW,KAAA,IAAS,cAAc,KAAA;YACtC,GAAI,OAAO,OAAO,KAAA,IAAU,YAAY;gBAAC,SAAS,OAAO,KAAA;YAAK,IAAI,OAAO,KAAA,IAAS,CAAA,CAAA;QAAC;IAEvF;IACK,gBAAgB,UAAA,IACnBA,kCAA2C;IAG7C,MAAM,YAAY;QAChB,GAAG,aAAA;QACH,GAAG,eAAA;IAAA,GAEC,eAAe,UAAU,kBAAA,IAAsB,CAAC,SAAA,CAAU,wBAAwB,CAAA;IAEpF,IAAA,OAAO,UAAY,KAAa;QAC5B,MAAA,UAAU,gBAAgB,4BAA4B;QAC5D,MAAM,IAAI,MAAM,iEAAwE,CAAE,MAAT,OAAO;IAAE;IAGxF,IAAA,gBAAgB,CAAC,UAAU,SAAA,EACvB,MAAA,IAAI,MAAM,wCAAwC;IAW1D,IARI,SAAA,CAAU,wBAAwB,CAAA,IACpCC,eAAwB,SAAS,GAG/B,OAAO,UAAU,WAAA,GAAgB,OACnC,uBAAuB,UAAU,WAAW,GAG1C,qBAAqB,WACvB,MAAM,IAAI,MACR;IAGJ,IAAI,2BAA2B,WAC7B,MAAM,IAAI,MACR;IAGA,IAAA,OAAO,UAAU,KAAA,CAAM,OAAA,IAAY,WACrC,MAAM,IAAI,MAAM,6CAAoE,CAAE,MAAzB,UAAU,KAAA,CAAM,OAAO;IAEtF,IAAI,UAAU,KAAA,CAAM,OAAA,IAAW,UAAU,KAAA,CAAM,SAAA,KAAc,KAAA,GACrD,MAAA,IAAI,MAAM,4DAA4D;IAG5E,IAAA,UAAU,KAAA,CAAM,OAAA,IAChB,OAAO,UAAU,KAAA,CAAM,SAAA,IAAc,YACrC,OAAO,UAAU,KAAA,CAAM,SAAA,IAAc,YAErC,MAAM,IAAI,MACR,4DAAqF,OAAzB,UAAU,KAAA,CAAM,SAAS;IAIzF,MAAM,YAAY,OAAO,SAAW,OAAe,OAAO,QAAA,IAAY,OAAO,QAAA,CAAS,QAAA,EAChF,cAAc,aAAa,QAAQ,OAAO,QAAA,CAAS,QAAQ,GAE3D,WAAW,CAAA,CAAQ,UAAU,KAAA;IAC/B,UAAU,eAAA,IAAmB,YAAA,CAC/BC,8BAAuC,GACvC,UAAU,eAAA,GAAkB,CAAA,CAAA,GAG1B,aAAa,eAAe,YAAY,UAAU,yBAAA,KAA8B,CAAA,IAClFC,6BACS,OAAO,UAAU,MAAA,GAAW,OACrCC,mBAGE,gBACFC,UAAmB,UAAU,SAAU,GAGrC,UAAU,OAAA,IACZC,QAAiB,UAAU,OAAO,GAGhC,sBAAsB,aAAA,CAExB,UAAU,gBAAA,GAAmB,UAAU,gBAAA,GACnCC,WAAoB,UAAU,gBAAgB,EAAE,OAAA,CAAQ,QAAQ,EAAE,IAClE,KAAA,CAAA,GAGN,UAAU,UAAA,GAAa,GAAuB,OAApB,UAAU,UAAU,EAAG,OAAA,CAAQ,MAAM,EAAE,GACjE,UAAU,YAAA,GAAe,UAAU,OAAA,KAAY,cAAc,OAAA,EAEzD,UAAU,MAAA,KAAW,CAAA,KAAQ,UAAU,eAAA,IACzCC,kCAA2C,GAI7C,UAAU,MAAA,GAAS,UAAU,MAAA,KAAW,CAAA,KAAS,CAAC,UAAU,eAAA,EAE5D,mBAAmB,UAAU,UAAU;IAEvC,MAAM,YAAY,UAAU,OAAA,CAAQ,KAAA,CAAM,OAAO,CAAC,GAC5C,WAAW,SAAA,CAAU,CAAC,CAAA,EACtB,OAAO,SAAA,CAAU,CAAC,CAAA,EAClB,UAAU,UAAU,YAAA,GAAe,iBAAiB;IAE1D,OAAI,eAAA,CACF,UAAU,GAAA,GAAM,UAAG,QAAQ,EAAA,cAAM,UAAU,SAAS,EAAA,YAAI,IAAI,EAAA,MAAyB,OAApB,UAAU,UAAU,GACrF,UAAU,MAAA,GAAS,UAAG,QAAQ,EAAA,cAAM,UAAU,SAAS,EAAA,YAAI,OAAO,EAAA,MAAyB,OAApB,UAAU,UAAU,CAAA,IAAA,CAE3F,UAAU,GAAA,GAAM,UAAG,UAAU,OAAO,EAAA,MAAyB,OAApB,UAAU,UAAU,GAC7D,UAAU,MAAA,GAAS,UAAU,GAAA,GAGxB;AACT","debugId":null}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@sanity/client/dist/csm.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40sanity/client/src/csm/resolvePerspectives.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40sanity/client/src/csm/createSourceDocumentResolver.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40sanity/client/src/csm/applySourceDocuments.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40sanity/client/src/csm/resolvedKeyedSourcePath.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40sanity/client/src/csm/resolveEditUrl.ts"],"sourcesContent":["import {validateApiPerspective} from '../config'\nimport type {StackablePerspective} from '../types'\nimport type {ClientPerspective} from './types'\n\n/**\n * This resolves the perspectives to how documents should be resolved when applying optimistic updates,\n * like in `applySourceDocuments`.\n * @internal\n */\nexport function resolvePerspectives(\n  perspective: Exclude<ClientPerspective, 'raw'>,\n): ('published' | 'drafts' | StackablePerspective)[] {\n  validateApiPerspective(perspective)\n\n  if (Array.isArray(perspective)) {\n    if (!perspective.includes('published')) {\n      return [...perspective, 'published']\n    }\n    return perspective\n  }\n  switch (perspective) {\n    case 'previewDrafts':\n    case 'drafts':\n      return ['drafts', 'published']\n    case 'published':\n    default:\n      return ['published']\n  }\n}\n","import {getDraftId, getPublishedId, getVersionId} from './draftUtils'\nimport {resolvePerspectives} from './resolvePerspectives'\nimport type {ClientPerspective, ContentSourceMapDocuments, SanityDocument} from './types'\n\n/** @internal */\nexport type ResolvedDocument = Partial<SanityDocument> &\n  Required<Pick<SanityDocument, '_id' | '_type'>>\n\n/** @internal */\nexport type MatchedDocument = Partial<SanityDocument> &\n  Required<Pick<SanityDocument, '_id' | '_type' | '_originalId'>>\n\n/** @internal */\nexport function createSourceDocumentResolver(\n  getCachedDocument: (\n    sourceDocument: ContentSourceMapDocuments[number],\n  ) => ResolvedDocument | null | undefined,\n  _perspective: Exclude<ClientPerspective, 'raw'>,\n) {\n  const perspectives = resolvePerspectives(_perspective)\n  function findDocument(sourceDocument: ContentSourceMapDocuments[number]) {\n    for (const perspective of perspectives) {\n      let match: ReturnType<typeof getCachedDocument> = null\n      if (perspective.startsWith('r')) {\n        match = getCachedDocument({\n          ...sourceDocument,\n          _id: getVersionId(sourceDocument._id, perspective),\n        })\n      }\n      if (perspective === 'drafts') {\n        match = getCachedDocument({\n          ...sourceDocument,\n          _id: getDraftId(sourceDocument._id),\n        })\n      }\n      if (perspective === 'published') {\n        match = getCachedDocument({\n          ...sourceDocument,\n          _id: getPublishedId(sourceDocument._id),\n        })\n      }\n      if (match) {\n        return {...match, _id: getPublishedId(match._id), _originalId: match._id}\n      }\n    }\n    return null\n  }\n  // define resolver that loops over source documents and perspectives\n  return function resolveSourceDocument(\n    sourceDocument: ContentSourceMapDocuments[number],\n  ): MatchedDocument | null {\n    return findDocument(sourceDocument)\n  }\n}\n","import {createSourceDocumentResolver} from './createSourceDocumentResolver'\nimport {parseJsonPath} from './jsonPath'\nimport {resolveMapping} from './resolveMapping'\nimport * as paths from './studioPath'\nimport type {\n  Any,\n  ApplySourceDocumentsUpdateFunction,\n  ClientPerspective,\n  ContentSourceMap,\n  ContentSourceMapDocuments,\n  Path,\n  SanityDocument,\n} from './types'\nimport {walkMap} from './walkMap'\n\n/**\n * Optimistically applies source documents to a result, using the content source map to trace fields.\n * Can be used to apply mutations to documents being edited in a Studio, or any mutation on Content Lake, to a result with extremely low latency.\n * @alpha\n */\nexport function applySourceDocuments<Result = unknown>(\n  result: Result,\n  resultSourceMap: ContentSourceMap | undefined,\n  getCachedDocument: (\n    sourceDocument: ContentSourceMapDocuments[number],\n  ) =>\n    | (Partial<SanityDocument> & Required<Pick<SanityDocument, '_id' | '_type'>>)\n    | null\n    | undefined,\n  updateFn: ApplySourceDocumentsUpdateFunction,\n  perspective: Exclude<ClientPerspective, 'raw'>,\n): Result {\n  if (!resultSourceMap) return result\n\n  const resolveDocument = createSourceDocumentResolver(getCachedDocument, perspective)\n  const cachedDocuments = resultSourceMap.documents?.map?.(resolveDocument) || []\n\n  return walkMap(JSON.parse(JSON.stringify(result)), (value, path) => {\n    const resolveMappingResult = resolveMapping(path, resultSourceMap)\n    if (!resolveMappingResult) {\n      return value\n    }\n\n    const {mapping, pathSuffix} = resolveMappingResult\n    if (mapping.type !== 'value') {\n      return value\n    }\n\n    if (mapping.source.type !== 'documentValue') {\n      return value\n    }\n\n    const sourceDocument = resultSourceMap.documents[mapping.source.document]\n    const sourcePath = resultSourceMap.paths[mapping.source.path]\n\n    if (sourceDocument) {\n      const parsedPath = parseJsonPath(sourcePath + pathSuffix)\n      const stringifiedPath = paths.toString(parsedPath as Path)\n      const cachedDocument = cachedDocuments[mapping.source.document]\n\n      if (!cachedDocument) {\n        return value\n      }\n\n      const changedValue = cachedDocument\n        ? paths.get<Result[keyof Result]>(cachedDocument, stringifiedPath, value)\n        : value\n      return value === changedValue\n        ? value\n        : updateFn<Result[keyof Result]>(changedValue as Any, {\n            cachedDocument,\n            previousValue: value as Result[keyof Result],\n            sourceDocument,\n            sourcePath: parsedPath,\n          })\n    }\n\n    return value\n  }) as Result\n}\n","import {jsonPath, parseJsonPath} from './jsonPath'\nimport type {ContentSourceMapParsedPath} from './types'\n\n/**\n * @internal\n */\nexport function resolvedKeyedSourcePath(options: {\n  keyedResultPath: ContentSourceMapParsedPath\n  pathSuffix?: string\n  sourceBasePath: string\n}): ContentSourceMapParsedPath {\n  const {keyedResultPath, pathSuffix, sourceBasePath} = options\n\n  const inferredResultPath = pathSuffix === undefined ? [] : parseJsonPath(pathSuffix)\n\n  const inferredPath = keyedResultPath.slice(keyedResultPath.length - inferredResultPath.length)\n\n  const inferredPathSuffix = inferredPath.length ? jsonPath(inferredPath).slice(1) : ''\n\n  return parseJsonPath(sourceBasePath + inferredPathSuffix)\n}\n","import {createEditUrl} from './createEditUrl'\nimport {studioPathToJsonPath} from './jsonPath'\nimport {resolveEditInfo} from './resolveEditInfo'\nimport type {ResolveEditUrlOptions} from './types'\n\n/** @alpha */\nexport function resolveEditUrl(\n  options: ResolveEditUrlOptions,\n): ReturnType<typeof createEditUrl> | undefined {\n  const {resultSourceMap, studioUrl} = options\n  const resultPath = studioPathToJsonPath(options.resultPath)\n\n  const editInfo = resolveEditInfo({\n    resultPath,\n    resultSourceMap,\n    studioUrl,\n  })\n  if (!editInfo) {\n    return undefined\n  }\n\n  return createEditUrl(editInfo)\n}\n"],"names":["paths.toString","paths.get"],"mappings":"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","debugId":null}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/sanity/lib/_chunks-es/LiveQueries.mjs","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/sanity/src/presentation/loader/useLiveEvents.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/sanity/src/presentation/loader/utils.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/sanity/src/presentation/loader/useLiveQueries.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/sanity/src/presentation/loader/LiveQueries.tsx"],"sourcesContent":["import {type LiveEvent, type LiveEventMessage} from '@sanity/client'\nimport {useDeferredValue, useEffect, useReducer, useState} from 'react'\nimport {type SanityClient} from 'sanity'\n\ntype State = {\n  /**\n   * Growing list over live events with Sync Tags,\n   * that can be used to refetch with Sanity Client, using the id as the lastLiveEventId parameter\n   */\n  messages: LiveEventMessage[]\n  /**\n   * If the connection experiences a reconnect, or a restart event is received, the counter is incremented.\n   * This counter is suitable as a `key` on React Components as a way to reset its internal state and refetch.\n   */\n  resets: number\n}\n\nexport function reducer(state: State, event: LiveEvent): State {\n  switch (event.type) {\n    case 'message':\n      return {\n        ...state,\n        messages: [...state.messages, event],\n      }\n    case 'reconnect':\n    case 'restart':\n      return {\n        ...state,\n        messages: [],\n        resets: state.resets + 1,\n      }\n    case 'welcome':\n      // no-op\n      return state\n    default:\n      throw Error(\n        `Unknown event: ${\n          // oxlint-disable-next-line no-explicit-any\n          (event as any).type\n        }`,\n        {cause: event},\n      )\n  }\n}\n\nexport const initialState: State = {\n  messages: [],\n  resets: 0,\n}\n\nexport function useLiveEvents(client: SanityClient): State {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const [error, setError] = useState<unknown>(null)\n  if (error !== null) {\n    // Push error to nearest error boundary\n    throw error\n  }\n\n  useEffect(() => {\n    const subscription = client.live\n      .events({includeDrafts: true, tag: 'presentation-loader'})\n      .subscribe({\n        next: dispatch,\n        error: (err) =>\n          setError(\n            err instanceof Error\n              ? err\n              : new Error('Unexpected error in useLiveEvents', {cause: err}),\n          ),\n      })\n    return () => subscription.unsubscribe()\n  }, [client.live])\n\n  return useDeferredValue(state)\n}\n","import {toPlainText} from '@portabletext/react'\nimport {isPortableTextBlock} from '@portabletext/toolkit'\nimport {type ClientPerspective, type QueryParams} from '@sanity/client'\nimport {type ApplySourceDocumentsUpdateFunction} from '@sanity/client/csm'\nimport {type FIXME} from 'sanity'\n\n/**\n * Used by `applySourceDocuments`\n * @internal\n */\nexport const mapChangedValue: ApplySourceDocumentsUpdateFunction = (\n  changedValue: FIXME,\n  {previousValue},\n) => {\n  if (typeof previousValue === 'string') {\n    if (typeof changedValue === 'number') {\n      // If the string() function was used in the query, we need to convert the source value to a string as well\n      return `${changedValue}`\n    }\n    // If it's an array in the source, but a string in the query response, it could be pt::text\n    if (Array.isArray(changedValue)) {\n      if (changedValue.length === 0) {\n        // If it's empty assume it's PT and return an empty string\n        return ''\n      }\n      // If the array contains any valid block type, assume the GROQ initially used pt::text on it and do the same conversion\n      if (changedValue.some((node) => typeof node === 'object' && isPortableTextBlock(node))) {\n        return toPlainText(changedValue)\n      }\n    }\n  }\n\n  return changedValue\n}\n\n/**\n * @internal\n */\nexport type QueryCacheKey = `${string}:${string}:${string}`\n/**\n * @internal\n */\nexport function getQueryCacheKey(\n  perspective: ClientPerspective,\n  query: string,\n  params: QueryParams,\n): QueryCacheKey {\n  return `${perspective}:${query}:${JSON.stringify(params)}`\n}\n","import {type ClientPerspective} from '@sanity/client'\nimport isEqual from 'fast-deep-equal'\nimport {useDeferredValue, useEffect, useReducer} from 'react'\nimport {type QueryParams} from 'sanity'\n\nimport {LOADER_QUERY_GC_INTERVAL} from '../constants'\nimport {getQueryCacheKey, type QueryCacheKey} from './utils'\n\ntype LiveQueriesState = Map<\n  QueryCacheKey,\n  {\n    query: string\n    params: QueryParams\n    perspective: ClientPerspective\n  }\n>\n\ntype State = {\n  queries: LiveQueriesState\n  heartbeats: Map<\n    QueryCacheKey,\n    {\n      receivedAt: number\n      /**\n       * If false it means the query can't safely be garbage collected,\n       * as older versions of \\@sanity/core-loader doesn't fire listen events\n       * on an interval.\n       */\n      heartbeat: number | false\n    }\n  >\n}\n\ntype QueryListenAction = {\n  type: 'query-listen'\n  payload: {\n    perspective: ClientPerspective\n    query: string\n    params: QueryParams\n    heartbeat: number | false\n  }\n}\ntype GarbageCollectAction = {type: 'gc'}\ntype Action = QueryListenAction | GarbageCollectAction\n\nfunction gc(state: State): State {\n  if (state.queries.size < 1) {\n    return state\n  }\n\n  const now = Date.now()\n  const hasAnyExpired = Array.from(state.heartbeats.values()).some(\n    (entry) => entry.heartbeat !== false && now > entry.receivedAt + entry.heartbeat,\n  )\n  if (!hasAnyExpired) {\n    return state\n  }\n  const nextHeartbeats = new Map()\n  const nextQueries = new Map()\n  for (const [key, entry] of state.heartbeats.entries()) {\n    if (entry.heartbeat !== false && now > entry.receivedAt + entry.heartbeat) {\n      continue\n    }\n    nextHeartbeats.set(key, entry)\n    nextQueries.set(key, state.queries.get(key))\n  }\n\n  return {...state, queries: nextQueries, heartbeats: nextHeartbeats}\n}\nfunction queryListen(state: State, {payload}: QueryListenAction): State {\n  const key = getQueryCacheKey(payload.perspective, payload.query, payload.params)\n  const data = {query: payload.query, params: payload.params, perspective: payload.perspective}\n\n  const nextHeartbeats = new Map(state.heartbeats)\n  nextHeartbeats.set(key, {\n    receivedAt: Date.now(),\n    heartbeat: payload.heartbeat,\n  })\n\n  let nextQueries = state.queries\n  /**\n   * The data comes from a postMessage event, which uses the structured clone algorithm to serialize state (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#message).\n   * This impacts `params`, which is an object, as it will be a new object every time even if the sender is sending the same object instance on their end.\n   * It also impacts `perspective`, as it's no longer just a string, but can also be an array of strings.\n   * Both cases are handled by fast-deep-equal, which is used to compare the data before deciding wether the state should be updated.\n   */\n  if (!state.queries.has(key) || !isEqual(state.queries.get(key), data)) {\n    nextQueries = new Map(state.queries)\n    nextQueries.set(key, data)\n  }\n\n  return {heartbeats: nextHeartbeats, queries: nextQueries}\n}\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'query-listen':\n      return queryListen(state, action)\n    case 'gc':\n      return gc(state)\n    default:\n      throw Error(\n        `Unknown action: ${\n          // oxlint-disable-next-line no-explicit-any\n          (action as any).type\n        }`,\n        {cause: action},\n      )\n  }\n}\n\nexport const initialState: State = {\n  queries: new Map(),\n  heartbeats: new Map(),\n}\n\nexport function useLiveQueries(): [LiveQueriesState, React.ActionDispatch<[action: Action]>] {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(() => {\n    const interval = setInterval(() => dispatch({type: 'gc'}), LOADER_QUERY_GC_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  const queries = useDeferredValue(state.queries)\n  return [queries, dispatch]\n}\n","import {\n  type ClientPerspective,\n  type ContentSourceMap,\n  type LiveEventMessage,\n  type QueryParams,\n  type SyncTag,\n} from '@sanity/client'\nimport {applySourceDocuments, getPublishedId} from '@sanity/client/csm'\nimport {\n  type ChannelInstance,\n  type Controller,\n  createConnectionMachine,\n  type StatusEvent,\n} from '@sanity/comlink'\nimport {\n  createCompatibilityActors,\n  type LoaderControllerMsg,\n  type LoaderNodeMsg,\n} from '@sanity/presentation-comlink'\nimport isEqual from 'fast-deep-equal'\nimport {memo, startTransition, useDeferredValue, useEffect, useMemo, useState} from 'react'\nimport {\n  isReleasePerspective,\n  RELEASES_STUDIO_CLIENT_OPTIONS,\n  type SanityClient,\n  type SanityDocument,\n  useClient,\n  useDataset,\n  useProjectId,\n} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {API_VERSION, MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL} from '../constants'\nimport {type LoaderConnection, type PresentationPerspective} from '../types'\nimport {type DocumentOnPage} from '../useDocumentsOnPage'\nimport {useLiveEvents} from './useLiveEvents'\nimport {useLiveQueries} from './useLiveQueries'\nimport {mapChangedValue} from './utils'\n\nexport interface LiveQueriesProps {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  controller: Controller | undefined\n  perspective: ClientPerspective\n  onLoadersConnection: (event: StatusEvent) => void\n  onDocumentsOnPage: (\n    key: string,\n    perspective: PresentationPerspective,\n    state: DocumentOnPage[],\n  ) => void\n}\n\nexport default function LiveQueries(props: LiveQueriesProps): React.JSX.Element {\n  const {controller, perspective: activePerspective, onLoadersConnection, onDocumentsOnPage} = props\n\n  const [comlink, setComlink] = useState<ChannelInstance<LoaderControllerMsg, LoaderNodeMsg>>()\n  const [liveQueries, liveQueriesDispatch] = useLiveQueries()\n\n  const projectId = useProjectId()\n  const dataset = useDataset()\n\n  useEffect((): (() => void) => {\n    if (controller) {\n      const nextComlink = controller.createChannel<LoaderControllerMsg, LoaderNodeMsg>(\n        {\n          name: 'presentation',\n          connectTo: 'loaders',\n          heartbeat: true,\n        },\n        createConnectionMachine<LoaderControllerMsg, LoaderNodeMsg>().provide({\n          actors: createCompatibilityActors<LoaderControllerMsg>(),\n        }),\n      )\n      setComlink(nextComlink)\n\n      nextComlink.onStatus(onLoadersConnection)\n\n      nextComlink.on('loader/documents', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          onDocumentsOnPage(\n            'loaders',\n            // oxlint-disable-next-line no-explicit-any\n            data.perspective as unknown as any,\n            data.documents,\n          )\n        }\n      })\n\n      nextComlink.on('loader/query-listen', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          if (\n            typeof data.heartbeat === 'number' &&\n            data.heartbeat < MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL\n          ) {\n            throw new Error(\n              `Loader query listen heartbeat interval must be at least ${MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL}ms`,\n            )\n          }\n          liveQueriesDispatch({\n            type: 'query-listen',\n            payload: {\n              perspective: data.perspective,\n              query: data.query,\n              params: data.params,\n              heartbeat: data.heartbeat ?? false,\n            },\n          })\n        }\n      })\n\n      return nextComlink.start()\n    }\n    return () => undefined\n  }, [controller, dataset, liveQueriesDispatch, onDocumentsOnPage, onLoadersConnection, projectId])\n\n  const studioClient = useClient(\n    isReleasePerspective(activePerspective)\n      ? RELEASES_STUDIO_CLIENT_OPTIONS\n      : {apiVersion: API_VERSION},\n  )\n  const client = useMemo(\n    () =>\n      studioClient.withConfig({\n        resultSourceMap: 'withKeyArraySelector',\n      }),\n    [studioClient],\n  )\n  useEffect(() => {\n    if (comlink) {\n      comlink.post('loader/perspective', {\n        projectId,\n        dataset,\n        perspective: activePerspective,\n      })\n    }\n  }, [comlink, activePerspective, projectId, dataset])\n\n  /**\n   * Defer the liveDocument to avoid unnecessary rerenders on rapid edits\n   */\n  const liveDocument = useDeferredValue(props.liveDocument)\n\n  const liveEvents = useLiveEvents(client)\n\n  return (\n    <>\n      {[...liveQueries.entries()].map(([key, {query, params, perspective}]) => (\n        <QuerySubscription\n          key={`${liveEvents.resets}:${key}`}\n          projectId={projectId}\n          dataset={dataset}\n          perspective={perspective}\n          query={query}\n          params={params}\n          comlink={comlink}\n          client={client}\n          liveDocument={liveDocument}\n          liveEventsMessages={liveEvents.messages}\n        />\n      ))}\n    </>\n  )\n}\n\ninterface SharedProps {\n  /**\n   * The Sanity client to use for fetching data and listening to mutations.\n   */\n  client: SanityClient\n}\n\ninterface QuerySubscriptionProps\n  extends Pick<UseQuerySubscriptionProps, 'client' | 'liveDocument' | 'liveEventsMessages'> {\n  projectId: string\n  dataset: string\n  perspective: ClientPerspective\n  query: string\n  params: QueryParams\n  comlink: LoaderConnection | undefined\n}\nfunction QuerySubscriptionComponent(props: QuerySubscriptionProps) {\n  const {\n    projectId,\n    dataset,\n    perspective,\n    query,\n    client,\n    liveDocument,\n    params,\n    comlink,\n    liveEventsMessages,\n  } = props\n\n  const {\n    result,\n    resultSourceMap,\n    syncTags: tags,\n  } = useQuerySubscription({\n    client,\n    liveDocument,\n    params,\n    perspective,\n    query,\n    liveEventsMessages,\n  }) || {}\n\n  /* eslint-disable @typescript-eslint/no-shadow,max-params */\n  const handleQueryChange = useEffectEvent(\n    (\n      comlink: LoaderConnection | undefined,\n      perspective: ClientPerspective,\n      query: string,\n      params: QueryParams,\n      result: unknown,\n      resultSourceMap: ContentSourceMap | undefined,\n      tags: `s1:${string}`[] | undefined,\n    ) => {\n      comlink?.post('loader/query-change', {\n        projectId,\n        dataset,\n        perspective,\n        query,\n        params,\n        result,\n        resultSourceMap,\n        tags,\n      })\n    },\n  )\n  /* eslint-enable @typescript-eslint/no-shadow,max-params */\n\n  useEffect(() => {\n    if (resultSourceMap) {\n      handleQueryChange(comlink, perspective, query, params, result, resultSourceMap, tags)\n    }\n    return undefined\n  }, [comlink, params, perspective, query, result, resultSourceMap, tags])\n\n  return null\n}\nconst QuerySubscription = memo(QuerySubscriptionComponent)\nQuerySubscription.displayName = 'Memo(QuerySubscription)'\n\ninterface UseQuerySubscriptionProps extends Required<Pick<SharedProps, 'client'>> {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  query: string\n  params: QueryParams\n  perspective: ClientPerspective\n  liveEventsMessages: LiveEventMessage[]\n}\nfunction useQuerySubscription(props: UseQuerySubscriptionProps) {\n  const {liveDocument, client, query, params, perspective, liveEventsMessages} = props\n  const [result, setResult] = useState<unknown>(null)\n  const [resultSourceMap, setResultSourceMap] = useState<ContentSourceMap | null | undefined>(null)\n  const [syncTags, setSyncTags] = useState<SyncTag[] | undefined>(undefined)\n  const [skipEventIds] = useState(() => new Set(liveEventsMessages.map((msg) => msg.id)))\n  const recentLiveEvents = liveEventsMessages.filter((msg) => !skipEventIds.has(msg.id))\n  const lastLiveEvent = recentLiveEvents.findLast((msg) =>\n    msg.tags.some((tag) => syncTags?.includes(tag)),\n  )\n  const lastLiveEventId = lastLiveEvent?.id\n\n  // Make sure any async errors bubble up to the nearest error boundary\n  const [error, setError] = useState<unknown>(null)\n  if (error) throw error\n\n  /* eslint-disable max-nested-callbacks */\n  useEffect(() => {\n    const controller = new AbortController()\n\n    client\n      .fetch(query, params, {\n        lastLiveEventId,\n        tag: 'presentation-loader',\n        signal: controller.signal,\n        perspective,\n        filterResponse: false,\n        returnQuery: false,\n      })\n      .then((response) => {\n        startTransition(() => {\n          setResult((prev: unknown) => (isEqual(prev, response.result) ? prev : response.result))\n          setResultSourceMap((prev) =>\n            isEqual(prev, response.resultSourceMap) ? prev : response.resultSourceMap,\n          )\n          setSyncTags((prev) => (isEqual(prev, response.syncTags) ? prev : response.syncTags))\n        })\n      })\n      .catch((err) => {\n        if (typeof err !== 'object' || err?.name !== 'AbortError') {\n          setError(err)\n        }\n      })\n\n    return () => {\n      controller.abort()\n    }\n  }, [client, lastLiveEventId, params, perspective, query])\n  /* eslint-enable max-nested-callbacks */\n\n  return useMemo(() => {\n    if (liveDocument && resultSourceMap) {\n      return {\n        result: turboChargeResultIfSourceMap(liveDocument, result, perspective, resultSourceMap),\n        resultSourceMap,\n        syncTags,\n      }\n    }\n    return {result, resultSourceMap, syncTags}\n  }, [liveDocument, perspective, result, resultSourceMap, syncTags])\n}\n\nexport function turboChargeResultIfSourceMap<T = unknown>(\n  liveDocument: Partial<SanityDocument> | null | undefined,\n  result: T,\n  perspective: ClientPerspective,\n  resultSourceMap?: ContentSourceMap,\n): T {\n  if (perspective === 'raw') {\n    throw new Error('turboChargeResultIfSourceMap does not support raw perspective')\n  }\n  return applySourceDocuments(\n    result,\n    resultSourceMap,\n    (sourceDocument) => {\n      // If there's a displayed document, always prefer it\n      if (\n        // If _projectId is set, it's a cross dataset reference and we should skip it\n        !sourceDocument._projectId &&\n        liveDocument?._id &&\n        getPublishedId(liveDocument._id) === getPublishedId(sourceDocument._id)\n      ) {\n        if (typeof liveDocument._id === 'string' && typeof sourceDocument._type === 'string') {\n          return liveDocument as unknown as Required<Pick<SanityDocument, '_id' | '_type'>>\n        }\n        return {\n          ...liveDocument,\n          _id: liveDocument._id || sourceDocument._id,\n          _type: liveDocument._type || sourceDocument._type,\n        }\n      }\n      return null\n    },\n    mapChangedValue,\n    perspective,\n  )\n}\n"],"names":["reducer","state","event","type","messages","resets","Error","cause","initialState","useLiveEvents","client","$","_c","dispatch","useReducer","error","setError","useState","t0","t1","live","subscription","events","includeDrafts","tag","subscribe","next","err","unsubscribe","useEffect","useDeferredValue","mapChangedValue","changedValue","previousValue","Array","isArray","length","some","node","isPortableTextBlock","toPlainText","getQueryCacheKey","perspective","query","params","JSON","stringify","gc","queries","size","now","Date","from","heartbeats","values","entry","heartbeat","receivedAt","nextHeartbeats","Map","nextQueries","key","entries","set","get","queryListen","payload","data","has","isEqual","action","useLiveQueries","Symbol","for","interval","setInterval","LOADER_QUERY_GC_INTERVAL","clearInterval","t2","LiveQueries","props","controller","activePerspective","onLoadersConnection","onDocumentsOnPage","comlink","setComlink","liveQueries","liveQueriesDispatch","projectId","useProjectId","dataset","useDataset","nextComlink","createChannel","name","connectTo","createConnectionMachine","provide","actors","createCompatibilityActors","onStatus","on","documents","data_0","MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL","start","_temp","isReleasePerspective","RELEASES_STUDIO_CLIENT_OPTIONS","apiVersion","API_VERSION","studioClient","useClient","t3","withConfig","resultSourceMap","t4","t5","post","liveDocument","liveEvents","t6","t7","map","t8","t9","QuerySubscriptionComponent","liveEventsMessages","result","syncTags","tags","useQuerySubscription","comlink_0","perspective_0","query_0","params_0","result_0","resultSourceMap_0","tags_0","handleQueryChange","useEffectEvent","QuerySubscription","memo","displayName","setResult","setResultSourceMap","setSyncTags","undefined","Set","_temp2","skipEventIds","msg_0","msg","id","recentLiveEvents","filter","msg_1","includes","findLast","lastLiveEventId","AbortController","fetch","signal","filterResponse","returnQuery","then","response","startTransition","prev","prev_0","prev_1","catch","abort","bb0","turboChargeResultIfSourceMap","applySourceDocuments","sourceDocument","_projectId","_id","getPublishedId","_type"],"mappings":"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","debugId":null}}]
}