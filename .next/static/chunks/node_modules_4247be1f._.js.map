{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js","sourceRoot":"","sources":["../../../../src/internal/operators/skipWhile.ts"],"sourcesContent":[],"names":[],"mappings":";;;;AACA,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,wBAAwB,EAAE,MAAM,sBAAsB,CAAC;;;AAiD1D,SAAU,SAAS,CAAI,SAA+C;IAC1E,WAAO,8KAAO,EAAC,SAAC,MAAM,EAAE,UAAU;QAChC,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,MAAM,CAAC,SAAS,KACd,kNAAwB,EAAC,UAAU,EAAE,SAAC,KAAK;YAAK,OAAA,CAAC,MAAM,IAAI,CAAC,MAAM,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;QAA3E,CAA2E,CAAC,CAC7H,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC","debugId":null}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/sanity/lib/_chunks-es/PostMessagePreviewSnapshots.mjs","sources":["file:///Users/tamra/Desktop/Katyusha-ecommerce/ecommerce-build/node_modules/sanity/src/presentation/editor/PostMessagePreviewSnapshots.tsx"],"sourcesContent":["import {type ClientPerspective} from '@sanity/client'\nimport {type PreviewSnapshot} from '@sanity/presentation-comlink'\nimport {type FC, memo, useEffect, useMemo, useRef} from 'react'\nimport {\n  combineLatest,\n  debounceTime,\n  filter,\n  map,\n  merge,\n  NEVER,\n  share,\n  skipWhile,\n  Subject,\n  switchMap,\n  takeUntil,\n} from 'rxjs'\nimport {\n  getDraftId,\n  getPublishedId,\n  type PreviewValue,\n  useDocumentPreviewStore,\n  useSchema,\n} from 'sanity'\n\nimport {type VisualEditingConnection} from '../types'\n\ntype Ref = {\n  _id: string\n  _type: string\n}\n\nexport interface PostMessagePreviewsProps {\n  comlink: VisualEditingConnection\n  perspective: ClientPerspective\n  refs: Ref[]\n}\n\nconst PostMessagePreviews: FC<PostMessagePreviewsProps> = (props) => {\n  const {comlink, refs, perspective} = props\n  const documentPreviewStore = useDocumentPreviewStore()\n  const schema = useSchema()\n\n  const refsSubject = useMemo(() => new Subject<Ref[]>(), [])\n\n  const previews$ = useMemo(() => {\n    return refsSubject.asObservable().pipe(\n      switchMap(\n        (\n          // eslint-disable-next-line @typescript-eslint/no-shadow\n          refs,\n        ) => {\n          return combineLatest(\n            refs.map((ref) => {\n              const draftRef = {...ref, _id: getDraftId(ref._id)}\n              const draft$ =\n                perspective === 'published'\n                  ? // Don't emit if not displaying drafts\n                    NEVER\n                  : documentPreviewStore\n                      .observeForPreview(draftRef, schema.get(draftRef._type)!)\n                      .pipe(\n                        // Share to prevent double subscribe in the merge\n                        share(),\n                        // Don't emit if no snapshot is returned\n                        // eslint-disable-next-line max-nested-callbacks\n                        skipWhile((p) => p.snapshot === null),\n                      )\n\n              const publishedRef = {...ref, _id: getPublishedId(ref._id)}\n              const published$ = documentPreviewStore.observeForPreview(\n                publishedRef,\n                schema.get(publishedRef._type)!,\n              )\n\n              return merge(published$.pipe(takeUntil(draft$)), draft$).pipe(\n                // eslint-disable-next-line max-nested-callbacks\n                filter((p) => !!p.snapshot),\n                // eslint-disable-next-line max-nested-callbacks\n                map((p) => {\n                  const snapshot = p.snapshot as PreviewValue & {\n                    _id: string\n                  }\n                  return {\n                    _id: getPublishedId(snapshot._id),\n                    title: snapshot.title,\n                    subtitle: snapshot.subtitle,\n                    description: snapshot.description,\n                    imageUrl: snapshot.imageUrl,\n                  } as PreviewSnapshot\n                }),\n              )\n            }),\n          )\n        },\n      ),\n      debounceTime(0),\n    )\n  }, [documentPreviewStore, refsSubject, schema, perspective])\n\n  const lastSnapshots = useRef<PreviewSnapshot[]>([])\n\n  // Stream preview snapshots when updates are received, and store the last set\n  // of snapshots so they can be returned if explicitly requested\n  useEffect(() => {\n    const sub = previews$.subscribe((snapshots) => {\n      comlink.post('presentation/preview-snapshots', {snapshots})\n      lastSnapshots.current = snapshots\n    })\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [comlink, previews$])\n\n  // Respond to explict requests for preview snapshots. Streaming will not\n  // always suffice as the previews$ subscriber will not be called if the app\n  // reloads but Presentation does not.\n  useEffect(() => {\n    return comlink.on('visual-editing/preview-snapshots', () => ({\n      snapshots: lastSnapshots.current,\n    }))\n  }, [comlink])\n\n  useEffect(() => {\n    refsSubject.next(refs)\n  }, [refs, refsSubject])\n\n  return null\n}\n\nexport default memo(PostMessagePreviews)\n"],"names":["PostMessagePreviews","props","comlink","refs","perspective","documentPreviewStore","useDocumentPreviewStore","schema","useSchema","refsSubject","useMemo","Subject","previews$","asObservable","pipe","switchMap","combineLatest","map","ref","draftRef","_id","getDraftId","draft$","NEVER","observeForPreview","get","_type","share","skipWhile","p","snapshot","publishedRef","getPublishedId","published$","merge","takeUntil","filter","title","subtitle","description","imageUrl","debounceTime","lastSnapshots","useRef","useEffect","sub","subscribe","snapshots","post","current","unsubscribe","on","next","memo"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqCA,MAAMA,sBAAqDC,CAAAA,UAAU;IACnE,MAAM,EAACC,OAAAA,EAASC,IAAAA,EAAMC,WAAAA,EAAAA,GAAeH,OAC/BI,2BAAuBC,qLAAAA,CAAAA,IACvBC,aAASC,uKAAAA,KAETC,kBAAcC,wKAAAA;oDAAQ,IAAM,IAAIC,yKAAAA;mDAAkB,CAAA,CAAE,GAEpDC,gBAAYF,wKAAAA;kDAAQ,IACjBD,YAAYI,YAAAA,CAAAA,EAAeC,IAAAA,KAChCC,0LAAAA;0DACE,CAEEZ,aAEOa,mMAAAA,EACLb,OAAKc,GAAAA;kEAAKC,CAAAA,QAAQ;4BAChB,MAAMC,WAAW;gCAAC,GAAGD,GAAAA;gCAAKE,SAAKC,+LAAAA,EAAWH,IAAIE,GAAG;4BAAA,GAC3CE,SACJlB,gBAAgB,cAAA,sCAAA;4BAEZmB,mLAAAA,GACAlB,qBACGmB,iBAAAA,CAAkBL,UAAUZ,OAAOkB,GAAAA,CAAIN,SAASO,KAAK,CAAE,EACvDZ,IAAAA,CAAAA,iDAAAA;gCAECa,kLAAAA,CAAAA,IAAAA,wCAAAA;4BAAAA,gDAAAA;gCAGAC,0LAAAA;0EAAWC,CAAAA,IAAMA,EAAEC,QAAAA,KAAa,IAAI;2EAGxCC,eAAe;gCAAC,GAAGb,GAAAA;gCAAKE,SAAKY,mMAAAA,EAAed,IAAIE,GAAG;4BAAA,GACnDa,aAAa5B,qBAAqBmB,iBAAAA,CACtCO,cACAxB,OAAOkB,GAAAA,CAAIM,aAAaL,KAAK,CAC/B;4BAEA,WAAOQ,mLAAAA,EAAMD,WAAWnB,IAAAA,KAAKqB,0LAAAA,EAAUb,MAAM,CAAC,GAAGA,MAAM,EAAER,IAAAA,CAAAA,gDAAAA;gCAEvDsB,oLAAAA;0EAAQP,CAAAA,MAAM,CAAC,CAACA,IAAEC,QAAQ;0EAAA,gDAAA;gCAE1Bb,8KAAAA;0EAAKY,CAAAA,QAAM;oCACT,MAAMC,WAAWD,IAAEC,QAAAA;oCAGnB,OAAO;wCACLV,SAAKY,mMAAAA,EAAeF,SAASV,GAAG;wCAChCiB,OAAOP,SAASO,KAAAA;wCAChBC,UAAUR,SAASQ,QAAAA;wCACnBC,aAAaT,SAASS,WAAAA;wCACtBC,UAAUV,SAASU,QAAAA;oCAAAA;gCAEvB,CAAC;;wBAEL,CAAC,CACH,CAEJ;;8DACAC,gMAAAA,EAAa,CAAC,CAChB;iDACC;QAACpC;QAAsBI;QAAaF;QAAQH,WAAW;KAAC,GAErDsC,oBAAgBC,uKAAAA,EAA0B,CAAA,CAAE;IAIlDC,WAAAA,0KAAAA;yCAAU,MAAM;YACd,MAAMC,MAAMjC,UAAUkC,SAAAA;qDAAWC,CAAAA,cAAc;oBAC7C7C,QAAQ8C,IAAAA,CAAK,kCAAkC;wBAACD;oBAAAA,CAAU,GAC1DL,cAAcO,OAAAA,GAAUF;gBAC1B,CAAC;;YAED;iDAAO,MAAM;oBACXF,IAAIK,WAAAA,CAAAA;gBACN;;QACF;wCAAG;QAAChD;QAASU,SAAS;KAAC,OAKvBgC,0KAAAA;yCAAU,IACD1C,QAAQiD,EAAAA,CAAG;iDAAoC,IAAA,CAAO;wBAC3DJ,WAAWL,cAAcO,OAAAA;oBAAAA,CAAAA,CACzB;;wCACD;QAAC/C,OAAO;KAAC,OAEZ0C,0KAAAA;yCAAU,MAAM;YACdnC,YAAY2C,IAAAA,CAAKjD,IAAI;QACvB;wCAAG;QAACA;QAAMM,WAAW;KAAC,GAEf;AACT;AAEA,IAAA,kCAAe4C,qKAAAA,EAAKrD,mBAAmB","debugId":null}}]
}