{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/_chunks-es/use-editor.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/global-scope.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/globally-scoped-context.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/editor-context.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/use-editor.ts"],"sourcesContent":["/**\n * Gets the global scope instance in a given environment.\n *\n * The strategy is to return the most modern, and if not, the most common:\n * - The `globalThis` variable is the modern approach to accessing the global scope\n * - The `window` variable is the global scope in a web browser\n * - The `self` variable is the global scope in workers and others\n * - The `global` variable is the global scope in Node.js\n */\nfunction getGlobalScope() {\n  if (typeof globalThis !== 'undefined') return globalThis\n  if (typeof window !== 'undefined') return window\n  if (typeof self !== 'undefined') return self\n  if (typeof global !== 'undefined') return global\n\n  throw new Error('@portabletext/editor: could not locate global scope')\n}\n\nexport const globalScope = getGlobalScope() as any\n","import {createContext, type Context} from 'react'\nimport {globalScope} from './global-scope'\n\n/**\n * As `@portabletext/editor` is declared as a dependency, and may be\n * duplicated, sometimes across major versions it's critical that vital\n * React Contexts are shared even when there is a duplicate.\n *\n * We have to support a Sanity Plugin being able to call hooks like\n * `useEditor`, and then read the context setup by `sanity`, which calls\n * `EditorProvider`, even if the provider and hook are different instances in\n * memory.\n *\n * For this reason it's vital that all changes to globally scoped providers\n * remain fully backwards compatible.\n */\nexport function createGloballyScopedContext<\n  ContextType,\n  const T extends ContextType = ContextType,\n>(\n  /**\n   * Enforce that all Symbol.for keys used for globally scoped contexts have a predictable prefix\n   */\n  key: `@portabletext/editor/context/${string}`,\n  defaultValue: T,\n): Context<ContextType> {\n  const symbol = Symbol.for(key)\n\n  /**\n   * Prevent errors about re-renders on React SSR on Next.js App Router\n   */\n  if (typeof document === 'undefined') {\n    return createContext<ContextType>(defaultValue)\n  }\n\n  globalScope[symbol] = globalScope[symbol] ?? createContext<T>(defaultValue)\n\n  return globalScope[symbol]\n}\n","import type {Editor} from '../editor'\nimport {createGloballyScopedContext} from '../internal-utils/globally-scoped-context'\n\nexport const EditorContext = createGloballyScopedContext<Editor | null>(\n  '@portabletext/editor/context/editor',\n  null,\n)\n","import React from 'react'\nimport {EditorContext} from './editor-context'\n\n/**\n * @public\n * Get the current editor context from the `EditorProvider`.\n * Must be used inside the `EditorProvider` component.\n * @returns The current editor object.\n * @example\n * ```tsx\n * import { useEditor } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  const editor = useEditor()\n * }\n * ```\n * @group Hooks\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n"],"names":["getGlobalScope","globalThis","window","self","global","Error","globalScope","createGloballyScopedContext","key","defaultValue","symbol","Symbol","for","document","createContext","EditorContext","useEditor","editor","React","useContext"],"mappings":";;;;;;;;AASA,SAASA,iBAAiB;IACxB,IAAI,OAAOC,aAAe,IAAa,CAAA,OAAOA;IAC9C,IAAI,OAAOC,SAAW,IAAa,CAAA,OAAOA;IAC1C,IAAI,OAAOC,OAAS,IAAa,CAAA,OAAOA;IACxC,IAAI,OAAOC,sCAAW,IAAa,CAAA,OAAOA;IAE1C,MAAM,IAAIC,MAAM,qDAAqD;AACvE;AAEO,MAAMC,cAAcN,eAAAA;ACFpB,SAASO,4BAOdC,GAAAA,EACAC,YAAAA,EACsB;IACtB,MAAMC,SAASC,OAAOC,GAAAA,CAAIJ,GAAG;QASPF;IAJtB,OAAI,OAAOO,WAAa,UACfC,8KAAAA,EAA2BL,YAAY,IAAA,CAGhDH,WAAAA,CAAYI,MAAM,CAAA,qCAAIJ,CAAYI,MAAM,CAAA,yEAAKI,8KAAAA,EAAiBL,YAAY,GAEnEH,WAAAA,CAAYI,MAAM,CAAA;AAC3B;ACnCO,MAAMK,gBAAgBR,4BAC3B,uCACA,IACF;ACYO,SAAAS,YAAA;IACL,MAAAC,SAAeC,wKAAAA,CAAAC,UAAAA,CAAAJ,aAA8B;IAAC,IAAA,CAEzCE,QAAM,MAAA,IAAAZ,MACO,+CAA+C;IAAA,OAG1DY;AAAM","debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.is-keyed-segment.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selection/selection-point.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.block-offset.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.get-block-start-point.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.get-selection-end-point.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.get-selection-start-point.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.get-text-block-text.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/asserters.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/parse-blocks.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/key-generator.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.slice-blocks.ts"],"sourcesContent":["import type {KeyedSegment} from '@sanity/types'\n\n/**\n * @public\n */\nexport function isKeyedSegment(segment: unknown): segment is KeyedSegment {\n  return typeof segment === 'object' && segment !== null && '_key' in segment\n}\n","import type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from '../utils/util.is-keyed-segment'\n\nexport function getBlockKeyFromSelectionPoint(point: EditorSelectionPoint) {\n  const blockPathSegment = point.path.at(0)\n\n  if (isKeyedSegment(blockPathSegment)) {\n    return blockPathSegment._key\n  }\n\n  return undefined\n}\n\nexport function getChildKeyFromSelectionPoint(point: EditorSelectionPoint) {\n  const childPathSegment = point.path.at(2)\n\n  if (isKeyedSegment(childPathSegment)) {\n    return childPathSegment._key\n  }\n\n  return undefined\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport type {ChildPath} from '../types/paths'\n\n/**\n * @public\n */\nexport function blockOffsetToSpanSelectionPoint({\n  context,\n  blockOffset,\n  direction,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}) {\n  let offsetLeft = blockOffset.offset\n  let selectionPoint: {path: ChildPath; offset: number} | undefined\n  let skippedInlineObject = false\n\n  for (const block of context.value) {\n    if (block._key !== blockOffset.path[0]._key) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (direction === 'forward') {\n        if (!isSpan(context, child)) {\n          continue\n        }\n\n        if (offsetLeft <= child.text.length) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: offsetLeft,\n          }\n          break\n        }\n\n        offsetLeft -= child.text.length\n\n        continue\n      }\n\n      if (!isSpan(context, child)) {\n        skippedInlineObject = true\n        continue\n      }\n\n      if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {\n        if (skippedInlineObject) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: 0,\n          }\n        }\n        break\n      }\n\n      if (offsetLeft > child.text.length) {\n        offsetLeft -= child.text.length\n        continue\n      }\n\n      if (offsetLeft <= child.text.length) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: offsetLeft,\n        }\n\n        offsetLeft -= child.text.length\n\n        if (offsetLeft !== 0) {\n          break\n        }\n      }\n    }\n  }\n\n  return selectionPoint\n}\n\n/**\n * @public\n */\nexport function spanSelectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n  const spanKey = getChildKeyFromSelectionPoint(selectionPoint)\n\n  if (!blockKey || !spanKey) {\n    return undefined\n  }\n\n  for (const block of context.value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isSpan(context, child)) {\n        continue\n      }\n\n      if (child._key === spanKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      offset += child.text.length\n    }\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport function getBlockStartPoint({\n  context,\n  block,\n}: {\n  context: Pick<EditorContext, 'schema'>\n  block: {\n    node: PortableTextBlock\n    path: BlockPath\n  }\n}): EditorSelectionPoint {\n  if (isTextBlock(context, block.node)) {\n    return {\n      path: [...block.path, 'children', {_key: block.node.children[0]._key}],\n      offset: 0,\n    }\n  }\n\n  return {\n    path: block.path,\n    offset: 0,\n  }\n}\n","import type {EditorSelection, EditorSelectionPoint} from '..'\n\n/**\n * @public\n */\nexport function getSelectionEndPoint<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n  TEditorSelectionPoint extends\n    EditorSelectionPoint | null = TEditorSelection extends NonNullable<EditorSelection>\n    ? EditorSelectionPoint\n    : null,\n>(selection: TEditorSelection): TEditorSelectionPoint {\n  if (!selection) {\n    return null as TEditorSelectionPoint\n  }\n\n  return (\n    selection.backward ? selection.anchor : selection.focus\n  ) as TEditorSelectionPoint\n}\n","import type {EditorSelection, EditorSelectionPoint} from '..'\n\n/**\n * @public\n */\nexport function getSelectionStartPoint<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n  TEditorSelectionPoint extends\n    EditorSelectionPoint | null = TEditorSelection extends NonNullable<EditorSelection>\n    ? EditorSelectionPoint\n    : null,\n>(selection: TEditorSelection): TEditorSelectionPoint {\n  if (!selection) {\n    return null as TEditorSelectionPoint\n  }\n\n  return (\n    selection.backward ? selection.focus : selection.anchor\n  ) as TEditorSelectionPoint\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\n\n/**\n * @public\n */\nexport function getTextBlockText(block: PortableTextTextBlock) {\n  return block.children.map((child) => child.text ?? '').join('')\n}\n","import type {TypedObject} from '@sanity/types'\n\nexport function isTypedObject(object: unknown): object is TypedObject {\n  return isRecord(object) && typeof object._type === 'string'\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value === 'object' || typeof value === 'function')\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {\n  PortableTextBlock,\n  PortableTextListBlock,\n  PortableTextObject,\n  PortableTextSpan,\n  PortableTextTextBlock,\n  TypedObject,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isTypedObject} from './asserters'\n\nexport function parseBlocks({\n  context,\n  blocks,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  blocks: unknown\n  options: {\n    validateFields: boolean\n  }\n}): Array<PortableTextBlock> {\n  if (!Array.isArray(blocks)) {\n    return []\n  }\n\n  return blocks.flatMap((block) => {\n    const parsedBlock = parseBlock({context, block, options})\n\n    return parsedBlock ? [parsedBlock] : []\n  })\n}\n\nexport function parseBlock({\n  context,\n  block,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  block: unknown\n  options: {\n    validateFields: boolean\n  }\n}): PortableTextBlock | undefined {\n  return (\n    parseTextBlock({block, context, options}) ??\n    parseBlockObject({blockObject: block, context, options})\n  )\n}\n\nexport function parseBlockObject({\n  blockObject,\n  context,\n  options,\n}: {\n  blockObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(blockObject)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.blockObjects.find(\n    ({name}) => name === blockObject._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: blockObject,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nexport function isListBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: unknown,\n): block is PortableTextListBlock {\n  return (\n    isTextBlock(context, block) &&\n    block.level !== undefined &&\n    block.listItem !== undefined\n  )\n}\n\nexport function parseTextBlock({\n  block,\n  context,\n  options,\n}: {\n  block: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {validateFields: boolean}\n}): PortableTextTextBlock | undefined {\n  if (!isTypedObject(block)) {\n    return undefined\n  }\n\n  const customFields: Record<string, unknown> = {}\n\n  for (const key of Object.keys(block)) {\n    if (\n      key === '_type' ||\n      key === '_key' ||\n      key === 'children' ||\n      key === 'markDefs' ||\n      key === 'style' ||\n      key === 'listItem' ||\n      key === 'level'\n    ) {\n      continue\n    }\n\n    if (options.validateFields) {\n      if (context.schema.block.fields?.some((field) => field.name === key)) {\n        customFields[key] = block[key]\n      }\n    } else {\n      customFields[key] = block[key]\n    }\n  }\n\n  if (block._type !== context.schema.block.name) {\n    return undefined\n  }\n\n  const _key =\n    typeof block._key === 'string' ? block._key : context.keyGenerator()\n\n  const unparsedMarkDefs: Array<unknown> = Array.isArray(block.markDefs)\n    ? block.markDefs\n    : []\n  const markDefKeyMap = new Map<string, string>()\n  const markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef)) {\n      return []\n    }\n\n    const schemaType = context.schema.annotations.find(\n      ({name}) => name === markDef._type,\n    )\n\n    if (!schemaType) {\n      return []\n    }\n\n    if (typeof markDef._key !== 'string') {\n      // If the `markDef` doesn't have a `_key` then we don't know what spans\n      // it belongs to and therefore we have to discard it.\n      return []\n    }\n\n    const parsedAnnotation = parseObject({\n      object: markDef,\n      context: {\n        schemaType,\n        keyGenerator: context.keyGenerator,\n      },\n      options,\n    })\n\n    if (!parsedAnnotation) {\n      return []\n    }\n\n    markDefKeyMap.set(markDef._key, parsedAnnotation._key)\n\n    return [parsedAnnotation]\n  })\n\n  const unparsedChildren: Array<unknown> = Array.isArray(block.children)\n    ? block.children\n    : []\n\n  const children = unparsedChildren\n    .map(\n      (child) =>\n        parseSpan({span: child, context, markDefKeyMap, options}) ??\n        parseInlineObject({inlineObject: child, context, options}),\n    )\n    .filter((child) => child !== undefined)\n  const marks = children.flatMap((child) => child.marks ?? [])\n\n  const parsedBlock: PortableTextTextBlock = {\n    _type: context.schema.block.name,\n    _key,\n    children:\n      children.length > 0\n        ? children\n        : [\n            {\n              _key: context.keyGenerator(),\n              _type: context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n    markDefs: markDefs.filter((markDef) => marks.includes(markDef._key)),\n    ...customFields,\n  }\n\n  if (\n    typeof block.style === 'string' &&\n    context.schema.styles.find((style) => style.name === block.style)\n  ) {\n    parsedBlock.style = block.style\n  } else {\n    const defaultStyle = context.schema.styles.at(0)?.name\n\n    if (defaultStyle !== undefined) {\n      parsedBlock.style = defaultStyle\n    } else {\n      console.error('Expected default style')\n    }\n  }\n\n  if (\n    typeof block.listItem === 'string' &&\n    context.schema.lists.find((list) => list.name === block.listItem)\n  ) {\n    parsedBlock.listItem = block.listItem\n  }\n\n  if (typeof block.level === 'number') {\n    parsedBlock.level = block.level\n  }\n\n  return parsedBlock\n}\n\nexport function parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options,\n}: {\n  span: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  markDefKeyMap: Map<string, string>\n  options: {validateFields: boolean}\n}): PortableTextSpan | undefined {\n  if (!isTypedObject(span)) {\n    return undefined\n  }\n\n  const customFields: Record<string, unknown> = {}\n\n  for (const key of Object.keys(span)) {\n    if (\n      key !== '_type' &&\n      key !== '_key' &&\n      key !== 'text' &&\n      key !== 'marks'\n    ) {\n      customFields[key] = span[key]\n    }\n  }\n\n  // In reality, the span schema name is always 'span', but we only the check here anyway\n  if (span._type !== context.schema.span.name || span._type !== 'span') {\n    return undefined\n  }\n\n  const unparsedMarks: Array<unknown> = Array.isArray(span.marks)\n    ? span.marks\n    : []\n  const marks = unparsedMarks.flatMap((mark) => {\n    if (typeof mark !== 'string') {\n      return []\n    }\n\n    const markDefKey = markDefKeyMap.get(mark)\n\n    if (markDefKey !== undefined) {\n      return [markDefKey]\n    }\n\n    if (\n      context.schema.decorators.some((decorator) => decorator.name === mark)\n    ) {\n      return [mark]\n    }\n\n    return []\n  })\n\n  return {\n    _type: 'span',\n    _key: typeof span._key === 'string' ? span._key : context.keyGenerator(),\n    text: typeof span.text === 'string' ? span.text : '',\n    marks,\n    ...(options.validateFields ? {} : customFields),\n  }\n}\n\nexport function parseInlineObject({\n  inlineObject,\n  context,\n  options,\n}: {\n  inlineObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(inlineObject)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.inlineObjects.find(\n    ({name}) => name === inlineObject._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: inlineObject,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nexport function parseAnnotation({\n  annotation,\n  context,\n  options,\n}: {\n  annotation: TypedObject\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {validateFields: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(annotation)) {\n    return undefined\n  }\n\n  const schemaType = context.schema.annotations.find(\n    ({name}) => name === annotation._type,\n  )\n\n  if (!schemaType) {\n    return undefined\n  }\n\n  return parseObject({\n    object: annotation,\n    context: {\n      keyGenerator: context.keyGenerator,\n      schemaType,\n    },\n    options,\n  })\n}\n\nfunction parseObject({\n  object,\n  context,\n  options,\n}: {\n  object: TypedObject\n  context: Pick<EditorContext, 'keyGenerator'> & {\n    schemaType: EditorSchema['blockObjects'][0]\n  }\n  options: {validateFields: boolean}\n}): PortableTextObject {\n  const {_type, _key, ...customFields} = object\n\n  // Validates all props on the object and only takes those that match\n  // the name of a field\n  const values = options.validateFields\n    ? context.schemaType.fields.reduce<Record<string, unknown>>(\n        (fieldValues, field) => {\n          const fieldValue = object[field.name]\n\n          if (fieldValue !== undefined) {\n            fieldValues[field.name] = fieldValue\n          }\n\n          return fieldValues\n        },\n        {},\n      )\n    : customFields\n\n  return {\n    _type: context.schemaType.name,\n    _key:\n      typeof object._key === 'string' ? object._key : context.keyGenerator(),\n    ...values,\n  }\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {defaultKeyGenerator} from '../editor/key-generator'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\n\n/**\n * @public\n */\nexport function sliceBlocks({\n  context,\n  blocks,\n}: {\n  context: Pick<EditorContext, 'schema' | 'selection'>\n  blocks: Array<PortableTextBlock>\n}): Array<PortableTextBlock> {\n  const slice: Array<PortableTextBlock> = []\n\n  if (!context.selection) {\n    return slice\n  }\n\n  let startBlock: PortableTextBlock | undefined\n  const middleBlocks: PortableTextBlock[] = []\n  let endBlock: PortableTextBlock | undefined\n\n  const startPoint = getSelectionStartPoint(context.selection)\n  const endPoint = getSelectionEndPoint(context.selection)\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return slice\n  }\n\n  for (const block of blocks) {\n    if (!isTextBlock(context, block)) {\n      if (block._key === startBlockKey && block._key === endBlockKey) {\n        startBlock = block\n        break\n      }\n    }\n\n    if (block._key === startBlockKey) {\n      if (!isTextBlock(context, block)) {\n        startBlock = block\n        continue\n      }\n\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if (isSpan(context, child)) {\n              const text =\n                child._key === endChildKey\n                  ? child.text.slice(startPoint.offset, endPoint.offset)\n                  : child.text.slice(startPoint.offset)\n\n              startBlock = {\n                ...block,\n                children: [\n                  {\n                    ...child,\n                    text,\n                  },\n                ],\n              }\n            } else {\n              startBlock = {\n                ...block,\n                children: [child],\n              }\n            }\n\n            if (startChildKey === endChildKey) {\n              break\n            }\n            continue\n          }\n\n          if (startBlock && isTextBlock(context, startBlock)) {\n            if (\n              endChildKey &&\n              child._key === endChildKey &&\n              isSpan(context, child)\n            ) {\n              startBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n            } else {\n              startBlock.children.push(child)\n            }\n\n            if (\n              block._key === endBlockKey &&\n              endChildKey &&\n              child._key === endChildKey\n            ) {\n              break\n            }\n          }\n        }\n\n        if (startBlockKey === endBlockKey) {\n          break\n        }\n\n        continue\n      }\n\n      startBlock = block\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n    }\n\n    if (block._key === endBlockKey) {\n      if (!isTextBlock(context, block)) {\n        endBlock = block\n        break\n      }\n\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: [],\n        }\n\n        for (const child of block.children) {\n          if (endBlock && isTextBlock(context, endBlock)) {\n            if (child._key === endChildKey && isSpan(context, child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n\n              break\n            }\n\n            endBlock.children.push(child)\n\n            if (endChildKey && child._key === endChildKey) {\n              break\n            }\n          }\n        }\n\n        break\n      }\n\n      endBlock = block\n\n      break\n    }\n\n    if (startBlock) {\n      middleBlocks.push(\n        parseBlock({\n          context: {\n            ...context,\n            keyGenerator: defaultKeyGenerator,\n          },\n          block,\n          options: {validateFields: false},\n        }) ?? block,\n      )\n    }\n  }\n\n  const parsedStartBlock = startBlock\n    ? parseBlock({\n        context: {\n          ...context,\n          keyGenerator: defaultKeyGenerator,\n        },\n        block: startBlock,\n        options: {validateFields: false},\n      })\n    : undefined\n\n  const parsedEndBlock = endBlock\n    ? parseBlock({\n        context: {\n          ...context,\n          keyGenerator: defaultKeyGenerator,\n        },\n        block: endBlock,\n        options: {validateFields: false},\n      })\n    : undefined\n\n  return [\n    ...(parsedStartBlock ? [parsedStartBlock] : []),\n    ...middleBlocks,\n    ...(parsedEndBlock ? [parsedEndBlock] : []),\n  ]\n}\n"],"names":["isKeyedSegment","segment","getBlockKeyFromSelectionPoint","point","blockPathSegment","path","at","_key","getChildKeyFromSelectionPoint","childPathSegment","blockOffsetToSpanSelectionPoint","context","blockOffset","direction","offsetLeft","offset","selectionPoint","skippedInlineObject","block","value","isTextBlock","child","children","isSpan","text","length","spanSelectionPointToBlockOffset","blockKey","spanKey","getBlockStartPoint","node","getSelectionEndPoint","selection","backward","anchor","focus","getSelectionStartPoint","getTextBlockText","map","join","isTypedObject","object","isRecord","_type","parseBlocks","blocks","options","Array","isArray","flatMap","parsedBlock","parseBlock","parseTextBlock","parseBlockObject","blockObject","schemaType","schema","blockObjects","find","name","parseObject","keyGenerator","isListBlock","level","undefined","listItem","customFields","key","Object","keys","validateFields","fields","some","field","unparsedMarkDefs","markDefs","markDefKeyMap","Map","markDef","annotations","parsedAnnotation","set","parseSpan","span","parseInlineObject","inlineObject","filter","marks","includes","style","styles","defaultStyle","console","error","lists","list","mark","markDefKey","get","decorators","decorator","inlineObjects","parseAnnotation","annotation","values","reduce","fieldValues","fieldValue","defaultKeyGenerator","randomKey","getByteHexTable","table","i","toString","slice","whatwgRNG","rnds8","Uint8Array","getRandomValues","str","n","sliceBlocks","startBlock","middleBlocks","endBlock","startPoint","endPoint","startBlockKey","startChildKey","endBlockKey","endChildKey","push","parsedStartBlock","parsedEndBlock"],"mappings":"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","debugId":null}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.get-block-end-point.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.is-empty-text-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.is-equal-selection-points.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.is-selection-collapsed.ts"],"sourcesContent":["import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport function getBlockEndPoint({\n  context,\n  block,\n}: {\n  context: Pick<EditorContext, 'schema'>\n  block: {\n    node: PortableTextBlock\n    path: BlockPath\n  }\n}): EditorSelectionPoint {\n  if (isTextBlock(context, block.node)) {\n    const lastChild = block.node.children[block.node.children.length - 1]\n\n    if (lastChild) {\n      return {\n        path: [...block.path, 'children', {_key: lastChild._key}],\n        offset: isSpan(context, lastChild) ? lastChild.text.length : 0,\n      }\n    }\n  }\n\n  return {\n    path: block.path,\n    offset: 0,\n  }\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {getTextBlockText} from './util.get-text-block-text'\n\n/**\n * @public\n */\nexport function isEmptyTextBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: PortableTextBlock,\n) {\n  if (!isTextBlock(context, block)) {\n    return false\n  }\n\n  const onlyText = block.children.every((child) => isSpan(context, child))\n  const blockText = getTextBlockText(block)\n\n  return onlyText && blockText === ''\n}\n","import type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function isEqualSelectionPoints(\n  a: EditorSelectionPoint,\n  b: EditorSelectionPoint,\n) {\n  return (\n    a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path)\n  )\n}\n","import type {EditorSelection} from '../types/editor'\n\n/**\n * @public\n */\nexport function isSelectionCollapsed(selection: EditorSelection) {\n  if (!selection) {\n    return false\n  }\n\n  return (\n    JSON.stringify(selection.anchor.path) ===\n      JSON.stringify(selection.focus.path) &&\n    selection.anchor.offset === selection.focus.offset\n  )\n}\n"],"names":["getBlockEndPoint","context","block","isTextBlock","node","lastChild","children","length","path","_key","offset","isSpan","text","isEmptyTextBlock","onlyText","every","child","blockText","getTextBlockText","isEqualSelectionPoints","a","b","JSON","stringify","isSelectionCollapsed","selection","anchor","focus"],"mappings":";;;;;;;;;;;;;;AASO,SAASA,sBAShB;UAREC,OAAAA,EACAC,KAAAA,EAOF,EAAyB,CATQ;IAU/B,QAAIC,2KAAAA,EAAYF,SAASC,MAAME,IAAI,GAAG;QACpC,MAAMC,YAAYH,MAAME,IAAAA,CAAKE,QAAAA,CAASJ,MAAME,IAAAA,CAAKE,QAAAA,CAASC,MAAAA,GAAS,CAAC,CAAA;QAEpE,IAAIF,WACF,OAAO;YACLG,MAAM,CAAC;mBAAGN,MAAMM,IAAAA;gBAAM;gBAAY;oBAACC,MAAMJ,UAAUI,IAAAA;gBAAAA,CAAK;aAAA;YACxDC,YAAQC,sKAAAA,EAAOV,SAASI,SAAS,IAAIA,UAAUO,IAAAA,CAAKL,MAAAA,GAAS;QAAA;IAGnE;IAEA,OAAO;QACLC,MAAMN,MAAMM,IAAAA;QACZE,QAAQ;IAAA;AAEZ;AC1BO,SAASG,iBACdZ,OAAAA,EACAC,KAAAA,EACA;IACA,IAAI,KAACC,2KAAAA,EAAYF,SAASC,KAAK,GAC7B,OAAO,CAAA;IAGT,MAAMY,WAAWZ,MAAMI,QAAAA,CAASS,KAAAA,CAAOC,CAAAA,YAAUL,sKAAAA,EAAOV,SAASe,KAAK,CAAC,GACjEC,gBAAYC,kNAAAA,EAAiBhB,KAAK;IAExC,OAAOY,YAAYG,cAAc;AACnC;ACfO,SAASE,uBACdC,CAAAA,EACAC,CAAAA,EACA;IACA,OACED,EAAEV,MAAAA,KAAWW,EAAEX,MAAAA,IAAUY,KAAKC,SAAAA,CAAUH,EAAEZ,IAAI,MAAMc,KAAKC,SAAAA,CAAUF,EAAEb,IAAI;AAE7E;ACPO,SAASgB,qBAAqBC,SAAAA,EAA4B;IAC/D,OAAKA,YAKHH,KAAKC,SAAAA,CAAUE,UAAUC,MAAAA,CAAOlB,IAAI,MAClCc,KAAKC,SAAAA,CAAUE,UAAUE,KAAAA,CAAMnB,IAAI,KACrCiB,UAAUC,MAAAA,CAAOhB,MAAAA,KAAWe,UAAUE,KAAAA,CAAMjB,MAAAA,GANrC,CAAA;AAQX","debugId":null}},
    {"offset": {"line": 564, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selection-expanded.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-text-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-child.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-span.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-start-point.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-inline-object.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-value.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-text.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-collapsed.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-expanded.ts"],"sourcesContent":["import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getFocusBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const key = getBlockKeyFromSelectionPoint(snapshot.context.selection.focus)\n  const index = key ? snapshot.blockIndexMap.get(key) : undefined\n\n  const node =\n    index !== undefined ? snapshot.context.value.at(index) : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getFocusTextBlock: EditorSelector<\n  {node: PortableTextTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && isTextBlock(snapshot.context, focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n","import type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getChildKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\n\n/**\n * @public\n */\nexport const getFocusChild: EditorSelector<\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: ChildPath\n    }\n  | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const focusBlock = getFocusTextBlock(snapshot)\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = getChildKeyFromSelectionPoint(snapshot.context.selection.focus)\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n","import {isSpan} from '@portabletext/schema'\nimport type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusChild} from './selector.get-focus-child'\n\n/**\n * @public\n */\nexport const getFocusSpan: EditorSelector<\n  {node: PortableTextSpan; path: ChildPath} | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && isSpan(snapshot.context, focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionStartPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n}\n","import {isKeySegment, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {isSpan} from '../utils'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getPreviousInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: ChildPath\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartPointChildKey =\n    selectionStartPoint && isKeySegment(selectionStartPoint.path[2])\n      ? selectionStartPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionStartPointChildKey) {\n    return undefined\n  }\n\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: ChildPath\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionStartPointChildKey) {\n      break\n    }\n\n    if (!isSpan(snapshot.context, child)) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n    }\n  }\n\n  return inlineObject\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport {\n  getSelectionEndPoint,\n  getSelectionStartPoint,\n  sliceBlocks,\n} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedValue: EditorSelector<Array<PortableTextBlock>> = (\n  snapshot,\n) => {\n  const selection = snapshot.context.selection\n\n  if (!selection) {\n    return []\n  }\n\n  const startPoint = getSelectionStartPoint(selection)\n  const endPoint = getSelectionEndPoint(selection)\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return []\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return []\n  }\n\n  const startBlock = snapshot.context.value.at(startBlockIndex)\n  const slicedStartBlock = startBlock\n    ? sliceBlocks({\n        context: snapshot.context,\n        blocks: [startBlock],\n      }).at(0)\n    : undefined\n\n  if (startBlockIndex === endBlockIndex) {\n    return slicedStartBlock ? [slicedStartBlock] : []\n  }\n\n  const endBlock = snapshot.context.value.at(endBlockIndex)\n  const slicedEndBlock = endBlock\n    ? sliceBlocks({\n        context: snapshot.context,\n        blocks: [endBlock],\n      }).at(0)\n    : undefined\n\n  const middleBlocks = snapshot.context.value.slice(\n    startBlockIndex + 1,\n    endBlockIndex,\n  )\n\n  return [\n    ...(slicedStartBlock ? [slicedStartBlock] : []),\n    ...middleBlocks,\n    ...(slicedEndBlock ? [slicedEndBlock] : []),\n  ]\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedValue} from './selector.get-selected-value'\n\n/**\n * @public\n */\nexport const getSelectionText: EditorSelector<string> = (snapshot) => {\n  const selectedValue = getSelectedValue(snapshot)\n\n  return selectedValue.reduce((text, block) => {\n    if (!isTextBlock(snapshot.context, block)) {\n      return text\n    }\n\n    return (\n      text +\n      block.children.reduce((text, child) => {\n        if (isSpan(snapshot.context, child)) {\n          return text + child.text\n        }\n\n        return text\n      }, '')\n    )\n  }, '')\n}\n","import type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const isSelectionCollapsed: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  return (\n    JSON.stringify(snapshot.context.selection.anchor.path) ===\n      JSON.stringify(snapshot.context.selection.focus.path) &&\n    snapshot.context.selection?.anchor.offset ===\n      snapshot.context.selection?.focus.offset\n  )\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const isSelectionExpanded: EditorSelector<boolean> = (snapshot) => {\n  return !isSelectionCollapsed(snapshot)\n}\n"],"names":["getFocusBlock","snapshot","context","selection","key","getBlockKeyFromSelectionPoint","focus","index","blockIndexMap","get","undefined","node","value","at","path","_key","getFocusTextBlock","focusBlock","isTextBlock","getFocusChild","getChildKeyFromSelectionPoint","children","find","span","getFocusSpan","focusChild","isSpan","getSelectionStartPoint","backward","anchor","getPreviousInlineObject","focusTextBlock","selectionStartPoint","selectionStartPointChildKey","isKeySegment","inlineObject","child","getSelectedValue","startPoint","endPoint","getSelectionEndPoint","startBlockKey","endBlockKey","startBlockIndex","endBlockIndex","startBlock","slicedStartBlock","sliceBlocks","blocks","endBlock","slicedEndBlock","middleBlocks","slice","getSelectionText","reduce","text","block","isSelectionCollapsed","JSON","stringify","offset","isSelectionExpanded"],"mappings":"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","debugId":null}},
    {"offset": {"line": 691, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.is-selection-expanded.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-end-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-end-point.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-next-span.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-start-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-span.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-spans.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-mark-state.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-blocks.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-active-annotations.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-active-list-item.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-active-style.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-next-inline-object.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-caret-word-selection.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-first-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-block-object.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-inline-object.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-list-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-last-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-next-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-text-blocks.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-trimmed-selection.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-active-annotation-marks.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-active-annotation.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-active-decorators.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-active-decorator.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-active-list-item.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-active-style.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-end-of-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-start-of-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-point-after-selection.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-point-before-selection.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-overlapping-selection.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.is-selecting-entire-blocks.ts"],"sourcesContent":["import type {EditorSelection} from '../types/editor'\nimport {isSelectionCollapsed} from './util.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isSelectionExpanded(selection: EditorSelection) {\n  if (!selection) {\n    return false\n  }\n\n  return !isSelectionCollapsed(selection)\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: BlockPath\n    }\n  | undefined\n> = (snapshot) => {\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n\n  if (!endPoint) {\n    return undefined\n  }\n\n  return getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: endPoint,\n        focus: endPoint,\n      },\n    },\n  })\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionEndPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {KeyedSegment, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getChildKeyFromSelectionPoint} from '../selection/selection-point'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\n\n/**\n * @public\n */\nexport const getNextSpan: EditorSelector<\n  | {\n      node: PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n\n  if (!selectionEndBlock || !selectionEndPoint) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, selectionEndBlock.node)) {\n    return undefined\n  }\n\n  const selectionEndPointChildKey =\n    getChildKeyFromSelectionPoint(selectionEndPoint)\n\n  let endPointChildFound = false\n  let nextSpan:\n    | {\n        node: PortableTextSpan\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of selectionEndBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (isSpan(snapshot.context, child) && endPointChildFound) {\n      nextSpan = {\n        node: child,\n        path: [...selectionEndBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: BlockPath\n    }\n  | undefined\n> = (snapshot) => {\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n\n  if (!startPoint) {\n    return undefined\n  }\n\n  return getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startPoint,\n        focus: startPoint,\n      },\n    },\n  })\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {KeyedSegment, PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getChildKeyFromSelectionPoint} from '../selection/selection-point'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getPreviousSpan: EditorSelector<\n  | {\n      node: PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n\n  if (!selectionStartBlock || !selectionStartPoint) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, selectionStartBlock.node)) {\n    return undefined\n  }\n\n  const selectionStartPointChildKey =\n    getChildKeyFromSelectionPoint(selectionStartPoint)\n\n  let previousSpan:\n    | {\n        node: PortableTextSpan\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of selectionStartBlock.node.children) {\n    if (child._key === selectionStartPointChildKey) {\n      break\n    }\n\n    if (isSpan(snapshot.context, child)) {\n      previousSpan = {\n        node: child,\n        path: [...selectionStartBlock.path, 'children', {_key: child._key}],\n      }\n    }\n  }\n\n  return previousSpan\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {ChildPath} from '../types/paths'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getSelectedSpans: EditorSelector<\n  Array<{\n    node: PortableTextSpan\n    path: ChildPath\n  }>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedSpans: Array<{\n    node: PortableTextSpan\n    path: ChildPath\n  }> = []\n\n  const startPoint = getSelectionStartPoint(snapshot)\n  const endPoint = getSelectionEndPoint(snapshot)\n\n  if (!startPoint || !endPoint) {\n    return selectedSpans\n  }\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const startSpanKey = getChildKeyFromSelectionPoint(startPoint)\n  const endSpanKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedSpans\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedSpans\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  let startBlockFound = false\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (block._key === startBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (startSpanKey && child._key === startSpanKey) {\n          if (startPoint.offset < child.text.length) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n\n          if (startSpanKey === endSpanKey) {\n            break\n          }\n\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        if (selectedSpans.length > 0) {\n          selectedSpans.push({\n            node: child,\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n          })\n        }\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n\n      break\n    }\n\n    if (startBlockFound) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n    }\n  }\n\n  return selectedSpans\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSelectionExpanded} from '../utils/util.is-selection-expanded'\nimport {getFocusSpan} from './selector.get-focus-span'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getNextSpan} from './selector.get-next-span'\nimport {getPreviousSpan} from './selector.get-previous-span'\nimport {getSelectedSpans} from './selector.get-selected-spans'\n\nexport type MarkState =\n  | {\n      state: 'unchanged'\n      marks: Array<string>\n    }\n  | {\n      state: 'changed'\n      marks: Array<string>\n      previousMarks: Array<string>\n    }\n\n/**\n * Given that text is inserted at the current position, what marks should\n * be applied?\n */\nexport const getMarkState: EditorSelector<MarkState | undefined> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const focusSpan = getFocusSpan(snapshot)\n\n  if (!focusTextBlock || !focusSpan) {\n    return undefined\n  }\n\n  if (isSelectionExpanded(snapshot.context.selection)) {\n    const selectedSpans = getSelectedSpans(snapshot)\n\n    let index = 0\n    let marks: Array<string> = []\n\n    for (const span of selectedSpans) {\n      if (index === 0) {\n        marks = span.node.marks ?? []\n      } else {\n        if (span.node.marks?.length === 0) {\n          marks = []\n          continue\n        }\n\n        marks = marks.filter((mark) =>\n          (span.node.marks ?? []).some((spanMark) => spanMark === mark),\n        )\n      }\n\n      index++\n    }\n\n    return {\n      state: 'unchanged',\n      marks,\n    }\n  }\n\n  const decorators = snapshot.context.schema.decorators.map(\n    (decorator) => decorator.name,\n  )\n  const marks = focusSpan.node.marks ?? []\n  const marksWithoutAnnotations = marks.filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  const spanHasAnnotations = marks.length > marksWithoutAnnotations.length\n\n  const spanIsEmpty = focusSpan.node.text.length === 0\n\n  const atTheBeginningOfSpan = snapshot.context.selection.anchor.offset === 0\n  const atTheEndOfSpan =\n    snapshot.context.selection.anchor.offset === focusSpan.node.text.length\n\n  const previousSpan = getPreviousSpan(snapshot)\n  const nextSpan = getNextSpan(snapshot)\n  const nextSpanAnnotations =\n    nextSpan?.node?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n  const spanAnnotations = marks.filter((mark) => !decorators.includes(mark))\n\n  const previousSpanHasAnnotations = previousSpan\n    ? previousSpan.node.marks?.some((mark) => !decorators.includes(mark))\n    : false\n  const previousSpanHasSameAnnotations = previousSpan\n    ? previousSpan.node.marks\n        ?.filter((mark) => !decorators.includes(mark))\n        .every((mark) => marks.includes(mark))\n    : false\n  const previousSpanHasSameAnnotation = previousSpan\n    ? previousSpan.node.marks?.some(\n        (mark) => !decorators.includes(mark) && marks.includes(mark),\n      )\n    : false\n\n  const previousSpanHasSameMarks = previousSpan\n    ? previousSpan.node.marks?.every((mark) => marks.includes(mark))\n    : false\n  const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n    nextSpanAnnotations?.includes(mark),\n  )\n\n  if (spanHasAnnotations && !spanIsEmpty) {\n    if (atTheBeginningOfSpan) {\n      if (previousSpanHasSameMarks) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: previousSpan?.node.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotations) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: previousSpan?.node.marks ?? [],\n        }\n      } else if (previousSpanHasSameAnnotation) {\n        return {\n          state: 'unchanged',\n          previousMarks: marks,\n          marks: focusSpan.node.marks ?? [],\n        }\n      } else if (!previousSpan) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: [],\n        }\n      }\n    }\n\n    if (atTheEndOfSpan) {\n      if (\n        (nextSpan &&\n          nextSpanSharesSomeAnnotations &&\n          nextSpanAnnotations.length < spanAnnotations.length) ||\n        !nextSpanSharesSomeAnnotations\n      ) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: nextSpan?.node.marks ?? [],\n        }\n      }\n\n      if (!nextSpan) {\n        return {\n          state: 'changed',\n          previousMarks: marks,\n          marks: [],\n        }\n      }\n    }\n  }\n\n  if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n    if (previousSpanHasAnnotations) {\n      return {\n        state: 'changed',\n        previousMarks: marks,\n        marks: [],\n      }\n    } else {\n      return {\n        state: 'changed',\n        previousMarks: marks,\n        marks: (previousSpan?.node.marks ?? []).filter((mark) =>\n          decorators.includes(mark),\n        ),\n      }\n    }\n  }\n\n  return {\n    state: 'unchanged',\n    marks,\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: BlockPath}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: BlockPath}> = []\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n  const startKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedBlocks\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  for (const block of slicedValue) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getMarkState} from './selector.get-mark-state'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveAnnotations: EditorSelector<Array<PortableTextObject>> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot)\n  const markState = getMarkState(snapshot)\n\n  const activeAnnotations = (markState?.marks ?? []).filter(\n    (mark) =>\n      !snapshot.context.schema.decorators\n        .map((decorator) => decorator.name)\n        .includes(mark),\n  )\n\n  const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n    isTextBlock(snapshot.context, block.node)\n      ? (block.node.markDefs ?? [])\n      : [],\n  )\n\n  return selectionMarkDefs.filter((markDef) =>\n    activeAnnotations.includes(markDef._key),\n  )\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextListBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveListItem: EditorSelector<\n  PortableTextListBlock['listItem'] | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstListItem = firstTextBlock.listItem\n\n  if (!firstListItem) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.listItem === firstListItem)) {\n    return firstListItem\n  }\n\n  return undefined\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveStyle: EditorSelector<PortableTextTextBlock['style']> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstStyle = firstTextBlock.style\n\n  if (!firstStyle) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.style === firstStyle)) {\n    return firstStyle\n  }\n\n  return undefined\n}\n","import {isKeySegment, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {isSpan} from '../utils'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\n\n/**\n * @public\n */\nexport const getNextInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: ChildPath\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n  const selectionEndPointChildKey =\n    selectionEndPoint && isKeySegment(selectionEndPoint.path[2])\n      ? selectionEndPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionEndPointChildKey) {\n    return undefined\n  }\n\n  let endPointChildFound = false\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: ChildPath\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (!isSpan(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return inlineObject\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelection} from '../types/editor'\nimport {\n  blockOffsetToSpanSelectionPoint,\n  spanSelectionPointToBlockOffset,\n} from '../utils/util.block-offset'\nimport {getBlockEndPoint} from '../utils/util.get-block-end-point'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getNextInlineObject} from './selector.get-next-inline-object'\nimport {getPreviousInlineObject} from './selector.get-previous-inline-object'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getSelectionText} from './selector.get-selection-text'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n * Returns the selection of the of the word the caret is placed in.\n * Note: Only returns a word selection if the current selection is collapsed\n */\nexport const getCaretWordSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (!isSelectionCollapsed(snapshot)) {\n    return null\n  }\n\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartOffset = selectionStartPoint\n    ? spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: selectionStartPoint,\n      })\n    : undefined\n\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset) {\n    return null\n  }\n\n  const previousInlineObject = getPreviousInlineObject(snapshot)\n  const blockStartPoint = getBlockStartPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textBefore = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject\n          ? {path: previousInlineObject.path, offset: 0}\n          : blockStartPoint,\n        focus: selectionStartPoint,\n      },\n    },\n  })\n  const textDirectlyBefore = textBefore.split(/\\s+/).at(-1)\n\n  const nextInlineObject = getNextInlineObject(snapshot)\n  const blockEndPoint = getBlockEndPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textAfter = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject\n          ? {path: nextInlineObject.path, offset: 0}\n          : blockEndPoint,\n      },\n    },\n  })\n  const textDirectlyAfter = textAfter.split(/\\s+/).at(0)\n\n  if (\n    (textDirectlyBefore === undefined || textDirectlyBefore === '') &&\n    (textDirectlyAfter === undefined || textDirectlyAfter === '')\n  ) {\n    return null\n  }\n\n  const caretWordStartOffset: BlockOffset = textDirectlyBefore\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset - textDirectlyBefore.length,\n      }\n    : selectionStartOffset\n  const caretWordEndOffset: BlockOffset = textDirectlyAfter\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset + textDirectlyAfter.length,\n      }\n    : selectionStartOffset\n\n  const caretWordStartSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordStartOffset,\n    direction: 'backward',\n  })\n  const caretWordEndSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordEndOffset,\n    direction: 'forward',\n  })\n\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint) {\n    return null\n  }\n\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint,\n  }\n\n  return isSelectionExpanded({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection,\n    },\n  })\n    ? caretWordSelection\n    : null\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && !isTextBlock(snapshot.context, focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n","import {isPortableTextSpan, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusChild} from './selector.get-focus-child'\n\n/**\n * @public\n */\nexport const getFocusInlineObject: EditorSelector<\n  {node: PortableTextObject; path: ChildPath} | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && !isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isListBlock} from '../internal-utils/parse-blocks'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\n\n/**\n * @public\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n\n  return focusTextBlock && isListBlock(snapshot.context, focusTextBlock.node)\n    ? {node: focusTextBlock.node, path: focusTextBlock.path}\n    : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1]\n    ? snapshot.context.value[snapshot.context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\n\n/**\n * @public\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  const index = snapshot.blockIndexMap.get(selectionEndBlock.node._key)\n\n  if (index === undefined || index === snapshot.context.value.length - 1) {\n    return undefined\n  }\n\n  const nextBlock = snapshot.context.value.at(index + 1)\n\n  return nextBlock\n    ? {node: nextBlock, path: [{_key: nextBlock._key}]}\n    : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\n\n/**\n * @public\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  const index = snapshot.blockIndexMap.get(selectionStartBlock.node._key)\n\n  if (index === undefined || index === 0) {\n    return undefined\n  }\n\n  const previousBlock = snapshot.context.value.at(index - 1)\n\n  return previousBlock\n    ? {node: previousBlock, path: [{_key: previousBlock._key}]}\n    : undefined\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint, getSelectionStartPoint} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedTextBlocks: EditorSelector<\n  Array<{node: PortableTextTextBlock; path: BlockPath}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedTextBlocks: Array<{\n    node: PortableTextTextBlock\n    path: BlockPath\n  }> = []\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedTextBlocks\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return selectedTextBlocks\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      break\n    }\n\n    if (selectedTextBlocks.length > 0) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n    }\n  }\n\n  return selectedTextBlocks\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\nimport {\n  getSelectionEndPoint,\n  getSelectionStartPoint,\n  isEmptyTextBlock,\n} from '../utils'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const getTrimmedSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return snapshot.context.selection\n  }\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return snapshot.context.selection\n  }\n\n  const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n  const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n  if (startBlockIndex === undefined || endBlockIndex === undefined) {\n    return snapshot.context.selection\n  }\n\n  const slicedValue = snapshot.context.value.slice(\n    startBlockIndex,\n    endBlockIndex + 1,\n  )\n\n  let startBlockFound = false\n  let adjustedStartPoint: EditorSelectionPoint | undefined\n  let trimStartPoint = false\n  let adjustedEndPoint: EditorSelectionPoint | undefined\n  let trimEndPoint = false\n  let previousPotentialEndpoint:\n    | {blockKey: string; span: PortableTextSpan}\n    | undefined\n\n  for (const block of slicedValue) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n\n      if (\n        isTextBlock(snapshot.context, block) &&\n        isEmptyTextBlock(snapshot.context, block)\n      ) {\n        continue\n      }\n    }\n\n    if (!startBlockFound) {\n      continue\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (\n      block._key === endBlockKey &&\n      isEmptyTextBlock(snapshot.context, block)\n    ) {\n      break\n    }\n\n    for (const child of block.children) {\n      if (child._key === endChildKey) {\n        if (!isSpan(snapshot.context, child) || endPoint.offset === 0) {\n          adjustedEndPoint = previousPotentialEndpoint\n            ? {\n                path: [\n                  {_key: previousPotentialEndpoint.blockKey},\n                  'children',\n                  {_key: previousPotentialEndpoint.span._key},\n                ],\n                offset: previousPotentialEndpoint.span.text.length,\n              }\n            : undefined\n\n          trimEndPoint = true\n          break\n        }\n      }\n\n      if (trimStartPoint) {\n        const lonelySpan =\n          isSpan(snapshot.context, child) && block.children.length === 1\n\n        if (\n          (isSpan(snapshot.context, child) && child.text.length > 0) ||\n          lonelySpan\n        ) {\n          adjustedStartPoint = {\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n            offset: 0,\n          }\n          previousPotentialEndpoint = {blockKey: block._key, span: child}\n          trimStartPoint = false\n        }\n\n        continue\n      }\n\n      if (child._key === startChildKey) {\n        if (!isSpan(snapshot.context, child)) {\n          trimStartPoint = true\n          continue\n        }\n\n        if (startPoint.offset === child.text.length) {\n          trimStartPoint = true\n          previousPotentialEndpoint =\n            child.text.length > 0\n              ? {blockKey: block._key, span: child}\n              : previousPotentialEndpoint\n          continue\n        }\n      }\n\n      previousPotentialEndpoint =\n        isSpan(snapshot.context, child) && child.text.length > 0\n          ? {blockKey: block._key, span: child}\n          : previousPotentialEndpoint\n    }\n\n    if (block._key === endBlockKey) {\n      break\n    }\n  }\n\n  const trimmedSelection = snapshot.context.selection.backward\n    ? {\n        anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n        focus: adjustedStartPoint ?? startPoint,\n        backward: true,\n      }\n    : {\n        anchor: adjustedStartPoint ?? startPoint,\n        focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n      }\n\n  if (\n    isSelectionCollapsed({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n  ) {\n    const focusTextBlock = getFocusTextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n\n    if (\n      focusTextBlock &&\n      !isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n    ) {\n      return null\n    }\n  }\n\n  return trimmedSelection\n}\n","import type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {getMarkState} from './selector.get-mark-state'\n\nexport function getActiveAnnotationsMarks(snapshot: EditorSnapshot) {\n  const schema = snapshot.context.schema\n  const markState = getMarkState(snapshot)\n\n  return (markState?.marks ?? []).filter(\n    (mark) =>\n      !schema.decorators.map((decorator) => decorator.name).includes(mark),\n  )\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveAnnotationsMarks} from './selector.get-active-annotation-marks'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\nimport {getSelectedValue} from './selector.get-selected-value'\n\n/**\n * Check whether an annotation is active in the given `snapshot`.\n *\n * @public\n */\nexport function isActiveAnnotation(\n  annotation: string,\n  options?: {\n    /**\n     * Choose whether the annotation has to take up the entire selection in the\n     * `snapshot` or if the annotation can be partially selected.\n     *\n     * Defaults to 'full'\n     */\n    mode?: 'partial' | 'full'\n  },\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    const mode = options?.mode ?? 'full'\n\n    if (mode === 'partial') {\n      const selectedValue = getSelectedValue(snapshot)\n\n      const selectionMarkDefs = selectedValue.flatMap((block) =>\n        isTextBlock(snapshot.context, block) ? (block.markDefs ?? []) : [],\n      )\n\n      return selectionMarkDefs.some((markDef) => markDef._type === annotation)\n    }\n\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n      isTextBlock(snapshot.context, block.node)\n        ? (block.node.markDefs ?? [])\n        : [],\n    )\n    const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n    const activeMarkDefs = selectionMarkDefs.filter(\n      (markDef) =>\n        markDef._type === annotation &&\n        activeAnnotations.includes(markDef._key),\n    )\n\n    return activeMarkDefs.length > 0\n  }\n}\n","import type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {getMarkState} from './selector.get-mark-state'\n\nexport function getActiveDecorators(snapshot: EditorSnapshot) {\n  const schema = snapshot.context.schema\n  const decoratorState = snapshot.decoratorState\n  const markState = getMarkState(snapshot)\n  const decorators = schema.decorators.map((decorator) => decorator.name)\n\n  const markStateDecorators = (markState?.marks ?? []).filter((mark) =>\n    decorators.includes(mark),\n  )\n\n  let activeDecorators: Array<string> = markStateDecorators\n\n  for (const decorator in decoratorState) {\n    if (decoratorState[decorator] === false) {\n      activeDecorators = activeDecorators.filter(\n        (activeDecorator) => activeDecorator !== decorator,\n      )\n    } else if (decoratorState[decorator] === true) {\n      if (!activeDecorators.includes(decorator)) {\n        activeDecorators.push(decorator)\n      }\n    }\n  }\n\n  return activeDecorators\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveDecorators} from './selector.get-active-decorators'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n */\nexport function isActiveDecorator(decorator: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (isSelectionExpanded(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot)\n\n      return (\n        selectedSpans.length > 0 &&\n        selectedSpans.every((span) => span.node.marks?.includes(decorator))\n      )\n    }\n\n    const activeDecorators = getActiveDecorators(snapshot)\n\n    return activeDecorators.includes(decorator)\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveListItem} from './selector.get-active-list-item'\n\n/**\n * @public\n */\nexport function isActiveListItem(listItem: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeListItem = getActiveListItem(snapshot)\n\n    return activeListItem === listItem\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveStyle} from './selector.get-active-style'\n\n/**\n * @public\n */\nexport function isActiveStyle(style: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeStyle = getActiveStyle(snapshot)\n\n    return activeStyle === style\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheEndOfBlock(block: {\n  node: PortableTextBlock\n  path: BlockPath\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockEndPoint,\n    )\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheStartOfBlock(block: {\n  node: PortableTextBlock\n  path: BlockPath\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockStartPoint,\n    )\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {getSelectionEndPoint} from '../utils'\n\n/**\n * @public\n */\nexport function isPointAfterSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const endPoint = getSelectionEndPoint(snapshot.context.selection)\n    const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n    const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n    const pointBlockKey = getBlockKeyFromSelectionPoint(point)\n    const pointChildKey = getChildKeyFromSelectionPoint(point)\n\n    if (!pointBlockKey || !endBlockKey) {\n      return false\n    }\n\n    const pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey)\n    const endBlockIndex = snapshot.blockIndexMap.get(endBlockKey)\n\n    if (pointBlockIndex === undefined || endBlockIndex === undefined) {\n      return false\n    }\n\n    if (pointBlockIndex > endBlockIndex) {\n      // The point block is after the end block.\n      return true\n    }\n\n    if (pointBlockIndex < endBlockIndex) {\n      // The point block is before the end block.\n      return false\n    }\n\n    // The point block is the same as the end block.\n    const pointBlock = snapshot.context.value.at(pointBlockIndex)\n\n    if (!pointBlock) {\n      // The point block is not in the value.\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, pointBlock)) {\n      // The point block is not a text block.\n      // Since the point block is the same as the end block, the point is not\n      // after the selection.\n      return false\n    }\n\n    let pointChildIndex: number | undefined\n    let endChildIndex: number | undefined\n\n    let childIndex = -1\n\n    // The point block is the same as the end block, so we need to find the\n    // child indices and compare them.\n    for (const child of pointBlock.children) {\n      childIndex++\n\n      if (child._key === pointChildKey && child._key === endChildKey) {\n        return point.offset > endPoint.offset\n      }\n\n      if (child._key === pointChildKey) {\n        pointChildIndex = childIndex\n      }\n\n      if (child._key === endChildKey) {\n        endChildIndex = childIndex\n      }\n\n      if (pointChildIndex !== undefined && endChildIndex !== undefined) {\n        break\n      }\n    }\n\n    if (pointChildIndex === undefined || endChildIndex === undefined) {\n      return false\n    }\n\n    return pointChildIndex > endChildIndex\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {getSelectionStartPoint} from '../utils'\n\n/**\n * @public\n */\nexport function isPointBeforeSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const startPoint = getSelectionStartPoint(snapshot.context.selection)\n    const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n    const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n\n    const pointBlockKey = getBlockKeyFromSelectionPoint(point)\n    const pointChildKey = getChildKeyFromSelectionPoint(point)\n\n    if (!pointBlockKey || !startBlockKey) {\n      return false\n    }\n\n    const startBlockIndex = snapshot.blockIndexMap.get(startBlockKey)\n    const pointBlockIndex = snapshot.blockIndexMap.get(pointBlockKey)\n\n    if (startBlockIndex === undefined || pointBlockIndex === undefined) {\n      return false\n    }\n\n    if (pointBlockIndex < startBlockIndex) {\n      // The point block is before the start block.\n      return true\n    }\n\n    if (pointBlockIndex > startBlockIndex) {\n      // The point block is after the start block.\n      return false\n    }\n\n    // The point block is the same as the start block.\n    const pointBlock = snapshot.context.value.at(pointBlockIndex)\n\n    if (!pointBlock) {\n      // The point block is not in the value.\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, pointBlock)) {\n      // The point block is not a text block.\n      // Since the point block is the same as the start block, the point is not\n      // before the selection.\n      return false\n    }\n\n    let pointChildIndex: number | undefined\n    let startChildIndex: number | undefined\n\n    let childIndex = -1\n\n    // The point block is the same as the start block, so we need to find the\n    // child indices and compare them.\n    for (const child of pointBlock.children) {\n      childIndex++\n\n      if (child._key === pointChildKey && child._key === startChildKey) {\n        return point.offset < startPoint.offset\n      }\n\n      if (child._key === pointChildKey) {\n        pointChildIndex = childIndex\n      }\n\n      if (child._key === startChildKey) {\n        startChildIndex = childIndex\n      }\n\n      if (pointChildIndex !== undefined && startChildIndex !== undefined) {\n        break\n      }\n    }\n\n    if (pointChildIndex === undefined || startChildIndex === undefined) {\n      return false\n    }\n\n    return pointChildIndex < startChildIndex\n  }\n}\n","import type {EditorSelection} from '../types/editor'\nimport {isEqualSelectionPoints} from '../utils'\nimport type {EditorSelector} from './../editor/editor-selector'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isPointAfterSelection} from './selector.is-point-after-selection'\nimport {isPointBeforeSelection} from './selector.is-point-before-selection'\n\n/**\n * @public\n */\nexport function isOverlappingSelection(\n  selection: EditorSelection,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection) {\n      return false\n    }\n\n    const selectionStartPoint = getSelectionStartPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n    const selectionEndPoint = getSelectionEndPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n\n    const originalSelectionStartPoint = getSelectionStartPoint(snapshot)\n    const originalSelectionEndPoint = getSelectionEndPoint(snapshot)\n\n    if (\n      !selectionStartPoint ||\n      !selectionEndPoint ||\n      !originalSelectionStartPoint ||\n      !originalSelectionEndPoint\n    ) {\n      return false\n    }\n\n    const startPointEqualToOriginalStartPoint = isEqualSelectionPoints(\n      selectionStartPoint,\n      originalSelectionStartPoint,\n    )\n    const endPointEqualToOriginalEndPoint = isEqualSelectionPoints(\n      selectionEndPoint,\n      originalSelectionEndPoint,\n    )\n\n    if (\n      startPointEqualToOriginalStartPoint &&\n      endPointEqualToOriginalEndPoint\n    ) {\n      return true\n    }\n\n    const startPointBeforeSelection =\n      isPointBeforeSelection(selectionStartPoint)(snapshot)\n    const startPointAfterSelection =\n      isPointAfterSelection(selectionStartPoint)(snapshot)\n    const endPointBeforeSelection =\n      isPointBeforeSelection(selectionEndPoint)(snapshot)\n    const endPointAfterSelection =\n      isPointAfterSelection(selectionEndPoint)(snapshot)\n\n    const originalStartPointBeforeStartPoint = isPointBeforeSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n    const originalStartPointAfterStartPoint = isPointAfterSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n\n    const originalEndPointBeforeEndPoint = isPointBeforeSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n    const originalEndPointAfterEndPoint = isPointAfterSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n\n    const startPointEqualToOriginalEndPoint = isEqualSelectionPoints(\n      selectionStartPoint,\n      originalSelectionEndPoint,\n    )\n    const endPointEqualToOriginalStartPoint = isEqualSelectionPoints(\n      selectionEndPoint,\n      originalSelectionStartPoint,\n    )\n\n    // If all checks fail then we can deduce that the selection does not exist\n    // and there doesn't overlap with the snapshot selection\n    if (\n      !endPointEqualToOriginalStartPoint &&\n      !startPointEqualToOriginalEndPoint &&\n      !originalStartPointBeforeStartPoint &&\n      !originalStartPointAfterStartPoint &&\n      !originalEndPointBeforeEndPoint &&\n      !originalEndPointAfterEndPoint\n    ) {\n      return false\n    }\n\n    if (endPointBeforeSelection && !endPointEqualToOriginalStartPoint) {\n      return false\n    }\n\n    if (startPointAfterSelection && !startPointEqualToOriginalEndPoint) {\n      return false\n    }\n\n    if (\n      !originalStartPointBeforeStartPoint &&\n      originalStartPointAfterStartPoint &&\n      !originalEndPointBeforeEndPoint &&\n      originalEndPointAfterEndPoint\n    ) {\n      return !endPointEqualToOriginalStartPoint\n    }\n\n    if (\n      originalStartPointBeforeStartPoint &&\n      !originalStartPointAfterStartPoint &&\n      originalEndPointBeforeEndPoint &&\n      !originalEndPointAfterEndPoint\n    ) {\n      return !startPointEqualToOriginalEndPoint\n    }\n\n    if (\n      !startPointAfterSelection ||\n      !startPointBeforeSelection ||\n      !endPointAfterSelection ||\n      !endPointBeforeSelection\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\n\n/**\n * @public\n */\nexport const isSelectingEntireBlocks: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  const startPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n  const endPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n\n  const startBlock = getSelectionStartBlock(snapshot)\n  const endBlock = getSelectionEndBlock(snapshot)\n\n  if (!startBlock || !endBlock) {\n    return false\n  }\n\n  const startBlockStartPoint = utils.getBlockStartPoint({\n    context: snapshot.context,\n    block: startBlock,\n  })\n  const endBlockEndPoint = utils.getBlockEndPoint({\n    context: snapshot.context,\n    block: endBlock,\n  })\n\n  return (\n    utils.isEqualSelectionPoints(startBlockStartPoint, startPoint) &&\n    utils.isEqualSelectionPoints(endBlockEndPoint, endPoint)\n  )\n}\n"],"names":["isSelectionExpanded","selection","isSelectionCollapsed","getSelectionEndBlock","snapshot","endPoint","getSelectionEndPoint","context","getFocusBlock","anchor","focus","backward","getNextSpan","selectionEndBlock","selectionEndPoint","isTextBlock","node","selectionEndPointChildKey","getChildKeyFromSelectionPoint","endPointChildFound","nextSpan","child","children","_key","isSpan","path","getSelectionStartBlock","startPoint","getSelectionStartPoint","getPreviousSpan","selectionStartBlock","selectionStartPoint","selectionStartPointChildKey","previousSpan","getSelectedSpans","selectedSpans","startBlockKey","getBlockKeyFromSelectionPoint","endBlockKey","startSpanKey","endSpanKey","startBlockIndex","blockIndexMap","get","endBlockIndex","undefined","slicedValue","value","slice","startBlockFound","block","offset","text","length","push","getMarkState","focusTextBlock","getFocusTextBlock","focusSpan","getFocusSpan","index","marks","span","filter","mark","some","spanMark","state","decorators","schema","map","decorator","name","marksWithoutAnnotations","includes","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","nextSpanAnnotations","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","every","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","previousMarks","getSelectedBlocks","selectedBlocks","startKey","endKey","getActiveAnnotations","activeAnnotations","flatMap","markDefs","markDef","getActiveListItem","selectedTextBlocks","firstTextBlock","at","firstListItem","listItem","getActiveStyle","firstStyle","style","getNextInlineObject","isKeySegment","inlineObject","getCaretWordSelection","selectionStartOffset","spanSelectionPointToBlockOffset","selectionPoint","previousInlineObject","getPreviousInlineObject","blockStartPoint","getBlockStartPoint","textDirectlyBefore","getSelectionText","split","nextInlineObject","blockEndPoint","getBlockEndPoint","textDirectlyAfter","caretWordStartOffset","caretWordEndOffset","caretWordStartSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","direction","caretWordEndSelectionPoint","caretWordSelection","getFirstBlock","getFocusBlockObject","focusBlock","getFocusInlineObject","focusChild","getFocusChild","isPortableTextSpan","getFocusListBlock","isListBlock","getLastBlock","getNextBlock","nextBlock","getPreviousBlock","previousBlock","getSelectedTextBlocks","getTrimmedSelection","startChildKey","endChildKey","adjustedStartPoint","trimStartPoint","adjustedEndPoint","trimEndPoint","previousPotentialEndpoint","isEmptyTextBlock","blockKey","lonelySpan","trimmedSelection","getActiveAnnotationsMarks","isActiveAnnotation","annotation","options","mode","getSelectedValue","_type","selectionMarkDefs","getActiveDecorators","decoratorState","markState","activeDecorators","activeDecorator","isActiveDecorator","isActiveListItem","isActiveStyle","isAtTheEndOfBlock","utils","isAtTheStartOfBlock","isPointAfterSelection","point","pointBlockKey","pointChildKey","pointBlockIndex","pointBlock","pointChildIndex","endChildIndex","childIndex","isPointBeforeSelection","startChildIndex","isOverlappingSelection","originalSelectionStartPoint","originalSelectionEndPoint","startPointEqualToOriginalStartPoint","isEqualSelectionPoints","endPointEqualToOriginalEndPoint","startPointBeforeSelection","startPointAfterSelection","endPointBeforeSelection","endPointAfterSelection","originalStartPointBeforeStartPoint","originalStartPointAfterStartPoint","originalEndPointBeforeEndPoint","originalEndPointAfterEndPoint","startPointEqualToOriginalEndPoint","endPointEqualToOriginalStartPoint","isSelectingEntireBlocks","startBlock","endBlock","startBlockStartPoint","endBlockEndPoint"],"mappings":"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","debugId":null}},
    {"offset": {"line": 1554, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/behaviors/index.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.types.action.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.types.behavior.ts"],"sourcesContent":["import type {EditorDom} from '../editor/editor-dom'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  CustomBehaviorEvent,\n  ExternalBehaviorEvent,\n  NativeBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from './behavior.types.event'\n\n/**\n * @beta\n */\nexport type BehaviorAction =\n  | {\n      type: 'execute'\n      event: SyntheticBehaviorEvent\n    }\n  | {\n      type: 'forward'\n      event: NativeBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent\n    }\n  | {\n      type: 'raise'\n      event: SyntheticBehaviorEvent | CustomBehaviorEvent\n    }\n  | {\n      type: 'effect'\n      effect: (payload: {\n        /**\n         * Send a Behavior Event back into the Editor.\n         *\n         * @example\n         * ```ts\n         * defineBehavior({\n         *   on: '...',\n         *   actions: [\n         *     () => [\n         *       effect(({send}) => {\n         *         doSomethingAsync()\n         *           .then(() => {\n         *             send({\n         *               type: '...',\n         *             })\n         *           })\n         *       })\n         *     ],\n         *   ],\n         * })\n         * ```\n         */\n        send: (event: ExternalBehaviorEvent) => void\n      }) => void\n    }\n\n/**\n * @beta\n */\nexport function execute(\n  event: SyntheticBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'execute'> {\n  return {type: 'execute', event}\n}\n\n/**\n * @beta\n */\nexport function forward(\n  event: NativeBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'forward'> {\n  return {type: 'forward', event}\n}\n\n/**\n * @beta\n */\nexport function raise(\n  event: SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'raise'> {\n  return {type: 'raise', event}\n}\n\n/**\n * @beta\n */\nexport function effect(\n  effect: PickFromUnion<BehaviorAction, 'type', 'effect'>['effect'],\n): PickFromUnion<BehaviorAction, 'type', 'effect'> {\n  return {type: 'effect', effect}\n}\n\n/**\n * @beta\n */\nexport type BehaviorActionSet<TBehaviorEvent, TGuardResponse> = (\n  payload: {\n    snapshot: EditorSnapshot\n    event: TBehaviorEvent\n    dom: EditorDom\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorAction>\n","import type {BehaviorActionSet} from './behavior.types.action'\nimport type {\n  BehaviorEvent,\n  BehaviorEventTypeNamespace,\n  CustomBehaviorEvent,\n  ResolveBehaviorEvent,\n} from './behavior.types.event'\nimport type {BehaviorGuard} from './behavior.types.guard'\n\n/**\n * @beta\n */\nexport type Behavior<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] =\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends\n    ResolveBehaviorEvent<TBehaviorEventType> = ResolveBehaviorEvent<TBehaviorEventType>,\n> = {\n  /**\n   * Editor Event that triggers this Behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the Behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<TBehaviorEvent, TGuardResponse>\n  /**\n   * Array of Behavior Action sets.\n   * Each set represents a step in the history stack.\n   */\n  actions: Array<BehaviorActionSet<TBehaviorEvent, TGuardResponse>>\n}\n\n/**\n * @beta\n *\n * @example\n *\n * ```tsx\n * const noLowerCaseA = defineBehavior({\n *   on: 'insert.text',\n *   guard: ({event, snapshot}) => event.text === 'a',\n *   actions: [({event, snapshot}) => [{type: 'insert.text', text: 'A'}]],\n * })\n * ```\n *\n */\nexport function defineBehavior<\n  TPayload extends Record<string, unknown>,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = CustomBehaviorEvent['type'],\n  TGuardResponse = true,\n>(\n  behavior: Behavior<\n    TBehaviorEventType,\n    TGuardResponse,\n    ResolveBehaviorEvent<TBehaviorEventType, TPayload>\n  >,\n): Behavior\nexport function defineBehavior<\n  TPayload extends never = never,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends ResolveBehaviorEvent<\n    TBehaviorEventType,\n    TPayload\n  > = ResolveBehaviorEvent<TBehaviorEventType, TPayload>,\n>(\n  behavior: Behavior<TBehaviorEventType, TGuardResponse, TBehaviorEvent>,\n): Behavior {\n  return behavior as unknown as Behavior\n}\n"],"names":["execute","event","type","forward","raise","effect","defineBehavior","behavior"],"mappings":";;;;;;;;;;;;AA0DO,SAASA,QACdC,KAAAA,EACkD;IAClD,OAAO;QAACC,MAAM;QAAWD;IAAAA;AAC3B;AAKO,SAASE,QACdF,KAAAA,EACkD;IAClD,OAAO;QAACC,MAAM;QAAWD;IAAAA;AAC3B;AAKO,SAASG,MACdH,KAAAA,EACgD;IAChD,OAAO;QAACC,MAAM;QAASD;IAAAA;AACzB;AAKO,SAASI,OACdA,OAAAA,EACiD;IACjD,OAAO;QAACH,MAAM;QAAUG,QAAAA;IAAAA;AAC1B;ACpBO,SAASC,eAYdC,QAAAA,EACU;IACV,OAAOA;AACT","debugId":null}},
    {"offset": {"line": 1599, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.child-selection-point-to-block-offset.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-block-selection-point.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-selection-point.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.block-offsets-to-selection.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.child-selection-point-to-block-offset.ts"],"sourcesContent":["import type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function blockOffsetToBlockSelectionPoint({\n  context,\n  blockOffset,\n}: {\n  context: Pick<EditorContext, 'value'>\n  blockOffset: BlockOffset\n}): EditorSelectionPoint | undefined {\n  let selectionPoint: EditorSelectionPoint | undefined\n\n  for (const block of context.value) {\n    if (block._key === blockOffset.path[0]._key) {\n      selectionPoint = {\n        path: [{_key: block._key}],\n        offset: blockOffset.offset,\n      }\n      break\n    }\n  }\n\n  return selectionPoint\n}\n","import type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {blockOffsetToSpanSelectionPoint} from './util.block-offset'\nimport {blockOffsetToBlockSelectionPoint} from './util.block-offset-to-block-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetToSelectionPoint({\n  context,\n  blockOffset,\n  direction,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}): EditorSelectionPoint | undefined {\n  const spanSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context,\n    blockOffset,\n    direction,\n  })\n\n  if (!spanSelectionPoint) {\n    return blockOffsetToBlockSelectionPoint({\n      context,\n      blockOffset,\n    })\n  }\n\n  return spanSelectionPoint\n}\n","import type {EditorSelection} from '..'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {BlockOffset} from '../types/block-offset'\nimport {blockOffsetToSelectionPoint} from './util.block-offset-to-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetsToSelection({\n  context,\n  offsets,\n  backward,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  offsets: {anchor: BlockOffset; focus: BlockOffset}\n  backward?: boolean\n}): EditorSelection {\n  const anchor = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.anchor,\n    direction: backward ? 'backward' : 'forward',\n  })\n  const focus = blockOffsetToSelectionPoint({\n    context,\n    blockOffset: offsets.focus,\n    direction: backward ? 'forward' : 'backward',\n  })\n\n  if (!anchor || !focus) {\n    return null\n  }\n\n  return {\n    anchor,\n    focus,\n    backward,\n  }\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function childSelectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n  const childKey = getChildKeyFromSelectionPoint(selectionPoint)\n\n  if (!blockKey || !childKey) {\n    return undefined\n  }\n\n  for (const block of context.value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isTextBlock(context, block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (child._key === childKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      if (isSpan(context, child)) {\n        offset += child.text.length\n      }\n    }\n  }\n}\n"],"names":["blockOffsetToBlockSelectionPoint","context","blockOffset","selectionPoint","block","value","_key","path","offset","blockOffsetToSelectionPoint","direction","blockOffsetToSpanSelectionPoint","blockOffsetsToSelection","offsets","backward","anchor","focus","childSelectionPointToBlockOffset","blockKey","getBlockKeyFromSelectionPoint","childKey","getChildKeyFromSelectionPoint","isTextBlock","child","children","isSpan","text","length"],"mappings":";;;;;;;;;;;;;;AAOO,SAASA,sCAMhB;UALEC,OAAAA,EACAC,WAAAA,EAIF,EAAqC,CANY;IAO/C,IAAIC;IAEJ,KAAA,MAAWC,SAASH,QAAQI,KAAAA,CAC1B,IAAID,MAAME,IAAAA,KAASJ,YAAYK,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,EAAM;QAC3CH,iBAAiB;YACfI,MAAM;gBAAC;oBAACD,MAAMF,MAAME,IAAAA;gBAAAA,CAAK;aAAA;YACzBE,QAAQN,YAAYM,MAAAA;QAAAA;QAEtB;IACF;IAGF,OAAOL;AACT;AClBO,SAASM,iCAQhB,EAAqC;UAPnCR,OAAAA,EACAC,WAAAA,EACAQ,SAAAA,EAKF,GAR4C;IAe1C,WAN2BC,iOAAAA,EAAgC;QACzDV;QACAC;QACAQ;IAAAA,CACD,KAGQV,iCAAiC;QACtCC;QACAC;IAAAA,CACD;AAIL;ACxBO,SAASU,6BAQhB;UAPEX,OAAAA,EACAY,OAAAA,EACAC,QAAAA,EAKF,EAAoB,CARoB;IAStC,MAAMC,SAASN,4BAA4B;QACzCR;QACAC,aAAaW,QAAQE,MAAAA;QACrBL,WAAWI,WAAW,aAAa;IAAA,CACpC,GACKE,QAAQP,4BAA4B;QACxCR;QACAC,aAAaW,QAAQG,KAAAA;QACrBN,WAAWI,WAAW,YAAY;IAAA,CACnC;IAED,OAAI,CAACC,UAAU,CAACC,QACP,OAGF;QACLD;QACAC;QACAF;IAAAA;AAEJ;ACzBO,SAASG,sCAMhB;UALEhB,OAAAA,EACAE,cAAAA,EAIF,EAA4B,CANqB;IAO/C,IAAIK,SAAS;IAEb,MAAMU,eAAWC,+NAAAA,EAA8BhB,cAAc,GACvDiB,WAAWC,mOAAAA,EAA8BlB,cAAc;IAE7D,IAAI,CAAA,CAAA,CAACe,YAAY,CAACE,QAAAA,GAAAA;QAIlB,KAAA,MAAWhB,SAASH,QAAQI,KAAAA,CAC1B,IAAID,MAAME,IAAAA,KAASY,gBAIdI,2KAAAA,EAAYrB,SAASG,KAAK,GAI/B,KAAA,MAAWmB,SAASnB,MAAMoB,QAAAA,CAAU;YAClC,IAAID,MAAMjB,IAAAA,KAASc,UACjB,OAAO;gBACLb,MAAM;oBAAC;wBAACD,MAAMF,MAAME,IAAAA;oBAAAA,CAAK;iBAAA;gBACzBE,QAAQA,SAASL,eAAeK,MAAAA;YAAAA;YAIhCiB,IAAAA,sKAAAA,EAAOxB,SAASsB,KAAK,KAAA,CACvBf,UAAUe,MAAMG,IAAAA,CAAKC,MAAAA;QAEzB;IAAA;AAEJ","debugId":null}},
    {"offset": {"line": 1681, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-text-block.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.selection-point-to-block-offset.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.slice-text-block.ts"],"sourcesContent":["import type {EditorContext} from '../editor/editor-snapshot'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {childSelectionPointToBlockOffset} from './util.child-selection-point-to-block-offset'\n\n/**\n * @public\n */\nexport function selectionPointToBlockOffset({\n  context,\n  selectionPoint,\n}: {\n  context: Pick<EditorContext, 'schema' | 'value'>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n\n  if (selectionPoint.path.length === 1 && blockKey !== undefined) {\n    return {\n      path: [{_key: blockKey}],\n      offset: selectionPoint.offset,\n    }\n  }\n\n  return childSelectionPointToBlockOffset({\n    context,\n    selectionPoint,\n  })\n}\n","import {isSpan} from '@portabletext/schema'\nimport type {PortableTextChild, PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport {getSelectionEndPoint} from './util.get-selection-end-point'\nimport {getSelectionStartPoint} from './util.get-selection-start-point'\n\nexport function sliceTextBlock({\n  context,\n  block,\n}: {\n  context: Pick<EditorContext, 'schema' | 'selection'>\n  block: PortableTextTextBlock\n}): PortableTextTextBlock {\n  const startPoint = getSelectionStartPoint(context.selection)\n  const endPoint = getSelectionEndPoint(context.selection)\n\n  if (!startPoint || !endPoint) {\n    return block\n  }\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (startBlockKey !== endBlockKey || startBlockKey !== block._key) {\n    return block\n  }\n\n  const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n  const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startChildKey || !endChildKey) {\n    return block\n  }\n\n  let startChildFound = false\n  const children: Array<PortableTextChild> = []\n\n  for (const child of block.children) {\n    if (child._key === startChildKey) {\n      startChildFound = true\n\n      if (isSpan(context, child)) {\n        const text =\n          child._key === endChildKey\n            ? child.text.slice(startPoint.offset, endPoint.offset)\n            : child.text.slice(startPoint.offset)\n\n        children.push({\n          ...child,\n          text,\n        })\n      } else {\n        children.push(child)\n      }\n\n      if (startChildKey === endChildKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (child._key === endChildKey) {\n      if (isSpan(context, child)) {\n        children.push({\n          ...child,\n          text: child.text.slice(0, endPoint.offset),\n        })\n      } else {\n        children.push(child)\n      }\n\n      break\n    }\n\n    if (startChildFound) {\n      children.push(child)\n    }\n  }\n\n  return {\n    ...block,\n    children,\n  }\n}\n"],"names":["selectionPointToBlockOffset","context","selectionPoint","blockKey","getBlockKeyFromSelectionPoint","path","length","undefined","_key","offset","childSelectionPointToBlockOffset","sliceTextBlock","block","startPoint","getSelectionStartPoint","selection","endPoint","getSelectionEndPoint","startBlockKey","endBlockKey","startChildKey","getChildKeyFromSelectionPoint","endChildKey","startChildFound","children","child","isSpan","text","slice","push"],"mappings":";;;;;;;;;;;;AASO,SAASA,iCAMhB;UALEC,OAAAA,EACAC,cAAAA,EAIF,EAA4B,CANgB;IAO1C,MAAMC,eAAWC,+NAAAA,EAA8BF,cAAc;IAE7D,OAAIA,eAAeG,IAAAA,CAAKC,MAAAA,KAAW,KAAKH,aAAaI,KAAAA,IAC5C;QACLF,MAAM;YAAC;gBAACG,MAAML;YAAAA,CAAS;SAAA;QACvBM,QAAQP,eAAeO,MAAAA;IAAAA,QAIpBC,uQAAAA,EAAiC;QACtCT;QACAC;IAAAA,CACD;AACH;ACnBO,SAASS,oBAMhB,EAA0B;QANK,EAC7BV,OAAAA,EACAW,KAAAA,EAIF;IACE,MAAMC,iBAAaC,wNAAAA,EAAuBb,QAAQc,SAAS,GACrDC,eAAWC,sNAAAA,EAAqBhB,QAAQc,SAAS;IAEvD,IAAI,CAACF,cAAc,CAACG,UAClB,OAAOJ;IAGT,MAAMM,oBAAgBd,+NAAAA,EAA8BS,UAAU,GACxDM,kBAAcf,+NAAAA,EAA8BY,QAAQ;IAE1D,IAAIE,kBAAkBC,eAAeD,kBAAkBN,MAAMJ,IAAAA,EAC3D,OAAOI;IAGT,MAAMQ,gBAAgBC,mOAAAA,EAA8BR,UAAU,GACxDS,kBAAcD,+NAAAA,EAA8BL,QAAQ;IAE1D,IAAI,CAACI,iBAAiB,CAACE,aACrB,OAAOV;IAGT,IAAIW,kBAAkB,CAAA;IACtB,MAAMC,WAAqC,CAAA,CAAA;IAE3C,KAAA,MAAWC,SAASb,MAAMY,QAAAA,CAAU;QAClC,IAAIC,MAAMjB,IAAAA,KAASY,eAAe;YAGhC,IAFAG,kBAAkB,CAAA,OAEdG,sKAAAA,EAAOzB,SAASwB,KAAK,GAAG;gBAC1B,MAAME,OACJF,MAAMjB,IAAAA,KAASc,cACXG,MAAME,IAAAA,CAAKC,KAAAA,CAAMf,WAAWJ,MAAAA,EAAQO,SAASP,MAAM,IACnDgB,MAAME,IAAAA,CAAKC,KAAAA,CAAMf,WAAWJ,MAAM;gBAExCe,SAASK,IAAAA,CAAK;oBACZ,GAAGJ,KAAAA;oBACHE;gBAAAA,CACD;YACH,OACEH,SAASK,IAAAA,CAAKJ,KAAK;YAGrB,IAAIL,kBAAkBE,aACpB;YAGF;QACF;QAEA,IAAIG,MAAMjB,IAAAA,KAASc,aAAa;YAC1BI,IAAAA,sKAAAA,EAAOzB,SAASwB,KAAK,IACvBD,SAASK,IAAAA,CAAK;gBACZ,GAAGJ,KAAAA;gBACHE,MAAMF,MAAME,IAAAA,CAAKC,KAAAA,CAAM,GAAGZ,SAASP,MAAM;YAAA,CAC1C,IAEDe,SAASK,IAAAA,CAAKJ,KAAK;YAGrB;QACF;QAEIF,mBACFC,SAASK,IAAAA,CAAKJ,KAAK;IAEvB;IAEA,OAAO;QACL,GAAGb,KAAAA;QACHY;IAAAA;AAEJ","debugId":null}},
    {"offset": {"line": 1750, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/index.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor-event-listener.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/debug.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/values.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/slate-utils.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/event-position.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/selection.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/to-slate-range.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/weakMaps.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/editor-actor-context.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/components/drop-indicator.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/components/render-default-object.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/drag-selection.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/priority/priority.types.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/priority/priority.core.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-element.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/components/use-core-block-element-behaviors.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/components/render-block-object.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/components/render-inline-object.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/components/render-text-block.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/components/render-element.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/editor-selector.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/components/render-span.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/components/render-leaf.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/components/render-text.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditor.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/is-hotkey.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/createWithHotKeys.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/move-range-by-operation.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/range-decorations-machine.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/relay-actor-context.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/Editable.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/stop-actor.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/converters/converter.json.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/converters/converter.portable-text.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/converters/converter.text-html.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/converters/converter.text-plain.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/converters/converters.core.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/schema.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/build-index-maps.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/create-placeholder-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/sibling-utils.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/withChanges.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/withUndoRedo.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextMarkModel.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/node_modules/.pnpm/%40sanity%2Bdiff-match-patch%403.2.0/node_modules/%40sanity/diff-match-patch/dist/index.js","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/with-undo-step.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/createWithUndoRedo.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.annotation.add.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.annotation.remove.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.block.set.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.block.unset.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.child.set.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.child.unset.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.decorator.add.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.delete.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert.block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.insert.text.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.backward.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.move.forward.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operation.select.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/operations/behavior.operations.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/with-performing-behavior-operation.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/create-with-event-listeners.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/createWithMaxBlocks.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/createWithObjectKeys.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/applyPatch.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/operation-to-patches.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/withoutPatching.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/createWithPatches.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/createWithPlaceholderBlock.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/createWithSchemaTypes.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/createWithUtils.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/slate-plugin.update-selection.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/portable-text-node.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/apply-operation-to-portable-text.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/slate-plugin.update-value.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/with-plugins.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/create-slate-editor.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/editor-dom.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.core.annotations.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/keyboard-shortcuts/default-keyboard-shortcuts.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-objects.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.core.decorators.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/compound-client-rect.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.core.dnd.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.core.insert-break.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.at-the-beginning-of-block.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.core.lists.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.core.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.annotation.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.decorator.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.delete.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.deserialize.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.insert.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.keyboard.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.list-item.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.move.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.select.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.serialize.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.split.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.style.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.abstract.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.types.event.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.perform-event.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/priority/priority.sort.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/editor-snapshot.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/editor-machine.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/mutation-machine.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/plugins/createWithEditableAPI.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/relay-machine.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/validateValue.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/sync-machine.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/create-editor.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/event-to-change.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/PortableTextEditor.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/editor-provider.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditorSelection.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {EditorEmittedEvent} from './editor/relay-machine'\nimport {useEditor} from './editor/use-editor'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const subscription = editor.on('*', props.on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, props.on])\n\n  return null\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import type {\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: EditorSchema},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].name\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: EditorSchema,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].name &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Element, Node, Range, type Path, type Point} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getBlockPath({\n  editor,\n  _key,\n}: {\n  editor: PortableTextSlateEditor\n  _key: string\n}): [number] | undefined {\n  const [, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => n._key === _key,\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  const blockIndex = blockPath?.at(0)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  return [blockIndex]\n}\n\nexport function getAnchorBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.anchor.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    return (\n      Editor.node(editor, editor.selection.focus.path.slice(0, 1)) ?? [\n        undefined,\n        undefined,\n      ]\n    )\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusSpan({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: PortableTextSpan, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const [focusBlock] = getFocusBlock({editor})\n\n    if (!focusBlock) {\n      return [undefined, undefined]\n    }\n\n    if (!editor.isTextBlock(focusBlock)) {\n      return [undefined, undefined]\n    }\n\n    const [node, path] = Editor.node(\n      editor,\n      editor.selection.focus.path.slice(0, 2),\n    )\n\n    if (editor.isTextSpan(node)) {\n      return [node, path]\n    }\n  } catch {\n    return [undefined, undefined]\n  }\n\n  return [undefined, undefined]\n}\n\nexport function getSelectionStartBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionStartPoint = Range.start(editor.selection)\n\n  return getPointBlock({editor, point: selectionStartPoint})\n}\n\nexport function getSelectionEndBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const selectionEndPoint = Range.end(editor.selection)\n\n  return getPointBlock({editor, point: selectionEndPoint})\n}\n\nexport function getPointBlock({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  try {\n    const [block] = Editor.node(editor, point.path.slice(0, 1)) ?? [\n      undefined,\n      undefined,\n    ]\n    return block ? [block, point.path.slice(0, 1)] : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const focusChild = Node.child(focusBlock, childIndex)\n\n    return focusChild\n      ? [focusChild, [...focusBlockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nfunction getPointChild({\n  editor,\n  point,\n}: {\n  editor: PortableTextSlateEditor\n  point: Point\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [block, blockPath] = getPointBlock({editor, point})\n  const childIndex = point.path.at(1)\n\n  if (!block || !blockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  try {\n    const pointChild = Node.child(block, childIndex)\n\n    return pointChild\n      ? [pointChild, [...blockPath, childIndex]]\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  try {\n    return firstBlockPath !== undefined\n      ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (editor.children.length === 0) {\n    return [undefined, undefined]\n  }\n\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n\n  try {\n    return lastBlockPath !== undefined\n      ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n      : [undefined, undefined]\n  } catch {\n    return [undefined, undefined]\n  }\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n\nexport function slateRangeToSelection({\n  schema,\n  editor,\n  range,\n}: {\n  schema: EditorSchema\n  editor: PortableTextSlateEditor\n  range: Range\n}): EditorSelection {\n  const [anchorBlock] = getPointBlock({\n    editor,\n    point: range.anchor,\n  })\n  const [focusBlock] = getPointBlock({\n    editor,\n    point: range.focus,\n  })\n\n  if (!anchorBlock || !focusBlock) {\n    return null\n  }\n\n  const [anchorChild] =\n    anchorBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.anchor,\n        })\n      : [undefined, undefined]\n  const [focusChild] =\n    focusBlock._type === schema.block.name\n      ? getPointChild({\n          editor,\n          point: range.focus,\n        })\n      : [undefined, undefined]\n\n  const selection: EditorSelection = {\n    anchor: {\n      path: [{_key: anchorBlock._key}],\n      offset: range.anchor.offset,\n    },\n    focus: {\n      path: [{_key: focusBlock._key}],\n      offset: range.focus.offset,\n    },\n    backward: Range.isBackward(range),\n  }\n\n  if (anchorChild) {\n    selection.anchor.path.push('children')\n    selection.anchor.path.push({_key: anchorChild._key})\n  }\n\n  if (focusChild) {\n    selection.focus.path.push('children')\n    selection.focus.path.push({_key: focusChild._key})\n  }\n\n  return selection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {EditorActor} from '../editor/editor-machine'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {\n  getFirstBlock,\n  getLastBlock,\n  getNodeBlock,\n  slateRangeToSelection,\n} from './slate-utils'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  editorActor,\n  slateEditor,\n  event,\n}: {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  if (editorActor.getSnapshot().matches({setup: 'setting up'})) {\n    return undefined\n  }\n\n  const eventNode = getEventNode({slateEditor, event})\n\n  if (!eventNode) {\n    return undefined\n  }\n\n  const eventBlock = getNodeBlock({\n    editor: slateEditor,\n    schema: editorActor.getSnapshot().context.schema,\n    node: eventNode,\n  })\n  const eventPositionBlock = getEventPositionBlock({\n    node: eventNode,\n    slateEditor,\n    event,\n  })\n  const eventSelection = getEventSelection({\n    schema: editorActor.getSnapshot().context.schema,\n    slateEditor,\n    event,\n  })\n\n  if (\n    eventBlock &&\n    eventPositionBlock &&\n    !eventSelection &&\n    !Editor.isEditor(eventNode)\n  ) {\n    // If we for some reason can't find the event selection, then we default to\n    // selecting the entire block that the event originates from.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  if (!eventPositionBlock || !eventSelection) {\n    return undefined\n  }\n\n  const eventSelectionFocusBlockKey = getBlockKeyFromSelectionPoint(\n    eventSelection.focus,\n  )\n\n  if (eventSelectionFocusBlockKey === undefined) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(eventSelection) &&\n    eventBlock &&\n    eventSelectionFocusBlockKey !== eventBlock._key\n  ) {\n    // If the event block and event selection somehow don't match, then the\n    // event block takes precedence.\n    return {\n      block: eventPositionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n        focus: utils.getBlockEndPoint({\n          context: editorActor.getSnapshot().context,\n          block: {\n            node: eventBlock,\n            path: [{_key: eventBlock._key}],\n          },\n        }),\n      },\n    }\n  }\n\n  return {\n    block: eventPositionBlock,\n    isEditor: Editor.isEditor(eventNode),\n    selection: eventSelection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? slateRangeToSelection({\n        schema,\n        editor: slateEditor,\n        range,\n      })\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport type {Path, Range} from 'slate'\nimport type {EditorContext, EditorSnapshot} from '../editor/editor-snapshot'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isEqualSelectionPoints} from '../utils'\nimport {blockOffsetToSpanSelectionPoint} from '../utils/util.block-offset'\n\nexport function toSlateRange(\n  snapshot: {\n    context: Pick<EditorContext, 'schema' | 'value' | 'selection'>\n  } & Pick<EditorSnapshot, 'blockIndexMap'>,\n): Range | null {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (\n    isEqualSelectionPoints(\n      snapshot.context.selection.anchor,\n      snapshot.context.selection.focus,\n    )\n  ) {\n    const anchorPoint = toSlateSelectionPoint(\n      snapshot,\n      snapshot.context.selection.anchor,\n      snapshot.context.selection.backward ? 'forward' : 'backward',\n    )\n\n    if (!anchorPoint) {\n      return null\n    }\n\n    return {\n      anchor: anchorPoint,\n      focus: anchorPoint,\n    }\n  }\n\n  const anchorPoint = toSlateSelectionPoint(\n    snapshot,\n    snapshot.context.selection.anchor,\n    snapshot.context.selection.backward ? 'forward' : 'backward',\n  )\n  const focusPoint = toSlateSelectionPoint(\n    snapshot,\n    snapshot.context.selection.focus,\n    snapshot.context.selection.backward ? 'backward' : 'forward',\n  )\n\n  if (!anchorPoint || !focusPoint) {\n    return null\n  }\n\n  return {\n    anchor: anchorPoint,\n    focus: focusPoint,\n  }\n}\n\nfunction toSlateSelectionPoint(\n  snapshot: {\n    context: Pick<EditorContext, 'schema' | 'value'>\n  } & Pick<EditorSnapshot, 'blockIndexMap'>,\n  selectionPoint: EditorSelectionPoint,\n  direction: 'forward' | 'backward',\n):\n  | {\n      path: Path\n      offset: number\n    }\n  | undefined {\n  const blockKey = getBlockKeyFromSelectionPoint(selectionPoint)\n\n  if (!blockKey) {\n    return undefined\n  }\n\n  const blockIndex = snapshot.blockIndexMap.get(blockKey)\n\n  if (blockIndex === undefined) {\n    return undefined\n  }\n\n  const block = snapshot.context.value.at(blockIndex)\n\n  if (!block) {\n    return undefined\n  }\n\n  if (!isTextBlock(snapshot.context, block)) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  let childKey = getChildKeyFromSelectionPoint({\n    path: selectionPoint.path,\n    offset: 0,\n  })\n\n  // If the block is a text block, but there is no child key in the selection\n  // point path, then we can try to find a span selection point by the offset.\n  const spanSelectionPoint = !childKey\n    ? blockOffsetToSpanSelectionPoint({\n        context: {\n          schema: snapshot.context.schema,\n          value: [block],\n        },\n        blockOffset: {\n          path: [{_key: blockKey}],\n          offset: selectionPoint.offset,\n        },\n        direction,\n      })\n    : undefined\n\n  childKey = spanSelectionPoint\n    ? getChildKeyFromSelectionPoint(spanSelectionPoint)\n    : childKey\n\n  // If we still don't have a child key, then we have to resort to selecting\n  // the first child of the block (which by Slate convention is a span).\n  if (!childKey) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  let offset = spanSelectionPoint?.offset ?? selectionPoint.offset\n  let childPath: Array<number> = []\n  let childIndex = -1\n  let pathChild: PortableTextSpan | PortableTextObject | undefined\n\n  for (const child of block.children) {\n    childIndex++\n    if (child._key === childKey) {\n      pathChild = child\n      if (isSpan(snapshot.context, child)) {\n        childPath = [childIndex]\n      } else {\n        childPath = [childIndex, 0]\n        offset = 0\n      }\n      break\n    }\n  }\n\n  // If we for some unforeseen reason didn't manage to produce a child path,\n  // then we have to resort to selecting the first child of the block (which\n  // by Slate convention is a span).\n  if (childPath.length === 0) {\n    return {\n      path: [blockIndex, 0],\n      offset: 0,\n    }\n  }\n\n  return {\n    path: [blockIndex].concat(childPath),\n    offset: isSpan(snapshot.context, pathChild)\n      ? Math.min(pathChild.text.length, offset)\n      : offset,\n  }\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {PortableTextChild, PortableTextObject} from '@sanity/types'\n\nexport function RenderDefaultBlockObject(props: {\n  blockObject: PortableTextObject\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.blockObject._type}: {props.blockObject._key}]\n    </div>\n  )\n}\n\nexport function RenderDefaultInlineObject(props: {\n  inlineObject: PortableTextObject | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.inlineObject._type}: {props.inlineObject._key}]\n    </span>\n  )\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = selectors.getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n      focus: utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: draggedTextBlock,\n      }),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import {defaultKeyGenerator} from '../editor/key-generator'\n\nexport type EditorPriority = {\n  id: string\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}\n\nexport function createEditorPriority(config?: {\n  name?: string\n  reference?: {\n    priority: EditorPriority\n    importance: 'higher' | 'lower'\n  }\n}): EditorPriority {\n  return {\n    id: defaultKeyGenerator(),\n    name: config?.name,\n    reference: config?.reference,\n  }\n}\n","import {createEditorPriority} from './priority.types'\n\nexport const corePriority = createEditorPriority({name: 'core'})\n","import {getDragSelection} from '../internal-utils/drag-selection'\nimport type {EventPositionBlock} from '../internal-utils/event-position'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport * as selectors from '../selectors'\nimport {forward} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createCoreBlockElementBehaviorsConfig({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  return [\n    {\n      behavior: defineBehavior({\n        on: 'drag.dragover',\n        guard: ({snapshot, event}) => {\n          const dropFocusBlock = selectors.getFocusBlock({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: event.position.selection,\n            },\n          })\n\n          if (!dropFocusBlock || dropFocusBlock.node._key !== key) {\n            return false\n          }\n\n          const dragOrigin = event.dragOrigin\n\n          if (!dragOrigin) {\n            return false\n          }\n\n          const dragSelection = getDragSelection({\n            eventSelection: dragOrigin.selection,\n            snapshot,\n          })\n\n          const draggedBlocks = selectors.getSelectedBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          if (\n            draggedBlocks.some((draggedBlock) => draggedBlock.node._key === key)\n          ) {\n            return false\n          }\n\n          const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n\n          return draggingEntireBlocks\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(event.position.block)\n              },\n            },\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n    {\n      behavior: defineBehavior({\n        on: 'drag.*',\n        guard: ({event}) => {\n          return event.type !== 'drag.dragover'\n        },\n        actions: [\n          ({event}) => [\n            {\n              type: 'effect',\n              effect: () => {\n                onSetDragPositionBlock(undefined)\n              },\n            },\n            forward(event),\n          ],\n        ],\n      }),\n      priority: createEditorPriority({\n        reference: {\n          priority: corePriority,\n          importance: 'lower',\n        },\n      }),\n    },\n  ]\n}\n","import {useContext, useEffect} from 'react'\nimport {createCoreBlockElementBehaviorsConfig} from '../../behaviors/behavior.core.block-element'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {EditorActorContext} from '../editor-actor-context'\n\nexport function useCoreBlockElementBehaviors({\n  key,\n  onSetDragPositionBlock,\n}: {\n  key: string\n  onSetDragPositionBlock: (\n    eventPositionBlock: EventPositionBlock | undefined,\n  ) => void\n}) {\n  const editorActor = useContext(EditorActorContext)\n\n  useEffect(() => {\n    const behaviorConfigs = createCoreBlockElementBehaviorsConfig({\n      key,\n      onSetDragPositionBlock,\n    })\n\n    for (const behaviorConfig of behaviorConfigs) {\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig,\n      })\n    }\n\n    return () => {\n      for (const behaviorConfig of behaviorConfigs) {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig,\n        })\n      }\n    }\n  }, [editorActor, key, onSetDragPositionBlock])\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {\n  useSelected,\n  useSlateSelector,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n} from '../../types/editor'\nimport type {EditorSchema} from '../editor-schema'\nimport {DropIndicator} from './drop-indicator'\nimport {RenderDefaultBlockObject} from './render-default-object'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderBlockObject(props: {\n  attributes: RenderElementProps['attributes']\n  blockObject: PortableTextObject | undefined\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  schema: EditorSchema\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockObjectRef = useRef<HTMLDivElement>(null)\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const legacySchemaType = props.legacySchema.blockObjects.find(\n    (schemaType) => schemaType.name === props.element._type,\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Unable to find Block Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  const blockObject = props.blockObject ?? {\n    _key: props.element._key,\n    _type: props.element._type,\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className=\"pt-block pt-object-block\"\n      data-block-key={props.element._key}\n      data-block-name={props.element._type}\n      data-block-type=\"object\"\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {props.children}\n      <div\n        ref={blockObjectRef}\n        contentEditable={false}\n        draggable={!props.readOnly}\n      >\n        {props.renderBlock && legacySchemaType ? (\n          <props.renderBlock\n            editorElementRef={blockObjectRef}\n            focused={focused}\n            path={[{_key: props.element._key}]}\n            schemaType={legacySchemaType}\n            selected={selected}\n            type={legacySchemaType}\n            value={blockObject}\n          >\n            <RenderDefaultBlockObject blockObject={blockObject} />\n          </props.renderBlock>\n        ) : (\n          <RenderDefaultBlockObject blockObject={blockObject} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import {useRef, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {\n  useSelected,\n  useSlateSelector,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {getPointBlock} from '../../internal-utils/slate-utils'\nimport type {\n  PortableTextMemberSchemaTypes,\n  RenderChildFunction,\n} from '../../types/editor'\nimport type {EditorSchema} from '../editor-schema'\nimport {RenderDefaultInlineObject} from './render-default-object'\n\nexport function RenderInlineObject(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderChild?: RenderChildFunction\n  schema: EditorSchema\n}) {\n  const inlineObjectRef = useRef<HTMLElement>(null)\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  const legacySchemaType = props.legacySchema.inlineObjects.find(\n    (inlineObject) => inlineObject.name === props.element._type,\n  )\n\n  if (!legacySchemaType) {\n    console.error(\n      `Unable to find Inline Object \"${props.element._type}\" in Schema`,\n    )\n  }\n\n  const path = DOMEditor.findPath(slateEditor, props.element)\n  const [block] = getPointBlock({\n    editor: slateEditor,\n    point: {\n      path,\n      offset: 0,\n    },\n  })\n\n  if (!block) {\n    console.error(\n      `Unable to find parent block of inline object ${props.element._key}`,\n    )\n  }\n\n  const inlineObject = {\n    _key: props.element._key,\n    _type: props.element._type,\n    ...('value' in props.element && typeof props.element.value === 'object'\n      ? props.element.value\n      : {}),\n  }\n\n  return (\n    <span\n      {...props.attributes}\n      draggable={!props.readOnly}\n      className=\"pt-inline-object\"\n      data-child-key={inlineObject._key}\n      data-child-name={inlineObject._type}\n      data-child-type=\"object\"\n    >\n      {props.children}\n      <span ref={inlineObjectRef} style={{display: 'inline-block'}}>\n        {props.renderChild && block && legacySchemaType ? (\n          <props.renderChild\n            annotations={[]}\n            editorElementRef={inlineObjectRef}\n            selected={selected}\n            focused={focused}\n            path={[{_key: block._key}, 'children', {_key: props.element._key}]}\n            schemaType={legacySchemaType}\n            value={inlineObject}\n            type={legacySchemaType}\n          >\n            <RenderDefaultInlineObject inlineObject={inlineObject} />\n          </props.renderChild>\n        ) : (\n          <RenderDefaultInlineObject inlineObject={inlineObject} />\n        )}\n      </span>\n    </span>\n  )\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {useRef, useState, type ReactElement} from 'react'\nimport {Range, type Element as SlateElement} from 'slate'\nimport {\n  useSelected,\n  useSlateSelector,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport type {\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {DropIndicator} from './drop-indicator'\nimport {useCoreBlockElementBehaviors} from './use-core-block-element-behaviors'\n\nexport function RenderTextBlock(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  legacySchema: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n  textBlock: PortableTextTextBlock\n}) {\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n  const blockRef = useRef<HTMLDivElement>(null)\n\n  const selected = useSelected()\n  const focused = useSlateSelector(\n    (editor) =>\n      selected &&\n      editor.selection !== null &&\n      Range.isCollapsed(editor.selection),\n  )\n\n  useCoreBlockElementBehaviors({\n    key: props.element._key,\n    onSetDragPositionBlock: setDragPositionBlock,\n  })\n\n  const listIndex = useSlateSelector((editor) =>\n    editor.listIndexMap.get(props.textBlock._key),\n  )\n\n  let children = props.children\n\n  if (props.renderStyle && props.textBlock.style) {\n    const legacyStyleSchemaType =\n      props.textBlock.style !== undefined\n        ? props.legacySchema.styles.find(\n            (style) => style.value === props.textBlock.style,\n          )\n        : undefined\n\n    if (legacyStyleSchemaType) {\n      children = (\n        <props.renderStyle\n          block={props.textBlock}\n          editorElementRef={blockRef}\n          focused={focused}\n          path={[{_key: props.textBlock._key}]}\n          schemaType={legacyStyleSchemaType}\n          selected={selected}\n          value={props.textBlock.style}\n        >\n          {children}\n        </props.renderStyle>\n      )\n    } else {\n      console.error(\n        `Unable to find Schema type for text block style ${props.textBlock.style}`,\n      )\n    }\n  }\n\n  if (props.renderListItem && props.textBlock.listItem) {\n    const legacyListItemSchemaType = props.legacySchema.lists.find(\n      (list) => list.value === props.textBlock.listItem,\n    )\n\n    if (legacyListItemSchemaType) {\n      children = (\n        <props.renderListItem\n          block={props.textBlock}\n          editorElementRef={blockRef}\n          focused={focused}\n          level={props.textBlock.level ?? 1}\n          path={[{_key: props.textBlock._key}]}\n          selected={selected}\n          value={props.textBlock.listItem}\n          schemaType={legacyListItemSchemaType}\n        >\n          {children}\n        </props.renderListItem>\n      )\n    } else {\n      console.error(\n        `Unable to find Schema type for text block list item ${props.textBlock.listItem}`,\n      )\n    }\n  }\n\n  return (\n    <div\n      {...props.attributes}\n      className={[\n        'pt-block',\n        'pt-text-block',\n        ...(props.textBlock.style\n          ? [`pt-text-block-style-${props.textBlock.style}`]\n          : []),\n        ...(props.textBlock.listItem\n          ? [\n              'pt-list-item',\n              `pt-list-item-${props.textBlock.listItem}`,\n              `pt-list-item-level-${props.textBlock.level ?? 1}`,\n            ]\n          : []),\n      ].join(' ')}\n      spellCheck={props.spellCheck}\n      data-block-key={props.textBlock._key}\n      data-block-name={props.textBlock._type}\n      data-block-type=\"text\"\n      {...(props.textBlock.listItem !== undefined\n        ? {\n            'data-list-item': props.textBlock.listItem,\n          }\n        : {})}\n      {...(props.textBlock.level !== undefined\n        ? {\n            'data-level': props.textBlock.level,\n          }\n        : {})}\n      {...(props.textBlock.style !== undefined\n        ? {\n            'data-style': props.textBlock.style,\n          }\n        : {})}\n      {...(listIndex !== undefined\n        ? {\n            'data-list-index': listIndex,\n          }\n        : {})}\n    >\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      <div ref={blockRef}>\n        {props.renderBlock ? (\n          <props.renderBlock\n            editorElementRef={blockRef}\n            focused={focused}\n            level={props.textBlock.level}\n            listItem={props.textBlock.listItem}\n            path={[{_key: props.textBlock._key}]}\n            selected={selected}\n            schemaType={props.legacySchema.block}\n            style={props.textBlock.style}\n            type={props.legacySchema.block}\n            value={props.textBlock}\n          >\n            {children}\n          </props.renderBlock>\n        ) : (\n          children\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {useSelector} from '@xstate/react'\nimport {useContext, type ReactElement} from 'react'\nimport type {Element as SlateElement} from 'slate'\nimport {useSlateStatic, type RenderElementProps} from 'slate-react'\nimport type {\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderBlockObject} from './render-block-object'\nimport {RenderInlineObject} from './render-inline-object'\nimport {RenderTextBlock} from './render-text-block'\n\nexport function RenderElement(props: {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const slateStatic = useSlateStatic()\n\n  const isInline =\n    '__inline' in props.element && props.element.__inline === true\n\n  if (isInline) {\n    return (\n      <RenderInlineObject\n        attributes={props.attributes}\n        element={props.element}\n        legacySchema={legacySchema}\n        readOnly={props.readOnly}\n        renderChild={props.renderChild}\n        schema={schema}\n      >\n        {props.children}\n      </RenderInlineObject>\n    )\n  }\n\n  const blockIndex = slateStatic.blockIndexMap.get(props.element._key)\n  const block =\n    blockIndex !== undefined ? slateStatic.value.at(blockIndex) : undefined\n\n  if (isTextBlock({schema}, block)) {\n    return (\n      <RenderTextBlock\n        attributes={props.attributes}\n        element={props.element}\n        legacySchema={legacySchema}\n        readOnly={props.readOnly}\n        renderBlock={props.renderBlock}\n        renderListItem={props.renderListItem}\n        renderStyle={props.renderStyle}\n        spellCheck={props.spellCheck}\n        textBlock={block}\n      >\n        {props.children}\n      </RenderTextBlock>\n    )\n  }\n\n  return (\n    <RenderBlockObject\n      attributes={props.attributes}\n      blockObject={block}\n      element={props.element}\n      legacySchema={legacySchema}\n      readOnly={props.readOnly}\n      renderBlock={props.renderBlock}\n      schema={schema}\n    >\n      {props.children}\n    </RenderBlockObject>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {Editor} from '../editor'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    blockIndexMap: slateEditorInstance.blockIndexMap,\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: slateEditorInstance.value,\n    },\n    decoratorState: slateEditorInstance.decoratorState,\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {useSelector} from '@xstate/react'\nimport {uniq} from 'lodash'\nimport {useContext, useMemo, useRef, type ReactElement} from 'react'\nimport {useSlateStatic, type RenderLeafProps} from 'slate-react'\nimport {\n  getFocusSpan,\n  isOverlappingSelection,\n  isSelectionCollapsed,\n} from '../../selectors'\nimport type {\n  EditorSelection,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {getEditorSnapshot} from '../editor-selector'\n\nexport interface RenderSpanProps extends RenderLeafProps {\n  children: ReactElement<any>\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport function RenderSpan(props: RenderSpanProps) {\n  const slateEditor = useSlateStatic()\n  const editorActor = useContext(EditorActorContext)\n  const legacySchema = useSelector(editorActor, (s) =>\n    s.context.getLegacySchema(),\n  )\n  const spanRef = useRef<HTMLElement>(null)\n\n  /**\n   * A span is considered focused if the selection is collapsed and the caret\n   * is inside the span.\n   */\n  const focused = useSelector(editorActor, (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: slateEditor,\n    })\n\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const focusedSpan = getFocusSpan(snapshot)\n\n    if (!focusedSpan) {\n      return false\n    }\n\n    return focusedSpan.node._key === props.leaf._key\n  })\n\n  /**\n   * A span is considered selected if editor selection is overlapping with the\n   * span selection points.\n   */\n  const selected = useSelector(editorActor, (editorActorSnapshot) => {\n    const snapshot = getEditorSnapshot({\n      editorActorSnapshot,\n      slateEditorInstance: slateEditor,\n    })\n\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const parent = props.children.props.parent\n    const block =\n      parent && isTextBlock(snapshot.context, parent) ? parent : undefined\n    const spanSelection: EditorSelection = block\n      ? {\n          anchor: {\n            path: [{_key: block._key}, 'children', {_key: props.leaf._key}],\n            offset: 0,\n          },\n          focus: {\n            path: [{_key: block._key}, 'children', {_key: props.leaf._key}],\n            offset: props.leaf.text.length,\n          },\n        }\n      : null\n\n    return isOverlappingSelection(spanSelection)(snapshot)\n  })\n\n  const parent = props.children.props.parent\n  const block = parent && slateEditor.isTextBlock(parent) ? parent : undefined\n\n  const path = useMemo(\n    () =>\n      block\n        ? [{_key: block._key}, 'children', {_key: props.leaf._key}]\n        : undefined,\n    [block, props.leaf._key],\n  )\n\n  const decoratorSchemaTypes = editorActor\n    .getSnapshot()\n    .context.schema.decorators.map((decorator) => decorator.name)\n\n  const decorators = uniq(\n    (props.leaf.marks ?? []).filter((mark) =>\n      decoratorSchemaTypes.includes(mark),\n    ),\n  )\n\n  const annotationMarkDefs = (props.leaf.marks ?? []).flatMap((mark) => {\n    if (decoratorSchemaTypes.includes(mark)) {\n      return []\n    }\n\n    const markDef = block?.markDefs?.find((markDef) => markDef._key === mark)\n\n    if (markDef) {\n      return [markDef]\n    }\n\n    return []\n  })\n\n  let children = props.children\n\n  /**\n   * Support `renderDecorator` render function for each Decorator\n   */\n  for (const mark of decorators) {\n    const legacyDecoratorSchemaType = legacySchema.decorators.find(\n      (dec) => dec.value === mark,\n    )\n\n    if (path && legacyDecoratorSchemaType && props.renderDecorator) {\n      children = (\n        <props.renderDecorator\n          editorElementRef={spanRef}\n          focused={focused}\n          path={path}\n          selected={selected}\n          schemaType={legacyDecoratorSchemaType}\n          value={mark}\n          type={legacyDecoratorSchemaType}\n        >\n          {children}\n        </props.renderDecorator>\n      )\n    }\n  }\n\n  /**\n   * Support `renderAnnotation` render function for each Annotation\n   */\n  for (const annotationMarkDef of annotationMarkDefs) {\n    const legacyAnnotationSchemaType = legacySchema.annotations.find(\n      (t) => t.name === annotationMarkDef._type,\n    )\n    if (legacyAnnotationSchemaType) {\n      if (block && path && props.renderAnnotation) {\n        children = (\n          <span ref={spanRef}>\n            <props.renderAnnotation\n              block={block}\n              editorElementRef={spanRef}\n              focused={focused}\n              path={path}\n              selected={selected}\n              schemaType={legacyAnnotationSchemaType}\n              value={annotationMarkDef}\n              type={legacyAnnotationSchemaType}\n            >\n              {children}\n            </props.renderAnnotation>\n          </span>\n        )\n      } else {\n        children = <span ref={spanRef}>{children}</span>\n      }\n    }\n  }\n\n  /**\n   * Support `renderChild` render function for the Span itself\n   */\n  if (block && path && props.renderChild) {\n    const child = block.children.find(\n      (_child) => _child._key === props.leaf._key,\n    ) // Ensure object equality\n\n    if (child) {\n      children = (\n        <props.renderChild\n          annotations={annotationMarkDefs}\n          editorElementRef={spanRef}\n          focused={focused}\n          path={path}\n          schemaType={legacySchema.span}\n          selected={selected}\n          value={child}\n          type={legacySchema.span}\n        >\n          {children}\n        </props.renderChild>\n      )\n    }\n  }\n\n  return (\n    <span {...props.attributes} ref={spanRef}>\n      {children}\n    </span>\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport {useContext, type CSSProperties} from 'react'\nimport type {Text} from 'slate'\nimport type {RenderLeafProps} from 'slate-react'\nimport type {\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderPlaceholderFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {RenderSpan} from './render-span'\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\nexport function RenderLeaf(\n  props: RenderLeafProps & {\n    leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n    readOnly: boolean\n    renderAnnotation?: RenderAnnotationFunction\n    renderChild?: RenderChildFunction\n    renderDecorator?: RenderDecoratorFunction\n    renderPlaceholder?: RenderPlaceholderFunction\n  },\n) {\n  const editorActor = useContext(EditorActorContext)\n  const schema = useSelector(editorActor, (s) => s.context.schema)\n\n  if (props.leaf._type !== schema.span.name) {\n    return props.children\n  }\n\n  let renderedSpan = <RenderSpan {...props} />\n\n  if (\n    props.renderPlaceholder &&\n    props.leaf.placeholder &&\n    props.text.text === ''\n  ) {\n    return (\n      <>\n        <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n          {props.renderPlaceholder()}\n        </span>\n        {renderedSpan}\n      </>\n    )\n  }\n\n  const rangeDecoration = props.leaf.rangeDecoration\n\n  if (rangeDecoration) {\n    renderedSpan = rangeDecoration.component({children: renderedSpan})\n  }\n\n  return renderedSpan\n}\n","import type {Editable} from 'slate-react'\n\nexport type RenderTextProps = Parameters<\n  NonNullable<React.ComponentProps<typeof Editable>['renderText']>\n>[0]\n\nexport function RenderText(props: RenderTextProps) {\n  return (\n    <span\n      {...props.attributes}\n      data-child-key={props.text._key}\n      data-child-name={props.text._type}\n      data-child-type=\"span\"\n    >\n      {props.children}\n    </span>\n  )\n}\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nexport const IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import {Point, type Operation, type Range} from 'slate'\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import {isEqual} from 'lodash'\nimport {\n  Element,\n  Path,\n  Range,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n} from 'slate'\nimport {\n  and,\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {moveRangeByOperation} from '../internal-utils/move-range-by-operation'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {isEqualToEmptyEditor} from '../internal-utils/values'\nimport type {PortableTextSlateEditor, RangeDecoration} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\nconst slateOperationCallback: CallbackLogicFunction<\n  AnyEventObject,\n  {type: 'slate operation'; operation: Operation},\n  {slateEditor: PortableTextSlateEditor}\n> = ({input, sendBack}) => {\n  const originalApply = input.slateEditor.apply\n\n  input.slateEditor.apply = (op) => {\n    if (op.type !== 'set_selection') {\n      sendBack({type: 'slate operation', operation: op})\n    }\n\n    originalApply(op)\n  }\n\n  return () => {\n    input.slateEditor.apply = originalApply\n  }\n}\n\nexport type DecoratedRange = BaseRange & {rangeDecoration: RangeDecoration}\n\nexport const rangeDecorationsMachine = setup({\n  types: {\n    context: {} as {\n      pendingRangeDecorations: Array<RangeDecoration>\n      skipSetup: boolean\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n      decorate: {fn: (nodeEntry: NodeEntry) => Array<BaseRange>}\n    },\n    input: {} as {\n      rangeDecorations: Array<RangeDecoration>\n      readOnly: boolean\n      schema: EditorSchema\n      skipSetup: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'ready'\n        }\n      | {\n          type: 'range decorations updated'\n          rangeDecorations: Array<RangeDecoration>\n        }\n      | {\n          type: 'slate operation'\n          operation: Operation\n        }\n      | {\n          type: 'update read only'\n          readOnly: boolean\n        },\n  },\n  actions: {\n    'update pending range decorations': assign({\n      pendingRangeDecorations: ({context, event}) => {\n        if (event.type !== 'range decorations updated') {\n          return context.pendingRangeDecorations\n        }\n\n        return event.rangeDecorations\n      },\n    }),\n    'set up initial range decorations': ({context}) => {\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const rangeDecoration of context.pendingRangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange,\n        })\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n    'update range decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return\n      }\n\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const rangeDecoration of event.rangeDecorations) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        rangeDecorationState.push({\n          rangeDecoration,\n          ...slateRange,\n        })\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n\n    'move range decorations': ({context, event}) => {\n      if (event.type !== 'slate operation') {\n        return\n      }\n\n      const rangeDecorationState: Array<DecoratedRange> = []\n\n      for (const decoratedRange of context.slateEditor.decoratedRanges) {\n        const slateRange = toSlateRange({\n          context: {\n            schema: context.schema,\n            value: context.slateEditor.value,\n            selection: decoratedRange.rangeDecoration.selection,\n          },\n          blockIndexMap: context.slateEditor.blockIndexMap,\n        })\n\n        if (!Range.isRange(slateRange)) {\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: null,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: 'local',\n          })\n          continue\n        }\n\n        let newRange: BaseRange | null | undefined\n\n        newRange = moveRangeByOperation(slateRange, event.operation)\n        if (\n          (newRange && newRange !== slateRange) ||\n          (newRange === null && slateRange)\n        ) {\n          const newRangeSelection = newRange\n            ? slateRangeToSelection({\n                schema: context.schema,\n                editor: context.slateEditor,\n                range: newRange,\n              })\n            : null\n\n          decoratedRange.rangeDecoration.onMoved?.({\n            newSelection: newRangeSelection,\n            rangeDecoration: decoratedRange.rangeDecoration,\n            origin: 'local',\n          })\n        }\n\n        // If the newRange is null, it means that the range is not valid anymore and should be removed\n        // If it's undefined, it means that the slateRange is still valid and should be kept\n        if (newRange !== null) {\n          rangeDecorationState.push({\n            ...(newRange || slateRange),\n            rangeDecoration: {\n              ...decoratedRange.rangeDecoration,\n              selection: slateRangeToSelection({\n                schema: context.schema,\n                editor: context.slateEditor,\n                range: newRange,\n              }),\n            },\n          })\n        }\n      }\n\n      context.slateEditor.decoratedRanges = rangeDecorationState\n    },\n    'assign readOnly': assign({\n      readOnly: ({context, event}) => {\n        if (event.type !== 'update read only') {\n          return context.readOnly\n        }\n\n        return event.readOnly\n      },\n    }),\n    'update decorate': assign({\n      decorate: ({context}) => {\n        return {\n          fn: createDecorate(context.schema, context.slateEditor),\n        }\n      },\n    }),\n  },\n  actors: {\n    'slate operation listener': fromCallback(slateOperationCallback),\n  },\n  guards: {\n    'has pending range decorations': ({context}) =>\n      context.pendingRangeDecorations.length > 0,\n    'has range decorations': ({context}) =>\n      context.slateEditor.decoratedRanges.length > 0,\n    'has different decorations': ({context, event}) => {\n      if (event.type !== 'range decorations updated') {\n        return false\n      }\n\n      const existingRangeDecorations = context.slateEditor.decoratedRanges.map(\n        (decoratedRange) => ({\n          anchor: decoratedRange.rangeDecoration.selection?.anchor,\n          focus: decoratedRange.rangeDecoration.selection?.focus,\n          payload: decoratedRange.rangeDecoration.payload,\n        }),\n      )\n\n      const newRangeDecorations = event.rangeDecorations.map(\n        (rangeDecoration) => ({\n          anchor: rangeDecoration.selection?.anchor,\n          focus: rangeDecoration.selection?.focus,\n          payload: rangeDecoration.payload,\n        }),\n      )\n\n      const different = !isEqual(existingRangeDecorations, newRangeDecorations)\n\n      return different\n    },\n    'not read only': ({context}) => !context.readOnly,\n    'should skip setup': ({context}) => context.skipSetup,\n  },\n}).createMachine({\n  id: 'range decorations',\n  context: ({input}) => ({\n    readOnly: input.readOnly,\n    pendingRangeDecorations: input.rangeDecorations,\n    decoratedRanges: [],\n    skipSetup: input.skipSetup,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n    decorate: {fn: createDecorate(input.schema, input.slateEditor)},\n  }),\n  invoke: {\n    src: 'slate operation listener',\n    input: ({context}) => ({slateEditor: context.slateEditor}),\n  },\n  on: {\n    'update read only': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'setting up',\n  states: {\n    'setting up': {\n      always: [\n        {\n          guard: and(['should skip setup', 'has pending range decorations']),\n          target: 'ready',\n          actions: ['set up initial range decorations', 'update decorate'],\n        },\n        {\n          guard: 'should skip setup',\n          target: 'ready',\n        },\n      ],\n      on: {\n        'range decorations updated': {\n          actions: ['update pending range decorations'],\n        },\n        'ready': [\n          {\n            target: 'ready',\n            guard: 'has pending range decorations',\n            actions: ['set up initial range decorations', 'update decorate'],\n          },\n          {\n            target: 'ready',\n          },\n        ],\n      },\n    },\n    'ready': {\n      initial: 'idle',\n      on: {\n        'range decorations updated': {\n          target: '.idle',\n          guard: 'has different decorations',\n          actions: ['update range decorations', 'update decorate'],\n        },\n      },\n      states: {\n        'idle': {\n          on: {\n            'slate operation': {\n              target: 'moving range decorations',\n              guard: and(['has range decorations', 'not read only']),\n            },\n          },\n        },\n        'moving range decorations': {\n          entry: ['move range decorations'],\n          always: {\n            target: 'idle',\n          },\n        },\n      },\n    },\n  },\n})\n\nfunction createDecorate(\n  schema: EditorSchema,\n  slateEditor: PortableTextSlateEditor,\n) {\n  return function decorate([node, path]: NodeEntry): Array<BaseRange> {\n    if (isEqualToEmptyEditor(slateEditor.children, schema)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        } as BaseRange,\n      ]\n    }\n\n    // Editor node has a path length of 0 (should never be decorated)\n    if (path.length === 0) {\n      return []\n    }\n\n    if (!Element.isElement(node) || node.children.length === 0) {\n      return []\n    }\n\n    const blockIndex = path.at(0)\n\n    if (blockIndex === undefined) {\n      return []\n    }\n\n    return slateEditor.decoratedRanges.filter((decoratedRange) => {\n      // Special case in order to only return one decoration for collapsed ranges\n      if (Range.isCollapsed(decoratedRange)) {\n        // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n        return node.children.some(\n          (_, childIndex) =>\n            Path.equals(decoratedRange.anchor.path, [blockIndex, childIndex]) &&\n            Path.equals(decoratedRange.focus.path, [blockIndex, childIndex]),\n        )\n      }\n\n      return (\n        Range.intersection(decoratedRange, {\n          anchor: {path, offset: 0},\n          focus: {path, offset: 0},\n        }) || Range.includes(decoratedRange, path)\n      )\n    })\n  }\n}\n","import {createContext} from 'react'\nimport type {RelayActor} from './relay-machine'\n\nexport const RelayActorContext = createContext<RelayActor>({} as RelayActor)\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n  type ClipboardEvent,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {Editor, Transforms, type Text} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {RenderElement} from './components/render-element'\nimport {RenderLeaf} from './components/render-leaf'\nimport {RenderText, type RenderTextProps} from './components/render-text'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {rangeDecorationsMachine} from './range-decorations-machine'\nimport {RelayActorContext} from './relay-actor-context'\n\nconst debug = debugWithName('component:Editable')\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  ref?: React.Ref<HTMLDivElement>\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n\n  const editorActor = useContext(EditorActorContext)\n  const relayActor = useContext(RelayActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const slateEditor = useSlate()\n\n  const rangeDecorationsActor = useActorRef(rangeDecorationsMachine, {\n    input: {\n      rangeDecorations: rangeDecorations ?? [],\n      readOnly,\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n      skipSetup: !editorActor.getSnapshot().matches({setup: 'setting up'}),\n    },\n  })\n  const decorate = useSelector(\n    rangeDecorationsActor,\n    (s) => s.context.decorate?.fn,\n  )\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'update read only',\n      readOnly,\n    })\n  }, [rangeDecorationsActor, readOnly])\n\n  useEffect(() => {\n    rangeDecorationsActor.send({\n      type: 'range decorations updated',\n      rangeDecorations: rangeDecorations ?? [],\n    })\n  }, [rangeDecorationsActor, rangeDecorations])\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <RenderElement\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      leafProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => (\n      <RenderLeaf\n        {...leafProps}\n        readOnly={readOnly}\n        renderAnnotation={renderAnnotation}\n        renderChild={renderChild}\n        renderDecorator={renderDecorator}\n        renderPlaceholder={renderPlaceholder}\n      />\n    ),\n    [\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ],\n  )\n\n  const renderText = useCallback(\n    (props: RenderTextProps) => <RenderText {...props} />,\n    [],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(\n          slateEditor.children,\n          editorActor.getSnapshot().context.schema.block.name,\n        ),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: slateEditor.value,\n            selection: normalizedSelection,\n          },\n          blockIndexMap: slateEditor.blockIndexMap,\n        })\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'update selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [editorActor, propsSelection, slateEditor])\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      rangeDecorationsActor.send({\n        type: 'ready',\n      })\n\n      restoreSelectionFromProps()\n    })\n\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [rangeDecorationsActor, editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = slateEditor.selection\n          ? slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor: slateEditor,\n              range: slateEditor.selection,\n            })\n          : undefined\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = fromSlateValue(\n        slateEditor.children,\n        editorActor.getSnapshot().context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )\n      const ptRange = slateEditor.selection\n        ? slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor: slateEditor,\n            range: slateEditor.selection,\n          })\n        : null\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({\n        event,\n        value,\n        path,\n        schemaTypes: portableTextEditor.schemaTypes,\n      })\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        relayActor.send({type: 'loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      validateFields: false,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            relayActor.send({type: 'done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, relayActor, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n\n      if (!event.isDefaultPrevented()) {\n        relayActor.send({type: 'focused', event})\n\n        if (\n          !slateEditor.selection &&\n          isEqualToEmptyEditor(\n            slateEditor.children,\n            editorActor.getSnapshot().context.schema,\n          )\n        ) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n      }\n    },\n    [editorActor, onFocus, relayActor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (position) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'mouse.click',\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        relayActor.send({type: 'blurred', event})\n      }\n    },\n    [relayActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: position,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            clientX: event.clientX,\n            clientY: event.clientY,\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          dragOrigin: editorActor.getSnapshot().context.internalDrag?.origin,\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        editorActor,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  const callbackRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      if (typeof forwardedRef === 'function') {\n        forwardedRef(node)\n      } else if (forwardedRef) {\n        forwardedRef.current = node\n      }\n\n      if (node) {\n        // Observe mutations (child list and subtree) to this component's DOM,\n        // and make sure the editor selection is valid when that happens.\n        const mutationObserver = new MutationObserver(() => {\n          validateSelection(slateEditor, node)\n        })\n\n        mutationObserver.observe(node, {\n          attributeOldValue: false,\n          attributes: false,\n          characterData: false,\n          childList: true,\n          subtree: true,\n        })\n\n        return () => {\n          mutationObserver.disconnect()\n        }\n      }\n    },\n    [forwardedRef, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      ref={callbackRef}\n      data-read-only={readOnly}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      renderText={renderText}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n\n// This function will handle unexpected DOM changes inside the Editable rendering,\n// and make sure that we can maintain a stable slateEditor.selection when that happens.\n//\n// For example, if this Editable is rendered inside something that might re-render\n// this component (hidden contexts) while the user is still actively changing the\n// contentEditable, this could interfere with the intermediate DOM selection,\n// which again could be picked up by ReactEditor's event listeners.\n// If that range is invalid at that point, the slate.editorSelection could be\n// set either wrong, or invalid, to which slateEditor will throw exceptions\n// that are impossible to recover properly from or result in a wrong selection.\n//\n// Also the other way around, when the ReactEditor will try to create a DOM Range\n// from the current slateEditor.selection, it may throw unrecoverable errors\n// if the current editor.selection is invalid according to the DOM.\n// If this is the case, default to selecting the top of the document, if the\n// user already had a selection.\nfunction validateSelection(slateEditor: Editor, activeElement: HTMLDivElement) {\n  if (!slateEditor.selection) {\n    return\n  }\n\n  let root: Document | ShadowRoot | undefined\n\n  try {\n    root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n  } catch {}\n\n  if (!root) {\n    // The editor has most likely been unmounted\n    return\n  }\n\n  // Return if the editor isn't the active element\n  if (activeElement !== root.activeElement) {\n    return\n  }\n  const window = ReactEditor.getWindow(slateEditor)\n  const domSelection = window.getSelection()\n  if (!domSelection || domSelection.rangeCount === 0) {\n    return\n  }\n  const existingDOMRange = domSelection.getRangeAt(0)\n  try {\n    const newDOMRange = ReactEditor.toDOMRange(\n      slateEditor,\n      slateEditor.selection,\n    )\n    if (\n      newDOMRange.startOffset !== existingDOMRange.startOffset ||\n      newDOMRange.endOffset !== existingDOMRange.endOffset\n    ) {\n      debug('DOM range out of sync, validating selection')\n      // Remove all ranges temporary\n      domSelection?.removeAllRanges()\n      // Set the correct range\n      domSelection.addRange(newDOMRange)\n    }\n  } catch {\n    debug(`Could not resolve selection, selecting top document`)\n    // Deselect the editor\n    Transforms.deselect(slateEditor)\n    // Select top document if there is a top block to select\n    if (slateEditor.children.length > 0) {\n      Transforms.select(slateEditor, [0, 0])\n    }\n    slateEditor.onChange()\n  }\n}\n","/**\n * Copy/pasted from https://github.com/statelyai/xstate/blob/main/packages/xstate-react/src/stopRootWithRehydration.ts\n * and renamed to `stopActor`\n */\n\nimport type {AnyActorRef, Snapshot} from 'xstate'\n\nconst forEachActor = (\n  actorRef: AnyActorRef,\n  callback: (ref: AnyActorRef) => void,\n) => {\n  callback(actorRef)\n  const children = actorRef.getSnapshot().children\n  if (children) {\n    Object.values(children).forEach((child) => {\n      forEachActor(child as AnyActorRef, callback)\n    })\n  }\n}\n\nexport function stopActor(actorRef: AnyActorRef) {\n  // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n  // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n  // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n  // it also just allows us to end up with a somewhat more predictable behavior for the users\n  const persistedSnapshots: Array<[AnyActorRef, Snapshot<unknown>]> = []\n  forEachActor(actorRef, (ref) => {\n    persistedSnapshots.push([ref, ref.getSnapshot()])\n    // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n    // React reconnects its subscribers (from the useSyncExternalStore) on its own\n    // and userland subscibers should basically always do the same anyway\n    // as each subscription should have its own cleanup logic and that should be called each such reconnect\n    ;(ref as any).observers = new Set()\n  })\n  const systemSnapshot = actorRef.system.getSnapshot?.()\n\n  actorRef.stop()\n  ;(actorRef.system as any)._snapshot = systemSnapshot\n  persistedSnapshots.forEach(([ref, snapshot]) => {\n    ;(ref as any)._processingStatus = 0\n    ;(ref as any)._snapshot = snapshot\n  })\n}\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection = snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = selectors.getSelectedValue(snapshot)\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          validateFields: false,\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextHtml(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/html',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = selectors.getSelectedValue(snapshot)\n\n      const html = toHTML(blocks, {\n        onMissingComponent: false,\n        components: {\n          unknownType: ({children}) =>\n            children !== undefined ? `${children}` : '',\n        },\n      })\n\n      if (html === '') {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n          reason: 'Serialized HTML is empty',\n        }\n      }\n\n      return {\n        type: 'serialization.success',\n        data: html,\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const blocks = htmlToBlocks(event.data, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          legacySchema.block.options.unstable_whitespaceOnPasteMode,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            validateFields: false,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/html',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/html',\n      }\n    },\n  })\n}\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {defineConverter} from './converter.types'\n\nexport function createConverterTextPlain(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return defineConverter({\n    mimeType: 'text/plain',\n    serialize: ({snapshot, event}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection) {\n        return {\n          type: 'serialization.failure',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n          reason: 'No selection',\n        }\n      }\n\n      const blocks = selectors.getSelectedValue(snapshot)\n\n      const data = blocks\n        .map((block) => {\n          if (isTextBlock(snapshot.context, block)) {\n            return block.children\n              .map((child) => {\n                if (child._type === snapshot.context.schema.span.name) {\n                  return child.text\n                }\n\n                return event.originEvent === 'drag.dragstart'\n                  ? `[${\n                      snapshot.context.schema.inlineObjects.find(\n                        (inlineObjectType) =>\n                          inlineObjectType.name === child._type,\n                      )?.title ?? 'Object'\n                    }]`\n                  : ''\n              })\n              .join('')\n          }\n\n          return event.originEvent === 'drag.dragstart'\n            ? `[${\n                snapshot.context.schema.blockObjects.find(\n                  (blockObjectType) => blockObjectType.name === block._type,\n                )?.title ?? 'Object'\n              }]`\n            : ''\n        })\n        .filter((block) => block !== '')\n        .join('\\n\\n')\n\n      return {\n        type: 'serialization.success',\n        data,\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n      }\n    },\n    deserialize: ({snapshot, event}) => {\n      const html = escapeHtml(event.data)\n        .split(/\\n{2,}/)\n        .map((line) =>\n          line\n            ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n            : '<p></p>',\n        )\n        .join('')\n\n      const textToHtml = `<html><body>${html}</body></html>`\n\n      const blocks = htmlToBlocks(textToHtml, legacySchema.portableText, {\n        keyGenerator: snapshot.context.keyGenerator,\n      }) as Array<PortableTextBlock>\n\n      const parsedBlocks = blocks.flatMap((block) => {\n        const parsedBlock = parseBlock({\n          context: snapshot.context,\n          block,\n          options: {\n            validateFields: false,\n          },\n        })\n        return parsedBlock ? [parsedBlock] : []\n      })\n\n      if (parsedBlocks.length === 0) {\n        return {\n          type: 'deserialization.failure',\n          mimeType: 'text/plain',\n          reason: 'No blocks deserialized',\n        }\n      }\n\n      return {\n        type: 'deserialization.success',\n        data: parsedBlocks,\n        mimeType: 'text/plain',\n      }\n    },\n  })\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {createConverterTextHtml} from './converter.text-html'\nimport {createConverterTextPlain} from './converter.text-plain'\n\nexport function createCoreConverters(\n  legacySchema: PortableTextMemberSchemaTypes,\n) {\n  return [\n    converterJson,\n    converterPortableText,\n    createConverterTextHtml(legacySchema),\n    createConverterTextPlain(legacySchema),\n  ]\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\n\n// Maps for each list type, keeping track of the current list count for each\n// level.\nconst levelIndexMaps = new Map<string, Map<number, number>>()\n\n/**\n * Mutates the maps in place.\n */\nexport function buildIndexMaps(\n  context: Pick<EditorContext, 'schema' | 'value'>,\n  {\n    blockIndexMap,\n    listIndexMap,\n  }: {\n    blockIndexMap: Map<string, number>\n    listIndexMap: Map<string, number>\n  },\n): void {\n  blockIndexMap.clear()\n  listIndexMap.clear()\n  levelIndexMaps.clear()\n\n  let previousListItem:\n    | {\n        listItem: string\n        level: number\n      }\n    | undefined\n\n  for (let blockIndex = 0; blockIndex < context.value.length; blockIndex++) {\n    const block = context.value.at(blockIndex)\n\n    if (block === undefined) {\n      continue\n    }\n\n    blockIndexMap.set(block._key, blockIndex)\n\n    // Clear the state if we encounter a non-text block\n    if (!isTextBlock(context, block)) {\n      levelIndexMaps.clear()\n      previousListItem = undefined\n\n      continue\n    }\n\n    // Clear the state if we encounter a non-list text block\n    if (block.listItem === undefined || block.level === undefined) {\n      levelIndexMaps.clear()\n      previousListItem = undefined\n\n      continue\n    }\n\n    // If we encounter a new list item, we set the initial index to 1 for the\n    // list type on that level.\n    if (!previousListItem) {\n      const listIndex = 1\n      const levelIndexMap =\n        levelIndexMaps.get(block.listItem) ?? new Map<number, number>()\n      levelIndexMap.set(block.level, listIndex)\n      levelIndexMaps.set(block.listItem, levelIndexMap)\n\n      listIndexMap.set(block._key, listIndex)\n\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n\n      continue\n    }\n\n    // If the previous list item is of the same type but on a lower level, we\n    // need to reset the level index map for that type.\n    if (\n      previousListItem.listItem === block.listItem &&\n      previousListItem.level < block.level\n    ) {\n      const listIndex = 1\n      const levelIndexMap =\n        levelIndexMaps.get(block.listItem) ?? new Map<number, number>()\n      levelIndexMap.set(block.level, listIndex)\n      levelIndexMaps.set(block.listItem, levelIndexMap)\n\n      listIndexMap.set(block._key, listIndex)\n\n      previousListItem = {\n        listItem: block.listItem,\n        level: block.level,\n      }\n\n      continue\n    }\n\n    // Reset other list types at current level and deeper\n    levelIndexMaps.forEach((levelIndexMap, listItem) => {\n      if (listItem === block.listItem) {\n        return\n      }\n\n      // Reset all levels that are >= current level\n      const levelsToDelete: number[] = []\n\n      levelIndexMap.forEach((_, level) => {\n        if (level >= block.level!) {\n          levelsToDelete.push(level)\n        }\n      })\n\n      levelsToDelete.forEach((level) => {\n        levelIndexMap.delete(level)\n      })\n    })\n\n    const levelIndexMap =\n      levelIndexMaps.get(block.listItem) ?? new Map<number, number>()\n    const levelCounter = levelIndexMap.get(block.level) ?? 0\n    levelIndexMap.set(block.level, levelCounter + 1)\n    levelIndexMaps.set(block.listItem, levelIndexMap)\n\n    listIndexMap.set(block._key, levelCounter + 1)\n\n    previousListItem = {\n      listItem: block.listItem,\n      level: block.level,\n    }\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\n\nexport function createPlaceholderBlock(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n) {\n  return {\n    _type: context.schema.block.name,\n    _key: context.keyGenerator(),\n    style: context.schema.styles[0].name ?? 'normal',\n    markDefs: [],\n    children: [\n      {\n        _type: context.schema.span.name,\n        _key: context.keyGenerator(),\n        text: '',\n        marks: [],\n      } as PortableTextSpan,\n    ],\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport {getActiveDecorators} from '../../selectors/selector.get-active-decorators'\nimport {getMarkState} from '../../selectors/selector.get-mark-state'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = editorActor\n      .getSnapshot()\n      .context.schema.decorators.map((t) => t.name)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = editorActor\n          .getSnapshot()\n          .context.schema.decorators.map((decorator) => decorator.name)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = editorActor\n            .getSnapshot()\n            .context.schema.decorators.map((decorator) => decorator.name)\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        if (\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // We only want to clear the decorator state if the caret is visually\n            // moving\n            if (!movedToNextSpan && !movedToPreviousSpan) {\n              editor.decoratorState = {}\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isSpan(editorActor.getSnapshot().context, op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isSpan(editorActor.getSnapshot().context, op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isSpan(editorActor.getSnapshot().context, op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const snapshot = getEditorSnapshot({\n          editorActorSnapshot: editorActor.getSnapshot(),\n          slateEditorInstance: editor,\n        })\n\n        const markState = getMarkState(snapshot)\n\n        if (!markState) {\n          apply(op)\n          return\n        }\n\n        if (markState.state === 'unchanged') {\n          apply(op)\n          return\n        }\n\n        Transforms.insertNodes(editor, {\n          _type: 'span',\n          _key: editorActor.getSnapshot().context.keyGenerator(),\n          text: op.text,\n          marks: markState.marks,\n        })\n\n        return\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (\n            span &&\n            block &&\n            isTextBlock(editorActor.getSnapshot().context, block)\n          ) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const snapshot = getEditorSnapshot({\n                editorActorSnapshot: editorActor.getSnapshot(),\n                slateEditorInstance: editor,\n              })\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: getActiveDecorators(snapshot)},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type ===\n          editorActor.getSnapshot().context.schema.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorOperationImplementation: BehaviorOperationImplementation<\n  'decorator.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        editor.decoratorState[mark] = false\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_UNDO_STEP: WeakMap<Editor, {undoStepId: string} | undefined> =\n  new WeakMap()\n\nexport function withUndoStep(editor: Editor, fn: () => void) {\n  const current = CURRENT_UNDO_STEP.get(editor)\n\n  if (current) {\n    fn()\n    return\n  }\n\n  CURRENT_UNDO_STEP.set(\n    editor,\n    current ?? {\n      undoStepId: defaultKeyGenerator(),\n    },\n  )\n  fn()\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n\nexport function getCurrentUndoStepId(editor: Editor) {\n  return CURRENT_UNDO_STEP.get(editor)?.undoStepId\n}\n\nexport function createUndoStep(editor: Editor) {\n  CURRENT_UNDO_STEP.set(editor, {\n    undoStepId: defaultKeyGenerator(),\n  })\n}\n\nexport function clearUndoStep(editor: Editor) {\n  CURRENT_UNDO_STEP.set(editor, undefined)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {BehaviorOperationImplementation} from '../../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentUndoStepId} from '../with-undo-step'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      editorActor.getSnapshot().context.schema.block.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousUndoStepId = getCurrentUndoStepId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentUndoStepId = getCurrentUndoStepId(editor)\n\n      let merge = currentUndoStepId === previousUndoStepId\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentUndoStepId === undefined && previousUndoStepId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousUndoStepId = currentUndoStepId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoOperationImplementation: BehaviorOperationImplementation<\n  'history.undo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoOperationImplementation: BehaviorOperationImplementation<\n  'history.redo'\n> = ({operation}) => {\n  const editor = operation.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import {Editor, Node, Range, Text, Transforms} from 'slate'\nimport {parseAnnotation} from '../internal-utils/parse-blocks'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const addAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.add'\n> = ({context, operation}) => {\n  const parsedAnnotation = parseAnnotation({\n    annotation: {\n      _type: operation.annotation.name,\n      ...operation.annotation.value,\n    },\n    context,\n    options: {validateFields: true},\n  })\n\n  if (!parsedAnnotation) {\n    throw new Error(\n      `Failed to parse annotation ${JSON.stringify(operation.annotation)}`,\n    )\n  }\n\n  const editor = operation.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  let blockIndex = 0\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    // Make sure we don't generate more keys than needed\n    const annotationKey =\n      blockIndex === 0 ? parsedAnnotation._key : context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === parsedAnnotation._type &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              ...parsedAnnotation,\n              _key: annotationKey,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [...marks, annotationKey],\n        },\n        {at: path},\n      )\n    }\n\n    blockIndex++\n  }\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const removeAnnotationOperationImplementation: BehaviorOperationImplementation<\n  'annotation.remove'\n> = ({operation}) => {\n  const editor = operation.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === operation.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: Path]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!Path.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== operation.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockSetOperationImplementation: BehaviorOperationImplementation<\n  'block.set'\n> = ({context, operation}) => {\n  const blockIndex = operation.editor.blockIndexMap.get(operation.at[0]._key)\n\n  if (blockIndex === undefined) {\n    throw new Error(\n      `Unable to find block index for block at ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  const block = operation.editor.value.at(blockIndex)\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, ...filteredProps} = operation.props\n\n  const updatedBlock = {\n    ...block,\n    ...filteredProps,\n  }\n\n  const parsedBlock = parseBlock({\n    context,\n    block: updatedBlock,\n    options: {validateFields: true},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  parsedBlock.markDefs = updatedBlock.markDefs\n\n  const slateBlock = toSlateValue([parsedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(operation.editor, slateBlock, {at: [blockIndex]})\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const blockUnsetOperationImplementation: BehaviorOperationImplementation<\n  'block.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(operation.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(operation.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (isTextBlock(context, parsedBlock)) {\n    const propsToRemove = operation.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {validateFields: true},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(\n        `Unable to update block at ${JSON.stringify(operation.at)}`,\n      )\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(operation.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      operation.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {validateFields: true},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(operation.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    operation.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {Editor, Element, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const childSetOperationImplementation: BehaviorOperationImplementation<\n  'child.set'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const childEntry = Editor.node(operation.editor, location, {depth: 2})\n  const child = childEntry?.[0]\n  const childPath = childEntry?.[1]\n\n  if (!child || !childPath) {\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (operation.editor.isTextSpan(child)) {\n    const {_type, text, ...rest} = operation.props\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        ...rest,\n      },\n      {at: childPath},\n    )\n\n    if (typeof text === 'string') {\n      if (child.text !== text) {\n        operation.editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: child.text,\n        })\n\n        operation.editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text,\n        })\n      }\n    }\n\n    return\n  }\n\n  if (Element.isElement(child)) {\n    const definition = context.schema.inlineObjects.find(\n      (definition) => definition.name === child._type,\n    )\n\n    if (!definition) {\n      throw new Error(\n        `Unable to find schema definition for Inline Object type ${child._type}`,\n      )\n    }\n\n    const value =\n      'value' in child && typeof child.value === 'object' ? child.value : {}\n    const {_type, _key, ...rest} = operation.props\n\n    for (const prop in rest) {\n      if (!definition.fields.some((field) => field.name === prop)) {\n        delete rest[prop]\n      }\n    }\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        _key: typeof _key === 'string' ? _key : child._key,\n        value: {\n          ...value,\n          ...rest,\n        },\n      },\n      {at: childPath},\n    )\n\n    return\n  }\n\n  throw new Error(\n    `Unable to determine the type of child at ${JSON.stringify(operation.at)}`,\n  )\n}\n","import {applyAll} from '@portabletext/patches'\nimport {Editor, Element, Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const childUnsetOperationImplementation: BehaviorOperationImplementation<\n  'child.unset'\n> = ({context, operation}) => {\n  const location = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: {\n        anchor: {path: operation.at, offset: 0},\n        focus: {path: operation.at, offset: 0},\n      },\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(operation.at)} into a Slate Range`,\n    )\n  }\n\n  const childEntry = Editor.node(operation.editor, location, {depth: 2})\n  const child = childEntry?.[0]\n  const childPath = childEntry?.[1]\n\n  if (!child || !childPath) {\n    throw new Error(`Unable to find child at ${JSON.stringify(operation.at)}`)\n  }\n\n  if (operation.editor.isTextSpan(child)) {\n    if (operation.props.includes('text')) {\n      operation.editor.apply({\n        type: 'remove_text',\n        path: childPath,\n        offset: 0,\n        text: child.text,\n      })\n    }\n\n    const newNode: Record<string, unknown> = {}\n\n    for (const prop of operation.props) {\n      if (prop === '_type') {\n        // It's not allowed to unset the _type of a span\n        continue\n      }\n\n      if (prop === '_key') {\n        newNode._key = context.keyGenerator()\n        continue\n      }\n\n      newNode[prop] = null\n    }\n\n    Transforms.setNodes(operation.editor, newNode, {at: childPath})\n\n    return\n  }\n\n  if (Element.isElement(child)) {\n    const value =\n      'value' in child && typeof child.value === 'object' ? child.value : {}\n    const patches = operation.props.map((prop) => ({\n      type: 'unset' as const,\n      path: [prop],\n    }))\n    const newValue = applyAll(value, patches)\n\n    Transforms.setNodes(\n      operation.editor,\n      {\n        ...child,\n        _key: operation.props.includes('_key')\n          ? context.keyGenerator()\n          : child._key,\n        value: newValue,\n      },\n      {at: childPath},\n    )\n\n    return\n  }\n\n  throw new Error(\n    `Unable to determine the type of child at ${JSON.stringify(operation.at)}`,\n  )\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const decoratorAddOperationImplementation: BehaviorOperationImplementation<\n  'decorator.add'\n> = ({context, operation}) => {\n  const editor = operation.editor\n  const mark = operation.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = operation.at?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = operation.at?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        context: {\n          ...context,\n          value,\n        },\n        blockOffset: operation.at.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange({\n        context: {\n          schema: context.schema,\n          value: operation.editor.value,\n          selection: manualSelection,\n        },\n        blockIndexMap: operation.editor.blockIndexMap,\n      }) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = slateRangeToSelection({\n    schema: context.schema,\n    editor,\n    range: selection,\n  })\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        context: {\n          ...context,\n          value,\n        },\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      context: {\n        ...context,\n        value: newValue,\n      },\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      blockIndexMap: editor.blockIndexMap,\n      context: {\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n      decoratorState: editor.decoratorState,\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange({\n      context: {\n        schema: context.schema,\n        value: operation.editor.value,\n        selection: trimmedSelection,\n      },\n      blockIndexMap: operation.editor.blockIndexMap,\n    })\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      editor.decoratorState[mark] = true\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {\n  deleteText,\n  Editor,\n  Element,\n  Range,\n  setSelection,\n  Transforms,\n} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {getBlockPath} from '../internal-utils/slate-utils'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const deleteOperationImplementation: BehaviorOperationImplementation<\n  'delete'\n> = ({context, operation}) => {\n  const anchorBlockKey = getBlockKeyFromSelectionPoint(operation.at.anchor)\n  const focusBlockKey = getBlockKeyFromSelectionPoint(operation.at.focus)\n\n  const startBlockKey = operation.at.backward ? focusBlockKey : anchorBlockKey\n  const endBlockKey = operation.at.backward ? anchorBlockKey : focusBlockKey\n  const endOffset = operation.at.backward\n    ? operation.at.focus.offset\n    : operation.at.anchor.offset\n\n  if (!startBlockKey) {\n    throw new Error('Failed to get start block key')\n  }\n\n  if (!endBlockKey) {\n    throw new Error('Failed to get end block key')\n  }\n\n  const startBlockIndex = operation.editor.blockIndexMap.get(startBlockKey)\n\n  if (startBlockIndex === undefined) {\n    throw new Error('Failed to get start block index')\n  }\n\n  const startBlock = operation.editor.value.at(startBlockIndex)\n\n  if (!startBlock) {\n    throw new Error('Failed to get start block')\n  }\n\n  const endBlockIndex = operation.editor.blockIndexMap.get(endBlockKey)\n\n  if (endBlockIndex === undefined) {\n    throw new Error('Failed to get end block index')\n  }\n\n  const endBlock = operation.editor.value.at(endBlockIndex)\n\n  if (!endBlock) {\n    throw new Error('Failed to get end block')\n  }\n\n  const anchorBlockPath =\n    anchorBlockKey !== undefined\n      ? getBlockPath({\n          editor: operation.editor,\n          _key: anchorBlockKey,\n        })\n      : undefined\n  const focusBlockPath =\n    focusBlockKey !== undefined\n      ? getBlockPath({\n          editor: operation.editor,\n          _key: focusBlockKey,\n        })\n      : undefined\n\n  if (\n    operation.at.anchor.path.length === 1 &&\n    operation.at.focus.path.length === 1 &&\n    anchorBlockPath &&\n    focusBlockPath &&\n    anchorBlockPath[0] === focusBlockPath[0]\n  ) {\n    Transforms.removeNodes(operation.editor, {\n      at: [anchorBlockPath[0]],\n    })\n\n    if (operation.editor.children.length === 0) {\n      Transforms.insertNodes(operation.editor, createPlaceholderBlock(context))\n    }\n\n    return\n  }\n\n  const range = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at,\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(operation.at)}`,\n    )\n  }\n\n  if (operation.direction === 'backward' && operation.unit === 'line') {\n    const parentBlockEntry = Editor.above(operation.editor, {\n      match: (n) => Element.isElement(n) && Editor.isBlock(operation.editor, n),\n      at: range,\n    })\n\n    if (parentBlockEntry) {\n      const [, parentBlockPath] = parentBlockEntry\n      const parentElementRange = Editor.range(\n        operation.editor,\n        parentBlockPath,\n        range.anchor,\n      )\n\n      const currentLineRange = findCurrentLineRange(\n        operation.editor,\n        parentElementRange,\n      )\n\n      if (!Range.isCollapsed(currentLineRange)) {\n        Transforms.delete(operation.editor, {at: currentLineRange})\n        return\n      }\n    }\n  }\n\n  const hanging = isTextBlock(context, endBlock) && endOffset === 0\n\n  deleteText(operation.editor, {\n    at: range,\n    reverse: operation.direction === 'backward',\n    unit: operation.unit,\n    hanging,\n  })\n\n  if (\n    operation.editor.selection &&\n    isTextBlock(context, startBlock) &&\n    isTextBlock(context, endBlock)\n  ) {\n    setSelection(operation.editor, {\n      anchor: operation.editor.selection.focus,\n      focus: operation.editor.selection.focus,\n    })\n  }\n}\n\nfunction findCurrentLineRange(\n  editor: PortableTextSlateEditor,\n  parentRange: Range,\n): Range {\n  const parentRangeBoundary = Editor.range(editor, Range.end(parentRange))\n  const positions = Array.from(Editor.positions(editor, {at: parentRange}))\n\n  let left = 0\n  let right = positions.length\n  let middle = Math.floor(right / 2)\n\n  if (\n    rangesAreOnSameLine(\n      editor,\n      Editor.range(editor, positions[left]),\n      parentRangeBoundary,\n    )\n  ) {\n    return Editor.range(editor, positions[left], parentRangeBoundary)\n  }\n\n  if (positions.length < 2) {\n    return Editor.range(\n      editor,\n      positions[positions.length - 1],\n      parentRangeBoundary,\n    )\n  }\n\n  while (middle !== positions.length && middle !== left) {\n    if (\n      rangesAreOnSameLine(\n        editor,\n        Editor.range(editor, positions[middle]),\n        parentRangeBoundary,\n      )\n    ) {\n      right = middle\n    } else {\n      left = middle\n    }\n\n    middle = Math.floor((left + right) / 2)\n  }\n\n  return Editor.range(editor, positions[left], parentRangeBoundary)\n}\n\nfunction rangesAreOnSameLine(editor: DOMEditor, range1: Range, range2: Range) {\n  const rect1 = DOMEditor.toDOMRange(editor, range1).getBoundingClientRect()\n  const rect2 = DOMEditor.toDOMRange(editor, range2).getBoundingClientRect()\n\n  return domRectsIntersect(rect1, rect2) && domRectsIntersect(rect2, rect1)\n}\n\nfunction domRectsIntersect(rect: DOMRect, compareRect: DOMRect) {\n  const middle = (compareRect.top + compareRect.bottom) / 2\n\n  return rect.top <= middle && rect.bottom >= middle\n}\n","import {isSpan} from '@portabletext/schema'\nimport {isEqual} from 'lodash'\nimport {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n  getSelectionEndBlock,\n  getSelectionStartBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isEmptyTextBlock} from '../utils'\nimport type {\n  BehaviorOperationImplementation,\n  BehaviorOperationImplementationContext,\n} from './behavior.operations'\n\nexport const insertBlockOperationImplementation: BehaviorOperationImplementation<\n  'insert.block'\n> = ({context, operation}) => {\n  const parsedBlock = parseBlock({\n    block: operation.block,\n    context,\n    options: {validateFields: true},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(operation.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    context,\n    block: fragment,\n    placement: operation.placement,\n    select: operation.select ?? 'start',\n    editor: operation.editor,\n  })\n}\n\nexport function insertBlock({\n  context,\n  block,\n  placement,\n  select,\n  editor,\n}: {\n  context: BehaviorOperationImplementationContext\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n}) {\n  const [startBlock, startBlockPath] = getSelectionStartBlock({editor})\n  const [endBlock, endBlockPath] = getSelectionEndBlock({editor})\n\n  if (\n    !editor.selection ||\n    !startBlock ||\n    !startBlockPath ||\n    !endBlock ||\n    !endBlockPath\n  ) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], context.schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n      const selectionStartPoint = Range.start(currentSelection)\n\n      Transforms.insertNodes(editor, [block], {\n        at: [selectionStartPoint.path[0]],\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(\n          editor,\n          Editor.start(editor, [selectionStartPoint.path[0]]),\n        )\n      } else if (select === 'end') {\n        Transforms.select(\n          editor,\n          Editor.end(editor, [selectionStartPoint.path[0]]),\n        )\n      }\n    } else if (placement === 'after') {\n      const currentSelection = editor.selection\n      const selectionEndPoint = Range.end(currentSelection)\n\n      const nextPath = [selectionEndPoint.path[0] + 1]\n\n      Transforms.insertNodes(editor, [block], {\n        at: nextPath,\n        select: false,\n      })\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const endBlockEndPoint = Editor.start(editor, endBlockPath)\n\n      if (Range.isExpanded(currentSelection) && !editor.isTextBlock(block)) {\n        Transforms.delete(editor, {at: currentSelection})\n\n        const newSelection = editor.selection\n\n        const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n        Transforms.insertNodes(editor, [block], {\n          voids: true,\n        })\n\n        const adjustedSelection =\n          newSelection.anchor.offset === 0\n            ? Range.transform(newSelection, {\n                type: 'insert_node',\n                node: block,\n                path: [newSelection.anchor.path[0]],\n              })\n            : newSelection\n\n        if (select === 'none' && adjustedSelection) {\n          Transforms.select(editor, adjustedSelection)\n        }\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock], context.schema)) {\n          Transforms.removeNodes(editor, {at: focusBlockPath})\n        }\n\n        return\n      }\n\n      if (editor.isTextBlock(endBlock) && editor.isTextBlock(block)) {\n        const selectionStartPoint = Range.start(currentSelection)\n\n        if (isEqualToEmptyEditor([endBlock], context.schema)) {\n          const currentSelection = editor.selection\n\n          Transforms.insertNodes(editor, [block], {\n            at: endBlockPath,\n            select: false,\n          })\n          Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n\n          if (select === 'start') {\n            Transforms.select(editor, selectionStartPoint)\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, endBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n\n          return\n        }\n\n        const endBlockChildKeys = endBlock.children.map((child) => child._key)\n        const endBlockMarkDefsKeys =\n          endBlock.markDefs?.map((markDef) => markDef._key) ?? []\n\n        // Assign new keys to markDefs with duplicate keys and keep track of\n        // the mapping between the old and new keys\n        const markDefKeyMap = new Map<string, string>()\n        const adjustedMarkDefs = block.markDefs?.map((markDef) => {\n          if (endBlockMarkDefsKeys.includes(markDef._key)) {\n            const newKey = context.keyGenerator()\n            markDefKeyMap.set(markDef._key, newKey)\n            return {\n              ...markDef,\n              _key: newKey,\n            }\n          }\n\n          return markDef\n        })\n\n        // Assign new keys to spans with duplicate keys and update any markDef\n        // key if needed\n        const adjustedChildren = block.children.map((child) => {\n          if (isSpan(context, child)) {\n            const marks =\n              child.marks?.map((mark) => {\n                const markDefKey = markDefKeyMap.get(mark)\n\n                if (markDefKey) {\n                  return markDefKey\n                }\n\n                return mark\n              }) ?? []\n\n            if (!isEqual(child.marks, marks)) {\n              return {\n                ...child,\n                _key: endBlockChildKeys.includes(child._key)\n                  ? context.keyGenerator()\n                  : child._key,\n                marks,\n              }\n            }\n          }\n\n          if (endBlockChildKeys.includes(child._key)) {\n            return {\n              ...child,\n              _key: context.keyGenerator(),\n            }\n          }\n\n          return child\n        })\n\n        // Carry over the markDefs from the incoming block to the end block\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: [\n              ...(endBlock.markDefs ?? []),\n              ...(adjustedMarkDefs ?? []),\n            ],\n          },\n          {\n            at: endBlockPath,\n          },\n        )\n\n        // If the children have changed, we need to create a new block with\n        // the adjusted children\n        const adjustedBlock = !isEqual(block.children, adjustedChildren)\n          ? {\n              ...block,\n              children: adjustedChildren as Descendant[],\n            }\n          : block\n\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [adjustedBlock], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [adjustedBlock], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionStartPoint)\n        } else {\n          if (!Point.equals(selectionStartPoint, endBlockEndPoint)) {\n            Transforms.select(editor, selectionStartPoint)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(endBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [endBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const endBlockStartPoint = Editor.start(editor, endBlockPath)\n          const endBlockEndPoint = Editor.end(editor, endBlockPath)\n          const selectionStartPoint = Range.start(currentSelection)\n          const selectionEndPoint = Range.end(currentSelection)\n\n          if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertNodes(editor, [block], {\n              at: endBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            }\n\n            if (isEmptyTextBlock(context, endBlock)) {\n              Transforms.removeNodes(editor, {at: Path.next(endBlockPath)})\n            }\n          } else if (\n            Range.isCollapsed(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            const nextPath = [endBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionStartPoint, endBlockStartPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(editor, Editor.start(editor, endBlockPath))\n            } else if (select === 'end') {\n              Transforms.select(editor, Editor.end(editor, endBlockPath))\n            }\n          } else if (\n            Range.isExpanded(currentSelection) &&\n            Point.equals(selectionEndPoint, endBlockEndPoint)\n          ) {\n            Transforms.insertFragment(editor, [block], {\n              at: currentSelection,\n            })\n\n            if (select === 'start') {\n              Transforms.select(\n                editor,\n                Editor.start(editor, Path.next(endBlockPath)),\n              )\n            } else if (select === 'end') {\n              Transforms.select(\n                editor,\n                Editor.end(editor, Path.next(endBlockPath)),\n              )\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.splitNodes(editor, {\n                at: currentSelection,\n              })\n\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [endBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [endBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import {Transforms} from 'slate'\nimport {EDITOR_TO_PENDING_SELECTION} from 'slate-dom'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {\n  getFocusSpan,\n  slateRangeToSelection,\n} from '../internal-utils/slate-utils'\nimport {getActiveAnnotationsMarks} from '../selectors/selector.get-active-annotation-marks'\nimport {getActiveDecorators} from '../selectors/selector.get-active-decorators'\nimport {getMarkState} from '../selectors/selector.get-mark-state'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const insertTextOperationImplementation: BehaviorOperationImplementation<\n  'insert.text'\n> = ({context, operation}) => {\n  const snapshot: EditorSnapshot = {\n    blockIndexMap: operation.editor.blockIndexMap,\n    context: {\n      value: operation.editor.value,\n      selection: operation.editor.selection\n        ? slateRangeToSelection({\n            schema: context.schema,\n            editor: operation.editor,\n            range: operation.editor.selection,\n          })\n        : null,\n      schema: context.schema,\n      keyGenerator: context.keyGenerator,\n      converters: [],\n      readOnly: false,\n    },\n    decoratorState: operation.editor.decoratorState,\n  }\n\n  const markState = getMarkState(snapshot)\n  const activeDecorators = getActiveDecorators(snapshot)\n  const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n\n  const [focusSpan] = getFocusSpan({\n    editor: operation.editor,\n  })\n\n  if (!focusSpan) {\n    Transforms.insertText(operation.editor, operation.text)\n    return\n  }\n\n  if (markState && markState.state === 'unchanged') {\n    const markStateDecorators = (markState.marks ?? []).filter((mark) =>\n      context.schema.decorators\n        .map((decorator) => decorator.name)\n        .includes(mark),\n    )\n\n    if (\n      markStateDecorators.length === activeDecorators.length &&\n      markStateDecorators.every((mark) => activeDecorators.includes(mark))\n    ) {\n      Transforms.insertText(operation.editor, operation.text)\n      return\n    }\n  }\n\n  Transforms.insertNodes(operation.editor, {\n    _type: focusSpan._type,\n    _key: context.keyGenerator(),\n    text: operation.text,\n    marks: [...activeDecorators, ...activeAnnotations],\n  })\n\n  // This makes sure the selection is set correctly when event handling is run\n  // through Slate's Android input handling\n  EDITOR_TO_PENDING_SELECTION.set(operation.editor, operation.editor.selection)\n\n  operation.editor.decoratorState = {}\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBackwardOperationImplementation: BehaviorOperationImplementation<\n  'move.backward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n    reverse: true,\n  })\n}\n","import {Transforms} from 'slate'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveBlockOperationImplementation: BehaviorOperationImplementation<\n  'move.block'\n> = ({operation}) => {\n  const originKey = getBlockKeyFromSelectionPoint({\n    path: operation.at,\n    offset: 0,\n  })\n\n  if (!originKey) {\n    throw new Error('Failed to get block key from selection point')\n  }\n\n  const originBlockIndex = operation.editor.blockIndexMap.get(originKey)\n\n  if (originBlockIndex === undefined) {\n    throw new Error('Failed to get block index from block key')\n  }\n\n  const destinationKey = getBlockKeyFromSelectionPoint({\n    path: operation.to,\n    offset: 0,\n  })\n\n  if (!destinationKey) {\n    throw new Error('Failed to get block key from selection point')\n  }\n\n  const destinationBlockIndex =\n    operation.editor.blockIndexMap.get(destinationKey)\n\n  if (destinationBlockIndex === undefined) {\n    throw new Error('Failed to get block index from block key')\n  }\n\n  Transforms.moveNodes(operation.editor, {\n    at: [originBlockIndex],\n    to: [destinationBlockIndex],\n    mode: 'highest',\n  })\n}\n","import {Transforms} from 'slate'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const moveForwardOperationImplementation: BehaviorOperationImplementation<\n  'move.forward'\n> = ({operation}) => {\n  Transforms.move(operation.editor, {\n    unit: 'character',\n    distance: operation.distance,\n  })\n}\n","import {Transforms} from 'slate'\nimport {IS_FOCUSED, IS_READ_ONLY} from 'slate-dom'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {BehaviorOperationImplementation} from './behavior.operations'\n\nexport const selectOperationImplementation: BehaviorOperationImplementation<\n  'select'\n> = ({context, operation}) => {\n  const newSelection = toSlateRange({\n    context: {\n      schema: context.schema,\n      value: operation.editor.value,\n      selection: operation.at,\n    },\n    blockIndexMap: operation.editor.blockIndexMap,\n  })\n\n  if (newSelection) {\n    Transforms.select(operation.editor, newSelection)\n  } else {\n    Transforms.deselect(operation.editor)\n  }\n\n  if (IS_FOCUSED.get(operation.editor) && IS_READ_ONLY.get(operation.editor)) {\n    IS_FOCUSED.set(operation.editor, false)\n  }\n}\n","import {Editor} from 'slate'\nimport type {\n  AbstractBehaviorEventType,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {removeDecoratorOperationImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoOperationImplementation,\n  historyUndoOperationImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {addAnnotationOperationImplementation} from './behavior.operation.annotation.add'\nimport {removeAnnotationOperationImplementation} from './behavior.operation.annotation.remove'\nimport {blockSetOperationImplementation} from './behavior.operation.block.set'\nimport {blockUnsetOperationImplementation} from './behavior.operation.block.unset'\nimport {childSetOperationImplementation} from './behavior.operation.child.set'\nimport {childUnsetOperationImplementation} from './behavior.operation.child.unset'\nimport {decoratorAddOperationImplementation} from './behavior.operation.decorator.add'\nimport {deleteOperationImplementation} from './behavior.operation.delete'\nimport {insertBlockOperationImplementation} from './behavior.operation.insert.block'\nimport {insertTextOperationImplementation} from './behavior.operation.insert.text'\nimport {moveBackwardOperationImplementation} from './behavior.operation.move.backward'\nimport {moveBlockOperationImplementation} from './behavior.operation.move.block'\nimport {moveForwardOperationImplementation} from './behavior.operation.move.forward'\nimport {selectOperationImplementation} from './behavior.operation.select'\n\nexport type BehaviorOperationImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorOperationImplementation<\n  TBehaviorOperationType extends BehaviorOperation['type'],\n> = ({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: PickFromUnion<BehaviorOperation, 'type', TBehaviorOperationType>\n}) => void\n\ntype BehaviorOperation = OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> & {\n  editor: PortableTextSlateEditor\n}\n\ntype BehaviorOperationImplementations = {\n  [TBehaviorOperationType in BehaviorOperation['type']]: BehaviorOperationImplementation<TBehaviorOperationType>\n}\n\nconst behaviorOperationImplementations: BehaviorOperationImplementations = {\n  'annotation.add': addAnnotationOperationImplementation,\n  'annotation.remove': removeAnnotationOperationImplementation,\n  'block.set': blockSetOperationImplementation,\n  'block.unset': blockUnsetOperationImplementation,\n  'child.set': childSetOperationImplementation,\n  'child.unset': childUnsetOperationImplementation,\n  'decorator.add': decoratorAddOperationImplementation,\n  'decorator.remove': removeDecoratorOperationImplementation,\n  'delete': deleteOperationImplementation,\n  'history.redo': historyRedoOperationImplementation,\n  'history.undo': historyUndoOperationImplementation,\n  'insert.block': insertBlockOperationImplementation,\n  'insert.text': insertTextOperationImplementation,\n  'move.backward': moveBackwardOperationImplementation,\n  'move.block': moveBlockOperationImplementation,\n  'move.forward': moveForwardOperationImplementation,\n  'select': selectOperationImplementation,\n}\n\nexport function performOperation({\n  context,\n  operation,\n}: {\n  context: BehaviorOperationImplementationContext\n  operation: BehaviorOperation\n}) {\n  Editor.withoutNormalizing(operation.editor, () => {\n    try {\n      switch (operation.type) {\n        case 'annotation.add': {\n          behaviorOperationImplementations['annotation.add']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'annotation.remove': {\n          behaviorOperationImplementations['annotation.remove']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'block.set': {\n          behaviorOperationImplementations['block.set']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'block.unset': {\n          behaviorOperationImplementations['block.unset']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'child.set': {\n          behaviorOperationImplementations['child.set']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'child.unset': {\n          behaviorOperationImplementations['child.unset']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'decorator.add': {\n          behaviorOperationImplementations['decorator.add']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'decorator.remove': {\n          behaviorOperationImplementations['decorator.remove']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'delete': {\n          behaviorOperationImplementations.delete({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'history.redo': {\n          behaviorOperationImplementations['history.redo']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'history.undo': {\n          behaviorOperationImplementations['history.undo']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'insert.block': {\n          behaviorOperationImplementations['insert.block']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'insert.text': {\n          behaviorOperationImplementations['insert.text']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'move.backward': {\n          behaviorOperationImplementations['move.backward']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'move.block': {\n          behaviorOperationImplementations['move.block']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        case 'move.forward': {\n          behaviorOperationImplementations['move.forward']({\n            context,\n            operation: operation,\n          })\n          break\n        }\n        default: {\n          behaviorOperationImplementations.select({\n            context,\n            operation: operation,\n          })\n          break\n        }\n      }\n    } catch (error) {\n      console.error(\n        new Error(\n          `Executing \"${operation.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n  })\n}\n","import type {Editor} from 'slate'\n\nconst IS_PERFORMING_OPERATION: WeakMap<Editor, boolean | undefined> =\n  new WeakMap()\n\nexport function withPerformingBehaviorOperation(\n  editor: Editor,\n  fn: () => void,\n) {\n  const prev = IS_PERFORMING_OPERATION.get(editor)\n\n  IS_PERFORMING_OPERATION.set(editor, true)\n\n  fn()\n\n  IS_PERFORMING_OPERATION.set(editor, prev)\n}\n\nexport function isPerformingBehaviorOperation(editor: Editor) {\n  return IS_PERFORMING_OPERATION.get(editor) ?? false\n}\n","import {Editor} from 'slate'\nimport {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {performOperation} from '../../operations/behavior.operations'\nimport type {EditorActor} from '../editor-machine'\nimport {isPerformingBehaviorOperation} from '../with-performing-behavior-operation'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    const {delete: editorDelete, select} = editor\n\n    editor.delete = (options) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        editorDelete(options)\n        return\n      }\n\n      const at = options?.at ?? editor.selection\n\n      if (!at) {\n        console.error('Unexpected call to .delete(...) without `at` option')\n        return\n      }\n\n      const range = Editor.range(editor, at)\n\n      const selection = slateRangeToSelection({\n        schema: editorActor.getSnapshot().context.schema,\n        editor,\n        range,\n      })\n\n      if (!selection) {\n        console.error(\n          'Unexpected call to .delete(...) with invalid `at` option',\n        )\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete',\n          at: selection,\n          direction: options?.reverse ? 'backward' : 'forward',\n          unit: options?.unit,\n        },\n        editor,\n      })\n    }\n\n    editor.deleteBackward = (unit) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .deleteBackward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .deleteForward(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .insertBreak(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        console.error('Unexpected call to .insertData(...)')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text: '\\n', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {type: 'insert.text', text, editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isPerformingBehaviorOperation(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          at: slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range,\n          }),\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.error('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isPerformingBehaviorOperation(editor)) {\n        performOperation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          operation: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport {isEqual} from 'lodash'\nimport {Editor, Element, Node, Path, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(editorActor: EditorActor) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      if (operation.type === 'merge_node') {\n        const index = operation.path[operation.path.length - 1]\n        const prevPath = Path.previous(operation.path)\n        const prevIndex = prevPath[prevPath.length - 1]\n\n        if (operation.path.length !== 1 || prevPath.length !== 1) {\n          apply(operation)\n          return\n        }\n\n        const block = editor.value.at(index)\n        const previousBlock = editor.value.at(prevIndex)\n\n        if (!block || !previousBlock) {\n          apply(operation)\n          return\n        }\n\n        if (\n          !isTextBlock(editorActor.getSnapshot().context, block) ||\n          !isTextBlock(editorActor.getSnapshot().context, previousBlock)\n        ) {\n          apply(operation)\n          return\n        }\n\n        // If we are merging two text blocks, then we need to make sure there\n        // are no duplicate keys in the blocks. Therefore, we assign new keys\n        // to any child or markDef that shares key with other children or\n        // markDefs in the previous block.\n        const previousBlockChildKeys = previousBlock.children.map(\n          (child) => child._key,\n        )\n        const previousBlockMarkDefKeys =\n          previousBlock.markDefs?.map((markDef) => markDef._key) ?? []\n\n        // Assign new keys to markDefs with duplicate keys and keep track of\n        // the mapping between the old and new keys\n        const markDefKeyMap = new Map<string, string>()\n        const adjustedMarkDefs = block.markDefs?.map((markDef) => {\n          if (previousBlockMarkDefKeys.includes(markDef._key)) {\n            const newKey = editorActor.getSnapshot().context.keyGenerator()\n            markDefKeyMap.set(markDef._key, newKey)\n            return {\n              ...markDef,\n              _key: newKey,\n            }\n          }\n\n          return markDef\n        })\n\n        // Assign new keys to spans with duplicate keys and update any markDef\n        // key if needed\n        let childIndex = 0\n        for (const child of block.children) {\n          if (isSpan(editorActor.getSnapshot().context, child)) {\n            const marks =\n              child.marks?.map((mark) => {\n                const markDefKey = markDefKeyMap.get(mark)\n\n                if (markDefKey) {\n                  return markDefKey\n                }\n\n                return mark\n              }) ?? []\n\n            if (!isEqual(child.marks, marks)) {\n              Transforms.setNodes(\n                editor,\n                {\n                  marks,\n                },\n                {\n                  at: [index, childIndex],\n                },\n              )\n            }\n          }\n\n          if (previousBlockChildKeys.includes(child._key)) {\n            Transforms.setNodes(\n              editor,\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n              },\n              {\n                at: [index, childIndex],\n              },\n            )\n          }\n          childIndex++\n        }\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            // Make sure the adjusted markDefs are carried along for the merge\n            // operation\n            markDefs: adjustedMarkDefs,\n          },\n        })\n        return\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (\n        Element.isElement(node) &&\n        node._type === editorActor.getSnapshot().context.schema.block.name\n      ) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {Path, PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {Element, Node, Text, Transforms, type Descendant} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {isKeyedSegment} from '../utils'\nimport {isEqualToEmptyEditor, toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schema: EditorSchema,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schema)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\nfunction diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  if (!child) {\n    return false\n  }\n\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block.node) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child.node)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.node.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.node.text, newValue), 5)\n\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({\n        type: 'insert_text',\n        path: [block.index, child.index],\n        offset,\n        text,\n      })\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: offset,\n        text,\n      })\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schema: EditorSchema,\n) {\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes: schema},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = block.index\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n\n    const editorWasEmptyBefore = isEqualToEmptyEditor(editor.children, schema)\n\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n\n    if (\n      editorWasEmptyBefore &&\n      typeof patch.path[0] === 'number' &&\n      patch.path[0] === 0\n    ) {\n      Transforms.removeNodes(editor, {\n        at: [position === 'before' ? targetBlockIndex + 1 : targetBlockIndex],\n      })\n    }\n\n    return true\n  }\n\n  // Insert children\n  const {items, position} = patch\n\n  const targetChild = findBlockChild(block, patch.path)\n\n  if (!targetChild) {\n    return false\n  }\n\n  const childrenToInsert = toSlateValue(\n    [{...block.node, children: items as PortableTextChild[]}],\n    {schemaTypes: schema},\n    KEY_TO_SLATE_ELEMENT.get(editor),\n  )\n  const normalizedIdx =\n    position === 'after' ? targetChild.index + 1 : targetChild.index\n  const childInsertPath = [block.index, normalizedIdx]\n\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  const isTextBlock = editor.isTextBlock(block.node)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    return false\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // If this is targeting a text block child\n  if (isTextBlock && child) {\n    if (Text.isText(child.node)) {\n      if (Text.isText(value)) {\n        const oldText = child.node.text\n        const newText = value.text\n        if (oldText !== newText) {\n          editor.apply({\n            type: 'remove_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: oldText,\n          })\n          editor.apply({\n            type: 'insert_text',\n            path: [block.index, child.index],\n            offset: 0,\n            text: newText,\n          })\n          // call OnChange here to emit the new selection\n          // the user's selection might be interfering with\n          editor.onChange()\n        }\n      } else {\n        // Setting non-text span property\n\n        const propPath = patch.path.slice(3)\n        const propEntry = propPath.at(0)\n        const reservedProps = ['_key', '_type', 'text']\n\n        if (propEntry === undefined) {\n          return false\n        }\n\n        if (\n          typeof propEntry === 'string' &&\n          reservedProps.includes(propEntry)\n        ) {\n          return false\n        }\n\n        const newNode = applyAll(child.node, [\n          {\n            ...patch,\n            path: propPath,\n          },\n        ])\n\n        Transforms.setNodes(editor, newNode, {at: [block.index, child.index]})\n      }\n    } else {\n      // Setting inline object property\n\n      const propPath = patch.path.slice(3)\n      const reservedProps = ['_key', '_type', 'children', '__inline']\n      const propEntry = propPath.at(0)\n\n      if (propEntry === undefined) {\n        return false\n      }\n\n      if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n        return false\n      }\n\n      // If the child is an inline object, we need to apply the patch to the\n      // `value` property object.\n      const value =\n        'value' in child.node && typeof child.node.value === 'object'\n          ? child.node.value\n          : {}\n\n      const newValue = applyAll(value, [\n        {\n          ...patch,\n          path: patch.path.slice(3),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...child.node, value: newValue},\n        {at: [block.index, child.index]},\n      )\n    }\n\n    return true\n  } else if (Element.isElement(block.node) && patch.path.length === 1) {\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: _prevChildren, ...prevRest} = block.node || {\n      children: undefined,\n    }\n\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: [block.index],\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    const blockNode = block.node\n\n    blockNode.children.forEach((child, childIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: [block.index, blockNode.children.length - 1 - childIndex],\n        node: child,\n      })\n    })\n\n    if (Array.isArray(children)) {\n      children.forEach((child, childIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: [block.index, childIndex],\n          node: child,\n        })\n      })\n    }\n  } else if (block && 'value' in block.node) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n    } else {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n\n    const children = Node.children(editor, [], {\n      reverse: true,\n    })\n\n    for (const [_, path] of children) {\n      Transforms.removeNodes(editor, {at: path})\n    }\n\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    return true\n  }\n\n  const block = findBlock(editor.children, patch.path)\n\n  if (!block) {\n    return false\n  }\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (editor.children.length === 1) {\n      // `unset`ing the last block should be treated similar to `unset`ing the\n      // entire editor value\n      const previousSelection = editor.selection\n\n      Transforms.deselect(editor)\n      Transforms.removeNodes(editor, {at: [block.index]})\n      Transforms.insertNodes(\n        editor,\n        editor.pteCreateTextBlock({decorators: []}),\n      )\n\n      if (previousSelection) {\n        Transforms.select(editor, {\n          anchor: {path: [0, 0], offset: 0},\n          focus: {path: [0, 0], offset: 0},\n        })\n      }\n\n      editor.onChange()\n\n      return true\n    }\n\n    Transforms.removeNodes(editor, {at: [block.index]})\n\n    return true\n  }\n\n  const child = findBlockChild(block, patch.path)\n\n  // Unset on text block children\n  if (editor.isTextBlock(block.node) && child) {\n    if (patch.path[1] === 'children' && patch.path.length === 3) {\n      Transforms.removeNodes(editor, {at: [block.index, child.index]})\n\n      return true\n    }\n  }\n\n  if (child && !Text.isText(child.node)) {\n    // Unsetting inline object property\n\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type', 'children', '__inline']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      // All custom properties are stored on the `value` property object.\n      // If you try to unset any of the other top-level properties it's a\n      // no-op.\n      return false\n    }\n\n    const value =\n      'value' in child.node && typeof child.node.value === 'object'\n        ? child.node.value\n        : {}\n\n    const newValue = applyAll(value, [\n      {\n        ...patch,\n        path: patch.path.slice(3),\n      },\n    ])\n\n    Transforms.setNodes(\n      editor,\n      {...child.node, value: newValue},\n      {at: [block.index, child.index]},\n    )\n\n    return true\n  }\n\n  if (child && Text.isText(child.node)) {\n    const propPath = patch.path.slice(3)\n    const propEntry = propPath.at(0)\n    const reservedProps = ['_key', '_type']\n\n    if (propEntry === undefined) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && reservedProps.includes(propEntry)) {\n      return false\n    }\n\n    if (typeof propEntry === 'string' && propEntry === 'text') {\n      editor.apply({\n        type: 'remove_text',\n        path: [block.index, child.index],\n        offset: 0,\n        text: child.node.text,\n      })\n\n      return true\n    }\n\n    const newNode = applyAll(child.node, [\n      {\n        ...patch,\n        path: propPath,\n      },\n    ])\n    const newKeys = Object.keys(newNode)\n\n    const removedProperties = Object.keys(child.node).filter(\n      (property) => !newKeys.includes(property),\n    )\n\n    Transforms.unsetNodes(editor, removedProperties, {\n      at: [block.index, child.index],\n    })\n\n    return true\n  }\n\n  if (!child) {\n    if ('value' in block.node) {\n      const newVal = applyAll(block.node.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n\n      Transforms.setNodes(\n        editor,\n        {...block.node, value: newVal},\n        {at: [block.index]},\n      )\n\n      return true\n    }\n\n    return false\n  }\n\n  return false\n}\n\nfunction findBlock(\n  children: Descendant[],\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  let blockIndex = -1\n\n  const block = children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n\n    if (isMatch) {\n      blockIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!block) {\n    return undefined\n  }\n\n  return {node: block, index: blockIndex}\n}\n\nfunction findBlockChild(\n  block: {node: Descendant; index: number},\n  path: Path,\n): {node: Descendant; index: number} | undefined {\n  const blockNode = block.node\n\n  if (!Element.isElement(blockNode) || path[1] !== 'children') {\n    return undefined\n  }\n\n  let childIndex = -1\n\n  const child = blockNode.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n\n    if (isMatch) {\n      childIndex = index\n    }\n\n    return isMatch\n  })\n\n  if (!child) {\n    return undefined\n  }\n\n  return {\n    node: child,\n    index: childIndex,\n  }\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {fromSlateValue} from './values'\n\nexport function insertTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block =\n    isTextBlock({schema}, children[operation.path[0]]) &&\n    children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const textChild =\n    isTextBlock({schema}, block) &&\n    isSpan({schema}, block.children[operation.path[1]]) &&\n    (block.children[operation.path[1]] as PortableTextSpan)\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const prevBlock = beforeValue[operation.path[0]]\n  const prevChild =\n    isTextBlock({schema}, prevBlock) && prevBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevChild) ? prevChild.text : ''\n  const patch = diffMatchPatch(prevText, textChild.text, path)\n  return patch.value.length ? [patch] : []\n}\n\nexport function removeTextPatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: RemoveTextOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = children[operation.path[0]]\n  if (!block) {\n    throw new Error('Could not find block')\n  }\n  const child =\n    (isTextBlock({schema}, block) && block.children[operation.path[1]]) ||\n    undefined\n  const textChild: PortableTextSpan | undefined = isSpan({schema}, child)\n    ? child\n    : undefined\n  if (child && !textChild) {\n    throw new Error('Expected span')\n  }\n  if (!textChild) {\n    throw new Error('Could not find child')\n  }\n  const path: Path = [\n    {_key: block._key},\n    'children',\n    {_key: textChild._key},\n    'text',\n  ]\n  const beforeBlock = beforeValue[operation.path[0]]\n  const prevTextChild =\n    isTextBlock({schema}, beforeBlock) &&\n    beforeBlock.children[operation.path[1]]\n  const prevText = isSpan({schema}, prevTextChild) && prevTextChild.text\n  const patch = diffMatchPatch(prevText || '', textChild.text, path)\n  return patch.value ? [patch] : []\n}\n\nexport function setNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SetNodeOperation,\n): Array<Patch> {\n  if (operation.path.length === 1) {\n    const block = children[operation.path[0]]\n    if (typeof block._key !== 'string') {\n      throw new Error('Expected block to have a _key')\n    }\n    const setNode = omitBy(\n      {...children[operation.path[0]], ...operation.newProperties},\n      isUndefined,\n    ) as unknown as Descendant\n    return [\n      set(fromSlateValue([setNode], schema.block.name)[0], [\n        {_key: block._key},\n      ]),\n    ]\n  } else if (operation.path.length === 2) {\n    const block = children[operation.path[0]]\n    if (isTextBlock({schema}, block)) {\n      const child = block.children[operation.path[1]]\n      if (child) {\n        const blockKey = block._key\n        const childKey = child._key\n        const patches: Patch[] = []\n        const keys = Object.keys(operation.newProperties)\n        keys.forEach((keyName) => {\n          // Special case for setting _key on a child. We have to target it by index and not the _key.\n          if (keys.length === 1 && keyName === '_key') {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                block.children.indexOf(child),\n                keyName,\n              ]),\n            )\n          } else {\n            const val = get(operation.newProperties, keyName)\n            patches.push(\n              set(val, [\n                {_key: blockKey},\n                'children',\n                {_key: childKey},\n                keyName,\n              ]),\n            )\n          }\n        })\n        return patches\n      }\n      throw new Error('Could not find a valid child')\n    }\n    throw new Error('Could not find a valid block')\n  } else {\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n    )\n  }\n}\n\nexport function insertNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: InsertNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    const position = operation.path[0] === 0 ? 'before' : 'after'\n    const beforeBlock = beforeValue[operation.path[0] - 1]\n    const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n    if (targetKey) {\n      return [\n        insert(\n          [\n            fromSlateValue(\n              [operation.node as Descendant],\n              schema.block.name,\n            )[0],\n          ],\n          position,\n          [{_key: targetKey}],\n        ),\n      ]\n    }\n    return [\n      setIfMissing(beforeValue, []),\n      insert(\n        [fromSlateValue([operation.node as Descendant], schema.block.name)[0]],\n        'before',\n        [operation.path[0]],\n      ),\n    ]\n  } else if (\n    isTextBlock({schema}, block) &&\n    operation.path.length === 2 &&\n    children[operation.path[0]]\n  ) {\n    const position =\n      block.children.length === 0 || !block.children[operation.path[1] - 1]\n        ? 'before'\n        : 'after'\n    const node = {...operation.node} as Descendant\n    if (!node._type && Text.isText(node)) {\n      node._type = 'span'\n      node.marks = []\n    }\n    const blk = fromSlateValue(\n      [\n        {\n          _key: 'bogus',\n          _type: schema.block.name,\n          children: [node],\n        },\n      ],\n      schema.block.name,\n    )[0] as PortableTextTextBlock\n    const child = blk.children[0]\n    return [\n      insert([child], position, [\n        {_key: block._key},\n        'children',\n        block.children.length <= 1 || !block.children[operation.path[1] - 1]\n          ? 0\n          : {_key: block.children[operation.path[1] - 1]._key},\n      ]),\n    ]\n  }\n  return []\n}\n\nexport function splitNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: SplitNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n  const splitBlock = children[operation.path[0]]\n  if (!isTextBlock({schema}, splitBlock)) {\n    throw new Error(\n      `Block with path ${JSON.stringify(\n        operation.path[0],\n      )} is not a text block and can't be split`,\n    )\n  }\n  if (operation.path.length === 1) {\n    const oldBlock = beforeValue[operation.path[0]]\n    if (isTextBlock({schema}, oldBlock)) {\n      const targetValue = fromSlateValue(\n        [children[operation.path[0] + 1]],\n        schema.block.name,\n      )[0]\n      if (targetValue) {\n        patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n        const spansToUnset = oldBlock.children.slice(operation.position)\n        spansToUnset.forEach((span) => {\n          const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n          patches.push(unset(path))\n        })\n      }\n    }\n    return patches\n  }\n  if (operation.path.length === 2) {\n    const splitSpan = splitBlock.children[operation.path[1]]\n    if (isSpan({schema}, splitSpan)) {\n      const targetSpans = (\n        fromSlateValue(\n          [\n            {\n              ...splitBlock,\n              children: splitBlock.children.slice(\n                operation.path[1] + 1,\n                operation.path[1] + 2,\n              ),\n            } as Descendant,\n          ],\n          schema.block.name,\n        )[0] as PortableTextTextBlock\n      ).children\n\n      patches.push(\n        insert(targetSpans, 'after', [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n        ]),\n      )\n      patches.push(\n        set(splitSpan.text, [\n          {_key: splitBlock._key},\n          'children',\n          {_key: splitSpan._key},\n          'text',\n        ]),\n      )\n    }\n    return patches\n  }\n  return patches\n}\n\nexport function removeNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: RemoveNodeOperation,\n): Array<Patch> {\n  const block = beforeValue[operation.path[0]]\n  if (operation.path.length === 1) {\n    // Remove a single block\n    if (block && block._key) {\n      return [unset([{_key: block._key}])]\n    }\n    throw new Error('Block not found')\n  } else if (isTextBlock({schema}, block) && operation.path.length === 2) {\n    const spanToRemove = block.children[operation.path[1]]\n\n    if (spanToRemove) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === operation.node._key,\n      )\n\n      if (spansMatchingKey.length > 1) {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n        return []\n      }\n\n      return [\n        unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n      ]\n    }\n    return []\n  } else {\n    return []\n  }\n}\n\nexport function mergeNodePatch(\n  schema: EditorSchema,\n  children: Descendant[],\n  operation: MergeNodeOperation,\n  beforeValue: Descendant[],\n): Array<Patch> {\n  const patches: Patch[] = []\n\n  const block = beforeValue[operation.path[0]]\n  const updatedBlock = children[operation.path[0]]\n\n  if (operation.path.length === 1) {\n    if (block?._key) {\n      const newBlock = fromSlateValue(\n        [children[operation.path[0] - 1]],\n        schema.block.name,\n      )[0]\n      patches.push(set(newBlock, [{_key: newBlock._key}]))\n      patches.push(unset([{_key: block._key}]))\n    } else {\n      throw new Error('Target key not found!')\n    }\n  } else if (\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, updatedBlock) &&\n    operation.path.length === 2\n  ) {\n    const updatedSpan =\n      updatedBlock.children[operation.path[1] - 1] &&\n      isSpan({schema}, updatedBlock.children[operation.path[1] - 1])\n        ? updatedBlock.children[operation.path[1] - 1]\n        : undefined\n    const removedSpan =\n      block.children[operation.path[1]] &&\n      isSpan({schema}, block.children[operation.path[1]])\n        ? block.children[operation.path[1]]\n        : undefined\n\n    if (updatedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === updatedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          set(updatedSpan.text, [\n            {_key: block._key},\n            'children',\n            {_key: updatedSpan._key},\n            'text',\n          ]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n\n    if (removedSpan) {\n      const spansMatchingKey = block.children.filter(\n        (span) => span._key === removedSpan._key,\n      )\n\n      if (spansMatchingKey.length === 1) {\n        patches.push(\n          unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n        )\n      } else {\n        console.warn(\n          `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n          JSON.stringify(block, null, 2),\n        )\n      }\n    }\n  }\n  return patches\n}\n\nexport function moveNodePatch(\n  schema: EditorSchema,\n  beforeValue: Descendant[],\n  operation: MoveNodeOperation,\n): Array<Patch> {\n  const patches: Patch[] = []\n  const block = beforeValue[operation.path[0]]\n  const targetBlock = beforeValue[operation.newPath[0]]\n\n  if (!targetBlock) {\n    return patches\n  }\n\n  if (operation.path.length === 1) {\n    const position: InsertPosition =\n      operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n    patches.push(unset([{_key: block._key}]))\n    patches.push(\n      insert([fromSlateValue([block], schema.block.name)[0]], position, [\n        {_key: targetBlock._key},\n      ]),\n    )\n  } else if (\n    operation.path.length === 2 &&\n    isTextBlock({schema}, block) &&\n    isTextBlock({schema}, targetBlock)\n  ) {\n    const child = block.children[operation.path[1]]\n    const targetChild = targetBlock.children[operation.newPath[1]]\n    const position =\n      operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n    const childToInsert = (\n      fromSlateValue([block], schema.block.name)[0] as PortableTextTextBlock\n    ).children[operation.path[1]]\n    patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n    patches.push(\n      insert([childToInsert], position, [\n        {_key: targetBlock._key},\n        'children',\n        {_key: targetChild._key},\n      ]),\n    )\n  }\n  return patches\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {Editor, type Descendant, type Operation} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  insertNodePatch,\n  insertTextPatch,\n  mergeNodePatch,\n  moveNodePatch,\n  removeNodePatch,\n  removeTextPatch,\n  setNodePatch,\n  splitNodePatch,\n} from '../../internal-utils/operation-to-patches'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {getCurrentUndoStepId} from '../with-undo-step'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\ninterface Options {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  relayActor,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(editorActor.getSnapshot().context.schema)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              for (const patch of patches) {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n\n                try {\n                  changed = applyPatch(editor, patch)\n                } catch (error) {\n                  console.error(\n                    `Applying patch ${JSON.stringify(patch)} failed due to: ${error.message}`,\n                  )\n                }\n              }\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(\n        previousChildren,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(\n        editor.children,\n        editorActor.getSnapshot().context.schema,\n      )\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...insertTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...removeTextPatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...removeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...splitNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...insertNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...setNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n            ),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...mergeNodePatch(\n              editorActor.getSnapshot().context.schema,\n              editor.children,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...moveNodePatch(\n              editorActor.getSnapshot().context.schema,\n              previousChildren,\n              operation,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        relayActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            editorActor.getSnapshot().context.schema.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            operationId: getCurrentUndoStepId(editor),\n            value: editor.value,\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const blockIndex = op.path.at(0)\n        const isLonelyBlock =\n          op.path.length === 1 &&\n          blockIndex === 0 &&\n          editor.children.length === 1\n        const isBlockObject =\n          op.node._type !== editorActor.getSnapshot().context.schema.block.name\n\n        if (isLonelyBlock && isBlockObject) {\n          debug('Adding placeholder block')\n          Editor.insertNode(editor, editor.pteCreateTextBlock({decorators: []}))\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport type {\n  PortableTextListBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {Editor, Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isListBlock} from '../../internal-utils/parse-blocks'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n}: {\n  editorActor: EditorActor\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isTextBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isSpan(editorActor.getSnapshot().context, value)\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      if (Editor.isEditor(value)) {\n        return false\n      }\n\n      return isListBlock(editorActor.getSnapshot().context, value)\n    }\n    editor.isVoid = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      return (\n        editorActor.getSnapshot().context.schema.block.name !== element._type &&\n        (editorActor\n          .getSnapshot()\n          .context.schema.blockObjects.map((obj) => obj.name)\n          .includes(element._type) ||\n          editorActor\n            .getSnapshot()\n            .context.schema.inlineObjects.map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      if (Editor.isEditor(element)) {\n        return false\n      }\n\n      const inlineSchemaTypes = editorActor\n        .getSnapshot()\n        .context.schema.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {\n            ...span,\n            _type: editorActor.getSnapshot().context.schema.span.name,\n            _key: key,\n          },\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: editorActor.getSnapshot().context.schema.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style:\n              editorActor.getSnapshot().context.schema.styles[0].name ||\n              'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  editorActor\n                    .getSnapshot()\n                    .context.schema.decorators.find(\n                      ({name}) => name === decorator,\n                    ),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import {slateRangeToSelection} from '../../internal-utils/slate-utils'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nexport function pluginUpdateSelection({\n  editor,\n  editorActor,\n}: {\n  editor: PortableTextSlateEditor\n  editorActor: EditorActor\n}) {\n  const updateSelection = () => {\n    if (editor.selection) {\n      const existingSelection = SLATE_TO_PORTABLE_TEXT_RANGE.get(\n        editor.selection,\n      )\n\n      if (existingSelection) {\n        editorActor.send({\n          type: 'update selection',\n          selection: existingSelection,\n        })\n      } else {\n        const selection = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, selection)\n\n        editorActor.send({type: 'update selection', selection})\n      }\n    } else {\n      editorActor.send({type: 'update selection', selection: null})\n    }\n  }\n\n  const {onChange} = editor\n\n  editor.onChange = () => {\n    onChange()\n\n    if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n      updateSelection()\n    }\n  }\n\n  return editor\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {isTypedObject} from './asserters'\n\ntype Path = Array<number>\n\nexport type PortableTextNode<TEditorSchema extends EditorSchema> =\n  | EditorNode<TEditorSchema>\n  | TextBlockNode<TEditorSchema>\n  | SpanNode<TEditorSchema>\n  | PartialSpanNode\n  | ObjectNode\n\n//////////\n\nexport type EditorNode<TEditorSchema extends EditorSchema> = {\n  children: Array<TextBlockNode<TEditorSchema> | ObjectNode>\n}\n\nexport function isEditorNode<TEditorSchema extends EditorSchema>(\n  node: unknown,\n): node is EditorNode<TEditorSchema> {\n  if (typeof node === 'object' && node !== null) {\n    return (\n      !('_type' in node) && 'children' in node && Array.isArray(node.children)\n    )\n  }\n\n  return false\n}\n\n//////////\n\nexport type TextBlockNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type: TEditorSchema['block']['name']\n  children: Array<SpanNode<TEditorSchema> | ObjectNode>\n  [other: string]: unknown\n}\n\nexport function isTextBlockNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is TextBlockNode<TEditorSchema> {\n  return isTypedObject(node) && node._type === context.schema.block.name\n}\n\n//////////\n\nexport type SpanNode<TEditorSchema extends EditorSchema> = {\n  _key: string\n  _type?: TEditorSchema['span']['name']\n  text: string\n  [other: string]: unknown\n}\n\nexport function isSpanNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  node: unknown,\n): node is SpanNode<TEditorSchema> {\n  if (typeof node !== 'object' || node === null) {\n    return false\n  }\n\n  if ('children' in node) {\n    return false\n  }\n\n  if ('_type' in node) {\n    return node._type === context.schema.span.name\n  }\n\n  return 'text' in node\n}\n\n//////////\n\nexport type PartialSpanNode = {\n  text: string\n  [other: string]: unknown\n}\n\nexport function isPartialSpanNode(node: unknown): node is PartialSpanNode {\n  return (\n    typeof node === 'object' &&\n    node !== null &&\n    'text' in node &&\n    typeof node.text === 'string'\n  )\n}\n\n//////////\n\nexport type ObjectNode = {\n  _type: string\n  _key: string\n  [other: string]: unknown\n}\n\nexport function isObjectNode(\n  context: {schema: EditorSchema},\n  node: unknown,\n): node is ObjectNode {\n  return (\n    !isEditorNode(node) &&\n    !isTextBlockNode(context, node) &&\n    !isSpanNode(context, node) &&\n    !isPartialSpanNode(node)\n  )\n}\n\n/**\n *\n */\nexport function getBlock<TEditorSchema extends EditorSchema>(\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): TextBlockNode<TEditorSchema> | ObjectNode | undefined {\n  const index = path.at(0)\n\n  if (index === undefined || path.length !== 1) {\n    return undefined\n  }\n\n  return root.children.at(index)\n}\n\n/**\n * A \"node\" can either be\n * 1. The root (path length is 0)\n * 2. A block (path length is 1)\n * 3. A span (path length is 2)\n * 4. Or an inline object (path length is 2)\n */\nexport function getNode<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n): PortableTextNode<TEditorSchema> | undefined {\n  if (path.length === 0) {\n    return root\n  }\n\n  if (path.length === 1) {\n    return getBlock(root, path)\n  }\n\n  if (path.length === 2) {\n    const block = getBlock(root, path.slice(0, 1))\n\n    if (!block || !isTextBlockNode(context, block)) {\n      return undefined\n    }\n\n    const child = block.children.at(path[1])\n\n    if (!child) {\n      return undefined\n    }\n\n    return child\n  }\n}\n\nexport function getSpan<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  const node = getNode(context, root, path)\n\n  if (node && isSpanNode(context, node)) {\n    return node\n  }\n\n  return undefined\n}\n\n/**\n * A parent can either be the root or a text block\n */\nexport function getParent<TEditorSchema extends EditorSchema>(\n  context: {schema: TEditorSchema},\n  root: EditorNode<TEditorSchema>,\n  path: Path,\n) {\n  if (path.length === 0) {\n    return undefined\n  }\n\n  const parentPath = path.slice(0, -1)\n\n  if (parentPath.length === 0) {\n    return root\n  }\n\n  const blockIndex = parentPath.at(0)\n\n  if (blockIndex === undefined || parentPath.length !== 1) {\n    return undefined\n  }\n\n  const block = root.children.at(blockIndex)\n\n  if (block && isTextBlockNode(context, block)) {\n    return block\n  }\n\n  return undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {createDraft, finishDraft, type WritableDraft} from 'immer'\nimport {Element, Path, type Node, type Operation} from 'slate'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport type {OmitFromUnion} from '../type-utils'\nimport {\n  getBlock,\n  getNode,\n  getParent,\n  getSpan,\n  isEditorNode,\n  isObjectNode,\n  isPartialSpanNode,\n  isSpanNode,\n  isTextBlockNode,\n  type PortableTextNode,\n  type SpanNode,\n  type TextBlockNode,\n} from './portable-text-node'\n\nexport function applyOperationToPortableText(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  value: Array<PortableTextBlock>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  const draft = createDraft({children: value})\n\n  try {\n    applyOperationToPortableTextDraft(context, draft, operation)\n  } catch (e) {\n    console.error(e)\n  }\n\n  return finishDraft(draft).children\n}\n\nfunction applyOperationToPortableTextDraft(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  root: WritableDraft<{\n    children: Array<PortableTextBlock>\n  }>,\n  operation: OmitFromUnion<Operation, 'type', 'set_selection'>,\n) {\n  switch (operation.type) {\n    case 'insert_node': {\n      const {path, node: insertedNode} = operation\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (index > parent.children.length) {\n        break\n      }\n\n      if (path.length === 1) {\n        // Inserting block at the root\n\n        if (isTextBlockNode(context, insertedNode)) {\n          // Text blocks can be inserted as is\n\n          parent.children.splice(index, 0, {\n            ...insertedNode,\n            children: insertedNode.children.map((child) => {\n              if ('__inline' in child) {\n                // Except for inline object children which need to have their\n                // `value` spread onto the block\n                return {\n                  _key: child._key,\n                  _type: child._type,\n                  ...('value' in child && typeof child.value === 'object'\n                    ? child.value\n                    : {}),\n                }\n              }\n\n              return child\n            }),\n          })\n\n          break\n        }\n\n        if (Element.isElement(insertedNode) && !('__inline' in insertedNode)) {\n          // Void blocks have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      if (path.length === 2) {\n        // Inserting children into blocks\n\n        if (!isTextBlockNode(context, parent)) {\n          // Only text blocks can have children\n          break\n        }\n\n        if (isPartialSpanNode(insertedNode)) {\n          // Text nodes can be inserted as is\n\n          parent.children.splice(index, 0, insertedNode)\n          break\n        }\n\n        if ('__inline' in insertedNode) {\n          // Void children have to have their `value` spread onto the block\n\n          parent.children.splice(index, 0, {\n            _key: insertedNode._key,\n            _type: insertedNode._type,\n            ...('value' in insertedNode &&\n            typeof insertedNode.value === 'object'\n              ? insertedNode.value\n              : {}),\n          })\n          break\n        }\n      }\n\n      break\n    }\n\n    case 'insert_text': {\n      const {path, offset, text} = operation\n      if (text.length === 0) break\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset)\n      span.text = before + text + after\n\n      break\n    }\n\n    case 'merge_node': {\n      const {path} = operation\n      const node = getNode(context, root, path)\n      const prevPath = Path.previous(path)\n      const prev = getNode(context, root, prevPath)\n      const parent = getParent(context, root, path)\n\n      if (!node || !prev || !parent) {\n        break\n      }\n\n      const index = path[path.length - 1]\n\n      if (isPartialSpanNode(node) && isPartialSpanNode(prev)) {\n        prev.text += node.text\n      } else if (\n        isTextBlockNode(context, node) &&\n        isTextBlockNode(context, prev)\n      ) {\n        prev.children.push(...node.children)\n      } else {\n        break\n      }\n\n      parent.children.splice(index, 1)\n\n      break\n    }\n\n    case 'move_node': {\n      const {path, newPath} = operation\n\n      if (Path.isAncestor(path, newPath)) {\n        break\n      }\n\n      const node = getNode(context, root, path)\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!node || !parent) {\n        break\n      }\n\n      // This is tricky, but since the `path` and `newPath` both refer to\n      // the same snapshot in time, there's a mismatch. After either\n      // removing the original position, the second step's path can be out\n      // of date. So instead of using the `op.newPath` directly, we\n      // transform `op.path` to ascertain what the `newPath` would be after\n      // the operation was applied.\n      parent.children.splice(index, 1)\n      const truePath = Path.transform(path, operation)!\n      const newParent = getNode(context, root, Path.parent(truePath))\n      const newIndex = truePath[truePath.length - 1]\n\n      if (!newParent) {\n        break\n      }\n\n      if (!('children' in newParent)) {\n        break\n      }\n\n      if (!Array.isArray(newParent.children)) {\n        break\n      }\n\n      newParent.children.splice(newIndex, 0, node)\n\n      break\n    }\n\n    case 'remove_node': {\n      const {path} = operation\n      const index = path[path.length - 1]\n      const parent = getParent(context, root, path)\n      parent?.children.splice(index, 1)\n\n      break\n    }\n\n    case 'remove_text': {\n      const {path, offset, text} = operation\n\n      if (text.length === 0) {\n        break\n      }\n\n      const span = getSpan(context, root, path)\n\n      if (!span) {\n        break\n      }\n\n      const before = span.text.slice(0, offset)\n      const after = span.text.slice(offset + text.length)\n      span.text = before + after\n\n      break\n    }\n\n    case 'set_node': {\n      const {path, properties, newProperties} = operation\n\n      const node = getNode(context, root, path)\n\n      if (!node) {\n        break\n      }\n\n      if (isEditorNode(node)) {\n        break\n      }\n\n      if (isObjectNode(context, node)) {\n        const valueBefore = (\n          'value' in properties && typeof properties.value === 'object'\n            ? properties.value\n            : {}\n        ) as Partial<Node>\n        const valueAfter = (\n          'value' in newProperties && typeof newProperties.value === 'object'\n            ? newProperties.value\n            : {}\n        ) as Partial<Node>\n\n        for (const key in newProperties) {\n          if (key === 'value') {\n            continue\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in properties) {\n          if (key === 'value') {\n            continue\n          }\n\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        for (const key in valueAfter) {\n          const value = valueAfter[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        for (const key in valueBefore) {\n          if (!valueAfter.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isTextBlockNode(context, node)) {\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof Partial<Node>>key]\n          } else {\n            node[<keyof Partial<Node>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof Partial<Node>>key]\n          }\n        }\n\n        break\n      }\n\n      if (isPartialSpanNode(node)) {\n        for (const key in newProperties) {\n          if (key === 'text') {\n            break\n          }\n\n          const value = newProperties[key as keyof Partial<Node>]\n\n          if (value == null) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          } else {\n            node[<keyof PortableTextNode<EditorSchema>>key] = value\n          }\n        }\n\n        // properties that were previously defined, but are now missing, must be deleted\n        for (const key in properties) {\n          if (!newProperties.hasOwnProperty(key)) {\n            delete node[<keyof PortableTextNode<EditorSchema>>key]\n          }\n        }\n\n        break\n      }\n\n      break\n    }\n\n    case 'split_node': {\n      const {path, position, properties} = operation\n\n      if (path.length === 0) {\n        break\n      }\n\n      const parent = getParent(context, root, path)\n      const index = path[path.length - 1]\n\n      if (!parent) {\n        break\n      }\n\n      if (isEditorNode(parent)) {\n        const block = getBlock(root, path)\n\n        if (!block || !isTextBlockNode(context, block)) {\n          break\n        }\n\n        const before = block.children.slice(0, position)\n        const after = block.children.slice(position)\n        block.children = before\n\n        // _key is deliberately left out\n        const newTextBlockNode = {\n          ...properties,\n          children: after,\n          _type: context.schema.block.name,\n        } as unknown as TextBlockNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newTextBlockNode)\n\n        break\n      }\n\n      if (isTextBlockNode(context, parent)) {\n        const node = getNode(context, root, path)\n\n        if (!node || !isSpanNode(context, node)) {\n          break\n        }\n\n        const before = node.text.slice(0, position)\n        const after = node.text.slice(position)\n        node.text = before\n\n        // _key is deliberately left out\n        const newSpanNode = {\n          ...properties,\n          text: after,\n        } as unknown as SpanNode<EditorSchema>\n\n        parent.children.splice(index + 1, 0, newSpanNode)\n      }\n\n      break\n    }\n  }\n\n  return root\n}\n","import {applyOperationToPortableText} from '../../internal-utils/apply-operation-to-portable-text'\nimport {buildIndexMaps} from '../../internal-utils/build-index-maps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorContext} from '../editor-snapshot'\n\nexport function pluginUpdateValue(\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>,\n  editor: PortableTextSlateEditor,\n) {\n  const {apply} = editor\n\n  editor.apply = (operation) => {\n    if (operation.type === 'set_selection') {\n      apply(operation)\n      return\n    }\n\n    editor.value = applyOperationToPortableText(\n      context,\n      editor.value,\n      operation,\n    )\n\n    if (operation.type === 'insert_text' || operation.type === 'remove_text') {\n      // Inserting and removing text has no effect on index maps so there is\n      // no need to rebuild those.\n      apply(operation)\n      return\n    }\n\n    buildIndexMaps(\n      {\n        schema: context.schema,\n        value: editor.value,\n      },\n      {\n        blockIndexMap: editor.blockIndexMap,\n        listIndexMap: editor.listIndexMap,\n      },\n    )\n\n    apply(operation)\n  }\n\n  return editor\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport type {RelayActor} from '../relay-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\nimport {pluginUpdateSelection} from './slate-plugin.update-selection'\nimport {pluginUpdateValue} from './slate-plugin.update-value'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, relayActor} = options\n  const withObjectKeys = createWithObjectKeys(editorActor)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    relayActor,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n  })\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPlaceholderBlock(\n            withUtils(\n              withMaxBlocks(\n                withUndoRedo(\n                  withPatches(\n                    pluginUpdateValue(\n                      editorActor.getSnapshot().context,\n                      pluginUpdateSelection({\n                        editorActor,\n                        editor: e,\n                      }),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {buildIndexMaps} from '../internal-utils/build-index-maps'\nimport {createPlaceholderBlock} from '../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../internal-utils/debug'\nimport {toSlateValue} from '../internal-utils/values'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\nimport type {RelayActor} from './relay-machine'\n\nconst debug = debugWithName('setup')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  subscriptions: Array<() => () => void>\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  debug('Creating new Slate editor instance')\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    relayActor: config.relayActor,\n    subscriptions: config.subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  instance.decoratedRanges = []\n  instance.decoratorState = {}\n\n  const placeholderBlock = createPlaceholderBlock(\n    config.editorActor.getSnapshot().context,\n  )\n  instance.value = [placeholderBlock]\n  instance.blockIndexMap = new Map<string, number>()\n  instance.listIndexMap = new Map<string, number>()\n\n  buildIndexMaps(\n    {\n      schema: config.editorActor.getSnapshot().context.schema,\n      value: instance.value,\n    },\n    {\n      blockIndexMap: instance.blockIndexMap,\n      listIndexMap: instance.listIndexMap,\n    },\n  )\n\n  const initialValue = toSlateValue(instance.value, {\n    schemaTypes: config.editorActor.getSnapshot().context.schema,\n  })\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  return slateEditor\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {BehaviorEvent} from '../behaviors'\nimport {toSlateRange} from '../internal-utils/to-slate-range'\nimport type {PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport type EditorDom = {\n  getBlockNodes: (snapshot: EditorSnapshot) => Array<Node>\n  getChildNodes: (snapshot: EditorSnapshot) => Array<Node>\n  /**\n   * Let the Editor set the drag ghost. This is to be sure that it will get\n   * properly removed again when the drag ends.\n   */\n  setDragGhost: ({\n    event,\n    ghost,\n  }: {\n    event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n    ghost: {\n      element: HTMLElement\n      x: number\n      y: number\n    }\n  }) => void\n}\n\nexport function createEditorDom(\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void,\n  slateEditor: PortableTextSlateEditor,\n): EditorDom {\n  return {\n    getBlockNodes: (snapshot) => getBlockNodes(slateEditor, snapshot),\n    getChildNodes: (snapshot) => getChildNodes(slateEditor, snapshot),\n    setDragGhost: ({event, ghost}) => setDragGhost({sendBack, event, ghost}),\n  }\n}\n\nfunction getBlockNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot)\n\n  if (!range) {\n    return []\n  }\n\n  try {\n    const blockEntries = Array.from(\n      Editor.nodes(slateEditor, {\n        at: range,\n        mode: 'highest',\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )\n\n    return blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    )\n  } catch {\n    return []\n  }\n}\n\nfunction getChildNodes(\n  slateEditor: PortableTextSlateEditor,\n  snapshot: EditorSnapshot,\n) {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const range = toSlateRange(snapshot)\n\n  if (!range) {\n    return []\n  }\n\n  try {\n    const childEntries = Array.from(\n      Editor.nodes(slateEditor, {\n        at: range,\n        mode: 'lowest',\n        match: (n) => !Editor.isEditor(n),\n      }),\n    )\n\n    return childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    )\n  } catch {\n    return []\n  }\n}\n\nfunction setDragGhost({\n  sendBack,\n  event,\n  ghost,\n}: {\n  sendBack: (event: {type: 'set drag ghost'; ghost: HTMLElement}) => void\n  event: PickFromUnion<BehaviorEvent, 'type', 'drag.dragstart'>\n  ghost: {\n    element: HTMLElement\n    x: number\n    y: number\n  }\n}) {\n  event.originEvent.dataTransfer.setDragImage(ghost.element, ghost.x, ghost.y)\n\n  sendBack({\n    type: 'set drag ghost',\n    ghost: ghost.element,\n  })\n}\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', at: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\n/**\n * By default, same-type annotations can overlap. This Core Behavior ensures\n * that annotations of the same type are mutually exclusive.\n */\nconst preventOverlappingAnnotations = defineBehavior({\n  // Given an `annotation.add` event\n  on: 'annotation.add',\n  // When the annotation is active in the selection\n  guard: ({snapshot, event}) =>\n    selectors.isActiveAnnotation(event.annotation.name, {mode: 'partial'})(\n      snapshot,\n    ),\n  // Then the existing annotation is removed\n  actions: [\n    ({event}) => [\n      raise({type: 'annotation.remove', annotation: event.annotation}),\n      raise(event),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = [\n  addAnnotationOnCollapsedSelection,\n  preventOverlappingAnnotations,\n]\n","import {\n  bold,\n  code,\n  createKeyboardShortcut,\n  italic,\n  redo,\n  underline,\n  undo,\n} from '@portabletext/keyboard-shortcuts'\n\nexport const defaultKeyboardShortcuts = {\n  arrowDown: createKeyboardShortcut({\n    default: [\n      {\n        key: 'ArrowDown',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  arrowUp: createKeyboardShortcut({\n    default: [\n      {\n        key: 'ArrowUp',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  break: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Enter',\n        shift: false,\n      },\n    ],\n  }),\n  lineBreak: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Enter',\n        shift: true,\n      },\n    ],\n  }),\n  decorators: {\n    strong: bold,\n    em: italic,\n    underline: underline,\n    code: code,\n  },\n  history: {\n    undo,\n    redo,\n  },\n  tab: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Tab',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: false,\n      },\n    ],\n  }),\n  shiftTab: createKeyboardShortcut({\n    default: [\n      {\n        key: 'Tab',\n        alt: false,\n        ctrl: false,\n        meta: false,\n        shift: true,\n      },\n    ],\n  }),\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = defaultKeyboardShortcuts.arrowDown.guard(\n      event.originEvent,\n    )\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = defaultKeyboardShortcuts.arrowUp.guard(event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const previousBlock = selectors.getPreviousBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.readOnly) {\n      return false\n    }\n\n    if (\n      snapshot.context.selection &&\n      !selectors.isSelectionCollapsed(snapshot)\n    ) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n    const nextBlock = selectors.getNextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.position.selection,\n      },\n    })\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot, event}) => [\n      raise({\n        type: 'select',\n        at: event.position.selection,\n      }),\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n        select: 'start',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(snapshot.context, focusTextBlock.node) &&\n      !isTextBlock(snapshot.context, nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        at: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.strong.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.em.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.underline.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.decorators.code.guard(event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.name === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport * as selectors from '../selectors'\nimport {effect, forward, raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * Core Behavior that:\n   * 1. Calculates and selects a \"drag selection\"\n   * 2. Constructs and sets a drag ghost element\n   * 3. Forwards the dragstart event\n   */\n  defineBehavior({\n    on: 'drag.dragstart',\n    guard: ({snapshot, dom, event}) => {\n      const dragSelection = getDragSelection({\n        snapshot,\n        eventSelection: event.position.selection,\n      })\n      const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n      const draggedDomNodes = {\n        blockNodes: dom.getBlockNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n        childNodes: dom.getChildNodes({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        }),\n      }\n\n      return {\n        dragSelection,\n        draggedDomNodes,\n        selectingEntireBlocks,\n      }\n    },\n    actions: [\n      (\n        {dom, event},\n        {dragSelection, draggedDomNodes, selectingEntireBlocks},\n      ) => {\n        const dragGhost = document.createElement('div')\n\n        if (selectingEntireBlocks) {\n          // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n          const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const block of clonedBlockNodes) {\n            if (block instanceof HTMLElement) {\n              block.style.position = 'relative'\n            }\n            dragGhost.appendChild(block)\n          }\n\n          // A custom drag ghost element can be configured using this data attribute\n          const customGhost = dragGhost.querySelector(\n            '[data-pt-drag-ghost-element]',\n          )\n          if (customGhost) {\n            dragGhost.replaceChildren(customGhost)\n          }\n\n          // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n          dragGhost.setAttribute('data-dragged', '')\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          if (customGhost) {\n            const customGhostRect = customGhost.getBoundingClientRect()\n            const x = event.originEvent.clientX - customGhostRect.left\n            const y = event.originEvent.clientY - customGhostRect.top\n            dragGhost.style.width = `${customGhostRect.width}px`\n            dragGhost.style.height = `${customGhostRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {\n                    element: dragGhost,\n                    x,\n                    y,\n                  },\n                })\n              }),\n              forward(event),\n            ]\n          } else {\n            const blocksDomRect = getCompoundClientRect(\n              draggedDomNodes.blockNodes,\n            )\n            const x = event.originEvent.clientX - blocksDomRect.left\n            const y = event.originEvent.clientY - blocksDomRect.top\n            dragGhost.style.width = `${blocksDomRect.width}px`\n            dragGhost.style.height = `${blocksDomRect.height}px`\n\n            return [\n              raise({\n                type: 'select',\n                at: dragSelection,\n              }),\n              effect(() => {\n                dom.setDragGhost({\n                  event,\n                  ghost: {element: dragGhost, x, y},\n                })\n              }),\n              forward(event),\n            ]\n          }\n        } else {\n          const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n            node.cloneNode(true),\n          )\n\n          for (const child of clonedChildNodes) {\n            dragGhost.appendChild(child)\n          }\n\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n\n          const childrenDomRect = getCompoundClientRect(\n            draggedDomNodes.childNodes,\n          )\n          const x = event.originEvent.clientX - childrenDomRect.left\n          const y = event.originEvent.clientY - childrenDomRect.top\n          dragGhost.style.width = `${childrenDomRect.width}px`\n          dragGhost.style.height = `${childrenDomRect.height}px`\n\n          return [\n            raise({\n              type: 'select',\n              at: dragSelection,\n            }),\n            effect(() => {\n              dom.setDragGhost({\n                event,\n                ghost: {element: dragGhost, x, y},\n              })\n            }),\n            forward(event),\n          ]\n        }\n      },\n    ],\n  }),\n\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const draggingOverDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [],\n  }),\n\n  /**\n   * If the drop position overlaps the drag origin, then the event should be\n   * cancelled.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = event.dragOrigin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [],\n  }),\n  /**\n   * If we drop and have access to a drag origin, then we can deserialize\n   * without creating a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({event}) => event.dragOrigin !== undefined,\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  /**\n   * Otherwise, we should to create a new selection.\n   */\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n\n  /**\n   * Core Behavior that uses the drag origin to mimic a move operation during\n   * internal dragging.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        event.originEvent.dragOrigin === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = event.originEvent.dragOrigin\n      const dragSelection = getDragSelection({\n        eventSelection: dragOrigin.selection,\n        snapshot,\n      })\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragSelection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          dropPosition,\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          dropPosition,\n          originEvent,\n        },\n      ) => [\n        raise({\n          type: 'select',\n          at: dropPosition,\n        }),\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                at: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n]\n","import * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock =\n      selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.name === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.name === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock =\n      selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.name,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireDocument = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const firstBlock = selectors.getFirstBlock(snapshot)\n    const lastBlock = selectors.getLastBlock(snapshot)\n\n    if (!firstBlock || !lastBlock) {\n      return false\n    }\n\n    const firstBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: firstBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const lastBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: lastBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(firstBlockStartPoint, selectionStartPoint) &&\n      utils.isEqualSelectionPoints(lastBlockEndPoint, selectionEndPoint)\n    ) {\n      return {selection: snapshot.context.selection}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selection}) => [\n      raise({\n        type: 'delete',\n        at: selection,\n      }),\n    ],\n  ],\n})\n\nconst breakingEntireBlocks = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    if (!selectors.isSelectionExpanded(snapshot)) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return false\n    }\n\n    const startBlockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block: selectionStartBlock,\n    })\n    const selectionStartPoint = utils.getSelectionStartPoint(\n      snapshot.context.selection,\n    )\n    const endBlockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block: selectionEndBlock,\n    })\n    const selectionEndPoint = utils.getSelectionEndPoint(\n      snapshot.context.selection,\n    )\n\n    if (\n      utils.isEqualSelectionPoints(selectionStartPoint, startBlockStartPoint) &&\n      utils.isEqualSelectionPoints(selectionEndPoint, endBlockEndPoint)\n    ) {\n      return {selectedBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {selectedBlocks}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n        placement: 'before',\n        select: 'start',\n      }),\n      ...selectedBlocks.map((block) =>\n        raise({\n          type: 'delete.block',\n          at: block.path,\n        }),\n      ),\n    ],\n  ],\n})\n\nconst breakingInlineObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusInlineObject = selectors.getFocusInlineObject(snapshot)\n\n    return selectionCollapsed && focusInlineObject\n  },\n  actions: [\n    () => [raise({type: 'move.forward', distance: 1}), raise({type: 'split'})],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n  breakingEntireDocument,\n  breakingEntireBlocks,\n  breakingInlineObject,\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {getChildKeyFromSelectionPoint} from '../selection/selection-point'\nimport {isSelectionCollapsed} from './util.is-selection-collapsed'\n\nexport function isAtTheBeginningOfBlock({\n  context,\n  block,\n}: {\n  context: EditorContext\n  block: PortableTextBlock\n}) {\n  if (!isTextBlock(context, block)) {\n    return false\n  }\n\n  if (!context.selection) {\n    return false\n  }\n\n  if (!isSelectionCollapsed(context.selection)) {\n    return false\n  }\n\n  const focusSpanKey = getChildKeyFromSelectionPoint(context.selection.focus)\n\n  return (\n    focusSpanKey === block.children[0]._key &&\n    context.selection.focus.offset === 0\n  )\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport {isListBlock} from '../internal-utils/parse-blocks'\nimport {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport * as selectors from '../selectors'\nimport {\n  getBlockEndPoint,\n  getBlockStartPoint,\n  isEqualSelectionPoints,\n} from '../utils'\nimport {isAtTheBeginningOfBlock} from '../utils/util.at-the-beginning-of-block'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {sliceTextBlock} from '../utils/util.slice-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n    if (!focusTextBlock) {\n      return false\n    }\n\n    if (focusTextBlock.node.level !== 1) {\n      return false\n    }\n\n    if (\n      !isAtTheBeginningOfBlock({\n        context: snapshot.context,\n        block: focusTextBlock.node,\n      })\n    ) {\n      return false\n    }\n\n    return {focusTextBlock}\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Delete in an empty list item would delete it by default. Instead,\n * then text block below should be merged into it, preserving the list\n * properties.\n */\nconst mergeTextIntoListOnDelete = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusListBlock || !nextBlock) {\n      return false\n    }\n\n    if (!isTextBlock(snapshot.context, nextBlock.node)) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    return {focusListBlock, nextBlock}\n  },\n  actions: [\n    (_, {nextBlock}) => [\n      raise({\n        type: 'insert.block',\n        block: nextBlock.node,\n        placement: 'auto',\n        select: 'start',\n      }),\n      raise({\n        type: 'delete.block',\n        at: nextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Backspace before an empty list item would delete it by default.\n * Instead, the text block below should be merged into it, preserving the list\n * properties.\n */\nconst mergeTextIntoListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !previousBlock) {\n      return false\n    }\n\n    if (\n      !isAtTheBeginningOfBlock({\n        context: snapshot.context,\n        block: focusTextBlock.node,\n      })\n    ) {\n      return false\n    }\n\n    if (!isListBlock(snapshot.context, previousBlock.node)) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, previousBlock.node)) {\n      return false\n    }\n\n    const previousBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: previousBlock,\n    })\n\n    return {focusTextBlock, previousBlockEndPoint}\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlockEndPoint}) => [\n      raise({\n        type: 'select',\n        at: {\n          anchor: previousBlockEndPoint,\n          focus: previousBlockEndPoint,\n        },\n      }),\n      raise({\n        type: 'insert.block',\n        block: focusTextBlock.node,\n        placement: 'auto',\n        select: 'start',\n      }),\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * When performing a delete operation where the start point of the operation is\n * at the start of a list item and the end point of the operation is in another\n * list item, we make sure the preserve the first list item. Otherwise, the\n * default behavior would be to preserve the last item.\n */\nconst deletingListFromStart = defineBehavior({\n  on: 'delete',\n  guard: ({snapshot, event}) => {\n    const blocksToDelete = selectors.getSelectedBlocks({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at,\n      },\n    })\n\n    if (blocksToDelete.length < 2) {\n      return false\n    }\n\n    const startBlock = blocksToDelete.at(0)?.node\n    const middleBlocks = blocksToDelete.slice(1, -1)\n    const endBlock = blocksToDelete.at(-1)?.node\n\n    if (\n      !isListBlock(snapshot.context, startBlock) ||\n      !isListBlock(snapshot.context, endBlock)\n    ) {\n      // It's that any block in between isn't a list item, but the first and\n      // last blocks have to be list items for this Behavior to take effect.\n      return false\n    }\n\n    const deleteStartPoint = selectors.getSelectionStartPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at,\n      },\n    })\n    const deleteEndPoint = selectors.getSelectionEndPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: event.at,\n      },\n    })\n\n    if (!deleteStartPoint || !deleteEndPoint) {\n      return false\n    }\n\n    const startBlockStartPoint = getBlockStartPoint({\n      context: snapshot.context,\n      block: {\n        node: startBlock,\n        path: [{_key: startBlock._key}],\n      },\n    })\n\n    if (!isEqualSelectionPoints(deleteStartPoint, startBlockStartPoint)) {\n      // If we aren't deleting from the beginning of the first list item, then\n      // there is no need to proceed. The default delete Behavior will suffice.\n      return false\n    }\n\n    const startBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: {\n        node: startBlock,\n        path: [{_key: startBlock._key}],\n      },\n    })\n    const endBlockEndPoint = getBlockEndPoint({\n      context: snapshot.context,\n      block: {\n        node: endBlock,\n        path: [{_key: endBlock._key}],\n      },\n    })\n    const slicedEndBlock = sliceTextBlock({\n      context: {\n        schema: snapshot.context.schema,\n        selection: {\n          anchor: deleteEndPoint,\n          focus: endBlockEndPoint,\n        },\n      },\n      block: endBlock,\n    })\n\n    return {\n      startBlockStartPoint,\n      startBlockEndPoint,\n      middleBlocks,\n      endBlock,\n      slicedEndBlock,\n    }\n  },\n  actions: [\n    (\n      _,\n      {\n        startBlockStartPoint,\n        startBlockEndPoint,\n        middleBlocks,\n        endBlock,\n        slicedEndBlock,\n      },\n    ) => [\n      // All block in between can safely be deleted.\n      ...middleBlocks.map((block) =>\n        raise({type: 'delete.block', at: block.path}),\n      ),\n      // The last block is deleted as well.\n      raise({type: 'delete.block', at: [{_key: endBlock._key}]}),\n      // But in case the delete operation didn't reach all the way to the end\n      // of it, we first place the caret at the end of the start block...\n      raise({\n        type: 'select',\n        at: {\n          anchor: startBlockEndPoint,\n          focus: startBlockEndPoint,\n        },\n      }),\n      // ...and insert the rest of the end block at the end of it.\n      raise({\n        type: 'insert.block',\n        block: slicedEndBlock,\n        placement: 'auto',\n        select: 'none',\n      }),\n      // And finally, we delete the original text of the start block.\n      raise({\n        type: 'delete',\n        at: {anchor: startBlockStartPoint, focus: startBlockEndPoint},\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Enter in an empty list item would create a new list item below by\n * default. Instead, the list properties should be cleared.\n */\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(snapshot.context, focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\n/**\n * Hitting Tab should indent the list item.\n */\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = defaultKeyboardShortcuts.tab.guard(event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\n/**\n * Hitting Shift+Tab should unindent the list item.\n */\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = defaultKeyboardShortcuts.shiftTab.guard(\n      event.originEvent,\n    )\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      isListBlock(snapshot.context, block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\n/**\n * An inserted list inherits the `level` from the list item where it's\n * inserted. The entire list tree is adjusted to match the new level.\n */\nconst inheritListLevel = defineBehavior({\n  on: 'insert.blocks',\n  guard: ({snapshot, event}) => {\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    const firstInsertedBlock = event.blocks.at(0)\n    const secondInsertedBlock = event.blocks.at(1)\n    const insertedListBlock = isListBlock(snapshot.context, firstInsertedBlock)\n      ? firstInsertedBlock\n      : isListBlock(snapshot.context, secondInsertedBlock)\n        ? secondInsertedBlock\n        : undefined\n\n    if (!insertedListBlock) {\n      return false\n    }\n\n    const levelDifference = focusListBlock.node.level - insertedListBlock.level\n\n    if (levelDifference === 0) {\n      return false\n    }\n\n    return {levelDifference, insertedListBlock}\n  },\n  actions: [\n    ({snapshot, event}, {levelDifference, insertedListBlock}) => {\n      let adjustLevel = true\n      let listStartBlockFound = false\n\n      return [\n        raise({\n          ...event,\n          blocks: event.blocks.map((block) => {\n            if (block._key === insertedListBlock._key) {\n              listStartBlockFound = true\n            }\n\n            if (!adjustLevel) {\n              return block\n            }\n\n            if (\n              listStartBlockFound &&\n              adjustLevel &&\n              isListBlock(snapshot.context, block)\n            ) {\n              return {\n                ...block,\n                level: Math.min(\n                  MAX_LIST_LEVEL,\n                  Math.max(1, block.level + levelDifference),\n                ),\n              }\n            }\n\n            if (listStartBlockFound) {\n              adjustLevel = false\n            }\n\n            return block\n          }),\n        }),\n      ]\n    },\n  ],\n})\n\n/**\n * An inserted list inherits the `listItem` from the list item at the level\n * it's inserted.\n */\nconst inheritListItem = defineBehavior({\n  on: 'insert.blocks',\n  guard: ({snapshot, event}) => {\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    if (isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    const firstInsertedBlock = event.blocks.at(0)\n    const secondInsertedBlock = event.blocks.at(1)\n    const insertedListBlock = isListBlock(snapshot.context, firstInsertedBlock)\n      ? firstInsertedBlock\n      : isListBlock(snapshot.context, secondInsertedBlock)\n        ? secondInsertedBlock\n        : undefined\n\n    if (!insertedListBlock) {\n      return false\n    }\n\n    if (focusListBlock.node.level !== insertedListBlock.level) {\n      return false\n    }\n\n    if (focusListBlock.node.listItem === insertedListBlock.listItem) {\n      return false\n    }\n\n    return {listItem: focusListBlock.node.listItem, insertedListBlock}\n  },\n  actions: [\n    ({snapshot, event}, {listItem, insertedListBlock}) => {\n      let adjustListItem = true\n      let listStartBlockFound = false\n\n      return [\n        raise({\n          ...event,\n          blocks: event.blocks.map((block) => {\n            if (block._key === insertedListBlock._key) {\n              listStartBlockFound = true\n            }\n\n            if (!adjustListItem) {\n              return block\n            }\n\n            if (\n              listStartBlockFound &&\n              adjustListItem &&\n              isListBlock(snapshot.context, block)\n            ) {\n              return {\n                ...block,\n                listItem:\n                  block.level === insertedListBlock.level\n                    ? listItem\n                    : block.listItem,\n              }\n            }\n\n            if (listStartBlockFound) {\n              adjustListItem = false\n            }\n\n            return block\n          }),\n        }),\n      ]\n    },\n  ],\n})\n\n/**\n * An inserted text block inherits the `listItem` and `level` from the list\n * item where it's inserted.\n */\nconst inheritListProperties = defineBehavior({\n  on: 'insert.block',\n  guard: ({snapshot, event}) => {\n    if (event.placement !== 'auto') {\n      return false\n    }\n\n    if (event.block._type !== snapshot.context.schema.block.name) {\n      return false\n    }\n\n    if (event.block.listItem !== undefined) {\n      return false\n    }\n\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (!focusListBlock) {\n      return false\n    }\n\n    if (!isEmptyTextBlock(snapshot.context, focusListBlock.node)) {\n      return false\n    }\n\n    return {\n      level: focusListBlock.node.level,\n      listItem: focusListBlock.node.listItem,\n    }\n  },\n  actions: [\n    ({event}, {level, listItem}) => [\n      raise({\n        ...event,\n        block: {\n          ...event.block,\n          level,\n          listItem,\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  mergeTextIntoListOnDelete,\n  mergeTextIntoListOnBackspace,\n  deletingListFromStart,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n  inheritListLevel,\n  inheritListItem,\n  inheritListProperties,\n}\n","import {corePriority} from '../priority/priority.core'\nimport {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\nexport const coreBehaviorsConfig = [\n  ...coreAnnotationBehaviors,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.mergeTextIntoListOnDelete,\n  coreListBehaviors.mergeTextIntoListOnBackspace,\n  coreListBehaviors.deletingListFromStart,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreListBehaviors.inheritListLevel,\n  coreListBehaviors.inheritListItem,\n  coreListBehaviors.inheritListProperties,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n  coreInsertBreakBehaviors.breakingEntireDocument,\n  coreInsertBreakBehaviors.breakingEntireBlocks,\n  coreInsertBreakBehaviors.breakingInlineObject,\n].map((behavior) => ({\n  behavior,\n  priority: corePriority,\n}))\n","import {isActiveAnnotation} from '../selectors'\nimport * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.set',\n    guard: ({snapshot, event}) => {\n      const blockKey = event.at[0]._key\n      const markDefKey = event.at[2]._key\n\n      const block = selectors.getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: [{_key: blockKey}],\n              offset: 0,\n            },\n            focus: {\n              path: [{_key: blockKey}],\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!block) {\n        return false\n      }\n\n      const updatedMarkDefs = block.node.markDefs?.map((markDef) => {\n        if (markDef._key === markDefKey) {\n          return {\n            ...markDef,\n            ...event.props,\n          }\n        }\n\n        return markDef\n      })\n\n      return {blockKey, updatedMarkDefs}\n    },\n    actions: [\n      (_, {blockKey, updatedMarkDefs}) => [\n        raise({\n          type: 'block.set',\n          at: [{_key: blockKey}],\n          props: {markDefs: updatedMarkDefs},\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.at\n        ? blockOffsetsToSelection({\n            context: snapshot.context,\n            offsets: event.at,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import {isSpan, isTextBlock} from '@portabletext/schema'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeleteBehaviors = [\n  defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'backward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete',\n    guard: ({snapshot, event}) => {\n      if (event.direction !== 'backward') {\n        return false\n      }\n\n      const previousBlock = selectors.getPreviousBlock(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (!previousBlock || !focusTextBlock) {\n        return false\n      }\n\n      if (!selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)) {\n        return false\n      }\n\n      const previousBlockEndPoint = utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: previousBlock,\n      })\n\n      if (!isTextBlock(snapshot.context, previousBlock.node)) {\n        return false\n      }\n\n      return {previousBlockEndPoint, focusTextBlock}\n    },\n    actions: [\n      (_, {previousBlockEndPoint, focusTextBlock}) => [\n        raise({\n          type: 'delete.block',\n          at: focusTextBlock.path,\n        }),\n        raise({\n          type: 'select',\n          at: {\n            anchor: previousBlockEndPoint,\n            focus: previousBlockEndPoint,\n          },\n        }),\n        raise({\n          type: 'insert.block',\n          block: focusTextBlock.node,\n          placement: 'auto',\n          select: 'start',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.forward',\n    guard: ({snapshot}) => {\n      if (!snapshot.context.selection) {\n        return false\n      }\n\n      return {selection: snapshot.context.selection}\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          direction: 'forward',\n          unit: event.unit,\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete',\n    guard: ({snapshot, event}) => {\n      if (event.direction !== 'forward') {\n        return false\n      }\n\n      const nextBlock = selectors.getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: event.at,\n        },\n      })\n      const focusTextBlock = selectors.getFocusTextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: event.at,\n        },\n      })\n\n      if (!nextBlock || !focusTextBlock) {\n        return false\n      }\n\n      if (!utils.isEmptyTextBlock(snapshot.context, focusTextBlock.node)) {\n        return false\n      }\n\n      const nextBlockStartPoint = utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: nextBlock,\n      })\n\n      return {focusTextBlock, nextBlockStartPoint}\n    },\n    actions: [\n      (_, {focusTextBlock, nextBlockStartPoint}) => [\n        raise({\n          type: 'delete.block',\n          at: focusTextBlock.path,\n        }),\n        raise({\n          type: 'select',\n          at: {\n            anchor: nextBlockStartPoint,\n            focus: nextBlockStartPoint,\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete',\n    guard: ({snapshot, event}) => {\n      if (event.direction !== 'forward') {\n        return false\n      }\n\n      const nextBlock = selectors.getNextBlock(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (!nextBlock || !focusTextBlock) {\n        return false\n      }\n\n      if (!selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)) {\n        return false\n      }\n\n      if (!isTextBlock(snapshot.context, nextBlock.node)) {\n        return false\n      }\n\n      return {nextBlock}\n    },\n    actions: [\n      (_, {nextBlock}) => [\n        raise({\n          type: 'delete.block',\n          at: nextBlock.path,\n        }),\n        raise({\n          type: 'insert.block',\n          block: nextBlock.node,\n          placement: 'auto',\n          select: 'none',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.block',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'delete',\n          at: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'delete.child',\n    guard: ({snapshot, event}) => {\n      const focusChild = selectors.getFocusChild({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!focusChild) {\n        return false\n      }\n\n      if (isSpan(snapshot.context, focusChild.node)) {\n        return {\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: focusChild.node.text.length,\n            },\n          },\n        }\n      }\n\n      return {\n        selection: {\n          anchor: {\n            path: event.at,\n            offset: 0,\n          },\n          focus: {\n            path: event.at,\n            offset: 0,\n          },\n        },\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n  defineBehavior({\n    on: 'delete.text',\n    guard: ({snapshot, event}) => {\n      const selection = utils.blockOffsetsToSelection({\n        context: snapshot.context,\n        offsets: event.at,\n      })\n\n      if (!selection) {\n        return false\n      }\n\n      const trimmedSelection = selectors.getTrimmedSelection({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          value: snapshot.context.value,\n          selection,\n        },\n      })\n\n      if (!trimmedSelection) {\n        return false\n      }\n\n      return {\n        selection: trimmedSelection,\n      }\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n]\n","import {isTextBlock} from '@portabletext/schema'\nimport * as selectors from '../selectors'\nimport {getActiveDecorators} from '../selectors/selector.get-active-decorators'\nimport {getTextBlockText} from '../utils/util.get-text-block-text'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractDeserializeBehaviors = [\n  defineBehavior({\n    on: 'deserialize',\n    guard: ({event}) => {\n      const portableText = event.originEvent.originEvent.dataTransfer.getData(\n        'application/x-portable-text',\n      )\n\n      if (portableText) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'application/x-portable-text',\n          data: portableText,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      const json =\n        event.originEvent.originEvent.dataTransfer.getData('application/json')\n\n      if (json) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'application/json',\n          data: json,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      const html =\n        event.originEvent.originEvent.dataTransfer.getData('text/html')\n\n      if (html) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'text/html',\n          data: html,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      const text =\n        event.originEvent.originEvent.dataTransfer.getData('text/plain')\n\n      if (text) {\n        return {\n          type: 'deserialize.data',\n          mimeType: 'text/plain',\n          data: text,\n          originEvent: event.originEvent,\n        } as const\n      }\n\n      return false\n    },\n    actions: [(_, deserializeEvent) => [raise(deserializeEvent)]],\n  }),\n  defineBehavior({\n    on: 'deserialize',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialization.failure',\n          mimeType: '*/*',\n          reason: 'No Behavior was able to handle the incoming data',\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialize.data',\n    guard: ({snapshot, event}) => {\n      const converter = snapshot.context.converters.find(\n        (converter) => converter.mimeType === event.mimeType,\n      )\n\n      if (!converter) {\n        return false\n      }\n\n      return converter.deserialize({\n        snapshot,\n        event: {\n          type: 'deserialize',\n          data: event.data,\n        },\n      })\n    },\n    actions: [\n      ({event}, deserializeEvent) => [\n        raise({\n          ...deserializeEvent,\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = getActiveDecorators(snapshot)\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    guard: ({event}) => {\n      if (event.mimeType === 'application/x-portable-text') {\n        const json =\n          event.originEvent.originEvent.dataTransfer.getData('application/json')\n\n        if (json) {\n          return {\n            type: 'deserialize.data',\n            mimeType: 'application/json',\n            data: json,\n            originEvent: event.originEvent,\n          } as const\n        }\n      }\n\n      if (event.mimeType === 'application/json') {\n        const html =\n          event.originEvent.originEvent.dataTransfer.getData('text/html')\n\n        if (html) {\n          return {\n            type: 'deserialize.data',\n            mimeType: 'text/html',\n            data: html,\n            originEvent: event.originEvent,\n          } as const\n        }\n      }\n\n      if (event.mimeType === 'text/html') {\n        const text =\n          event.originEvent.originEvent.dataTransfer.getData('text/plain')\n\n        if (text) {\n          return {\n            type: 'deserialize.data',\n            mimeType: 'text/plain',\n            data: text,\n            originEvent: event.originEvent,\n          } as const\n        }\n      }\n\n      return false\n    },\n    actions: [(_, deserializeDataEvent) => [raise(deserializeDataEvent)]],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors'\nimport {\n  getBlockEndPoint,\n  getBlockStartPoint,\n  isEmptyTextBlock,\n  isEqualSelectionPoints,\n} from '../utils'\nimport {sliceTextBlock} from '../utils/util.slice-text-block'\nimport {execute, raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => {\n      const onlyBlock =\n        event.blocks.length === 1 ? event.blocks.at(0) : undefined\n\n      if (!onlyBlock) {\n        return false\n      }\n\n      return {onlyBlock}\n    },\n    actions: [\n      ({event}, {onlyBlock}) => [\n        raise({\n          type: 'insert.block',\n          block: onlyBlock,\n          placement: event.placement,\n          select: event.select ?? 'end',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'before') {\n        return false\n      }\n\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n      const lastBlockKey =\n        event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator()\n\n      return {firstBlockKey, lastBlockKey}\n    },\n    actions: [\n      ({snapshot, event}, {firstBlockKey, lastBlockKey}) => [\n        ...event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: index !== event.blocks.length - 1 ? 'end' : 'none',\n          }),\n        ),\n        ...(event.select === 'none'\n          ? [\n              raise({\n                type: 'select',\n                at: snapshot.context.selection,\n              }),\n            ]\n          : event.select === 'start'\n            ? [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: firstBlockKey}],\n                  select: 'start',\n                }),\n              ]\n            : [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: lastBlockKey}],\n                  select: 'end',\n                }),\n              ]),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'after') {\n        return false\n      }\n\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n      const lastBlockKey =\n        event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator()\n\n      return {firstBlockKey, lastBlockKey}\n    },\n    actions: [\n      ({snapshot, event}, {firstBlockKey, lastBlockKey}) => [\n        ...event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: index !== event.blocks.length - 1 ? 'end' : 'none',\n          }),\n        ),\n        ...(event.select === 'none'\n          ? [\n              raise({\n                type: 'select',\n                at: snapshot.context.selection,\n              }),\n            ]\n          : event.select === 'start'\n            ? [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: firstBlockKey}],\n                  select: 'start',\n                }),\n              ]\n            : [\n                raise({\n                  type: 'select.block',\n                  at: [{_key: lastBlockKey}],\n                  select: 'end',\n                }),\n              ]),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      if (!isEmptyTextBlock(snapshot.context, focusTextBlock.node)) {\n        return false\n      }\n\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n      const lastBlockKey =\n        event.blocks.at(-1)?._key ?? snapshot.context.keyGenerator()\n\n      return {focusTextBlock, firstBlockKey, lastBlockKey}\n    },\n    actions: [\n      ({event}, {firstBlockKey, lastBlockKey}) => [\n        ...event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: index !== event.blocks.length - 1 ? 'end' : 'none',\n          }),\n        ),\n        ...(event.select === 'none' || event.select === 'start'\n          ? [\n              raise({\n                type: 'select.block',\n                at: [{_key: firstBlockKey}],\n                select: 'start',\n              }),\n            ]\n          : [\n              raise({\n                type: 'select.block',\n                at: [{_key: lastBlockKey}],\n                select: 'end',\n              }),\n            ]),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock || !snapshot.context.selection) {\n        return false\n      }\n\n      const focusBlockStartPoint = getBlockStartPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n      const focusBlockEndPoint = getBlockEndPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n      const focusTextBlockAfter = sliceTextBlock({\n        context: {\n          schema: snapshot.context.schema,\n          selection: {\n            anchor: snapshot.context.selection.focus,\n            focus: focusBlockEndPoint,\n          },\n        },\n        block: focusTextBlock.node,\n      })\n      const firstBlockKey =\n        event.blocks.at(0)?._key ?? snapshot.context.keyGenerator()\n\n      return {\n        firstBlockKey,\n        focusBlockStartPoint,\n        focusBlockEndPoint,\n        focusTextBlockAfter,\n        selection: snapshot.context.selection,\n      }\n    },\n    actions: [\n      (\n        {event},\n        {\n          focusBlockEndPoint,\n          focusTextBlockAfter,\n          selection,\n          firstBlockKey,\n          focusBlockStartPoint,\n        },\n      ) => [\n        ...event.blocks.flatMap((block, index) =>\n          index === 0\n            ? [\n                ...(isEqualSelectionPoints(selection.focus, focusBlockEndPoint)\n                  ? []\n                  : [\n                      raise({\n                        type: 'delete',\n                        at: {\n                          anchor: selection.focus,\n                          focus: focusBlockEndPoint,\n                        },\n                      }),\n                    ]),\n                raise({\n                  type: 'insert.block',\n                  block,\n                  placement: 'auto',\n                  select: 'end',\n                }),\n              ]\n            : index === event.blocks.length - 1\n              ? [\n                  raise({\n                    type: 'insert.block',\n                    block,\n                    placement: 'after',\n                    select: 'end',\n                  }),\n                  raise({\n                    type: 'insert.block',\n                    block: focusTextBlockAfter,\n                    placement: 'auto',\n                    select: event.select === 'end' ? 'none' : 'end',\n                  }),\n                ]\n              : [\n                  raise({\n                    type: 'insert.block',\n                    block,\n                    placement: 'after',\n                    select: 'end',\n                  }),\n                ],\n        ),\n        ...(event.select === 'none'\n          ? [\n              raise({\n                type: 'select',\n                at: selection,\n              }),\n            ]\n          : event.select === 'start'\n            ? [\n                isEqualSelectionPoints(selection.focus, focusBlockStartPoint)\n                  ? raise({\n                      type: 'select.block',\n                      at: [{_key: firstBlockKey}],\n                      select: 'start',\n                    })\n                  : raise({\n                      type: 'select',\n                      at: {\n                        anchor: selection.focus,\n                        focus: selection.focus,\n                      },\n                    }),\n              ]\n            : []),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: event.select ?? 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [raise({type: 'split'})]],\n  }),\n  defineBehavior({\n    on: 'insert.inline object',\n    actions: [\n      ({snapshot, event}) => [\n        execute({\n          type: 'insert.block',\n          block: {\n            _type: snapshot.context.schema.block.name,\n            children: [\n              {\n                _type: event.inlineObject.name,\n                ...event.inlineObject.value,\n              },\n            ],\n          },\n          placement: 'auto',\n          select: 'end',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.soft break',\n    actions: [() => [raise({type: 'insert.text', text: '\\n'})]],\n  }),\n  defineBehavior({\n    on: 'insert.span',\n    guard: ({snapshot, event}) => {\n      const markDefs =\n        event.annotations?.map((annotation) => ({\n          _type: annotation.name,\n          _key: snapshot.context.keyGenerator(),\n          ...annotation.value,\n        })) ?? []\n\n      return {markDefs}\n    },\n    actions: [\n      ({snapshot, event}, {markDefs}) => [\n        execute({\n          type: 'insert.block',\n          block: {\n            _type: snapshot.context.schema.block.name,\n            children: [\n              {\n                _type: snapshot.context.schema.span.name,\n                text: event.text,\n                marks: [\n                  ...(event.decorators ?? []),\n                  ...markDefs.map((markDef) => markDef._key),\n                ],\n              },\n            ],\n            markDefs,\n          },\n          placement: 'auto',\n          select: 'end',\n        }),\n      ],\n    ],\n  }),\n]\n","import {defaultKeyboardShortcuts} from '../keyboard-shortcuts/default-keyboard-shortcuts'\nimport * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractKeyboardBehaviors = [\n  /**\n   * Allow raising an `insert.break` event when pressing Enter on an inline\n   * object.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      defaultKeyboardShortcuts.break.guard(event.originEvent) &&\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusInlineObject(snapshot),\n    actions: [() => [raise({type: 'insert.break'})]],\n  }),\n\n  /**\n   * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n   * than an `insertLineBreak` input event. This Behavior makes sure we catch\n   * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.lineBreak.guard(event.originEvent),\n    actions: [() => [raise({type: 'insert.soft break'})]],\n  }),\n\n  /**\n   * Manual handling of undo shortcuts.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.history.undo.guard(event.originEvent),\n    actions: [() => [raise({type: 'history.undo'})]],\n  }),\n\n  /**\n   * Manual handling of redo shortcuts.\n   */\n  defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({event}) =>\n      defaultKeyboardShortcuts.history.redo.guard(event.originEvent),\n    actions: [() => [raise({type: 'history.redo'})]],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot, event}) => {\n      if (\n        !snapshot.context.schema.lists.some(\n          (list) => list.name === event.listItem,\n        )\n      ) {\n        return false\n      }\n\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: block.node.level ?? 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractMoveBehaviors = [\n  defineBehavior({\n    on: 'move.block up',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (previousBlock) {\n        return {previousBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: previousBlock.path,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'move.block down',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (nextBlock) {\n        return {nextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'move.block',\n          at: event.at,\n          to: nextBlock.path,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getFocusBlock, getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSelectBehaviors = [\n  defineBehavior({\n    on: 'select.block',\n    guard: ({snapshot, event}) => {\n      if (event.select !== 'end') {\n        return false\n      }\n\n      const block = getFocusBlock({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        },\n      })\n\n      if (!block) {\n        return false\n      }\n\n      const blockEndPoint = getBlockEndPoint({\n        context: snapshot.context,\n        block,\n      })\n\n      return {blockEndPoint}\n    },\n    actions: [\n      (_, {blockEndPoint}) => [\n        raise({\n          type: 'select',\n          at: {\n            anchor: blockEndPoint,\n            focus: blockEndPoint,\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.block',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          at: {\n            anchor: {\n              path: event.at,\n              offset: 0,\n            },\n            focus: {\n              path: event.at,\n              offset: 0,\n            },\n          },\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      return {previousBlock}\n    },\n    actions: [\n      ({event}, {previousBlock}) => [\n        raise({\n          type: 'select.block',\n          at: previousBlock.path,\n          select: event.select,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      return {nextBlock}\n    },\n    actions: [\n      ({event}, {nextBlock}) => [\n        raise({\n          type: 'select.block',\n          at: nextBlock.path,\n          select: event.select,\n        }),\n      ],\n    ],\n  }),\n]\n","import {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSerializeBehaviors = [\n  defineBehavior({\n    on: 'serialize',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize.data',\n          mimeType: 'application/x-portable-text',\n          originEvent: event.originEvent,\n        }),\n        raise({\n          type: 'serialize.data',\n          mimeType: 'application/json',\n          originEvent: event.originEvent,\n        }),\n        raise({\n          type: 'serialize.data',\n          mimeType: 'text/html',\n          originEvent: event.originEvent,\n        }),\n        raise({\n          type: 'serialize.data',\n          mimeType: 'text/plain',\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialize.data',\n    guard: ({snapshot, event}) => {\n      const converter = snapshot.context.converters.find(\n        (converter) => converter.mimeType === event.mimeType,\n      )\n\n      if (!converter) {\n        return false\n      }\n\n      return converter.serialize({\n        snapshot,\n        event: {\n          type: 'serialize',\n          originEvent: event.originEvent.type,\n        },\n      })\n    },\n    actions: [\n      ({event}, serializeEvent) => [\n        raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n]\n","import {isTextBlock} from '@portabletext/schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {sliceTextBlock} from '../utils/util.slice-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractSplitBehaviors = [\n  /**\n   * You can't split an inline object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusInlineObject(snapshot),\n    actions: [],\n  }),\n\n  /**\n   * You can't split a block object.\n   */\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) =>\n      selectors.isSelectionCollapsed(snapshot) &&\n      selectors.getFocusBlockObject(snapshot),\n    actions: [],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n      const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n      if (!selectionStartBlock || !selectionEndBlock) {\n        return false\n      }\n\n      if (\n        !isTextBlock(snapshot.context, selectionStartBlock.node) &&\n        isTextBlock(snapshot.context, selectionEndBlock.node)\n      ) {\n        return {selection}\n      }\n\n      return false\n    },\n    actions: [(_, {selection}) => [raise({type: 'delete', at: selection})]],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n      const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n      if (!selectionStartBlock || !selectionEndBlock) {\n        return false\n      }\n\n      if (selectionStartBlock.node._key === selectionEndBlock.node._key) {\n        return false\n      }\n\n      const startPoint = utils.getSelectionStartPoint(selection)\n      const startBlockEndPoint = utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: selectionStartBlock,\n      })\n      const endPoint = utils.getSelectionEndPoint(selection)\n      const endBlockStartPoint = utils.getBlockStartPoint({\n        context: snapshot.context,\n        block: selectionEndBlock,\n      })\n\n      const selectedValue = selectors.getSelectedValue(snapshot)\n\n      const blocksInBetween = selectedValue.filter(\n        (block) =>\n          block._key !== selectionStartBlock.node._key &&\n          block._key !== selectionEndBlock.node._key,\n      )\n\n      return {\n        startPoint,\n        startBlockEndPoint,\n        endPoint,\n        endBlockStartPoint,\n        blocksInBetween,\n      }\n    },\n    actions: [\n      (\n        _,\n        {\n          startPoint,\n          startBlockEndPoint,\n          endPoint,\n          endBlockStartPoint,\n          blocksInBetween,\n        },\n      ) => [\n        raise({\n          type: 'delete',\n          at: {anchor: startPoint, focus: startBlockEndPoint},\n        }),\n        ...blocksInBetween.map((block) =>\n          raise({type: 'delete.block', at: [{_key: block._key}]}),\n        ),\n        raise({\n          type: 'delete',\n          at: {anchor: endBlockStartPoint, focus: endPoint},\n        }),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      return {selection}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({type: 'delete', at: selection}),\n        raise({type: 'split'}),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'split',\n    guard: ({snapshot}) => {\n      const selection = snapshot.context.selection\n\n      if (!selection || !utils.isSelectionCollapsed(selection)) {\n        return false\n      }\n\n      const selectionStartPoint = utils.getSelectionStartPoint(selection)\n\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      const blockEndPoint = utils.getBlockEndPoint({\n        context: snapshot.context,\n        block: focusTextBlock,\n      })\n\n      const newTextBlockSelection = {\n        anchor: selectionStartPoint,\n        focus: blockEndPoint,\n      }\n\n      const newTextBlock = parseBlock({\n        block: sliceTextBlock({\n          context: {\n            ...snapshot.context,\n            selection: newTextBlockSelection,\n          },\n          block: focusTextBlock.node,\n        }),\n        context: snapshot.context,\n        options: {\n          validateFields: false,\n        },\n      })\n\n      if (!newTextBlock) {\n        return false\n      }\n\n      return {\n        newTextBlock,\n        newTextBlockSelection,\n      }\n    },\n    actions: [\n      (_, {newTextBlock, newTextBlockSelection}) =>\n        utils.isSelectionCollapsed(newTextBlockSelection)\n          ? [\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ]\n          : [\n              raise({type: 'delete', at: newTextBlockSelection}),\n              raise({\n                type: 'insert.block',\n                block: newTextBlock,\n                placement: 'after',\n                select: 'start',\n              }),\n            ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","import * as selectors from '../selectors'\nimport {abstractAnnotationBehaviors} from './behavior.abstract.annotation'\nimport {abstractDecoratorBehaviors} from './behavior.abstract.decorator'\nimport {abstractDeleteBehaviors} from './behavior.abstract.delete'\nimport {abstractDeserializeBehaviors} from './behavior.abstract.deserialize'\nimport {abstractInsertBehaviors} from './behavior.abstract.insert'\nimport {abstractKeyboardBehaviors} from './behavior.abstract.keyboard'\nimport {abstractListItemBehaviors} from './behavior.abstract.list-item'\nimport {abstractMoveBehaviors} from './behavior.abstract.move'\nimport {abstractSelectBehaviors} from './behavior.abstract.select'\nimport {abstractSerializeBehaviors} from './behavior.abstract.serialize'\nimport {abstractSplitBehaviors} from './behavior.abstract.split'\nimport {abstractStyleBehaviors} from './behavior.abstract.style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const abstractBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          at: selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...abstractAnnotationBehaviors,\n  ...abstractDecoratorBehaviors,\n  ...abstractDeleteBehaviors,\n  ...abstractDeserializeBehaviors,\n  ...abstractInsertBehaviors,\n  ...abstractKeyboardBehaviors,\n  ...abstractListItemBehaviors,\n  ...abstractMoveBehaviors,\n  ...abstractStyleBehaviors,\n  ...abstractSelectBehaviors,\n  ...abstractSerializeBehaviors,\n  ...abstractSplitBehaviors,\n]\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {OmitFromUnion, PickFromUnion, StrictExtract} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {BlockWithOptionalKey} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\nimport type {AnnotationPath, BlockPath, ChildPath} from '../types/paths'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'blur' | 'focus' | 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'blur'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'focus'>\n    }\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**************************************\n * Synthetic events\n **************************************/\n\nconst syntheticBehaviorEventTypes = [\n  'annotation.add',\n  'annotation.remove',\n  'block.set',\n  'block.unset',\n  'child.set',\n  'child.unset',\n  'decorator.add',\n  'decorator.remove',\n  'delete',\n  'history.redo',\n  'history.undo',\n  'insert.block',\n  'insert.text',\n  'move.backward',\n  'move.block',\n  'move.forward',\n  'select',\n] as const\n\ntype SyntheticBehaviorEventType =\n  | (typeof syntheticBehaviorEventTypes)[number]\n  | (typeof abstractBehaviorEventTypes)[number]\n\ntype SyntheticBehaviorEventNamespace =\n  ExtractNamespace<SyntheticBehaviorEventType>\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.set'>\n      at: BlockPath\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'block.unset'>\n      at: BlockPath\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'child.set'>\n      at: ChildPath\n      props: {[prop: string]: unknown}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'child.unset'>\n      at: ChildPath\n      props: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.add'>\n      decorator: string\n      at?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.remove'>\n      decorator: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete'>\n      at: NonNullable<EditorSelection>\n      /**\n       * Defaults to forward deletion.\n       */\n      direction?: 'backward' | 'forward'\n      /**\n       * Defaults to character deletion.\n       */\n      unit?: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.redo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'history.undo'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.text'>\n      text: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.backward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block'>\n      at: BlockPath\n      to: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.forward'>\n      distance: number\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select'>\n      at: EditorSelection\n    }\n  | AbstractBehaviorEvent\n\n/**\n * @beta\n */\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isSyntheticBehaviorEvent(\n  event: BehaviorEvent,\n): event is OmitFromUnion<\n  SyntheticBehaviorEvent,\n  'type',\n  AbstractBehaviorEventType\n> {\n  return (\n    !isCustomBehaviorEvent(event) &&\n    !isNativeBehaviorEvent(event) &&\n    !isAbstractBehaviorEvent(event)\n  )\n}\n\n/**************************************\n * Abstract events\n **************************************/\n\nconst abstractBehaviorEventTypes = [\n  'annotation.set',\n  'annotation.toggle',\n  'decorator.toggle',\n  'delete.backward',\n  'delete.block',\n  'delete.child',\n  'delete.forward',\n  'delete.text',\n  'deserialize',\n  'deserialize.data',\n  'deserialization.success',\n  'deserialization.failure',\n  'insert.blocks',\n  'insert.break',\n  'insert.inline object',\n  'insert.soft break',\n  'insert.span',\n  'list item.add',\n  'list item.remove',\n  'list item.toggle',\n  'move.block down',\n  'move.block up',\n  'select.block',\n  'select.previous block',\n  'select.next block',\n  'serialize',\n  'serialize.data',\n  'serialization.success',\n  'serialization.failure',\n  'split',\n  'style.add',\n  'style.remove',\n  'style.toggle',\n] as const\n\nexport type AbstractBehaviorEventType =\n  (typeof abstractBehaviorEventTypes)[number]\n\ntype AbstractBehaviorEvent =\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.set'>\n      at: AnnotationPath\n      props: Record<string, unknown>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'annotation.toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'decorator.toggle'>\n      decorator: string\n      at?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.backward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.block'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.child'>\n      at: ChildPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.forward'>\n      unit: 'character' | 'word' | 'line' | 'block'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'delete.text'>\n      at: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialize.data'>\n      mimeType: MIMEType\n      data: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialize.data'>\n      mimeType: MIMEType\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'deserialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'serialization.failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.blocks'>\n      blocks: Array<BlockWithOptionalKey>\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.soft break'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'insert.span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.add'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.remove'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'list item.toggle'>\n      listItem: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block down'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'move.block up'>\n      at: BlockPath\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.block'>\n      at: BlockPath\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'select.next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'split'>\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.add'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.remove'>\n      style: string\n    }\n  | {\n      type: StrictExtract<SyntheticBehaviorEventType, 'style.toggle'>\n      style: string\n    }\n\nexport function isAbstractBehaviorEvent(\n  event: BehaviorEvent,\n): event is AbstractBehaviorEvent {\n  return (abstractBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**************************************\n * Native events\n **************************************/\n\nconst nativeBehaviorEventTypes = [\n  'clipboard.copy',\n  'clipboard.cut',\n  'clipboard.paste',\n  'drag.dragstart',\n  'drag.drag',\n  'drag.dragend',\n  'drag.dragenter',\n  'drag.dragover',\n  'drag.dragleave',\n  'drag.drop',\n  'input.*',\n  'keyboard.keydown',\n  'keyboard.keyup',\n  'mouse.click',\n] as const\n\ntype NativeBehaviorEventType = (typeof nativeBehaviorEventTypes)[number]\n\ntype NativeBehaviorEventNamespace = ExtractNamespace<NativeBehaviorEventType>\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (nativeBehaviorEventTypes as readonly string[]).includes(event.type)\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'clipboard.paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\ntype DragBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragstart'>\n      originEvent: {\n        clientX: number\n        clientY: number\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      dragOrigin?: Pick<EventPosition, 'selection'>\n      position: EventPosition\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'drag.dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'input.*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: StrictExtract<NativeBehaviorEventType, 'keyboard.keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: StrictExtract<NativeBehaviorEventType, 'mouse.click'>\n  position: EventPosition\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n\ntype ExtractNamespace<TType extends string> =\n  TType extends `${infer Namespace}.${string}` ? Namespace : TType\n","import {createEditorDom} from '../editor/editor-dom'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {withPerformingBehaviorOperation} from '../editor/with-performing-behavior-operation'\nimport {clearUndoStep, createUndoStep} from '../editor/with-undo-step'\nimport {debugWithName} from '../internal-utils/debug'\nimport {performOperation} from '../operations/behavior.operations'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {abstractBehaviors} from './behavior.abstract'\nimport type {BehaviorAction} from './behavior.types.action'\nimport type {Behavior} from './behavior.types.behavior'\nimport {\n  isAbstractBehaviorEvent,\n  isCustomBehaviorEvent,\n  isNativeBehaviorEvent,\n  isSyntheticBehaviorEvent,\n  type BehaviorEvent,\n  type ExternalBehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isAbstractBehaviorEvent(event)\n      ? 'synthetic'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  mode,\n  behaviors,\n  remainingEventBehaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n  sendBack,\n}: {\n  mode: 'send' | 'raise' | 'execute' | 'forward'\n  behaviors: Array<Behavior>\n  remainingEventBehaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n  sendBack: (\n    event: {type: 'set drag ghost'; ghost: HTMLElement} | ExternalBehaviorEvent,\n  ) => void\n}) {\n  if (mode === 'send' && !isNativeBehaviorEvent(event)) {\n    createUndoStep(editor)\n  }\n\n  debug(`(${mode}:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const eventBehaviors = [\n    ...remainingEventBehaviors,\n    ...abstractBehaviors,\n  ].filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0 && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    if (mode === 'send') {\n      clearUndoStep(editor)\n    }\n\n    withPerformingBehaviorOperation(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {\n          keyGenerator,\n          schema,\n        },\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n\n    return\n  }\n\n  const guardSnapshot = getSnapshot()\n\n  let nativeEventPrevented = false\n  let defaultBehaviorOverwritten = false\n  let eventBehaviorIndex = -1\n\n  for (const eventBehavior of eventBehaviors) {\n    eventBehaviorIndex++\n\n    let shouldRun = false\n\n    try {\n      shouldRun =\n        eventBehavior.guard === undefined ||\n        eventBehavior.guard({\n          snapshot: guardSnapshot,\n          event,\n          dom: createEditorDom(sendBack, editor),\n        })\n    } catch (error) {\n      console.error(\n        new Error(\n          `Evaluating guard for \"${event.type}\" failed due to: ${error.message}`,\n        ),\n      )\n    }\n\n    if (!shouldRun) {\n      continue\n    }\n\n    // This Behavior now \"owns\" the event and we can consider the default\n    // action prevented\n    defaultBehaviorOverwritten = true\n\n    for (const actionSet of eventBehavior.actions) {\n      const actionsSnapshot = getSnapshot()\n\n      let actions: Array<BehaviorAction> = []\n\n      try {\n        actions = actionSet(\n          {\n            snapshot: actionsSnapshot,\n            event,\n            dom: createEditorDom(sendBack, editor),\n          },\n          shouldRun,\n        )\n      } catch (error) {\n        console.error(\n          new Error(\n            `Evaluating actions for \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n\n      if (actions.length === 0) {\n        continue\n      }\n\n      nativeEventPrevented =\n        actions.some(\n          (action) => action.type === 'raise' || action.type === 'execute',\n        ) || !actions.some((action) => action.type === 'forward')\n\n      let undoStepCreated = false\n\n      if (actions.some((action) => action.type === 'execute')) {\n        // Since at least one action is about to `execute` changes in the editor,\n        // we set up a new undo step.\n        // All actions performed recursively from now will be squashed into this\n        // undo step\n        createUndoStep(editor)\n\n        undoStepCreated = true\n      }\n\n      for (const action of actions) {\n        if (action.type === 'effect') {\n          try {\n            action.effect({\n              send: sendBack,\n            })\n          } catch (error) {\n            console.error(\n              new Error(\n                `Executing effect as a result of \"${event.type}\" failed due to: ${error.message}`,\n              ),\n            )\n          }\n\n          continue\n        }\n\n        if (action.type === 'forward') {\n          const remainingEventBehaviors = eventBehaviors.slice(\n            eventBehaviorIndex + 1,\n          )\n\n          performEvent({\n            mode: mode === 'execute' ? 'execute' : 'forward',\n            behaviors,\n            remainingEventBehaviors: remainingEventBehaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n            sendBack,\n          })\n\n          continue\n        }\n\n        if (action.type === 'raise') {\n          performEvent({\n            mode: mode === 'execute' ? 'execute' : 'raise',\n            behaviors,\n            remainingEventBehaviors:\n              mode === 'execute' ? remainingEventBehaviors : behaviors,\n            event: action.event,\n            editor,\n            keyGenerator,\n            schema,\n            getSnapshot,\n            nativeEvent,\n            sendBack,\n          })\n\n          continue\n        }\n\n        performEvent({\n          mode: 'execute',\n          behaviors,\n          remainingEventBehaviors: [],\n          event: action.event,\n          editor,\n          keyGenerator,\n          schema,\n          getSnapshot,\n          nativeEvent: undefined,\n          sendBack,\n        })\n      }\n\n      if (undoStepCreated) {\n        clearUndoStep(editor)\n      }\n    }\n\n    break\n  }\n\n  if (!defaultBehaviorOverwritten && isSyntheticBehaviorEvent(event)) {\n    nativeEvent?.preventDefault()\n\n    if (mode === 'send') {\n      clearUndoStep(editor)\n    }\n\n    withPerformingBehaviorOperation(editor, () => {\n      debug(`(execute:${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n      performOperation({\n        context: {keyGenerator, schema},\n        operation: {\n          ...event,\n          editor,\n        },\n      })\n    })\n\n    editor.onChange()\n  } else if (nativeEventPrevented) {\n    nativeEvent?.preventDefault()\n  }\n}\n","import type {EditorPriority} from './priority.types'\n\nexport function sortByPriority<\n  T extends {\n    priority?: EditorPriority\n  },\n>(items: Array<T>): Array<T> {\n  if (items.length === 0) {\n    return []\n  }\n\n  // Separate items with and without priority\n  const itemsWithPriority = items.filter(\n    (item): item is T & {priority: EditorPriority} =>\n      item.priority !== undefined,\n  )\n  const itemsWithoutPriority = items.filter(\n    (item) => item.priority === undefined,\n  )\n\n  if (itemsWithPriority.length === 0) {\n    return items\n  }\n\n  // Create a map of items by their priority ID\n  const itemsByPriorityId = new Map(\n    itemsWithPriority.map((item) => [item.priority.id, item]),\n  )\n\n  // Build the dependency graph\n  const graph = new Map<string, Set<string>>()\n  const inDegree = new Map<string, number>()\n\n  // Helper function to ensure a node exists in the graph\n  function ensureNode(id: string) {\n    if (!graph.has(id)) {\n      graph.set(id, new Set())\n      inDegree.set(id, 0)\n    }\n  }\n\n  // Initialize graph and in-degree for all items\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    ensureNode(id)\n  }\n\n  // Helper function to add an edge to the graph\n  function addEdge(fromId: string, toId: string) {\n    if (!graph.has(fromId) || !graph.has(toId)) return\n    graph.get(fromId)?.add(toId)\n    inDegree.set(toId, (inDegree.get(toId) ?? 0) + 1)\n  }\n\n  // Add edges based on references\n  for (const item of itemsWithPriority) {\n    const id = item.priority.id\n    const visited = new Set<string>()\n    let ref = item.priority.reference\n\n    while (ref) {\n      const refId = ref.priority.id\n      ensureNode(refId)\n\n      // Check for cyclic reference\n      if (visited.has(refId)) {\n        throw new Error('Circular dependency detected in priorities')\n      }\n      visited.add(refId)\n\n      if (ref.importance === 'higher') {\n        // Reference must come before current item\n        addEdge(id, refId)\n      } else {\n        // Current item must come before reference\n        addEdge(refId, id)\n      }\n\n      ref = ref.priority.reference\n    }\n  }\n\n  const queue: string[] = []\n\n  // Find all nodes with no incoming edges\n  for (const [id, degree] of inDegree) {\n    if (degree === 0) {\n      queue.push(id)\n    }\n  }\n\n  const result: T[] = []\n\n  // Perform topological sort\n  while (queue.length > 0) {\n    const currentId = queue.shift()!\n    const currentItem = itemsByPriorityId.get(currentId)\n    if (currentItem) {\n      result.push(currentItem)\n    }\n\n    // Decrease in-degree of neighbors\n    for (const neighborId of graph.get(currentId) ?? []) {\n      const newDegree = (inDegree.get(neighborId) ?? 0) - 1\n      inDegree.set(neighborId, newDegree)\n      if (newDegree === 0) {\n        queue.push(neighborId)\n      }\n    }\n  }\n\n  // Add any remaining items that weren't processed\n  for (const item of itemsWithPriority) {\n    if (!result.includes(item)) {\n      result.push(item)\n    }\n  }\n\n  // Append items without priority at the end in their original order\n  return [...result, ...itemsWithoutPriority]\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport {slateRangeToSelection} from '../internal-utils/slate-utils'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  blockIndexMap: Map<string, number>\n  /**\n   * @beta\n   * Subject to change\n   */\n  decoratorState: Record<string, boolean | undefined>\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n}) {\n  const selection = editor.selection\n    ? slateRangeToSelection({\n        schema,\n        editor,\n        range: editor.selection,\n      })\n    : null\n\n  const context = {\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value: editor.value,\n  } satisfies EditorContext\n\n  return {\n    blockIndexMap: editor.blockIndexMap,\n    context,\n    decoratorState: editor.decoratorState,\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {BehaviorConfig} from '../behaviors/behavior.config'\nimport {coreBehaviorsConfig} from '../behaviors/behavior.core'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {\n  BehaviorEvent,\n  ExternalBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {sortByPriority} from '../priority/priority.sort'\nimport type {NamespaceEvent, OmitFromUnion} from '../type-utils'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\nimport type {\n  EditorEmittedEvent,\n  MutationEvent,\n  PatchEvent,\n} from './relay-machine'\n\nexport * from 'xstate/guards'\n\nconst debug = debugWithName('editor machine')\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  operationId?: string\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | ExternalEditorEvent\n  | {\n      type: 'add behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'remove behavior'\n      behaviorConfig: BehaviorConfig\n    }\n  | {\n      type: 'blur'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'focus'\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'update selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing value'\n    }\n  | {\n      type: 'syncing value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | MutationEvent\n  | InternalPatchEvent\n  | {\n      type: 'set drag ghost'\n      ghost: HTMLElement\n    }\n  | {\n      type: 'dragstart'\n      ghost?: HTMLElement\n      origin: Pick<EventPosition, 'selection'>\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | OmitFromUnion<EditorEmittedEvent, 'type', 'patch'>\n  | InternalPatchEvent\n  | PatchesEvent\n\nexport function rerouteExternalBehaviorEvent({\n  event,\n  slateEditor,\n}: {\n  event: ExternalBehaviorEvent\n  slateEditor: PortableTextSlateEditor\n}): InternalEditorEvent {\n  switch (event.type) {\n    case 'blur':\n      return {\n        type: 'blur',\n        editor: slateEditor,\n      }\n\n    case 'focus':\n      return {\n        type: 'focus',\n        editor: slateEditor,\n      }\n\n    case 'insert.block object':\n      return {\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: event.blockObject.name,\n            ...(event.blockObject.value ?? {}),\n          },\n          placement: event.placement,\n        },\n        editor: slateEditor,\n      }\n\n    default:\n      return {\n        type: 'behavior event',\n        behaviorEvent: event,\n        editor: slateEditor,\n      }\n  }\n}\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<BehaviorConfig>\n      behaviorsSorted: boolean\n      converters: Set<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      pendingIncomingPatchesEvents: Array<PatchesEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      initialValue: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        origin: Pick<EventPosition, 'selection'>\n      }\n      dragGhost?: HTMLElement\n      slateEditor?: PortableTextSlateEditor\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      converters?: Array<Converter>\n      getLegacySchema: () => PortableTextMemberSchemaTypes\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      initialValue?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behaviorConfig])\n      },\n      behaviorsSorted: false,\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behaviorConfig)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'internal.patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'defer incoming patches': assign({\n      pendingIncomingPatchesEvents: ({context, event}) => {\n        return event.type === 'patches'\n          ? [...context.pendingIncomingPatchesEvents, event]\n          : context.pendingIncomingPatchesEvents\n      },\n    }),\n    'emit pending incoming patches': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingIncomingPatchesEvents) {\n        enqueue.emit(event)\n      }\n    }),\n    'clear pending incoming patches': assign({\n      pendingIncomingPatchesEvents: [],\n    }),\n    'handle blur': ({event}) => {\n      assertEvent(event, 'blur')\n\n      try {\n        ReactEditor.blur(event.editor)\n      } catch (error) {\n        console.error(new Error(`Failed to blur editor: ${error.message}`))\n      }\n    },\n    'handle focus': ({context}) => {\n      if (!context.slateEditor) {\n        console.error('No Slate editor found to focus')\n        return\n      }\n\n      try {\n        const currentSelection = context.slateEditor.selection\n        ReactEditor.focus(context.slateEditor)\n        if (currentSelection) {\n          Transforms.select(context.slateEditor, currentSelection)\n        }\n      } catch (error) {\n        console.error(new Error(`Failed to focus editor: ${error.message}`))\n      }\n    },\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event'])\n\n      try {\n        const behaviors = [...context.behaviors.values()].map(\n          (config) => config.behavior,\n        )\n\n        performEvent({\n          mode: 'send',\n          behaviors,\n          remainingEventBehaviors: behaviors,\n          event: event.behaviorEvent,\n          editor: event.editor,\n          keyGenerator: context.keyGenerator,\n          schema: context.schema,\n          getSnapshot: () =>\n            createEditorSnapshot({\n              converters: [...context.converters],\n              editor: event.editor,\n              keyGenerator: context.keyGenerator,\n              readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n              schema: context.schema,\n            }),\n          nativeEvent: event.nativeEvent,\n          sendBack: (eventSentBack) => {\n            if (eventSentBack.type === 'set drag ghost') {\n              self.send(eventSentBack)\n              return\n            }\n\n            self.send(\n              rerouteExternalBehaviorEvent({\n                event: eventSentBack,\n                slateEditor: event.editor,\n              }),\n            )\n          },\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Raising \"${event.behaviorEvent.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    },\n    'sort behaviors': assign({\n      behaviors: ({context}) =>\n        !context.behaviorsSorted\n          ? new Set(sortByPriority([...context.behaviors.values()]))\n          : context.behaviors,\n      behaviorsSorted: true,\n    }),\n  },\n  guards: {\n    'slate is busy': ({context}) => {\n      if (!context.slateEditor) {\n        return false\n      }\n\n      return context.slateEditor.operations.length > 0\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set(coreBehaviorsConfig),\n    behaviorsSorted: false,\n    converters: new Set(input.converters ?? []),\n    getLegacySchema: input.getLegacySchema,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    pendingIncomingPatchesEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    initialValue: input.initialValue,\n  }),\n  on: {\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n    'update selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n    'set drag ghost': {\n      actions: assign({dragGhost: ({event}) => event.ghost}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: ['sort behaviors', 'handle behavior event'],\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'mouse.click' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              entry: [\n                () => {\n                  debug(\n                    'entry: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              exit: [\n                () => {\n                  debug(\n                    'exit: edit mode->read only->determine initial edit mode',\n                  )\n                },\n              ],\n              on: {\n                'done syncing value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->read only->read only')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->read only->read only')\n                },\n              ],\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: ['sort behaviors', 'handle behavior event'],\n            },\n            'blur': {\n              actions: 'handle blur',\n            },\n            'focus': {\n              target: '.focusing',\n              actions: [assign({slateEditor: ({event}) => event.editor})],\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->idle')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable-idle')\n                },\n              ],\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'focusing': {\n              initial: 'checking if busy',\n              states: {\n                'checking if busy': {\n                  entry: [\n                    () => {\n                      debug(\n                        'entry: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug(\n                        'exit: edit mode->editable->focusing->checking if busy',\n                      )\n                    },\n                  ],\n                  always: [\n                    {\n                      guard: 'slate is busy',\n                      target: 'busy',\n                    },\n                    {\n                      target: '#editor.edit mode.editable.idle',\n                      actions: ['handle focus'],\n                    },\n                  ],\n                },\n                'busy': {\n                  entry: [\n                    () => {\n                      debug('entry: edit mode->editable->focusing-busy')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: edit mode->editable->focusing->busy')\n                    },\n                  ],\n                  after: {\n                    10: {\n                      target: 'checking if busy',\n                    },\n                  },\n                },\n              },\n            },\n            'dragging internally': {\n              entry: [\n                () => {\n                  debug('entry: edit mode->editable->dragging internally')\n                },\n              ],\n              exit: [\n                () => {\n                  debug('exit: edit mode->editable->dragging internally')\n                },\n                ({context}) => {\n                  if (context.dragGhost) {\n                    try {\n                      context.dragGhost.parentNode?.removeChild(\n                        context.dragGhost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({dragGhost: undefined}),\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          entry: [\n            () => {\n              debug('entry: setup->setting up')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: setup->setting up')\n            },\n            'emit ready',\n            'emit pending incoming patches',\n            'clear pending incoming patches',\n          ],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing value': {\n              target: 'set up',\n            },\n            'patches': {\n              actions: ['defer incoming patches'],\n            },\n          },\n        },\n        'set up': {\n          type: 'parallel',\n          states: {\n            'value sync': {\n              initial: 'idle',\n              states: {\n                'idle': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->idle')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->idle')\n                    },\n                  ],\n                  on: {\n                    'patches': {\n                      actions: [emit(({event}) => event)],\n                    },\n                    'syncing value': {\n                      target: 'syncing value',\n                    },\n                  },\n                },\n                'syncing value': {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->value sync->syncing value')\n                    },\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->value sync->syncing value')\n                    },\n                    'emit pending incoming patches',\n                    'clear pending incoming patches',\n                  ],\n                  on: {\n                    'patches': {\n                      actions: ['defer incoming patches'],\n                    },\n                    'done syncing value': {\n                      target: 'idle',\n                    },\n                  },\n                },\n              },\n            },\n            'writing': {\n              initial: 'pristine',\n              states: {\n                pristine: {\n                  initial: 'idle',\n                  states: {\n                    idle: {\n                      entry: [\n                        () => {\n                          debug('entry: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug('exit: setup->set up->writing->pristine->idle')\n                        },\n                      ],\n                      on: {\n                        'normalizing': {\n                          target: 'normalizing',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                          target: '#editor.setup.set up.writing.dirty',\n                        },\n                      },\n                    },\n                    normalizing: {\n                      entry: [\n                        () => {\n                          debug(\n                            'entry: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      exit: [\n                        () => {\n                          debug(\n                            'exit: setup->set up->writing->pristine->normalizing',\n                          )\n                        },\n                      ],\n                      on: {\n                        'done normalizing': {\n                          target: 'idle',\n                        },\n                        'internal.patch': {\n                          actions: 'defer event',\n                        },\n                        'mutation': {\n                          actions: 'defer event',\n                        },\n                      },\n                    },\n                  },\n                },\n                dirty: {\n                  entry: [\n                    () => {\n                      debug('entry: setup->set up->writing->dirty')\n                    },\n                    'emit pending events',\n                    'clear pending events',\n                  ],\n                  exit: [\n                    () => {\n                      debug('exit: setup->set up->writing->dirty')\n                    },\n                  ],\n                  on: {\n                    'internal.patch': {\n                      actions: 'emit patch event',\n                    },\n                    'mutation': {\n                      actions: 'emit mutation event',\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport type {ActorRefFrom} from 'xstate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport type {PatchEvent} from './relay-machine'\n\nconst debug = debugWithName('mutation-machine')\n\nexport type MutationActor = ActorRefFrom<typeof mutationMachine>\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        operationId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      pendingPatchEvents: Array<PatchEvent>\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'emit changes'\n        }\n      | {\n          type: 'patch'\n          patch: Patch\n          operationId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        },\n    input: {} as {\n      readOnly: boolean\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        }\n      | PatchEvent,\n  },\n  actions: {\n    'assign readOnly': assign({\n      readOnly: ({context, event}) =>\n        event.type === 'update readOnly' ? event.readOnly : context.readOnly,\n    }),\n    'emit patch': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return {type: 'patch' as const, patch: event.patch}\n    }),\n    'emit has pending mutations': emit({type: 'has pending mutations'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer mutation': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              operationId: event.operationId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.operationId === event.operationId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            operationId: lastBulk.operationId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          operationId: event.operationId,\n          patches: [event.patch],\n        })\n      },\n    }),\n    'clear pending patch events': assign({\n      pendingPatchEvents: [],\n    }),\n    'defer patch': assign({\n      pendingPatchEvents: ({context, event}) =>\n        event.type === 'patch'\n          ? [...context.pendingPatchEvents, event]\n          : context.pendingPatchEvents,\n    }),\n    'emit pending patch events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingPatchEvents) {\n        enqueue.emit(event)\n      }\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n    'mutation interval': fromCallback(({sendBack}) => {\n      const interval = setInterval(\n        () => {\n          sendBack({type: 'emit changes'})\n        },\n        process.env.NODE_ENV === 'test' ? 250 : 1000,\n      )\n\n      return () => {\n        clearInterval(interval)\n      }\n    }),\n  },\n  guards: {\n    'is read-only': ({context}) => context.readOnly,\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'type debounce': 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    pendingPatchEvents: [],\n    readOnly: input.readOnly,\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  on: {\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: typing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: typing->idle')\n              debug('entry: typing->typing')\n            },\n          ],\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          after: {\n            'type debounce': {\n              target: 'idle',\n              actions: [\n                raise({type: 'emit changes'}),\n                () => {\n                  debug('exit: typing->typing')\n                },\n              ],\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n              actions: [raise({type: 'emit changes'})],\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          entry: [\n            () => {\n              debug('entry: mutations->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->idle')\n            },\n          ],\n          on: {\n            patch: [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n                target: 'has pending mutations',\n              },\n            ],\n          },\n        },\n        'has pending mutations': {\n          entry: [\n            () => {\n              debug('entry: mutations->has pending mutations')\n            },\n            'emit has pending mutations',\n          ],\n          exit: [\n            () => {\n              debug('exit: mutations->has pending mutations')\n            },\n          ],\n          invoke: {\n            src: 'mutation interval',\n          },\n          on: {\n            'emit changes': {\n              guard: and([not('is read-only'), 'slate is normalizing']),\n              target: 'idle',\n              actions: [\n                'emit pending patch events',\n                'clear pending patch events',\n                'emit mutations',\n                'clear pending mutations',\n              ],\n            },\n            'patch': [\n              {\n                guard: 'is read-only',\n                actions: ['defer patch', 'defer mutation'],\n              },\n              {\n                actions: ['emit patch', 'defer mutation'],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n","import {isTextBlock} from '@portabletext/schema'\nimport type {\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport {buildIndexMaps} from '../../internal-utils/build-index-maps'\nimport {createPlaceholderBlock} from '../../internal-utils/create-placeholder-block'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  isListItemActive,\n  isStyleActive,\n  slateRangeToSelection,\n} from '../../internal-utils/slate-utils'\nimport {toSlateRange} from '../../internal-utils/to-slate-range'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport {\n  getFocusBlock,\n  getFocusSpan,\n  getSelectedValue,\n  isActiveAnnotation,\n} from '../../selectors'\nimport {getActiveAnnotationsMarks} from '../../selectors/selector.get-active-annotation-marks'\nimport {getActiveDecorators} from '../../selectors/selector.get-active-decorators'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getEditorSnapshot} from '../editor-selector'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'focus',\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'blur',\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      const activeDecorators = getActiveDecorators(snapshot)\n\n      return activeDecorators.includes(mark)\n    },\n    marks: (): string[] => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      const activeAnnotations = getActiveAnnotationsMarks(snapshot)\n      const activeDecorators = getActiveDecorators(snapshot)\n\n      return [...activeAnnotations, ...activeDecorators]\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return editor.selection\n          ? (slateRangeToSelection({\n              schema: editorActor.getSnapshot().context.schema,\n              editor,\n              range: editor.selection,\n            })?.focus.path ?? [])\n          : []\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return editor.selection\n        ? (slateRangeToSelection({\n            schema: editorActor.getSnapshot().context.schema,\n            editor,\n            range: editor.selection,\n          })?.focus.path ?? [])\n        : []\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      return isActiveAnnotation(annotationType)(snapshot)\n    },\n    addAnnotation: (type, value) => {\n      const snapshotBefore = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n      const selectedValueBefore = getSelectedValue(snapshotBefore)\n      const focusSpanBefore = getFocusSpan(snapshotBefore)\n      const markDefsBefore = selectedValueBefore.flatMap((block) => {\n        if (isTextBlock(snapshotBefore.context, block)) {\n          return block.markDefs ?? []\n        }\n\n        return []\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.add',\n          annotation: {name: type.name, value: value ?? {}},\n        },\n        editor,\n      })\n\n      const snapshotAfter = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: editor,\n      })\n\n      const selectedValueAfter = getSelectedValue(snapshotAfter)\n      const focusBlockAfter = getFocusBlock(snapshotAfter)\n      const focusSpanAfter = getFocusSpan(snapshotAfter)\n\n      const newMarkDefKeysOnFocusSpan = focusSpanAfter?.node.marks?.filter(\n        (mark) =>\n          !focusSpanBefore?.node.marks?.includes(mark) &&\n          !snapshotAfter.context.schema.decorators\n            .map((decorator) => decorator.name)\n            .includes(mark),\n      )\n      const markDefsAfter = selectedValueAfter.flatMap((block) => {\n        if (isTextBlock(snapshotAfter.context, block)) {\n          return (\n            block.markDefs?.map((markDef) => ({\n              markDef,\n              path: [{_key: block._key}, 'markDefs', {_key: markDef._key}],\n            })) ?? []\n          )\n        }\n\n        return []\n      })\n      const markDefs = markDefsAfter.filter(\n        (markDef) =>\n          !markDefsBefore.some(\n            (markDefBefore) => markDefBefore._key === markDef.markDef._key,\n          ),\n      )\n      const spanPath = focusSpanAfter?.path\n      const markDef = markDefs.find((markDef) =>\n        newMarkDefKeysOnFocusSpan?.some(\n          (mark) => mark === markDef.markDef._key,\n        ),\n      )\n\n      if (focusBlockAfter && spanPath && markDef) {\n        return {\n          markDefPath: markDef.path,\n          markDefPaths: markDefs.map((markDef) => markDef.path),\n          spanPath,\n        }\n      }\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange({\n          context: {\n            schema: editorActor.getSnapshot().context.schema,\n            value: editor.value,\n            selection,\n          },\n          blockIndexMap: editor.blockIndexMap,\n        })\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            const placeholderBlock = createPlaceholderBlock(\n              editorActor.getSnapshot().context,\n            )\n            editor.children = [placeholderBlock]\n            editor.value = [placeholderBlock]\n\n            buildIndexMaps(\n              {\n                schema: editorActor.getSnapshot().context.schema,\n                value: editor.value,\n              },\n              {\n                blockIndexMap: editor.blockIndexMap,\n                listIndexMap: editor.listIndexMap,\n              },\n            )\n          }\n\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = slateRangeToSelection({\n          schema: editorActor.getSnapshot().context.schema,\n          editor,\n          range: editor.selection,\n        })\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionA,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n      const rangeB = toSlateRange({\n        context: {\n          schema: editorActor.getSnapshot().context.schema,\n          value: editor.value,\n          selection: selectionB,\n        },\n        blockIndexMap: editor.blockIndexMap,\n      })\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {assign, emit, setup, type ActorRefFrom} from 'xstate'\nimport type {EditorSelection, InvalidValueResolution} from '../types/editor'\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      /**\n       * @deprecated Will be removed in the next major version\n       */\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | ErrorEvent\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      /**\n       * @deprecated Will be removed in the next major version\n       */\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\n/**\n * @deprecated The event is no longer emitted\n */\ntype ErrorEvent = {\n  type: 'error'\n  name: string\n  description: string\n  data: unknown\n}\n\nexport type InternalEditorEmittedEvent = EditorEmittedEvent | UnsetEvent\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\nexport type PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\nexport type UnsetEvent = {\n  /**\n   * @deprecated Use `'patch'` events instead\n   */\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\nexport type RelayActor = ActorRefFrom<typeof relayMachine>\n\nexport const relayMachine = setup({\n  types: {\n    context: {} as {\n      prevSelection: EditorSelection\n      lastEventWasFocused: boolean\n    },\n    events: {} as InternalEditorEmittedEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n  },\n}).createMachine({\n  id: 'relay',\n  context: {\n    prevSelection: null,\n    lastEventWasFocused: false,\n  },\n  on: {\n    'focused': {\n      actions: [\n        assign({\n          lastEventWasFocused: true,\n        }),\n        emit(({event}) => event),\n      ],\n    },\n    'selection': [\n      {\n        guard: ({context}) => context.lastEventWasFocused,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n      {\n        guard: ({context, event}) => context.prevSelection !== event.selection,\n        actions: [\n          assign({\n            prevSelection: ({event}) => event.selection,\n          }),\n          emit(({event}) => event),\n          assign({\n            lastEventWasFocused: false,\n          }),\n        ],\n      },\n    ],\n    '*': {\n      actions: [\n        emit(({event}) => event),\n        assign({\n          lastEventWasFocused: false,\n        }),\n      ],\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {isTextBlock} from '@portabletext/schema'\nimport type {\n  PortableTextBlock,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport type {InvalidValueResolution} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: EditorSchema,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isTextBlock({schema: types}, {...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.name).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  deleteText,\n  Editor,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  not,\n  raise,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport type {ActorRefFrom} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './editor-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\nexport type SyncActor = ActorRefFrom<typeof syncMachine>\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      initialValue: Array<PortableTextBlock> | undefined\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending mutations'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing value'}\n      | {type: 'syncing value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing value': emit({\n      type: 'done syncing value',\n    }),\n    'emit syncing value': emit({\n      type: 'syncing value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = isProcessingLocalChanges || isChanging\n\n      debug('isBusy', {isBusy, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'is empty value': ({event}) => {\n      return event.type === 'update value' && event.value === undefined\n    },\n    'is empty array': ({event}) => {\n      return (\n        event.type === 'update value' &&\n        Array.isArray(event.value) &&\n        event.value.length === 0\n      )\n    },\n    'is new value': ({context, event}) => {\n      return (\n        event.type === 'update value' && context.previousValue !== event.value\n      )\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValue: input.initialValue,\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  entry: [\n    raise(({context}) => {\n      return {type: 'update value', value: context.initialValue}\n    }),\n  ],\n  on: {\n    'has pending mutations': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  initial: 'idle',\n  states: {\n    idle: {\n      entry: [\n        () => {\n          debug('entry: syncing->idle')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->idle')\n        },\n      ],\n      on: {\n        'update value': [\n          {\n            guard: and(['is empty value', not('initial value synced')]),\n            actions: ['assign initial value synced', 'emit done syncing value'],\n          },\n          {\n            guard: and(['is empty array', not('initial value synced')]),\n            actions: [\n              'assign initial value synced',\n              emit({type: 'value changed', value: []}),\n              'emit done syncing value',\n            ],\n          },\n          {\n            guard: and(['is busy', 'is new value']),\n            target: 'busy',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: 'is new value',\n            target: 'syncing',\n            actions: ['assign pending value'],\n          },\n          {\n            guard: not('initial value synced'),\n            actions: [\n              () => {\n                debug('no new value – setting initial value as synced')\n              },\n              'assign initial value synced',\n              'emit done syncing value',\n            ],\n          },\n          {\n            actions: [\n              () => {\n                debug('no new value and initial value already synced')\n              },\n            ],\n          },\n        ],\n      },\n    },\n    busy: {\n      entry: [\n        () => {\n          debug('entry: syncing->busy')\n        },\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->busy')\n        },\n      ],\n      after: {\n        1000: [\n          {\n            guard: 'is busy',\n            target: '.',\n            reenter: true,\n            actions: [\n              () => {\n                debug('reenter: syncing->busy')\n              },\n            ],\n          },\n          {\n            target: 'syncing',\n          },\n        ],\n      },\n      on: {\n        'update value': [\n          {\n            guard: 'is new value',\n            actions: ['assign pending value'],\n          },\n        ],\n      },\n    },\n    syncing: {\n      entry: [\n        () => {\n          debug('entry: syncing->syncing')\n        },\n        'emit syncing value',\n      ],\n      exit: [\n        () => {\n          debug('exit: syncing->syncing')\n        },\n        'emit done syncing value',\n      ],\n      invoke: {\n        src: 'sync value',\n        id: 'sync value',\n        input: ({context}) => {\n          return {\n            context: {\n              keyGenerator: context.keyGenerator,\n              previousValue: context.previousValue,\n              readOnly: context.readOnly,\n              schema: context.schema,\n            },\n            slateEditor: context.slateEditor,\n            streamBlocks: !context.initialValueSynced,\n            value: context.pendingValue,\n          }\n        },\n      },\n      on: {\n        'update value': {\n          guard: 'is new value',\n          actions: ['assign pending value'],\n        },\n        'patch': {\n          actions: [emit(({event}) => event)],\n        },\n        'invalid value': {\n          actions: [emit(({event}) => event)],\n        },\n        'value changed': {\n          actions: [emit(({event}) => event)],\n        },\n        'done syncing': [\n          {\n            guard: 'value changed while syncing',\n            actions: ['assign previous value', 'assign initial value synced'],\n            target: 'syncing',\n            reenter: true,\n          },\n          {\n            target: 'idle',\n            actions: [\n              'clear pending value',\n              'assign previous value',\n              'assign initial value synced',\n            ],\n          },\n        ],\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let doneSyncing = false\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            if (hadSelection) {\n              Transforms.deselect(slateEditor)\n            }\n\n            const childrenLength = slateEditor.children.length\n\n            slateEditor.children.forEach((_, index) => {\n              Transforms.removeNodes(slateEditor, {\n                at: [childrenLength - 1 - index],\n              })\n            })\n\n            Transforms.insertNodes(\n              slateEditor,\n              slateEditor.pteCreateTextBlock({decorators: []}),\n              {at: [0]},\n            )\n\n            // Add a new selection in the top of the document\n            if (hadSelection) {\n              Transforms.select(slateEditor, [0, 0])\n            }\n          })\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    if (streamBlocks) {\n      await new Promise<void>((resolve) => {\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (doneSyncing) {\n                resolve()\n                return\n              }\n\n              isChanged = removeExtraBlocks({\n                slateEditor,\n                slateValueFromProps,\n              })\n\n              const processBlocks = async () => {\n                for await (const [\n                  currentBlock,\n                  currentBlockIndex,\n                ] of getStreamedBlocks({\n                  slateValue: slateValueFromProps,\n                })) {\n                  const {blockChanged, blockValid} = syncBlock({\n                    context,\n                    sendBack,\n                    block: currentBlock,\n                    index: currentBlockIndex,\n                    slateEditor,\n                    value,\n                  })\n\n                  isChanged = blockChanged || isChanged\n                  isValid = isValid && blockValid\n\n                  if (!isValid) {\n                    break\n                  }\n                }\n\n                resolve()\n              }\n\n              processBlocks()\n            })\n          })\n        })\n      })\n    } else {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, () => {\n            if (doneSyncing) {\n              return\n            }\n\n            isChanged = removeExtraBlocks({\n              slateEditor,\n              slateValueFromProps,\n            })\n\n            let index = 0\n\n            for (const currentBlock of slateValueFromProps) {\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index,\n                slateEditor,\n                value,\n              })\n\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n\n              if (!blockValid) {\n                break\n              }\n\n              index++\n            }\n          })\n        })\n      })\n    }\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    doneSyncing = true\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      doneSyncing = true\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  doneSyncing = true\n  sendBack({type: 'done syncing', value})\n}\n\nfunction removeExtraBlocks({\n  slateEditor,\n  slateValueFromProps,\n}: {\n  slateEditor: PortableTextSlateEditor\n  slateValueFromProps: Array<Descendant>\n}) {\n  let isChanged = false\n  const childrenLength = slateEditor.children.length\n\n  // Remove blocks that have become superfluous\n  if (slateValueFromProps.length < childrenLength) {\n    for (let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--) {\n      Transforms.removeNodes(slateEditor, {\n        at: [i],\n      })\n    }\n    isChanged = true\n  }\n  return isChanged\n}\n\nasync function* getStreamedBlocks({\n  slateValue,\n}: {\n  slateValue: Array<Descendant>\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              if (oldBlockChild.text.length > 0) {\n                deleteText(slateEditor, {\n                  at: {\n                    focus: {path, offset: 0},\n                    anchor: {path, offset: oldBlockChild.text.length},\n                  },\n                })\n              }\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {\n  compileSchemaDefinitionToPortableTextMemberSchemaTypes,\n  createPortableTextMemberSchemaTypes,\n  portableTextMemberSchemaTypesToSchema,\n} from '@portabletext/sanity-bridge'\nimport {compileSchema} from '@portabletext/schema'\nimport {createActor} from 'xstate'\nimport {createCoreConverters} from '../converters/converters.core'\nimport type {Editor, EditorConfig} from '../editor'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport {corePriority} from '../priority/priority.core'\nimport {createEditorPriority} from '../priority/priority.types'\nimport type {EditableAPI, PortableTextSlateEditor} from '../types/editor'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {createEditorDom} from './editor-dom'\nimport type {EditorActor} from './editor-machine'\nimport {editorMachine, rerouteExternalBehaviorEvent} from './editor-machine'\nimport {getEditorSnapshot} from './editor-selector'\nimport {defaultKeyGenerator} from './key-generator'\nimport {mutationMachine, type MutationActor} from './mutation-machine'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\nimport {relayMachine, type RelayActor} from './relay-machine'\nimport {syncMachine, type SyncActor} from './sync-machine'\n\nconst debug = debugWithName('setup')\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): {\n  actors: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n  editor: InternalEditor\n  subscriptions: Array<() => () => void>\n} {\n  debug('Creating new Editor instance')\n\n  const subscriptions: Array<() => () => void> = []\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  const relayActor = createActor(relayMachine)\n  const slateEditor = createSlateEditor({\n    editorActor,\n    relayActor,\n    subscriptions,\n  })\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n  const {mutationActor, syncActor} = createActors({\n    editorActor,\n    relayActor,\n    slateEditor: slateEditor.instance,\n    subscriptions,\n  })\n\n  const editor = {\n    dom: createEditorDom(\n      (event) => editorActor.send(event),\n      slateEditor.instance,\n    ),\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (behaviorConfig) => {\n      const priority = createEditorPriority({\n        name: 'custom',\n        reference: {\n          priority: corePriority,\n          importance: 'higher',\n        },\n      })\n      const behaviorConfigWithPriority = {\n        ...behaviorConfig,\n        priority,\n      }\n\n      editorActor.send({\n        type: 'add behavior',\n        behaviorConfig: behaviorConfigWithPriority,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behaviorConfig: behaviorConfigWithPriority,\n        })\n      }\n    },\n    send: (event) => {\n      switch (event.type) {\n        case 'update value':\n          syncActor.send(event)\n          break\n\n        case 'update readOnly':\n        case 'patches':\n        case 'update maxBlocks':\n          editorActor.send(event)\n          break\n\n        default:\n          editorActor.send(\n            rerouteExternalBehaviorEvent({\n              event,\n              slateEditor: slateEditor.instance,\n            }),\n          )\n      }\n    },\n    on: (event, listener) => {\n      const subscription = relayActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  } satisfies InternalEditor\n\n  return {\n    actors: {\n      editorActor,\n      mutationActor,\n      relayActor,\n      syncActor,\n    },\n    editor,\n    subscriptions,\n  }\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  const {legacySchema, schema} = compileSchemasFromEditorConfig(config)\n\n  return {\n    converters: createCoreConverters(legacySchema),\n    getLegacySchema: () => legacySchema,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema,\n    initialValue: config.initialValue,\n  } as const\n}\n\nfunction compileSchemasFromEditorConfig(config: EditorConfig) {\n  const legacySchema = config.schemaDefinition\n    ? compileSchemaDefinitionToPortableTextMemberSchemaTypes(\n        config.schemaDefinition,\n      )\n    : createPortableTextMemberSchemaTypes(\n        config.schema.hasOwnProperty('jsonType')\n          ? config.schema\n          : compileType(config.schema),\n      )\n  const schema = config.schemaDefinition\n    ? compileSchema(config.schemaDefinition)\n    : portableTextMemberSchemaTypesToSchema(legacySchema)\n\n  return {\n    legacySchema,\n    schema,\n  }\n}\n\nfunction createActors(config: {\n  editorActor: EditorActor\n  relayActor: RelayActor\n  slateEditor: PortableTextSlateEditor\n  subscriptions: Array<() => () => void>\n}): {\n  mutationActor: MutationActor\n  syncActor: SyncActor\n} {\n  debug('Creating new Actors')\n\n  const mutationActor = createActor(mutationMachine, {\n    input: {\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  const syncActor = createActor(syncMachine, {\n    input: {\n      initialValue: config.editorActor.getSnapshot().context.initialValue,\n      keyGenerator: config.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: config.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: config.editorActor.getSnapshot().context.schema,\n      slateEditor: config.slateEditor,\n    },\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = mutationActor.on('*', (event) => {\n      if (event.type === 'has pending mutations') {\n        syncActor.send({type: 'has pending mutations'})\n      }\n      if (event.type === 'mutation') {\n        syncActor.send({type: 'mutation'})\n        config.editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n      if (event.type === 'patch') {\n        config.relayActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = syncActor.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          config.relayActor.send(event)\n          break\n        case 'value changed':\n          config.relayActor.send(event)\n          break\n        case 'patch':\n          config.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              config.slateEditor.children,\n              config.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(config.slateEditor),\n            ),\n          })\n          break\n\n        default:\n          config.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.subscribe((snapshot) => {\n      if (snapshot.matches({'edit mode': 'read only'})) {\n        mutationActor.send({type: 'update readOnly', readOnly: true})\n        syncActor.send({type: 'update readOnly', readOnly: true})\n      } else {\n        mutationActor.send({type: 'update readOnly', readOnly: false})\n        syncActor.send({type: 'update readOnly', readOnly: false})\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  config.subscriptions.push(() => {\n    const subscription = config.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'editable':\n        case 'mutation':\n        case 'ready':\n        case 'read only':\n        case 'selection':\n          config.relayActor.send(event)\n          break\n        case 'internal.patch':\n          mutationActor.send({...event, type: 'patch'})\n          break\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  })\n\n  return {\n    mutationActor,\n    syncActor,\n  }\n}\n","import type {EditorChange} from '../types/editor'\nimport type {InternalEditorEmittedEvent} from './relay-machine'\n\nexport function eventToChange(\n  event: InternalEditorEmittedEvent,\n): EditorChange | undefined {\n  switch (event.type) {\n    case 'blurred': {\n      return {type: 'blur', event: event.event}\n    }\n    case 'patch':\n      return event\n    case 'loading': {\n      return {type: 'loading', isLoading: true}\n    }\n    case 'done loading': {\n      return {type: 'loading', isLoading: false}\n    }\n    case 'focused': {\n      return {type: 'focus', event: event.event}\n    }\n    case 'value changed': {\n      return {type: 'value', value: event.value}\n    }\n    case 'invalid value': {\n      return {\n        type: 'invalidValue',\n        resolution: event.resolution,\n        value: event.value,\n      }\n    }\n    case 'mutation': {\n      return event\n    }\n    case 'ready': {\n      return event\n    }\n    case 'selection': {\n      return event\n    }\n    case 'unset': {\n      return event\n    }\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport type {\n  AddedAnnotationPaths,\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {eventToChange} from './event-to-change'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport type {MutationActor} from './mutation-machine'\nimport {RelayActorContext} from './relay-actor-context'\nimport type {RelayActor} from './relay-machine'\nimport type {SyncActor} from './sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  private actors?: {\n    editorActor: EditorActor\n    mutationActor: MutationActor\n    relayActor: RelayActor\n    syncActor: SyncActor\n  }\n\n  private subscriptions: Array<() => () => void> = []\n  private unsubscribers: Array<() => void> = []\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n      this.schemaTypes = this.editor._internal.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    } else {\n      const {actors, editor, subscriptions} = createInternalEditor({\n        initialValue: props.value,\n        keyGenerator: props.keyGenerator,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n        schema: props.schemaType,\n      })\n\n      this.subscriptions = subscriptions\n      this.actors = actors\n\n      this.editor = editor\n      this.schemaTypes = actors.editorActor\n        .getSnapshot()\n        .context.getLegacySchema()\n    }\n\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidMount(): void {\n    if (!this.actors) {\n      return\n    }\n\n    for (const subscription of this.subscriptions) {\n      this.unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = this.actors.relayActor.on('*', (event) => {\n      const change = eventToChange(event)\n\n      if (!change) {\n        return\n      }\n\n      if (!this.props.editor) {\n        this.props.onChange(change)\n      }\n\n      this.change$.next(change)\n    })\n\n    this.unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    this.actors.editorActor.start()\n    this.actors.mutationActor.start()\n    this.actors.relayActor.start()\n    this.actors.syncActor.start()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      console.warn('Updating schema type is no longer supported')\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  componentWillUnmount(): void {\n    for (const unsubscribe of this.unsubscribers) {\n      unsubscribe()\n    }\n\n    if (this.actors) {\n      stopActor(this.actors.editorActor)\n      stopActor(this.actors.mutationActor)\n      stopActor(this.actors.relayActor)\n      stopActor(this.actors.syncActor)\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <RelayActorContext.Provider value={this.actors!.relayActor}>\n            <Slate\n              editor={this.editor._internal.slateEditor.instance}\n              initialValue={this.editor._internal.slateEditor.initialValue}\n            >\n              <PortableTextEditorContext.Provider value={this}>\n                {this.props.children}\n              </PortableTextEditorContext.Provider>\n            </Slate>\n          </RelayActorContext.Provider>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import type React from 'react'\nimport {useEffect, useState} from 'react'\nimport {Slate} from 'slate-react'\nimport type {EditorConfig} from '../editor'\nimport {stopActor} from '../internal-utils/stop-actor'\nimport {createInternalEditor} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {EditorContext} from './editor-context'\nimport {eventToChange} from './event-to-change'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {\n  PortableTextEditor,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\nimport {RelayActorContext} from './relay-actor-context'\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const [{internalEditor, portableTextEditor}] = useState(() => {\n    const internalEditor = createInternalEditor(props.initialConfig)\n    const portableTextEditor = new PortableTextEditor({\n      editor: internalEditor.editor,\n    } as unknown as PortableTextEditorProps)\n\n    return {internalEditor, portableTextEditor}\n  })\n\n  useEffect(() => {\n    const unsubscribers: Array<() => void> = []\n\n    for (const subscription of internalEditor.subscriptions) {\n      unsubscribers.push(subscription())\n    }\n\n    const relayActorSubscription = internalEditor.actors.relayActor.on(\n      '*',\n      (event) => {\n        const change = eventToChange(event)\n\n        if (change) {\n          portableTextEditor.change$.next(change)\n        }\n      },\n    )\n    unsubscribers.push(relayActorSubscription.unsubscribe)\n\n    internalEditor.actors.editorActor.start()\n    internalEditor.actors.mutationActor.start()\n    internalEditor.actors.relayActor.start()\n    internalEditor.actors.syncActor.start()\n\n    return () => {\n      for (const unsubscribe of unsubscribers) {\n        unsubscribe()\n      }\n\n      stopActor(internalEditor.actors.editorActor)\n      stopActor(internalEditor.actors.mutationActor)\n      stopActor(internalEditor.actors.relayActor)\n      stopActor(internalEditor.actors.syncActor)\n    }\n  }, [internalEditor, portableTextEditor])\n\n  return (\n    <EditorContext.Provider value={internalEditor.editor}>\n      <EditorActorContext.Provider value={internalEditor.actors.editorActor}>\n        <RelayActorContext.Provider value={internalEditor.actors.relayActor}>\n          <Slate\n            editor={internalEditor.editor._internal.slateEditor.instance}\n            initialValue={\n              internalEditor.editor._internal.slateEditor.initialValue\n            }\n          >\n            <PortableTextEditorContext.Provider value={portableTextEditor}>\n              {props.children}\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </RelayActorContext.Provider>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n","import {startTransition, useContext, useEffect, useState} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const editorActor = useContext(EditorActorContext)\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  useEffect(() => {\n    const subscription = editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editorActor])\n\n  return selection\n}\n"],"names":["EditorEventListener","props","$","_c","editor","useEditor","t0","t1","on","subscription","unsubscribe","useEffect","rootName","debug","debugWithName","name","namespace","enabled","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","value","_key","isEqual","toSlateValue","schemaTypes","Array","isArray","map","block","_type","rest","textBlock","hasInlines","hasMissingStyle","style","hasMissingMarkDefs","markDefs","hasMissingChildren","children","child","cType","cKey","cRest","text","marks","__inline","Element","isElement","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","blockValue","isEqualToEmptyEditor","undefined","length","Text","isText","join","getBlockPath","blockPath","from","Editor","nodes","at","match","n","blockIndex","getFocusBlock","selection","node","focus","path","slice","getFocusSpan","focusBlock","isTextBlock","isTextSpan","getSelectionStartBlock","selectionStartPoint","Range","start","getPointBlock","point","getSelectionEndBlock","selectionEndPoint","end","getFocusChild","focusBlockPath","childIndex","focusChild","Node","getPointChild","pointChild","getFirstBlock","firstBlockPath","getLastBlock","lastBlockPath","getNodeBlock","schema","isEditor","isBlockElement","elementToBlock","element","parent","mode","some","isInline","blockObjects","blockObject","isListItemActive","listItem","selectedBlocks","every","isListBlock","isStyleActive","slateRangeToSelection","range","anchorBlock","anchor","anchorChild","offset","backward","isBackward","push","getEventPosition","editorActor","slateEditor","event","getSnapshot","matches","setup","eventNode","getEventNode","eventBlock","context","eventPositionBlock","getEventPositionBlock","eventSelection","getEventSelection","utils","eventSelectionFocusBlockKey","getBlockKeyFromSelectionPoint","DOMEditor","hasTarget","target","toSlateNode","firstBlock","firstBlockRect","toDOMNode","getBoundingClientRect","pageY","top","lastBlock","lastBlockRef","bottom","elementRect","height","Math","abs","getSlateRangeFromEvent","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","normalizePoint","newPath","newOffset","blockKey","childKey","find","blk","cld","normalizeSelection","newAnchor","newFocus","snapshot","isEqualSelectionPoints","anchorPoint","toSlateSelectionPoint","focusPoint","selectionPoint","direction","blockIndexMap","get","getChildKeyFromSelectionPoint","spanSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","childPath","pathChild","isSpan","concat","min","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EditorActorContext","createContext","DropIndicator","Symbol","for","width","borderBottom","zIndex","RenderDefaultBlockObject","userSelect","RenderDefaultInlineObject","inlineObject","getDragSelection","dragSelection","selectors","draggingCollapsedSelection","draggedTextBlock","draggedSpan","selectionStartBlock","selectionEndBlock","createEditorPriority","config","id","defaultKeyGenerator","reference","corePriority","createCoreBlockElementBehaviorsConfig","key","onSetDragPositionBlock","behavior","defineBehavior","guard","dropFocusBlock","dragOrigin","draggedBlock","actions","type","effect","priority","importance","forward","useCoreBlockElementBehaviors","useContext","t2","behaviorConfigs","behaviorConfig","send","behaviorConfig_0","RenderBlockObject","dragPositionBlock","setDragPositionBlock","useState","blockObjectRef","useRef","selected","useSelected","isCollapsed","focused","useSlateSelector","legacySchema","t3","schemaType","legacySchemaType","error","t4","t5","readOnly","t6","renderBlock","t7","t8","t9","attributes","RenderInlineObject","inlineObjectRef","useSlateStatic","inlineObjects","findPath","inlineObject_0","display","renderChild","RenderTextBlock","blockRef","editor_0","listIndexMap","listIndex","renderStyle","legacyStyleSchemaType","renderListItem","lists","list","legacyListItemSchemaType","level","t10","t11","t12","t13","t14","t15","t16","spellCheck","RenderElement","useSelector","_temp","_temp2","slateStatic","s_0","s","getLegacySchema","defaultCompare","a","b","useEditorSelector","selector","compare","editorActorSnapshot","getEditorSnapshot","slateEditorInstance","_internal","instance","converters","keyGenerator","decoratorState","RenderSpan","spanRef","leaf","isSelectionCollapsed","focusedSpan","editorActorSnapshot_0","snapshot_0","spanSelection","isOverlappingSelection","parent_0","block_0","annotationMarkDefs","renderAnnotation","renderDecorator","decoratorSchemaTypes","decorators","uniq","filter","mark","includes","flatMap","mark_0","markDef_0","markDef","mark_1","legacyDecoratorSchemaType","dec","annotationMarkDef","legacyAnnotationSchemaType","annotations","_child","span","decorator","PLACEHOLDER_STYLE","pointerEvents","left","right","RenderLeaf","renderedSpan","renderPlaceholder","placeholder","rangeDecoration","component","RenderText","PortableTextEditorContext","usePortableTextEditor","IS_MAC","test","navigator","userAgent","modifiers","alt","control","meta","shift","aliases","add","break","cmd","command","ctl","ctrl","del","down","esc","ins","mod","opt","option","return","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","replace","split","rawHotkeySegment","optional","endsWith","hotkeySegment","keyName","toKeyName","modifier","alias","code","TypeError","keyCode","toKeyCode","toLowerCase","toUpperCase","charCodeAt","createWithHotkeys","portableTextEditor","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","Object","keys","forEach","cat","nativeEvent","preventDefault","possibleMark","behaviorEvent","possibleCommand","moveRangeByOperation","operation","Point","transform","equals","slateOperationCallback","input","sendBack","originalApply","apply","op","rangeDecorationsMachine","types","events","assign","pendingRangeDecorations","rangeDecorations","set up initial range decorations","rangeDecorationState","slateRange","isRange","onMoved","newSelection","origin","decoratedRanges","update range decorations","move range decorations","decoratedRange","newRange","newRangeSelection","decorate","fn","createDecorate","actors","fromCallback","guards","has pending range decorations","has range decorations","has different decorations","existingRangeDecorations","payload","newRangeDecorations","not read only","should skip setup","skipSetup","createMachine","invoke","src","initial","states","always","and","entry","_","Path","intersection","RelayActorContext","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onBlur","onClick","onCopy","onCut","onDrag","onDragEnd","onDragEnter","onDragLeave","onDragOver","onDragStart","onDrop","onFocus","onPaste","propsSelection","restProps","scrollSelectionIntoView","hasInvalidValue","setHasInvalidValue","relayActor","useSlate","rangeDecorationsActor","useActorRef","bb0","eProps","renderElement","leafProps","renderLeaf","renderText","_temp3","JSON","stringify","normalizedSelection","Transforms","select","operations","_temp4","onChange","restoreSelectionFromProps","onReady","onInvalidValue","onValueChanged","clipboardData","stopPropagation","originEvent","dataTransfer","handleCopy","t17","event_0","selection_0","position_0","handleCut","t18","event_1","onPasteResult","Promise","resolve","then","result_1","result","insert","selection_1","position_1","blocks","parseBlocks","options","validateFields","placement","catch","_temp5","finally","selection_2","position_2","handlePaste","t19","event_2","isDefaultPrevented","handleOnFocus","t20","event_3","isPropagationStopped","position_3","handleClick","t21","event_4","handleOnBlur","t22","event_5","handleOnBeforeInput","t23","event_6","onKeyDown","handleKeyDown","t24","event_7","onKeyUp","handleKeyUp","t25","bb1","noop","t26","_editor","scrollSelectionIntoViewToSlate","t27","ReactEditor","onDragEnd_0","onDrop_0","addEventListener","removeEventListener","t28","event_8","position_4","handleDragStart","t29","event_9","handleDrag","t30","event_10","handleDragEnd","t31","event_11","position_6","handleDragEnter","t32","event_12","position_7","internalDrag","handleDragOver","t33","event_13","position_8","handleDrop","t34","event_14","handleDragLeave","t35","current","mutationObserver","MutationObserver","validateSelection","observe","attributeOldValue","characterData","childList","subtree","disconnect","callbackRef","t36","SlateEditable","className","displayName","activeElement","root","findDocumentOrShadowRoot","domSelection","getSelection","rangeCount","existingDOMRange","getRangeAt","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","deselect","props_0","o","forEachActor","actorRef","callback","values","stopActor","persistedSnapshots","ref","observers","Set","systemSnapshot","system","stop","_snapshot","_processingStatus","converterJson","mimeType","serialize","portableTextConverter","converter","reason","deserialize","converterPortableText","data","parse","parsedBlocks","parsedBlock","parseBlock","createConverterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","portableText","unstable_whitespaceOnPasteMode","createConverterTextPlain","inlineObjectType","title","blockObjectType","textToHtml","escapeHtml","line","entityMap","str","String","createCoreConverters","compileType","rawType","Schema","compile","levelIndexMaps","Map","buildIndexMaps","clear","previousListItem","set","levelIndexMap","levelsToDelete","delete","levelCounter","createPlaceholderBlock","getPreviousSpan","spanPath","previousSpan","reverse","isBefore","getNextSpan","nextSpan","isAfter","withRemoteChanges","prev","isChangingRemotely","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","createWithPortableTextMarkModel","normalizeNode","nodeEntry","nextNode","mergeNodes","voids","setNodes","orphanedAnnotations","def","markDefKeys","newMarkDefs","has","properties","newProperties","previousSelectionIsCollapsed","newSelectionIsCollapsed","focusSpan","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","depth","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","annotation","atTheEndOfAnnotation","insertNodes","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","markState","getMarkState","state","isExpanded","spanHasAnnotations","deletingFromTheEnd","deletingAllText","previousSpanHasSameAnnotation","nextSpanHasSameAnnotation","withoutNormalizing","getActiveDecorators","targetBlock","targetPath","oldDefs","removeDecoratorOperationImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","cloneDiff","diff2","patch","CURRENT_UNDO_STEP","getCurrentUndoStepId","undoStepId","createUndoStep","clearUndoStep","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","getRemotePatches","createWithUndoRedo","previousSnapshot","remotePatches","previousUndoStepId","subscriptions","sub","patches","reset","history","undos","redos","splice","time","Date","step","lastOp","overwrite","shouldOverwrite","save","currentUndoStepId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shouldClear","historyUndoOperationImplementation","otherPatches","item","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","err","pop","historyRedoOperationImplementation","transformedOperation","insertBlockIndex","findIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","index","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","currentAnchor","addAnnotationOperationImplementation","parsedAnnotation","parseAnnotation","annotationKey","removeAnnotationOperationImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetOperationImplementation","filteredProps","updatedBlock","slateBlock","blockUnsetOperationImplementation","location","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","childSetOperationImplementation","childEntry","definition","fields","field","childUnsetOperationImplementation","newNode","newValue","applyAll","decoratorAddOperationImplementation","manualAnchor","manualFocus","manualSelection","editorSelection","anchorOffset","focusOffset","offsets","trimmedSelection","splitTextNodes","existingMarks","deleteOperationImplementation","anchorBlockKey","focusBlockKey","startBlockKey","endBlockKey","startBlockIndex","startBlock","endBlockIndex","endBlock","anchorBlockPath","removeNodes","unit","parentBlockEntry","above","isBlock","parentBlockPath","parentElementRange","currentLineRange","findCurrentLineRange","deleteText","setSelection","parentRange","parentRangeBoundary","positions","middle","floor","rangesAreOnSameLine","range1","range2","rect1","rect2","domRectsIntersect","rect","compareRect","insertBlockOperationImplementation","fragment","insertBlock","startBlockPath","endBlockPath","nextPath","selectionBefore","insertFragment","currentSelection","endBlockEndPoint","adjustedSelection","next","endBlockChildKeys","endBlockMarkDefsKeys","markDefKeyMap","adjustedMarkDefs","newKey","adjustedChildren","adjustedBlock","endBlockStartPoint","isEmptyTextBlock","splitNodes","insertTextOperationImplementation","activeDecorators","activeAnnotations","getActiveAnnotationsMarks","insertText","markStateDecorators","EDITOR_TO_PENDING_SELECTION","moveBackwardOperationImplementation","move","distance","moveBlockOperationImplementation","originKey","originBlockIndex","destinationKey","to","destinationBlockIndex","moveNodes","moveForwardOperationImplementation","selectOperationImplementation","IS_FOCUSED","IS_READ_ONLY","behaviorOperationImplementations","performOperation","message","IS_PERFORMING_OPERATION","withPerformingBehaviorOperation","isPerformingBehaviorOperation","createWithEventListeners","maxBlocks","editorDelete","deleteBackward","deleteForward","insertBreak","insertData","insertSoftBreak","redo","setFragmentData","undo","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","prevPath","previous","prevIndex","previousBlock","previousBlockChildKeys","previousBlockMarkDefKeys","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","diffMatchPatch","findBlock","findBlockChild","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","blocksToInsert","targetBlockIndex","normalizedIdx","editorWasEmptyBefore","targetChild","childrenToInsert","childInsertPath","oldText","newText","propPath","propEntry","reservedProps","nextRest","_prevChildren","prevRest","blockNode","newVal","previousSelection","pteCreateTextBlock","newKeys","removedProperties","property","unsetNodes","isMatch","isKeyedSegment","insertTextPatch","beforeValue","textChild","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","val","indexOf","insertNodePatch","targetKey","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","newBlock","updatedSpan","removedSpan","moveNodePatch","childToInsert","PATCHING","withoutPatching","isPatching","createWithPatches","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","previousValue","operationId","createWithPlaceholderBlock","isLonelyBlock","isBlockObject","insertNode","createWithSchemaTypes","isVoid","obj","createWithUtils","pluginUpdateSelection","updateSelection","existingSelection","isEditorNode","isTextBlockNode","isTypedObject","isSpanNode","isPartialSpanNode","isObjectNode","getBlock","getNode","getSpan","getParent","parentPath","applyOperationToPortableText","draft","createDraft","applyOperationToPortableTextDraft","e","finishDraft","insertedNode","before","after","isAncestor","truePath","newParent","newIndex","valueBefore","valueAfter","hasOwnProperty","newTextBlockNode","newSpanNode","pluginUpdateValue","withPlugins","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPlaceholderBlock","withUtils","createSlateEditor","withReact","createEditor","placeholderBlock","initialValue","createEditorDom","getBlockNodes","getChildNodes","setDragGhost","ghost","childNode","setDragImage","x","y","addAnnotationOnCollapsedSelection","caretWordSelection","raise","preventOverlappingAnnotations","coreAnnotationBehaviors","defaultKeyboardShortcuts","arrowDown","createKeyboardShortcut","default","arrowUp","lineBreak","strong","bold","em","italic","underline","tab","shiftTab","arrowDownOnLonelyBlockObject","focusBlockObject","nextBlock","arrowUpOnLonelyBlockObject","breakingBlockObject","clickingAboveLonelyBlockObject","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","focusTextBlock","selectionCollapsed","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","emShortcut","underlineShortcut","codeShortcut","getCompoundClientRect","DOMRect","elements","firstRect","i","max","coreDndBehaviors","dom","selectingEntireBlocks","draggedDomNodes","blockNodes","childNodes","dragGhost","createElement","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","blocksDomRect","clonedChildNodes","childrenDomRect","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","focusLevel","breakingAtTheStartOfTextBlock","focusDecorators","focusAnnotations","breakingEntireDocument","firstBlockStartPoint","lastBlockEndPoint","breakingEntireBlocks","startBlockStartPoint","breakingInlineObject","focusInlineObject","coreInsertBreakBehaviors","isAtTheBeginningOfBlock","MAX_LIST_LEVEL","clearListOnBackspace","unindentListOnBackspace","mergeTextIntoListOnDelete","focusListBlock","mergeTextIntoListOnBackspace","previousBlockEndPoint","getBlockEndPoint","deletingListFromStart","blocksToDelete","middleBlocks","deleteStartPoint","deleteEndPoint","getBlockStartPoint","startBlockEndPoint","slicedEndBlock","sliceTextBlock","clearListOnEnter","indentListOnTab","selectedListBlocks","selectedListBlock","unindentListOnShiftTab","inheritListLevel","firstInsertedBlock","secondInsertedBlock","insertedListBlock","levelDifference","adjustLevel","listStartBlockFound","inheritListItem","adjustListItem","inheritListProperties","coreListBehaviors","coreBehaviorsConfig","abstractAnnotationBehaviors","markDefKey","updatedMarkDefs","isActiveAnnotation","abstractDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","abstractDeleteBehaviors","nextBlockStartPoint","abstractDeserializeBehaviors","getData","json","deserializeEvent","textRuns","getTextBlockText","textRun","deserializeDataEvent","abstractInsertBehaviors","onlyBlock","firstBlockKey","lastBlockKey","getFocusTextBlock","focusBlockStartPoint","focusBlockEndPoint","focusTextBlockAfter","execute","abstractKeyboardBehaviors","abstractListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","abstractMoveBehaviors","getPreviousBlock","getNextBlock","abstractSelectBehaviors","blockEndPoint","abstractSerializeBehaviors","serializeEvent","setData","abstractSplitBehaviors","startPoint","endPoint","blocksInBetween","newTextBlockSelection","newTextBlock","abstractStyleBehaviors","isActiveStyle","abstractBehaviors","isSyntheticBehaviorEvent","isCustomBehaviorEvent","isNativeBehaviorEvent","isAbstractBehaviorEvent","abstractBehaviorEventTypes","nativeBehaviorEventTypes","startsWith","eventCategory","performEvent","behaviors","remainingEventBehaviors","eventBehaviors","listenedNamespace","eventNamespace","guardSnapshot","nativeEventPrevented","defaultBehaviorOverwritten","eventBehaviorIndex","eventBehavior","shouldRun","actionSet","actionsSnapshot","action","undoStepCreated","sortByPriority","itemsWithPriority","itemsWithoutPriority","itemsByPriorityId","graph","inDegree","ensureNode","addEdge","fromId","toId","visited","refId","queue","degree","currentId","currentItem","neighborId","newDegree","createEditorSnapshot","rerouteExternalBehaviorEvent","editorMachine","emitted","tags","assertEvent","behaviorsSorted","emit","pendingEvents","enqueueActions","enqueue","pendingIncomingPatchesEvents","handle blur","blur","handle focus","handle behavior event","self","eventSentBack","slate is busy","initialReadOnly","exit","dragstart","parentNode","removeChild","dragend","drop","pristine","idle","normalizing","dirty","mutationMachine","bulk","pendingMutations","lastBulk","pendingPatchEvents","interval","setInterval","process","env","NODE_ENV","clearInterval","is read-only","slate is normalizing","isNormalizing","delays","typing","reenter","mutations","not","createEditableAPI","toggleMark","toggleList","toggleBlockStyle","isMarkActive","slateSelection","descendant","insertChild","focusChildPath","focusNode","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","spans","isAnnotationActive","annotationType","addAnnotation","snapshotBefore","selectedValueBefore","getSelectedValue","focusSpanBefore","markDefsBefore","snapshotAfter","selectedValueAfter","focusBlockAfter","focusSpanAfter","newMarkDefKeysOnFocusSpan","markDefBefore","markDefPath","markDefPaths","SlateElement","removeAnnotation","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","relayMachine","prevSelection","lastEventWasFocused","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","i18n","isPlainObject","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","m","toString","orphanedMarks","spanChildren","orphaned","cMrk","cIndex","newChild","childType","syncValueCallback","updateValue","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","pendingValue","initial value synced","is busy","isProcessingLocalChanges","isChanging","isBusy","is empty value","is empty array","is new value","value changed while syncing","pending value equals previous value","busy","syncing","doneSyncing","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","removeExtraBlocks","currentBlock","currentBlockIndex","getStreamedBlocks","slateValue","blockChanged","blockValid","syncBlock","setTimeout","hasChanges","validationValue","validation","_updateBlock","_replaceBlock","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","createInternalEditor","createActor","editorConfigToMachineInput","editable","mutationActor","syncActor","createActors","registerBehavior","behaviorConfigWithPriority","listener","compileSchemasFromEditorConfig","schemaDefinition","compileSchemaDefinitionToPortableTextMemberSchemaTypes","createPortableTextMemberSchemaTypes","compileSchema","portableTextMemberSchemaTypesToSchema","subscribe","eventToChange","isLoading","PortableTextEditor","Component","change$","Subject","unsubscribers","constructor","Number","parseInt","componentDidMount","relayActorSubscription","change","componentDidUpdate","prevProps","editorRef","componentWillUnmount","setEditable","render","legacyPatches","incomingPatches$","patches$","blockStyle","listStyle","isObjectPath","isChildObjectEditPath","RoutePatchesObservableToEditorActor","EditorProvider","initialConfig","internalEditor","internalEditor_0","portableTextEditor_0","usePortableTextEditorSelection","startTransition"],"mappings":";;;;;;;;;;;;;;;;A4G2KQg6C,QAAQC,IAAIC,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A5G9J1B,SAAAl6C,oBAAAC,KAAAA,EAAA;IAAA,MAAAC,QAAAC,qKAAAA,EAAA,CAAA,GAGLC,aAAeC,iMAAAA,CAAAA;IAAW,IAAAC,IAAAC;IAAA,OAAAL,CAAAA,CAAAA,EAAAA,KAAAE,UAAAF,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAO,EAAAA,GAAAA,CAEhBF,KAAAA,MAAA;QACR,MAAAG,eAAqBL,OAAMI,EAAAA,CAAI,KAAKP,MAAKO,EAAG;QAAC,OAAA,MAAA;YAG3CC,aAAYC,WAAAA,CAAAA;QAAc;IAAA,GAE3BH,KAAA;QAACH;QAAQH,MAAKO,EAAA;KAAA,EAAIN,CAAAA,CAAAA,EAAAA,GAAAE,QAAAF,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAO,EAAAA,EAAAN,CAAAA,CAAAA,EAAAA,GAAAI,IAAAJ,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,CAAAD,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAAAK,KAAAL,CAAAA,CAAA,CAAA,CAAA,OANrBS,0KAAAA,EAAUL,IAMPC,EAAkB,GAAC;AAAA;ACtBxB,MAAMK,WAAW;IAEFC,qJAAAA,EAAMD,QAAQ;AACtB,SAASE,cAAcC,IAAAA,EAA8B;IAC1D,MAAMC,YAAY,UAAGJ,QAAQ,EAAO,OAAJG,IAAI;IACpC,OAAIF,qJAAAA,IAASA,qJAAAA,CAAMI,OAAAA,CAAQD,SAAS,QAC3BH,qJAAAA,EAAMG,SAAS,QAEjBH,qJAAAA,EAAMD,QAAQ;AACvB;ACDO,MAEMM,iBAAiB;AAE9B,SAASC,mBACPC,MAAAA,EACAC,MAAAA,EACA;IACA,MAAMC,QAAQD,MAAAA,CAAOD,OAAOG,IAAI,CAAA;IAChC,OAAID,SAASE,mJAAAA,EAAQJ,QAAQE,KAAK,IACzBA,QAAAA,CAETD,MAAAA,CAAOD,OAAOG,IAAI,CAAA,GAAIH,QACfA,MAAAA;AACT;AAEO,SAASK,aACdH,KAAAA,EACA,KAAyC;UAAxCI,WAAAA,EAAwC,mBACzCL,iEAA8B,CAAA,GAChB;IACd,OAAIC,SAASK,MAAMC,OAAAA,CAAQN,KAAK,IACvBA,MAAMO,GAAAA,CAAKC,CAAAA,UAAU;QAC1B,MAAM,EAACC,KAAAA,EAAOR,IAAAA,EAAM,GAAGS,MAAAA,GAAQF;QAE/B,IADuBA,SAASA,MAAMC,KAAAA,KAAUL,YAAYI,KAAAA,CAAMf,IAAAA,EAC9C;YAClB,MAAMkB,YAAYH;YAClB,IAAII,aAAa,CAAA;YACjB,MAAMC,kBAAkB,OAAOF,UAAUG,KAAAA,GAAU,KAC7CC,qBAAqB,OAAOJ,UAAUK,QAAAA,GAAa,KACnDC,qBAAqB,OAAON,UAAUO,QAAAA,GAAa,KAEnDA,WAAAA,CAAYP,UAAUO,QAAAA,IAAY,CAAA,CAAA,EAAIX,GAAAA,CAAKY,CAAAA,UAAU;gBACzD,MAAM,EAACV,OAAOW,KAAAA,EAAOnB,MAAMoB,IAAAA,EAAM,GAAGC,OAAAA,GAASH;gBAM7C,OAAIC,UAAU,SAAA,CACZR,aAAa,CAAA,GACNf,mBACL;oBACEY,OAAOW;oBACPnB,MAAMoB;oBACNH,UAAU;wBACR;4BACEjB,MAAML;4BACNa,OAAO;4BACPc,MAAM;4BACNC,OAAO,CAAA,CAAA;wBAAA,CACR;qBAAA;oBAEHxB,OAAOsB;oBACPG,UAAU,CAAA;gBAAA,GAEZ1B,MACF,CAAA,IAGKoB;YACT,CAAC;YAED,OACE,CAACN,mBACD,CAACE,sBACD,CAACE,sBACD,CAACL,cACDc,0JAAAA,CAAQC,SAAAA,CAAUnB,KAAK,IAGhBA,QAAAA,CAGLK,mBAAAA,CACFH,KAAKI,KAAAA,GAAQV,YAAYwB,MAAAA,CAAO,CAAC,CAAA,CAAEnC,IAAAA,GAE9BI,mBAAmB;gBAACY;gBAAOR;gBAAM,GAAGS,IAAAA;gBAAMQ;YAAAA,GAAWnB,MAAM,CAAA;QACpE;QACA,OAAOF,mBACL;YACEY;YACAR;YACAiB,UAAU;gBACR;oBACEjB,MAAML;oBACNa,OAAO;oBACPc,MAAM;oBACNC,OAAO,CAAA,CAAA;gBAAA,CACR;aAAA;YAEHxB,OAAOU;QAAAA,GAETX,MACF;IACF,CAAC,IAEI,CAAA,CAAA;AACT;AAEO,SAAS8B,eACd7B,KAAAA,EACA8B,aAAAA;iBACA/B,iEAAgE,CAAA,GAC3C;IACrB,OAAOC,MAAMO,GAAAA,CAAKC,CAAAA,UAAU;QAC1B,MAAM,EAACP,IAAAA,EAAMQ,KAAAA,EAAAA,GAASD;QACtB,IAAI,CAACP,QAAQ,CAACQ,OACZ,MAAM,IAAIsB,MAAM,mBAAmB;QAErC,IACEtB,UAAUqB,iBACV,cAActB,SACdH,MAAMC,OAAAA,CAAQE,MAAMU,QAAQ,KAC5BjB,MACA;YACA,IAAIW,aAAa,CAAA;YACjB,MAAMM,WAAWV,MAAMU,QAAAA,CAASX,GAAAA,CAAKY,CAAAA,UAAU;gBAC7C,MAAM,EAACV,OAAOuB,MAAAA,EAAAA,GAAUb;gBACxB,IAAI,WAAWA,SAASa,WAAW,QAAQ;oBACzCpB,aAAa,CAAA;oBACb,MAAM,EACJZ,OAAOiC,CAAAA,EACPhC,MAAMiC,CAAAA,EACNzB,OAAO0B,CAAAA,EACPV,UAAUW,EAAAA,EACVlB,UAAUrC,EAAAA,EACV,GAAG6B,MAAAA,GACDS;oBACJ,OAAOtB,mBACL;wBAAC,GAAGa,IAAAA;wBAAM,GAAGuB,CAAAA;wBAAGhC,MAAMiC;wBAAazB,OAAO0B;oBAAAA,GAC1CpC,MACF;gBACF;gBACA,OAAOoB;YACT,CAAC;YACD,OAAKP,aAGEf,mBACL;gBAAC,GAAGW,KAAAA;gBAAOU;gBAAUjB;gBAAMQ;YAAAA,GAC3BV,MACF,IALSS;QAMX;QACA,MAAM6B,aAAa,WAAW7B,SAASA,MAAMR,KAAAA;QAC7C,OAAOH,mBACL;YAACI;YAAMQ;YAAO,GAAI,OAAO4B,cAAe,WAAWA,aAAa,CAAA,CAAA;QAAC,GACjEtC,MACF;IACF,CAAC;AACH;AAEO,SAASuC,qBACdpB,QAAAA,EACAd,WAAAA,EACS;;IACT,OACEc,aAAaqB,KAAAA,KACZrB,YAAYb,MAAMC,OAAAA,CAAQY,QAAQ,KAAKA,SAASsB,MAAAA,KAAW,KAC3DtB,YACCb,MAAMC,OAAAA,CAAQY,QAAQ,KACtBA,SAASsB,MAAAA,KAAW,KACpBd,0JAAAA,CAAQC,SAAAA,CAAUT,QAAAA,CAAS,CAAC,CAAC,KAC7BA,QAAAA,CAAS,CAAC,CAAA,CAAET,KAAAA,KAAUL,YAAYI,KAAAA,CAAMf,IAAAA,IACxC,WAAWyB,QAAAA,CAAS,CAAC,CAAA,IACrBA,QAAAA,CAAS,CAAC,CAAA,CAAEJ,KAAAA,KAAUV,YAAYwB,MAAAA,CAAO,CAAC,CAAA,CAAEnC,IAAAA,IAC5C,CAAA,CAAE,cAAcyB,QAAAA,CAAS,CAAC,CAAA,KAC1Bb,MAAMC,OAAAA,CAAQY,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAQ,KAClCA,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAAA,CAASsB,MAAAA,KAAW,KAChCC,uJAAAA,CAAKC,MAAAA,CAAOxB,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAAA,CAAS,CAAC,CAAC,KACnCA,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAAA,CAAS,CAAC,CAAA,CAAET,KAAAA,KAAU,UAClC,gCAACS,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAAA,CAAS,CAAC,CAAA,CAAEM,KAAAA,0FAAOmB,IAAAA,CAAK,EAAE,MACvCzB,QAAAA,CAAS,CAAC,CAAA,CAAEA,QAAAA,CAAS,CAAC,CAAA,CAAEK,IAAAA,KAAS;AAEvC;AClLO,SAASqB,kBAMhB,EAAyB;UALvB9D,MAAAA,EACAmB,IAAAA,EAIF,GAN6B;QAOLI;IAAtB,MAAM,CAAA,EAAGwC,SAAS,CAAA,2BAAUC,IAAAA,CAC1BC,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;QACnBmE,IAAI,CAAA,CAAA;QACJC,OAAQC,CAAAA,IAAMA,EAAElD,IAAAA,KAASA;IAAAA,CAC1B,CACH,EAAEgD,EAAAA,CAAG,CAAC,4DAAK;QAACV,KAAAA;QAAWA,KAAAA,CAAS;KAAA,EAE1Ba,mCAAaP,0CAAWI,EAAAA,CAAG,CAAC;IAElC,IAAIG,eAAeb,KAAAA,GAInB,OAAO;QAACa,UAAU;KAAA;AACpB;AAuBO,SAASC,mBAIhB;UAHEvE,MAAAA,EAGF,EAAsD,CAJxB;IAK5B,IAAI,CAACA,OAAOwE,SAAAA,EACV,OAAO;QAACf,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,IAAI;YAEAQ;QADF,gLACEA,CAAOQ,IAAAA,CAAKzE,QAAQA,OAAOwE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CAAC,wDAAK;YAC9DnB,KAAAA;YACAA,KAAAA,CAAS;SAAA;IAGf,EAAA,UAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEO,SAASoB,kBAIhB;UAHE7E,MAAAA,EAGF,EAAkE,CAJrC;IAK3B,IAAI,CAACA,OAAOwE,SAAAA,EACV,OAAO;QAACf,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,IAAI;QACF,MAAM,CAACqB,UAAU,CAAA,GAAIP,cAAc;YAACvE;QAAAA,CAAO;QAE3C,IAAI,CAAC8E,YACH,OAAO;YAACrB,KAAAA;YAAWA,KAAAA,CAAS;SAAA;QAG9B,IAAI,CAACzD,OAAO+E,WAAAA,CAAYD,UAAU,GAChC,OAAO;YAACrB,KAAAA;YAAWA,KAAAA,CAAS;SAAA;QAG9B,MAAM,CAACgB,MAAME,IAAI,CAAA,GAAIV,yJAAAA,CAAOQ,IAAAA,CAC1BzE,QACAA,OAAOwE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CACxC;QAEA,IAAI5E,OAAOgF,UAAAA,CAAWP,IAAI,GACxB,OAAO;YAACA;YAAME,IAAI;SAAA;IAEtB,EAAA,UAAQ;QACN,OAAO;YAAClB,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;IAEA,OAAO;QAACA,KAAAA;QAAWA,KAAAA,CAAS;KAAA;AAC9B;AAEO,SAASwB,uBAAuB,KAIvC;UAHEjF,MAAAA,EAGF,EAAsD;IACpD,IAAI,CAACA,OAAOwE,SAAAA,EACV,OAAO;QAACf,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,MAAMyB,sBAAsBC,wJAAAA,CAAMC,KAAAA,CAAMpF,OAAOwE,SAAS;IAExD,OAAOa,cAAc;QAACrF;QAAQsF,OAAOJ;IAAAA,CAAoB;AAC3D;AAEO,SAASK,0BAIhB,EAAsD;QAJjB,EACnCvF,MAAAA,EAGF;IACE,IAAI,CAACA,OAAOwE,SAAAA,EACV,OAAO;QAACf,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,MAAM+B,oBAAoBL,wJAAAA,CAAMM,GAAAA,CAAIzF,OAAOwE,SAAS;IAEpD,OAAOa,cAAc;QAACrF;QAAQsF,OAAOE;IAAAA,CAAkB;AACzD;AAEO,SAASH,mBAMhB,EAAsD;QANxB,EAC5BrF,MAAAA,EACAsF,KAAAA,EAIF;IACE,IAAI;;QACF,MAAM,CAAC5D,KAAK,CAAA,mBAAIuC,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQsF,MAAMX,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CAAC,wDAAK;YAC7DnB,KAAAA;YACAA,KAAAA,CAAS;SAAA;QAEX,OAAO/B,QAAQ;YAACA;YAAO4D,MAAMX,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CAAC;SAAA,GAAI;YAACnB,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IACxE,EAAA,UAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEO,SAASiC,mBAIhB;UAHE1F,MAAAA,EAGF,EAAsD,CAJxB;QAMTA;IADnB,MAAM,CAAC8E,YAAYa,cAAc,CAAA,GAAIpB,cAAc;QAACvE;IAAAA,CAAO,GACrD4F,yCAAoBpB,SAAAA,wEAAWE,KAAAA,CAAMC,IAAAA,CAAKR,EAAAA,CAAG,CAAC;IAEpD,IAAI,CAACW,cAAc,CAACa,kBAAkBC,eAAenC,KAAAA,GACnD,OAAO;QAACA,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,IAAI;QACF,MAAMoC,aAAaC,uJAAAA,CAAKzD,KAAAA,CAAMyC,YAAYc,UAAU;QAEpD,OAAOC,aACH;YAACA;YAAY,CAAC;mBAAGF;gBAAgBC,UAAU;aAAC;SAAA,GAC5C;YAACnC,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC3B,EAAA,UAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEA,SAASsC,mBAMT;UALE/F,MAAAA,EACAsF,KAAAA,EAIF,EAAsD,CAN/B;IAOrB,MAAM,CAAC5D,OAAOqC,SAAS,CAAA,GAAIsB,cAAc;QAACrF;QAAQsF;IAAAA,CAAM,GAClDM,aAAaN,MAAMX,IAAAA,CAAKR,EAAAA,CAAG,CAAC;IAElC,IAAI,CAACzC,SAAS,CAACqC,aAAa6B,eAAenC,KAAAA,GACzC,OAAO;QAACA,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAG9B,IAAI;QACF,MAAMuC,aAAaF,uJAAAA,CAAKzD,KAAAA,CAAMX,OAAOkE,UAAU;QAE/C,OAAOI,aACH;YAACA;YAAY,CAAC;mBAAGjC;gBAAW6B,UAAU;aAAC;SAAA,GACvC;YAACnC,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC3B,EAAA,UAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEO,SAASwC,mBAIhB;UAHEjG,MAAAA,EAGF,EAAsD,CAJxB;IAK5B,IAAIA,OAAOoC,QAAAA,CAASsB,MAAAA,KAAW,GAC7B,OAAO;QAACD,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAI9B,MAAMyC,iBADajC,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQ,CAAA,CAAE,EACR2E,IAAAA,CAAKR,EAAAA,CAAG,CAAC;IAE3C,IAAI;;QACF,OAAO+B,mBAAmBzC,KAAAA,oBACrBQ,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQ;YAACkG,cAAc;SAAC,wDAAK;YAACzC,KAAAA;YAAWA,KAAAA,CAAS;SAAA,GAC/D;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC3B,EAAA,UAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEO,SAAS0C,kBAIhB,EAAsD;QAJzB,EAC3BnG,MAAAA,EAGF;IACE,IAAIA,OAAOoC,QAAAA,CAASsB,MAAAA,KAAW,GAC7B,OAAO;QAACD,KAAAA;QAAWA,KAAAA,CAAS;KAAA;IAI9B,MAAM2C,gBADYnC,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQ,CAAA,CAAE,EACP2E,IAAAA,CAAKR,EAAAA,CAAG,CAAC;IAEzC,IAAI;;QACF,OAAOiC,kBAAkB3C,KAAAA,oBACpBQ,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQ;YAACoG,aAAa;SAAC,wDAAK;YAAC3C,KAAAA;YAAWA,KAAAA,CAAS;SAAA,GAC9D;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC3B,EAAA,UAAQ;QACN,OAAO;YAACA,KAAAA;YAAWA,KAAAA,CAAS;SAAA;IAC9B;AACF;AAEO,SAAS4C,kBAQhB,EAAG;QAR0B,EAC3BrG,MAAAA,EACAsG,MAAAA,EACA7B,IAAAA,EAKF;;IACE,IAAIR,yJAAAA,CAAOsC,QAAAA,CAAS9B,IAAI,GACtB;IAGF,IAAI+B,eAAe;QAACxG;QAAQsG;IAAAA,GAAS7B,IAAI,GACvC,OAAOgC,eAAe;QAACH;QAAQI,SAASjC;IAAAA,CAAK;IAG/C,MAAMkC,iCAAe3C,IAAAA,CACnBC,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;QACnB4G,MAAM;QACNzC,IAAI,CAAA,CAAA;QACJC,OAAQC,CAAAA,IACNmC,eAAe;gBAACxG;gBAAQsG;YAAAA,GAASjC,CAAC,KAClCA,EAAEjC,QAAAA,CAASyE,IAAAA,CAAMxE,CAAAA,QAAUA,MAAMlB,IAAAA,KAASsD,KAAKtD,IAAI;IAAA,CACtD,CACH,EACGgD,EAAAA,CAAG,CAAC,oDATQ5C,eAUX4C,EAAAA,CAAG,CAAC;IAER,OAAOvB,0JAAAA,CAAQC,SAAAA,CAAU8D,MAAM,IAC3BF,eAAe;QACbH;QACAI,SAASC;IAAAA,CACV,IACDlD,KAAAA;AACN;AAEA,SAASgD,oBAMT;UALEH,MAAAA,EACAI,OAAAA,EAIF,EAAG,CANqB;;IAOtB,yCAAsB;QAACA,OAAO;KAAA,EAAGJ,OAAO5E,KAAAA,CAAMf,IAAI,qDAA3CoC,gBAA8CoB,EAAAA,CAAG,CAAC;AAC3D;AAEA,SAASqC,eACP,KAAwE,EACxE/B,IAAAA,EACiB;UAFhBzE,MAAAA,EAAQsG,MAAAA,EAA+D;IAGxE,OACE1D,0JAAAA,CAAQC,SAAAA,CAAU4B,IAAI,KACtB,CAACzE,OAAO8G,QAAAA,CAASrC,IAAI,KAAA,CACpB6B,OAAO5E,KAAAA,CAAMf,IAAAA,KAAS8D,KAAK9C,KAAAA,IAC1B2E,OAAOS,YAAAA,CAAaF,IAAAA,CACjBG,CAAAA,cAAgBA,YAAYrG,IAAAA,KAAS8D,KAAK9C,KAC7C,CAAA;AAEN;AAEO,SAASsF,sBAMhB;UALEjH,MAAAA,EACAkH,QAAAA,EAIF,EAAY,CANqB;IAO/B,IAAI,CAAClH,OAAOwE,SAAAA,EACV,OAAO,CAAA;IAGT,MAAM2C,iBAAiB,CACrB;WAAGlD,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;YACtBmE,IAAInE,OAAOwE,SAAAA;YACXJ,OAAQK,CAAAA,OAASzE,OAAO+E,WAAAA,CAAYN,IAAI;QAAA,CACzC,CAAC;KAAA;IAGJ,OAAI0C,eAAezD,MAAAA,GAAS,IACnByD,eAAeC,KAAAA,CACpB;YAAC,CAAC3C,IAAI,CAAA;eAAMzE,OAAOqH,WAAAA,CAAY5C,IAAI,KAAKA,KAAKyC,QAAAA,KAAaA,QAC5D;SAGK,CAAA;AACT;AAEO,SAASI,mBAMhB,EAAY;UALVtH,MAAAA,EACAgC,KAAAA,EAIF,GAN8B;IAO5B,IAAI,CAAChC,OAAOwE,SAAAA,EACV,OAAO,CAAA;IAGT,MAAM2C,iBAAiB,CACrB;WAAGlD,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;YACtBmE,IAAInE,OAAOwE,SAAAA;YACXJ,OAAQK,CAAAA,OAASzE,OAAO+E,WAAAA,CAAYN,IAAI;QAAA,CACzC,CAAC;KAAA;IAGJ,OAAI0C,eAAezD,MAAAA,GAAS,IACnByD,eAAeC,KAAAA,CAAM;YAAC,CAAC3C,IAAI,CAAA;eAAMA,KAAKzC,KAAAA,KAAUA,KAAK;SAGvD,CAAA;AACT;AAEO,SAASuF,2BAQhB,EAAoB;UAPlBjB,MAAAA,EACAtG,MAAAA,EACAwH,KAAAA,EAKF,GARsC;IASpC,MAAM,CAACC,WAAW,CAAA,GAAIpC,cAAc;QAClCrF;QACAsF,OAAOkC,MAAME,MAAAA;IAAAA,CACd,GACK,CAAC5C,UAAU,CAAA,GAAIO,cAAc;QACjCrF;QACAsF,OAAOkC,MAAM9C,KAAAA;IAAAA,CACd;IAED,IAAI,CAAC+C,eAAe,CAAC3C,YACnB,OAAO;IAGT,MAAM,CAAC6C,WAAW,CAAA,GAChBF,YAAY9F,KAAAA,KAAU2E,OAAO5E,KAAAA,CAAMf,IAAAA,GAC/BoF,cAAc;QACZ/F;QACAsF,OAAOkC,MAAME,MAAAA;IAAAA,CACd,IACD;QAACjE,KAAAA;QAAWA,KAAAA,CAAS;KAAA,EACrB,CAACoC,UAAU,CAAA,GACff,WAAWnD,KAAAA,KAAU2E,OAAO5E,KAAAA,CAAMf,IAAAA,GAC9BoF,cAAc;QACZ/F;QACAsF,OAAOkC,MAAM9C,KAAAA;IAAAA,CACd,IACD;QAACjB,KAAAA;QAAWA,KAAAA,CAAS;KAAA,EAErBe,YAA6B;QACjCkD,QAAQ;YACN/C,MAAM;gBAAC;oBAACxD,MAAMsG,YAAYtG,IAAAA;gBAAAA,CAAK;aAAA;YAC/ByG,QAAQJ,MAAME,MAAAA,CAAOE,MAAAA;QAAAA;QAEvBlD,OAAO;YACLC,MAAM;gBAAC;oBAACxD,MAAM2D,WAAW3D,IAAAA;gBAAAA,CAAK;aAAA;YAC9ByG,QAAQJ,MAAM9C,KAAAA,CAAMkD,MAAAA;QAAAA;QAEtBC,UAAU1C,wJAAAA,CAAM2C,UAAAA,CAAWN,KAAK;IAAA;IAGlC,OAAIG,eAAAA,CACFnD,UAAUkD,MAAAA,CAAO/C,IAAAA,CAAKoD,IAAAA,CAAK,UAAU,GACrCvD,UAAUkD,MAAAA,CAAO/C,IAAAA,CAAKoD,IAAAA,CAAK;QAAC5G,MAAMwG,YAAYxG,IAAAA;IAAAA,CAAK,CAAA,GAGjD0E,cAAAA,CACFrB,UAAUE,KAAAA,CAAMC,IAAAA,CAAKoD,IAAAA,CAAK,UAAU,GACpCvD,UAAUE,KAAAA,CAAMC,IAAAA,CAAKoD,IAAAA,CAAK;QAAC5G,MAAM0E,WAAW1E,IAAAA;IAAAA,CAAK,CAAA,GAG5CqD;AACT;ACvYO,SAASwD,sBAQhB,EAA8B;UAP5BC,WAAAA,EACAC,WAAAA,EACAC,KAAAA,EAKF,GARiC;IAS/B,IAAIF,YAAYG,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;QAACC,OAAO;IAAA,CAAa,GACzD;IAGF,MAAMC,YAAYC,aAAa;QAACN;QAAaC;IAAAA,CAAM;IAEnD,IAAI,CAACI,WACH;IAGF,MAAME,aAAapC,aAAa;QAC9BrG,QAAQkI;QACR5B,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;QAC1C7B,MAAM8D;IAAAA,CACP,GACKI,qBAAqBC,sBAAsB;QAC/CnE,MAAM8D;QACNL;QACAC;IAAAA,CACD,GACKU,iBAAiBC,kBAAkB;QACvCxC,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;QAC1C4B;QACAC;IAAAA,CACD;IAED,IACEM,cACAE,sBACA,CAACE,kBACD,CAAC5E,yJAAAA,CAAOsC,QAAAA,CAASgC,SAAS,GAI1B,OAAO;QACL7G,OAAOiH;QACPpC,UAAU,CAAA;QACV/B,WAAW;YACTkD,YAAQqB,oNAAAA,EAAyB;gBAC/BL,SAAST,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA;gBACnChH,OAAO;oBACL+C,MAAMgE;oBACN9D,MAAM;wBAAC;4BAACxD,MAAMsH,WAAWtH,IAAAA;wBAAAA,CAAK;qBAAA;gBAAA;YAChC,CACD;YACDuD,WAAOqE,+NAAAA,EAAuB;gBAC5BL,SAAST,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA;gBACnChH,OAAO;oBACL+C,MAAMgE;oBACN9D,MAAM;wBAAC;4BAACxD,MAAMsH,WAAWtH,IAAAA;wBAAAA,CAAK;qBAAA;gBAAA;YAChC,CACD;QAAA;IACH;IAIJ,IAAI,CAACwH,sBAAsB,CAACE,gBAC1B;IAGF,MAAMG,kCAA8BC,+NAAAA,EAClCJ,eAAenE,KACjB;IAEA,IAAIsE,gCAAgCvF,KAAAA,GAIpC,WACEsF,mOAAAA,EAA2BF,cAAc,KACzCJ,cACAO,gCAAgCP,WAAWtH,IAAAA,GAIpC;QACLO,OAAOiH;QACPpC,UAAU,CAAA;QACV/B,WAAW;YACTkD,YAAQqB,oNAAAA,EAAyB;gBAC/BL,SAAST,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA;gBACnChH,OAAO;oBACL+C,MAAMgE;oBACN9D,MAAM;wBAAC;4BAACxD,MAAMsH,WAAWtH,IAAAA;wBAAAA,CAAK;qBAAA;gBAAA;YAChC,CACD;YACDuD,WAAOqE,+NAAAA,EAAuB;gBAC5BL,SAAST,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA;gBACnChH,OAAO;oBACL+C,MAAMgE;oBACN9D,MAAM;wBAAC;4BAACxD,MAAMsH,WAAWtH,IAAAA;wBAAAA,CAAK;qBAAA;gBAAA;YAChC,CACD;QAAA;IACH,IAIG;QACLO,OAAOiH;QACPpC,UAAUtC,yJAAAA,CAAOsC,QAAAA,CAASgC,SAAS;QACnC/D,WAAWqE;IAAAA;AAEf;AAEO,SAASL,kBAMhB;UALEN,WAAAA,EACAC,KAAAA,EAIF,EAAG,CAN0B;IAO3B,OAAKe,mKAAAA,CAAUC,SAAAA,CAAUjB,aAAaC,MAAMiB,MAAM,IAIrCF,mKAAAA,CAAUG,WAAAA,CAAYnB,aAAaC,MAAMiB,MAAM,IAH1D,KAAA;AAMJ;AAEA,SAASR,2BAQT,EAAmC;QARJ,EAC7BnE,IAAAA,EACAyD,WAAAA,EACAC,KAAAA,EAKF;IACE,MAAM,CAACmB,UAAU,CAAA,GAAIrD,cAAc;QAACjG,QAAQkI;IAAAA,CAAY;IAExD,IAAI,CAACoB,YACH;IAIF,MAAMC,iBADoBL,mKAAAA,CAAUM,SAAAA,CAAUtB,aAAaoB,UAAU,EAC5BG,qBAAAA,CAAAA;IAEzC,IAAItB,MAAMuB,KAAAA,GAAQH,eAAeI,GAAAA,EAC/B,OAAO;IAGT,MAAM,CAACC,SAAS,CAAA,GAAIzD,aAAa;QAACnG,QAAQkI;IAAAA,CAAY;IAEtD,IAAI,CAAC0B,WACH;IAIF,MAAMC,eADmBX,mKAAAA,CAAUM,SAAAA,CAAUtB,aAAa0B,SAAS,EAC7BH,qBAAAA,CAAAA;IAEtC,IAAItB,MAAMuB,KAAAA,GAAQG,aAAaC,MAAAA,EAC7B,OAAO;IAIT,MAAMC,cADUb,mKAAAA,CAAUM,SAAAA,CAAUtB,aAAazD,IAAI,EACzBgF,qBAAAA,CAAAA,GACtBE,MAAMI,YAAYJ,GAAAA,EAClBK,SAASD,YAAYC,MAAAA;IAG3B,OAFiBC,KAAKC,GAAAA,CAAIP,MAAMxB,MAAMuB,KAAK,IAEzBM,SAAS,IAAI,UAAU;AAC3C;AAEO,SAASlB,uBAQhB,EAAoB;QARc,EAChCxC,MAAAA,EACA4B,WAAAA,EACAC,KAAAA,EAKF;IACE,MAAMX,QAAQ2C,uBAAuBjC,aAAaC,KAAK;IAUvD,OARkBX,QACdD,sBAAsB;QACpBjB;QACAtG,QAAQkI;QACRV;IAAAA,CACD,IACD;AAGN;AAEA,SAAS2C,uBACPnK,MAAAA,EACAmI,KAAAA,EACA;IAKA,IAJI,CAACA,MAAMiB,MAAAA,IAIP,KAACgB,mKAAAA,EAAUjC,MAAMiB,MAAM,GACzB;IAGF,MAAMiB,UAASnB,mKAAAA,CAAUoB,SAAAA,CAAUtK,MAAM;IAEzC,IAAIuK;;IAEJ,IAAIF,QAAOG,QAAAA,CAASC,sBAAAA,KAA2BhH,KAAAA,GAAW;QACxD,MAAMiH,WAAWL,QAAOG,QAAAA,CAASC,sBAAAA,CAC/BtC,MAAMwC,OAAAA,EACNxC,MAAMyC,OACR;QAEA,IAAIF,UACF,IAAI;YACFH,WAAWF,QAAOG,QAAAA,CAASK,WAAAA,CAAAA,GAC3BN,SAASO,QAAAA,CAASJ,SAASK,UAAAA,EAAYL,SAAS9C,MAAM,GACtD2C,SAASS,MAAAA,CAAON,SAASK,UAAAA,EAAYL,SAAS9C,MAAM;QACtD,EAAA,UAAQ,CAAC;IAEb,OAAA,IAAWyC,QAAOG,QAAAA,CAASS,mBAAAA,KAAwBxH,KAAAA,GAEjD8G,oDACEF,QAAOG,QAAAA,CAASS,mBAAAA,CAAoB9C,MAAMwC,OAAAA,EAASxC,MAAMyC,OAAO,0GAChEnH,KAAAA;SACG;QACLyH,QAAQC,IAAAA,CACN,qEACF;QACA;IACF;IAEA,IAAI,CAACZ,UACH;IAGF,IAAI/C;IAEJ,IAAI;QACFA,QAAQ0B,mKAAAA,CAAUkC,YAAAA,CAAapL,QAAQuK,UAAU;YAC/Cc,YAAY,CAAA;YAAA,uDAAA;YAEZC,eAAe,CAAA;QAAA,CAChB;IACH,EAAA,UAAQ,CAAC;IAET,OAAO9D;AACT;AC/QO,SAAS+D,eACdjG,KAAAA,EACApE,KAAAA,EAC6B;IAC7B,IAAI,CAACoE,SAAS,CAACpE,OACb,OAAO;IAET,MAAMsK,UAAgB,CAAA,CAAA;IACtB,IAAIC,YAAoBnG,MAAMsC,MAAAA,IAAU;IACxC,MAAM8D,WACJ,OAAOpG,MAAMX,IAAAA,CAAK,CAAC,CAAA,IAAM,YACzB,UAAUW,MAAMX,IAAAA,CAAK,CAAC,CAAA,IACtBW,MAAMX,IAAAA,CAAK,CAAC,CAAA,CAAExD,IAAAA,EACVwK,WACJ,OAAOrG,MAAMX,IAAAA,CAAK,CAAC,CAAA,IAAM,YACzB,UAAUW,MAAMX,IAAAA,CAAK,CAAC,CAAA,IACtBW,MAAMX,IAAAA,CAAK,CAAC,CAAA,CAAExD,IAAAA,EACVO,QAAuCR,MAAM0K,IAAAA,CAChDC,CAAAA,MAAQA,IAAI1K,IAAAA,KAASuK,QACxB;IACA,IAAIhK,OACF8J,QAAQzD,IAAAA,CAAK;QAAC5G,MAAMO,MAAMP,IAAAA;IAAAA,CAAK;SAE/B,OAAO;IAET,IAAIO,SAAS4D,MAAMX,IAAAA,CAAK,CAAC,CAAA,KAAM,YAAY;QACzC,IACE,CAACjD,MAAMU,QAAAA,IACNb,MAAMC,OAAAA,CAAQE,MAAMU,QAAQ,KAAKV,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,GAE5D,OAAO;QAET,MAAMrB,QACJd,MAAMC,OAAAA,CAAQE,MAAMU,QAAQ,KAC5BV,MAAMU,QAAAA,CAASwJ,IAAAA,CAAME,CAAAA,MAAQA,IAAI3K,IAAAA,KAASwK,QAAQ;QACpD,IAAItJ,OACFmJ,QAAQzD,IAAAA,CAAK,UAAU,GACvByD,QAAQzD,IAAAA,CAAK;YAAC5G,MAAMkB,MAAMlB,IAAAA;QAAAA,CAAK,GAC/BsK,YACEpJ,MAAMI,IAAAA,IAAQJ,MAAMI,IAAAA,CAAKiB,MAAAA,IAAU4B,MAAMsC,MAAAA,GACrCtC,MAAMsC,MAAAA,GACLvF,MAAMI,IAAAA,IAAQJ,MAAMI,IAAAA,CAAKiB,MAAAA,IAAW;aAE3C,OAAO;IAEX;IACA,OAAO;QAACiB,MAAM6G;QAAS5D,QAAQ6D;IAAAA;AACjC;AAEO,SAASM,mBACdvH,SAAAA,EACAtD,KAAAA,EACwB;IACxB,IAAI,CAACsD,aAAa,CAACtD,SAASA,MAAMwC,MAAAA,KAAW,GAC3C,OAAO;IAET,IAAIsI,YAAyC,MACzCC,WAAwC;IAC5C,MAAM,EAACvE,MAAAA,EAAQhD,KAAAA,EAAAA,GAASF;IAUxB,OAREkD,UACAxG,MAAM0K,IAAAA,CAAMC,CAAAA,MAAQzK,mJAAAA,EAAQ;YAACD,MAAM0K,IAAI1K,IAAAA;QAAAA,GAAOuG,OAAO/C,IAAAA,CAAK,CAAC,CAAC,CAAC,KAAA,CAE7DqH,YAAYT,eAAe7D,QAAQxG,KAAK,CAAA,GAEtCwD,SAASxD,MAAM0K,IAAAA,CAAMC,CAAAA,MAAQzK,mJAAAA,EAAQ;YAACD,MAAM0K,IAAI1K,IAAAA;QAAAA,GAAOuD,MAAMC,IAAAA,CAAK,CAAC,CAAC,CAAC,KAAA,CACvEsH,WAAWV,eAAe7G,OAAOxD,KAAK,CAAA,GAEpC8K,aAAaC,WACR;QAACvE,QAAQsE;QAAWtH,OAAOuH;QAAUpE,UAAUrD,UAAUqD,QAAAA;IAAAA,IAE3D;AACT;AChEO,SAASuD,aACdc,QAAAA,EAGc;IACd,IAAI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,EACpB,OAAO;IAGT,QACE2H,qOAAAA,EACED,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUkD,MAAAA,EAC3BwE,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUE,KAC7B,GACA;QACA,MAAM0H,eAAcC,sBAClBH,UACAA,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUkD,MAAAA,EAC3BwE,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUqD,QAAAA,GAAW,YAAY,UACpD;QAEA,OAAKuE,eAIE;YACL1E,QAAQ0E;YACR1H,OAAO0H;QAAAA,IALA;IAOX;IAEA,MAAMA,cAAcC,sBAClBH,UACAA,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUkD,MAAAA,EAC3BwE,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUqD,QAAAA,GAAW,YAAY,UACpD,GACMyE,aAAaD,sBACjBH,UACAA,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUE,KAAAA,EAC3BwH,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUqD,QAAAA,GAAW,aAAa,SACrD;IAEA,OAAI,CAACuE,eAAe,CAACE,aACZ,OAGF;QACL5E,QAAQ0E;QACR1H,OAAO4H;IAAAA;AAEX;AAEA,SAASD,sBACPH,QAAAA,EAGAK,cAAAA,EACAC,SAAAA,EAMY;IACZ,MAAMd,eAAWzC,+NAAAA,EAA8BsD,cAAc;IAE7D,IAAI,CAACb,UACH;IAGF,MAAMpH,aAAa4H,SAASO,aAAAA,CAAcC,GAAAA,CAAIhB,QAAQ;IAEtD,IAAIpH,eAAeb,KAAAA,GACjB;IAGF,MAAM/B,QAAQwK,SAASxD,OAAAA,CAAQxH,KAAAA,CAAMiD,EAAAA,CAAGG,UAAU;IAElD,IAAI,CAAC5C,OACH;IAGF,IAAI,KAACqD,2KAAAA,EAAYmH,SAASxD,OAAAA,EAAShH,KAAK,GACtC,OAAO;QACLiD,MAAM;YAACL;YAAY,CAAC;SAAA;QACpBsD,QAAQ;IAAA;IAIZ,IAAI+D,eAAWgB,+NAAAA,EAA8B;QAC3ChI,MAAM4H,eAAe5H,IAAAA;IAEvB,CAAC;IAID,MAAMiI,qBAAsBjB,WAYxBlI,KAAAA,QAXAoJ,iOAAAA,EAAgC;QAC9BnE,SAAS;YACPpC,QAAQ4F,SAASxD,OAAAA,CAAQpC,MAAAA;YACzBpF,OAAO;gBAACQ,KAAK;aAAA;QAAA;QAEfoL,aAAa;YACXnI,MAAM;gBAAC;oBAACxD,MAAMuK;gBAAAA,CAAS;aAAA;YACvB9D,QAAQ2E,eAAe3E,MAAAA;QAAAA;QAEzB4E;IAAAA,CACD;IASL,IANAb,WAAWiB,qBACPD,mOAAAA,EAA8BC,kBAAkB,IAChDjB,UAIA,CAACA,UACH,OAAO;QACLhH,MAAM;YAACL;YAAY,CAAC;SAAA;QACpBsD,QAAQ;IAAA;;IAIZ,IAAIA,+GAASgF,mBAAoBhF,MAAAA,mFAAU2E,eAAe3E,MAAAA,EACtDmF,YAA2B,CAAA,CAAA,EAC3BnH,aAAa,CAAA,GACboH;IAEJ,KAAA,MAAW3K,SAASX,MAAMU,QAAAA,CAExB,IADAwD,cACIvD,MAAMlB,IAAAA,KAASwK,UAAU;QAC3BqB,YAAY3K,WACR4K,sKAAAA,EAAOf,SAASxD,OAAAA,EAASrG,KAAK,IAChC0K,YAAY;YAACnH,UAAU;SAAA,GAAA,CAEvBmH,YAAY;YAACnH;YAAY,CAAC;SAAA,EAC1BgC,SAAS,CAAA;QAEX;IACF;IAMF,OAAImF,UAAUrJ,MAAAA,KAAW,IAChB;QACLiB,MAAM;YAACL;YAAY,CAAC;SAAA;QACpBsD,QAAQ;IAAA,IAIL;QACLjD,MAAM;YAACL,UAAU;SAAA,CAAE4I,MAAAA,CAAOH,SAAS;QACnCnF,YAAQqF,sKAAAA,EAAOf,SAASxD,OAAAA,EAASsE,SAAS,IACtC/C,KAAKkD,GAAAA,CAAIH,UAAUvK,IAAAA,CAAKiB,MAAAA,EAAQkE,MAAM,IACtCA;IAAAA;AAER;ACtKO,MAAMwF,+BACX,aAAA,GAAA,IAAIC,WAEOC,uBACX,aAAA,GAAA,IAAID,QAAAA,GACOE,uBACX,aAAA,GAAA,IAAIF,QAAAA,GAGOG,+BAAAA,aAAAA,GAAAA,IAAmCH,QAAAA,GCVnCI,yBAAqBC,8KAAAA,EAA2B,CAAA,CAAiB;ACHvE,SAAAC,gBAAA;IAAA,MAAA7N,QAAAC,qKAAAA,EAAA,CAAA;IAAA,IAAAG;IAAA,OAAAJ,CAAAA,CAAA,CAAA,CAAA,KAAA8N,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEH3N,KAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,OAAA;QACmB,iBAAA,CAAA;QACP,WAAA;QACH,OAAA;YAAAwK,UACK;YAAUoD,OACb;YAAM9D,QAAA;YAAA+D,cAEC;YAAwBC,QAAA;QAAA;QAIxC,UAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,QAAA,CAAA,CAAQ;IAAA,CACV,GAAMlO,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAZNI;AAYM;ACZH,SAAA+N,yBAAApO,KAAAA,EAAA;IAAA,MAAAC,IAAAC,yKAAAA,EAAA,CAAA;IAAA,IAAAG;IAAAJ,CAAAA,CAAA,CAAA,CAAA,KAAA8N,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAIS3N,KAAA;QAAAgO,YAAa;IAAA,GAAOpO,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAK;IAAA,OAAAL,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAmH,WAAAA,CAAA7F,IAAAA,IAAArB,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAmH,WAAAA,CAAArF,KAAAA,GAAAA,CAAhCxB,KAAA,aAAA,GAAA,IAAA,8KAAA,EAAA,OAAA;QAAY,OAAAD;QAAsB,UAAA;YAAA;YAC9BL,MAAKmH,WAAAA,CAAArF,KAAAA;YAAmB;YAAG9B,MAAKmH,WAAAA,CAAA7F,IAAAA;YAAkB;SAAA;IAAA,CACtD,GAAMrB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAmH,WAAAA,CAAA7F,IAAAA,EAAArB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAmH,WAAAA,CAAArF,KAAAA,EAAA7B,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA,EAFNK;AAEM;AAIH,SAAAgO,0BAAAtO,KAAAA,EAAA;IAAA,MAAAC,QAAAC,qKAAAA,EAAA,CAAA;IAAA,IAAAG;IAAAJ,CAAAA,CAAA,CAAA,CAAA,KAAA8N,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAIU3N,KAAA;QAAAgO,YAAa;IAAA,GAAOpO,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAK;IAAA,OAAAL,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAuO,YAAAA,CAAAjN,IAAAA,IAAArB,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAuO,YAAAA,CAAAzM,KAAAA,GAAAA,CAAjCxB,KAAA,aAAA,GAAA,IAAA,8KAAA,EAAA,QAAA;QAAa,OAAAD;QAAsB,UAAA;YAAA;YAC/BL,MAAKuO,YAAAA,CAAAzM,KAAAA;YAAoB;YAAG9B,MAAKuO,YAAAA,CAAAjN,IAAAA;YAAmB;SAAA;IAAA,CACxD,GAAOrB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAuO,YAAAA,CAAAjN,IAAAA,EAAArB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAuO,YAAAA,CAAAzM,KAAAA,EAAA7B,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA,EAFPK;AAEO;ACRJ,SAASkO,sBAMhB,EAAG;QAN8B,EAC/BxF,cAAAA,EACAqD,QAAAA,EAIF;IACE,IAAIoC,gBAAgBzF;IAUpB,QAR4B0F,8OAAAA,EAA+B;QACzD,GAAGrC,QAAAA;QACHxD,SAAS;YACP,GAAGwD,SAASxD,OAAAA;YACZlE,WAAWqE;QAAAA;IACb,CACD,GAGC,OAAOyF;IAGT,MAAME,6BAA6BD,0OAAAA,EAA+B;QAEhE7F,SAAS;YACP,GAAGwD,SAASxD,OAAAA;YACZlE,WAAWqE;QAAAA;IACb,CACD,GACK4F,uBAAmBF,mOAAAA,EAA4B;QACnD,GAAGrC,QAAAA;QACHxD,SAAS;YACP,GAAGwD,SAASxD,OAAAA;YACZlE,WAAWqE;QAAAA;IACb,CACD,GACK6F,kBAAcH,8NAAAA,EAAuB;QACzC,GAAGrC,QAAAA;QACHxD,SAAS;YACP,GAAGwD,SAASxD,OAAAA;YACZlE,WAAWqE;QAAAA;IACb,CACD;IAEG2F,8BAA8BC,oBAAoBC,eAAAA,CAGpDJ,gBAAgB;QACd5G,YAAQqB,oNAAAA,EAAyB;YAC/BL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAO+M;QAAAA,CACR;QACD/J,WAAOqE,+NAAAA,EAAuB;YAC5BL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAO+M;QAAAA,CACR;IAAA,CAAA;IAIL,MAAMtH,qBAAiBoH,2OAAAA,EAA4BrC,QAAQ;IAE3D,IACEA,SAASxD,OAAAA,CAAQlE,SAAAA,QACjB+J,qOAAAA,EAA8BrC,QAAQ,KACtC/E,eAAezD,MAAAA,GAAS,GACxB;QACA,MAAMiL,sBAAsBJ,oPAAAA,EAAiCrC,QAAQ,GAC/D0C,wBAAoBL,8OAAAA,EAA+BrC,QAAQ;QAEjE,IAAI,CAACyC,uBAAuB,CAACC,mBAC3B,OAAON;QAGT,MAAMpJ,0BAAsB6D,oNAAAA,EAAyB;YACnDL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOiN;QAAAA,CACR,GACKnJ,oBAAoBuD,mOAAAA,EAAuB;YAC/CL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOkN;QAAAA,CACR;QAEkCL,IAAAA,gPAAAA,EACjC1F,cACF,EAAE;YACA,GAAGqD,QAAAA;YACHxD,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW;oBAACkD,QAAQxC;oBAAqBR,OAAOc;gBAAAA;YAAiB;QACnE,CACD,KAAA,CAGC8I,gBAAgB;YACd5G,QAAQxC;YACRR,OAAOc;QAAAA,CAAAA;IAGb;IAEA,OAAO8I;AACT;ACnGO,SAASO,qBAAqBC,MAAAA,EAMlB;IACjB,OAAO;QACLC,QAAIC,qNAAAA,CAAAA;QACJrO,IAAAA,kDAAMmO,OAAQnO,IAAAA;QACdsO,SAAAA,kDAAWH,OAAQG,SAAAA;IAAAA;AAEvB;ACrBO,MAAMC,eAAeL,qBAAqB;IAAClO,MAAM;AAAM,CAAC;ACMxD,SAASwO,2CAQhB;UAPEC,GAAAA,EACAC,sBAAAA,EAMF,EAAG,CARmD;IASpD,OAAO;QACL;YACEC,cAAUC,0LAAAA,EAAe;gBACvBnP,IAAI;gBACJoP,OAAOA;wBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;oBAC5B,MAAMsH,qBAAiBlB,+NAAAA,EAAwB;wBAC7C,GAAGrC,QAAAA;wBACHxD,SAAS;4BACP,GAAGwD,SAASxD,OAAAA;4BACZlE,WAAW2D,MAAMuC,QAAAA,CAASlG,SAAAA;wBAAAA;oBAC5B,CACD;oBAED,IAAI,CAACiL,kBAAkBA,eAAehL,IAAAA,CAAKtD,IAAAA,KAASiO,KAClD,OAAO,CAAA;oBAGT,MAAMM,aAAavH,MAAMuH,UAAAA;oBAEzB,IAAI,CAACA,YACH,OAAO,CAAA;oBAGT,MAAMpB,gBAAgBD,iBAAiB;wBACrCxF,gBAAgB6G,WAAWlL,SAAAA;wBAC3B0H;oBAAAA,CACD;oBAUD,WARsBqC,2OAAAA,EAA4B;wBAChD,GAAGrC,QAAAA;wBACHxD,SAAS;4BACP,GAAGwD,SAASxD,OAAAA;4BACZlE,WAAW8J;wBAAAA;oBACb,CACD,EAGezH,IAAAA,CAAM8I,CAAAA,eAAiBA,aAAalL,IAAAA,CAAKtD,IAAAA,KAASiO,GAAG,IAE5D,CAAA,QAGoBb,iPAAAA,EAAkC;wBAC7D,GAAGrC,QAAAA;wBACHxD,SAAS;4BACP,GAAGwD,SAASxD,OAAAA;4BACZlE,WAAW8J;wBAAAA;oBACb,CACD;gBAGH;gBACAsB,SAAS;oBACP;4BAAC,EAACzH,KAAAA,EAAAA;+BAAW;4BACX;gCACE0H,MAAM;gCACNC,QAAQA,MAAM;oCACZT,uBAAuBlH,MAAMuC,QAAAA,CAAShJ,KAAK;gCAC7C;4BAAA,CACD;yBACF;;iBAAA;YAAA,CAEJ;YACDqO,UAAUlB,qBAAqB;gBAC7BI,WAAW;oBACTc,UAAUb;oBACVc,YAAY;gBAAA;YACd,CACD;QAAA;QAEH;YACEV,cAAUC,0LAAAA,EAAe;gBACvBnP,IAAI;gBACJoP,OAAOA;wBAAC,EAACrH,KAAAA,EAAAA;2BACAA,MAAM0H,IAAAA,KAAS;;gBAExBD,SAAS;oBACP;4BAAC,EAACzH,KAAAA,EAAAA;+BAAW;4BACX;gCACE0H,MAAM;gCACNC,QAAQA,MAAM;oCACZT,uBAAuB5L,KAAAA,CAAS;gCAClC;4BAAA;gCAEFwM,mLAAAA,EAAQ9H,KAAK,CAAC;yBACf;;iBAAA;YAAA,CAEJ;YACD4H,UAAUlB,qBAAqB;gBAC7BI,WAAW;oBACTc,UAAUb;oBACVc,YAAY;gBAAA;YACd,CACD;QAAA,CACF;KAAA;AAEL;AC5GO,SAAAE,6BAAAhQ,EAAAA,EAAA;IAAA,MAAAJ,QAAAC,qKAAAA,EAAA,CAAA,GAAsC,EAAAqP,GAAAA,EAAAC,sBAAAA,EAAAA,GAAAnP,IAS3C+H,kBAAoBkI,2KAAAA,EAAA1C,kBAA6B;IAAC,IAAAtN,IAAAiQ;IAAAtQ,CAAAA,CAAA,CAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,EAAAA,KAAAsP,OAAAtP,CAAAA,CAAA,CAAA,CAAA,KAAAuP,yBAAAA,CAExClP,KAAAA,MAAA;QACR,MAAAkQ,kBAAwBlB,sCAAA;YAAAC;YAAAC;QAAAA,CAGvB;QAAC,KAAA,MAEGiB,kBAAwBD,gBAC3BpI,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAcS;QAAAA,CAErB;QAAC,OAAA,MAAA;YAAA,KAAA,MAIGE,oBAAwBH,gBAC3BpI,YAAWsI,IAAAA,CAAA;gBAAAV,MACH;gBAAiBS,gBACvBA;YAAAA,CACD;QAAC;IAAA,GAGLF,KAAA;QAACnI;QAAamH;QAAKC,sBAAsB;KAAA,EAACvP,CAAAA,CAAAA,EAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,EAAAA,GAAAsP,KAAAtP,CAAAA,CAAAA,EAAAA,GAAAuP,wBAAAvP,CAAAA,CAAAA,EAAAA,GAAAK,IAAAL,CAAAA,CAAAA,EAAAA,GAAAsQ,EAAAA,IAAAA,CAAAjQ,KAAAL,CAAAA,CAAA,CAAA,CAAA,EAAAsQ,KAAAtQ,CAAAA,CAAA,CAAA,CAAA,GArB7CS,8KAAAA,EAAUJ,IAqBPiQ,EAA0C;AAAC;ACnBzC,SAAAK,kBAAA5Q,KAAAA,EAAA;IAAA,MAAAC,QAAAC,qKAAAA,EAAA,EAAA,GAUL,CAAA2Q,mBAAAC,oBAAA,CAAA,OACEC,yKAAAA,CAAAA,IACFC,qBAAuBC,uKAAAA,EAAA,IAA2B,GAClDC,eAAiBC,uLAAAA,CAAAA;IAAa,IAAA9Q;IAAAJ,CAAAA,CAAAA,EAAAA,KAAAiR,WAAAA,CAE5B7Q,KAAAF,CAAAA,SACE+Q,YACA/Q,OAAMwE,SAAAA,KAAA,QACNW,wJAAAA,CAAA8L,WAAAA,CAAkBjR,OAAMwE,SAAU,GAAC1E,CAAAA,CAAAA,EAAAA,GAAAiR,UAAAjR,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IAJvC,MAAAoR,cAAgBC,4LAAAA,EACdjR,EAIF;IAAC,IAAAC;IAAAL,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,GAAAA,CAE4BhB,KAAA;QAAAiP,KACtBvP,MAAK6G,OAAAA,CAAAvF,IAAAA;QAAAkO,wBACcsB;IAAAA,GACzB7Q,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,EAAArB,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA,EAHDoQ,6BAA6B/P,EAG5B;IAAC,IAAAiQ;IAAA,IAAAtQ,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,IAAA7B,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAuR,YAAAA,CAAArK,YAAAA,EAAA;QAAA,IAAAsK;QAAAvR,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,GAAAA,CAGA0P,MAAAC,CAAAA,aAAgBA,WAAU3Q,IAAAA,KAAUd,MAAK6G,OAAAA,CAAA/E,KAAAA,EAAc7B,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,EAAA7B,CAAAA,CAAAA,EAAAA,GAAAuR,GAAAA,IAAAA,MAAAvR,CAAAA,CAAA,CAAA,CAAA,EADhCsQ,KAAAvQ,MAAKuR,YAAAA,CAAArK,YAAAA,CAAA6E,IAAAA,CAC5ByF,GACF,GAACvR,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,EAAA7B,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAuR,YAAAA,CAAArK,YAAAA,EAAAjH,CAAAA,CAAAA,EAAAA,GAAAsQ;IAAA,OAAAA,KAAAtQ,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAAyR,mBAAyBnB;IAIpBmB,oBACHrG,QAAAsG,KAAAA,CACE,gCAAqC,OAAL3R,MAAK6G,OAAAA,CAAA/E,KAAA,EAAA,YACvC;IAAC,IAAA0P;;IAAAvR,CAAAA,CAAAA,EAAAA,KAAAD,MAAAmH,WAAAA,IAAAlH,CAAAA,CAAAA,GAAAA,KAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,IAAArB,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,GAAAA,CAGiB0P,iCAAKrK,WAAAA,8CAALnH,qBAAK;QAAAsB,MACjBtB,MAAK6G,OAAAA,CAAAvF,IAAAA;QAAAQ,OACJ9B,MAAK6G,OAAAA,CAAA/E,KAAAA;IAAAA,GACb7B,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAmH,WAAAA,EAAAlH,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,EAAArB,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,EAAA7B,CAAAA,CAAAA,GAAAA,GAAAuR,EAAAA,IAAAA,KAAAvR,CAAAA,CAAA,EAAA,CAAA;IAHD,MAAAkH,cAAoBqK;IAGnB,IAAAI;IAAA3R,CAAAA,CAAAA,GAAAA,KAAA4Q,oBAAAA,CAUIe,KAAAf,sBAAsB,UAAA,aAAA,GAAA,IAAA,6KAAA,EAAW,eAAA,CAAA,KAAgB,MAAO5Q,CAAAA,CAAAA,GAAAA,GAAA4Q,mBAAA5Q,CAAAA,CAAAA,GAAAA,GAAA2R,EAAAA,IAAAA,KAAA3R,CAAAA,CAAA,EAAA,CAAA;IAK5C,MAAA4R,KAAA,CAAC7R,MAAK8R,QAAAA;IAAS,IAAAC;IAAA9R,CAAAA,CAAA,EAAA,CAAA,KAAAkH,eAAAlH,CAAAA,CAAA,EAAA,CAAA,KAAAoR,WAAApR,CAAAA,CAAA,EAAA,CAAA,KAAAyR,oBAAAzR,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,IAAArB,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgS,WAAAA,IAAA/R,CAAAA,CAAA,EAAA,CAAA,KAAAiR,WAAAA,CAEzBa,KAAA/R,MAAKgS,WAAAA,IAAgBN,mBACpB,aAAA,GAAA,IAAA,6KAAA,EAAA,MAAA,WAAA,EAAA;QACoBV,kBAAAA;QACTK;QACH,MAAA;YAAA;gBAAA/P,MAAQtB,MAAK6G,OAAAA,CAAAvF,IAAAA;YAAAA,CAAA;SAAA;QACPoQ,YAAAA;QACFR;QACJQ,MAAAA;QACCvK,OAAAA;QAEP,UAAA,aAAA,GAAA,IAAA,6KAAA,EAAC,0BAAA;YAAsCA;QAAAA,CAAW;IAAA,CACpD,IAEA,aAAA,GAAA,IAAA,6KAAA,EAAC,0BAAA;QAAsCA;IAAAA,CAAW,GACnDlH,CAAAA,CAAAA,GAAAA,GAAAkH,aAAAlH,CAAAA,CAAAA,GAAAA,GAAAoR,SAAApR,CAAAA,CAAAA,GAAAA,GAAAyR,kBAAAzR,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,EAAArB,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgS,WAAAA,EAAA/R,CAAAA,CAAAA,GAAAA,GAAAiR,UAAAjR,CAAAA,CAAAA,GAAAA,GAAA8R,EAAAA,IAAAA,KAAA9R,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAgS;IAAAhS,CAAAA,CAAA,EAAA,CAAA,KAAA4R,MAAA5R,CAAAA,CAAAA,GAAAA,KAAA8R,KAAAA,CAnBHE,KAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,OAAA;QACOjB,KAAAA;QACY,iBAAA,CAAA;QACN,WAAAa;QAEVE,UAAAA;IAAAA,CAeH,GAAM9R,CAAAA,CAAAA,GAAAA,GAAA4R,IAAA5R,CAAAA,CAAAA,GAAAA,GAAA8R,IAAA9R,CAAAA,CAAAA,GAAAA,GAAAgS,EAAAA,IAAAA,KAAAhS,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAiS;IAAAjS,CAAAA,CAAAA,GAAAA,KAAA4Q,oBAAAA,CACLqB,KAAArB,sBAAsB,QAAA,aAAA,GAAA,IAAA,6KAAA,EAAS,eAAA,CAAA,KAAgB,MAAO5Q,CAAAA,CAAAA,GAAAA,GAAA4Q,mBAAA5Q,CAAAA,CAAAA,GAAAA,GAAAiS,EAAAA,IAAAA,KAAAjS,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAkS;IAAA,OAAAlS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAoS,UAAAA,IAAAnS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAuC,QAAAA,IAAAtC,CAAAA,CAAAA,GAAAA,KAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,IAAArB,CAAAA,CAAAA,GAAAA,KAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,IAAA7B,CAAAA,CAAA,EAAA,CAAA,KAAA2R,MAAA3R,CAAAA,CAAA,EAAA,CAAA,KAAAgS,MAAAhS,CAAAA,CAAAA,GAAAA,KAAAiS,KAAAA,CA9BzDC,KAAA,aAAA,GAAA,IAAA,8KAAA,EAAA,OAAA;QAAA,GACMnS,MAAKoS,UAAAA;QACC,WAAA;QACM,kBAAApS,MAAK6G,OAAAA,CAAAvF,IAAAA;QACJ,mBAAAtB,MAAK6G,OAAAA,CAAA/E,KAAAA;QACN,mBAAA;QAEf8P,UAAAA;YAAAA;YACA5R,MAAKuC,QAAAA;YACN0P;YAqBCC;SAAAA;IAAAA,CACH,GAAMjS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAoS,UAAAA,EAAAnS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAuC,QAAAA,EAAAtC,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,EAAArB,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,EAAA7B,CAAAA,CAAAA,GAAAA,GAAA2R,IAAA3R,CAAAA,CAAAA,GAAAA,GAAAgS,IAAAhS,CAAAA,CAAAA,GAAAA,GAAAiS,IAAAjS,CAAAA,CAAAA,GAAAA,GAAAkS,EAAAA,IAAAA,KAAAlS,CAAAA,CAAA,EAAA,CAAA,EA/BNkS;AA+BM;AC1EH,SAAAE,mBAAArS,KAAAA,EAAA;IAAA,MAAAC,QAAAC,qKAAAA,EAAA,EAAA,GASLoS,sBAAwBrB,uKAAAA,EAAA,IAAwB,GAChD5I,kBAAoBkK,0LAAAA,KACpBrB,eAAiBC,uLAAAA,CAAAA;IAAa,IAAA9Q;IAAAJ,CAAAA,CAAAA,EAAAA,KAAAiR,WAAAA,CAE5B7Q,KAAAF,CAAAA,SACE+Q,YACA/Q,OAAMwE,SAAAA,KAAA,QACNW,wJAAAA,CAAA8L,WAAAA,CAAkBjR,OAAMwE,SAAU,GAAC1E,CAAAA,CAAAA,EAAAA,GAAAiR,UAAAjR,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IAJvC,MAAAoR,cAAgBC,4LAAAA,EACdjR,EAIF;IAAC,IAAAC;IAAA,IAAAL,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,IAAA7B,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAuR,YAAAA,CAAAiB,aAAAA,EAAA;QAAA,IAAAjC;QAAAtQ,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,GAAAA,CAGCyO,MAAAhC,CAAAA,eAAkBA,aAAYzN,IAAAA,KAAUd,MAAK6G,OAAAA,CAAA/E,KAAAA,EAAc7B,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,EAAA7B,CAAAA,CAAAA,EAAAA,GAAAsQ,GAAAA,IAAAA,MAAAtQ,CAAAA,CAAA,CAAA,CAAA,EADpCK,KAAAN,MAAKuR,YAAAA,CAAAiB,aAAAA,CAAAzG,IAAAA,CAC5BwE,GACF,GAACtQ,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,EAAA7B,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAuR,YAAAA,CAAAiB,aAAAA,EAAAvS,CAAAA,CAAAA,EAAAA,GAAAK;IAAA,OAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA;IAFD,MAAAyR,mBAAyBpR;IAIpBoR,oBACHrG,QAAAsG,KAAAA,CACE,iCAAsC,OAAL3R,KACnC,CADwC6G,OAAAA,CAAA/E,KAAA,EAAA;IACvC,IAAAyO;IAAA,IAAAtQ,CAAAA,CAAAA,EAAAA,KAAAD,MAAA6G,OAAAA,IAAA5G,CAAAA,CAAAA,EAAAA,KAAAoI,aAAA;QAGH,MAAAvD,OAAauE,mKAAAA,CAAAoJ,QAAAA,CAAmBpK,aAAarI,MAAK6G,OAAQ;QAC1C0J,KAAA/K,cAAA;YAAArF,QACNkI;YAAW5C,OAAA;gBAAAX;gBAAAiD,QAAA;YAAA;QAAA,CAKpB,GAAC9H,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6G,OAAAA,EAAA5G,CAAAA,CAAAA,EAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,EAAAA,GAAAsQ;IAAA,OAAAA,KAAAtQ,CAAAA,CAAA,CAAA,CAAA;IANF,MAAA,CAAA4B,KAAA,CAAA,GAAgB0O;IAQX1O,SACHwJ,QAAAsG,KAAAA,CACE,gDAAqD,CACvD,MADkD3R,MAAK6G,OAAAA,CAAAvF,IAAA;IACtD,IAAAkQ;IAAAvR,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA6G,OAAAA,GAAAA,CAMG2K,KAAA,WAAWxR,MAAK6G,OAAAA,IAAY,OAAO7G,MAAK6G,OAAAA,CAAAxF,KAAAA,IAAmB,WAC3DrB,MAAK6G,OAAAA,CAAAxF,KAAAA,GAAA,CAAA,GACHpB,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,EAAA5G,CAAAA,CAAAA,GAAAA,GAAAuR,EAAAA,IAAAA,KAAAvR,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA2R;IAAA3R,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,IAAArB,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,IAAA7B,CAAAA,CAAAA,GAAAA,KAAAuR,KAAAA,CALaI,KAAA;QAAAtQ,MACbtB,MAAK6G,OAAAA,CAAAvF,IAAAA;QAAAQ,OACJ9B,MAAK6G,OAAAA,CAAA/E,KAAAA;QAAA,GACR0P,EAAAA;IAAAA,GAGLvR,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,EAAArB,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAA/E,KAAAA,EAAA7B,CAAAA,CAAAA,GAAAA,GAAAuR,IAAAvR,CAAAA,CAAAA,GAAAA,GAAA2R,EAAAA,IAAAA,KAAA3R,CAAAA,CAAA,EAAA,CAAA;IAND,MAAAyS,iBAAqBd,IAWNC,KAAA,CAAC7R,MAAK8R,QAAAA;IAAS,IAAAC;IAAA9R,CAAAA,CAAA,EAAA,CAAA,KAAA8N,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAOS+D,KAAA;QAAAY,SAAU;IAAA,GAAe1S,CAAAA,CAAAA,GAAAA,GAAA8R,EAAAA,IAAAA,KAAA9R,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAgS;IAAAhS,CAAAA,CAAA,EAAA,CAAA,KAAA4B,SAAA5B,CAAAA,CAAA,EAAA,CAAA,KAAAoR,WAAApR,CAAAA,CAAA,EAAA,CAAA,KAAAyS,kBAAAzS,CAAAA,CAAAA,GAAAA,KAAAyR,oBAAAzR,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,IAAArB,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA4S,WAAAA,IAAA3S,CAAAA,CAAAA,GAAAA,KAAAiR,WAAAA,CAA5De,KAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,QAAA;QAAWK,KAAAA;QAAwB,OAAAP;QAChC/R,UAAAA,MAAK4S,WAAAA,IAAgB/Q,SAAS6P,mBAC7B,aAAA,GAAA,IAAA,6KAAA,EAAA,MAAA,WAAA,EAAA;YACe,aAAA,EAAA;YACKY,kBAAAA;YACRpB;YACDG;YACH,MAAA;gBAAA;oBAAA/P,MAAQO,MAAKP,IAAAA;gBAAAA;gBAAQ;gBAAU;oBAAAA,MAAStB,MAAK6G,OAAAA,CAAAvF,IAAAA;gBAAAA,CAAA;aAAA;YACvCoQ,YAAAA;YACLnD,OAAAA;YACDmD,MAAAA;YAEN,UAAA,aAAA,GAAA,IAAA,6KAAA,EAAC,2BAAA;gBAAwCnD,cAAAA;YAAAA,CAAY;QAAA,CACvD,IAEA,aAAA,GAAA,IAAA,6KAAA,EAAC,2BAAA;YAAwCA,cAAAA;QAAAA,CAAY;IAAA,CAEzD,GAAOtO,CAAAA,CAAAA,GAAAA,GAAA4B,OAAA5B,CAAAA,CAAAA,GAAAA,GAAAoR,SAAApR,CAAAA,CAAAA,GAAAA,GAAAyS,gBAAAzS,CAAAA,CAAAA,GAAAA,GAAAyR,kBAAAzR,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,EAAArB,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA4S,WAAAA,EAAA3S,CAAAA,CAAAA,GAAAA,GAAAiR,UAAAjR,CAAAA,CAAAA,GAAAA,GAAAgS,EAAAA,IAAAA,KAAAhS,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAiS;IAAA,OAAAjS,CAAAA,CAAA,EAAA,CAAA,KAAAyS,eAAApR,IAAAA,IAAArB,CAAAA,CAAA,EAAA,CAAA,KAAAyS,eAAA5Q,KAAAA,IAAA7B,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAoS,UAAAA,IAAAnS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAuC,QAAAA,IAAAtC,CAAAA,CAAA,EAAA,CAAA,KAAA4R,MAAA5R,CAAAA,CAAAA,GAAAA,KAAAgS,KAAAA,CA1BTC,KAAA,aAAA,GAAA,IAAA,8KAAA,EAAA,QAAA;QAAA,GACMlS,MAAKoS,UAAAA;QACE,WAAAP;QACD,WAAA;QACM,kBAAAtD,eAAYjN,IAAAA;QACX,mBAAAiN,eAAYzM,KAAAA;QACb,mBAAA;QAEf9B,UAAAA;YAAAA,MAAKuC,QAAAA;YACN0P;SAAAA;IAAAA,CAkBF,GAAOhS,CAAAA,CAAA,EAAA,CAAA,GAAAyS,eAAApR,IAAAA,EAAArB,CAAAA,CAAA,EAAA,CAAA,GAAAyS,eAAA5Q,KAAAA,EAAA7B,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAoS,UAAAA,EAAAnS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAuC,QAAAA,EAAAtC,CAAAA,CAAAA,GAAAA,GAAA4R,IAAA5R,CAAAA,CAAAA,GAAAA,GAAAgS,IAAAhS,CAAAA,CAAAA,GAAAA,GAAAiS,EAAAA,IAAAA,KAAAjS,CAAAA,CAAA,EAAA,CAAA,EA3BPiS;AA2BO;AC/EJ,SAAAW,gBAAA7S,KAAAA,EAAA;IAAA,MAAAC,QAAAC,qKAAAA,EAAA,EAAA,GAYL,CAAA2Q,mBAAAC,oBAAA,CAAA,OACEC,yKAAAA,CAAAA,IACF+B,eAAiB7B,uKAAAA,EAAA,IAA2B,GAE5CC,eAAiBC,uLAAAA,CAAAA;IAAa,IAAA9Q;IAAAJ,CAAAA,CAAAA,EAAAA,KAAAiR,WAAAA,CAE5B7Q,KAAAF,CAAAA,SACE+Q,YACA/Q,OAAMwE,SAAAA,KAAA,QACNW,wJAAAA,CAAA8L,WAAAA,CAAkBjR,OAAMwE,SAAU,GAAC1E,CAAAA,CAAAA,EAAAA,GAAAiR,UAAAjR,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IAJvC,MAAAoR,UAAgBC,gMAAAA,EACdjR,EAIF;IAAC,IAAAC;IAAAL,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,GAAAA,CAE4BhB,KAAA;QAAAiP,KACtBvP,MAAK6G,OAAAA,CAAAvF,IAAAA;QAAAkO,wBACcsB;IAAAA,GACzB7Q,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,EAAArB,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA,EAHDoQ,6BAA6B/P,EAG5B;IAAC,IAAAiQ;IAAAtQ,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAV,IAAAA,GAAAA,CAEiCiP,KAAAwC,CAAAA,WACjC5S,SAAM6S,YAAAA,CAAAnG,GAAAA,CAAkB7M,MAAKgC,SAAAA,CAAAV,IAAe,GAACrB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAV,IAAAA,EAAArB,CAAAA,CAAAA,EAAAA,GAAAsQ,EAAAA,IAAAA,KAAAtQ,CAAAA,CAAA,CAAA,CAAA;IAD/C,MAAAgT,gBAAkB3B,4LAAAA,EAAiBf,EAEnC;IAEA,IAAAhO,WAAevC,MAAKuC,QAAAA;IAAS,IAEzBvC,MAAKkT,WAAAA,IAAgBlT,MAAKgC,SAAAA,CAAAG,KAAAA,EAAgB;QAAA,IAAAqP;QAAAvR,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAuR,YAAAA,IAAAtR,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAG,KAAAA,GAAAA,CAE1CqP,MAAAxR,MAAKgC,SAAAA,CAAAG,KAAAA,KAAAyB,KAAAA,IACD5D,MAAKuR,YAAAA,CAAAtO,MAAAA,CAAA8I,IAAAA,CAAA5J,CAAAA,QACQA,MAAKd,KAAAA,KAAWrB,MAAKgC,SAAAA,CAAAG,KAClC,IAACyB,KAAAA,GACQ3D,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAuR,YAAAA,EAAAtR,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAG,KAAAA,EAAAlC,CAAAA,CAAAA,EAAAA,GAAAuR,GAAAA,IAAAA,MAAAvR,CAAAA,CAAA,CAAA,CAAA;QALf,MAAAkT,wBACE3B;QAIa,IAEX2B,uBAAqB;YAAA,IAAAvB;YAAA3R,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAV,IAAAA,GAAAA,CAMbsQ,MAAA;gBAAA;oBAAAtQ,MAAQtB,MAAKgC,SAAAA,CAAAV,IAAAA;gBAAAA,CAAA;aAAA,EAAiBrB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAV,IAAAA,EAAArB,CAAAA,CAAAA,GAAAA,GAAA2R,GAAAA,IAAAA,MAAA3R,CAAAA,CAAA,EAAA,CAAA;YAAA,IAAA4R;YAAA5R,CAAAA,CAAA,EAAA,CAAA,KAAAsC,YAAAtC,CAAAA,CAAA,EAAA,CAAA,KAAAoR,WAAApR,CAAAA,CAAA,EAAA,CAAA,KAAAkT,yBAAAlT,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAkT,WAAAA,IAAAjT,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,IAAA/B,CAAAA,CAAA,EAAA,CAAA,KAAAiR,YAAAjR,CAAAA,CAAAA,GAAAA,KAAA2R,MAAAA,CAJtCC,MAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,MAAA,WAAA,EAAA;gBACS,OAAA7R,MAAKgC,SAAAA;gBACM8Q,kBAAAA;gBACTzB;gBACH,MAAAO;gBACMuB,YAAAA;gBACFjC;gBACH,OAAAlR,MAAKgC,SAAAA,CAAAG,KAAAA;gBAEXI;YAAAA,CACH,GAAoBtC,CAAAA,CAAAA,GAAAA,GAAAsC,UAAAtC,CAAAA,CAAAA,GAAAA,GAAAoR,SAAApR,CAAAA,CAAAA,GAAAA,GAAAkT,uBAAAlT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAkT,WAAAA,EAAAjT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,EAAA/B,CAAAA,CAAAA,GAAAA,GAAAiR,UAAAjR,CAAAA,CAAAA,GAAAA,GAAA2R,KAAA3R,CAAAA,CAAAA,GAAAA,GAAA4R,GAAAA,IAAAA,MAAA5R,CAAAA,CAAA,EAAA,CAAA,EAXtBsC,WACEA;QADM,OAcR8I,QAAAsG,KAAAA,CACE,mDAAwD,CAC1D,MADqD3R,MAAKgC,SAAAA,CAAAG,KAAA;IACzD;IAAA,IAIDnC,MAAKoT,cAAAA,IAAmBpT,MAAKgC,SAAAA,CAAAqF,QAAAA,EAAmB;QAAA,IAAAmK;QAAA,IAAAvR,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAuR,YAAAA,CAAA8B,KAAAA,IAAApT,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAqF,QAAAA,EAAA;YAAA,IAAAuK;YAAA3R,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAqF,QAAAA,GAAAA,CAEhDuK,MAAA0B,CAAAA,OAAUA,KAAIjS,KAAAA,KAAWrB,MAAKgC,SAAAA,CAAAqF,QAAAA,EAAmBpH,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAqF,QAAAA,EAAApH,CAAAA,CAAAA,GAAAA,GAAA2R,GAAAA,IAAAA,MAAA3R,CAAAA,CAAA,EAAA,CAAA,EADlBuR,MAAAxR,MAAKuR,YAAAA,CAAA8B,KAAAA,CAAAtH,IAAAA,CACpC6F,GACF,GAAC3R,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAuR,YAAAA,CAAA8B,KAAAA,EAAApT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAqF,QAAAA,EAAApH,CAAAA,CAAAA,GAAAA,GAAAuR;QAAA,OAAAA,MAAAvR,CAAAA,CAAA,EAAA,CAAA;QAFD,MAAAsT,2BAAiC/B;QAEhC,IAEG+B,0BAAwB;;YAMf,MAAA3B,gCAAA5R,MAAKgC,SAAAA,CAAAwR,KAAAA,2EAAA;YAAqB,IAAA3B;YAAA5R,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAV,IAAAA,GAAAA,CAC3BuQ,MAAA;gBAAA;oBAAAvQ,MAAQtB,MAAKgC,SAAAA,CAAAV,IAAAA;gBAAAA,CAAA;aAAA,EAAiBrB,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAV,IAAAA,EAAArB,CAAAA,CAAAA,GAAAA,GAAA4R,GAAAA,IAAAA,MAAA5R,CAAAA,CAAA,EAAA,CAAA;YAAA,IAAA8R;YAAA9R,CAAAA,CAAA,EAAA,CAAA,KAAAsC,YAAAtC,CAAAA,CAAA,EAAA,CAAA,KAAAoR,WAAApR,CAAAA,CAAAA,GAAAA,KAAAsT,4BAAAtT,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAoT,cAAAA,IAAAnT,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,IAAA/B,CAAAA,CAAA,EAAA,CAAA,KAAAiR,YAAAjR,CAAAA,CAAA,EAAA,CAAA,KAAA2R,OAAA3R,CAAAA,CAAAA,GAAAA,KAAA4R,MAAAA,CALtCE,MAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,MAAA,cAAA,EAAA;gBACS,OAAA/R,MAAKgC,SAAAA;gBACM8Q,kBAAAA;gBACTzB;gBACF,OAAAO;gBACD,MAAAC;gBACIX;gBACH,OAAAlR,MAAKgC,SAAAA,CAAAqF,QAAAA;gBACAkM,YAAAA;gBAEXhR;YAAAA,CACH,GAAuBtC,CAAAA,CAAAA,GAAAA,GAAAsC,UAAAtC,CAAAA,CAAAA,GAAAA,GAAAoR,SAAApR,CAAAA,CAAAA,GAAAA,GAAAsT,0BAAAtT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAoT,cAAAA,EAAAnT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,EAAA/B,CAAAA,CAAAA,GAAAA,GAAAiR,UAAAjR,CAAAA,CAAAA,GAAAA,GAAA2R,KAAA3R,CAAAA,CAAAA,GAAAA,GAAA4R,KAAA5R,CAAAA,CAAAA,GAAAA,GAAA8R,GAAAA,IAAAA,MAAA9R,CAAAA,CAAA,EAAA,CAAA,EAZzBsC,WACEA;QADM,OAeR8I,QAAAsG,KAAAA,CACE,uDAA4D,CAC9D,MADyD3R,MAAKgC,SAAAA,CAAAqF,QAAA;IAC7D;IAMG,MAAAmK,KAAAxR,MAAKoS,UAAAA;IAAW,IAAAR;IAAA3R,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAG,KAAAA,GAAAA,CAIdyP,KAAA5R,MAAKgC,SAAAA,CAAAG,KAAAA,GAAA,CACJ;QAAA,uBAA4B,CAAkB,MAAvBnC,MAAKgC,SAAAA,CAAAG,KAAA;KAAkB,GAAA,CAAA,CAAA,EAC7ClC,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAG,KAAAA,EAAAlC,CAAAA,CAAAA,GAAAA,GAAA2R,EAAAA,IAAAA,KAAA3R,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA4R;QAKsB7R;IALtBC,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAwR,KAAAA,IAAAvT,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAqF,QAAAA,GAAAA,CACFwK,KAAA7R,MAAKgC,SAAAA,CAAAqF,QAAAA,GAAA;QAEH,gBACA;QAAA,gBAAqB,GACrB,IADgBrH,MAAKgC,SAAAA,CAAAqF,QAAA;QACrB,sBAAgD,CAAE,uCAAvBrF,SAAAA,CAAAwR,KAAAA,6EAAA,CAAqB;KAAE,GAAA,CAAA,CAAA,EAElDvT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAwR,KAAAA,EAAAvT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAqF,QAAAA,EAAApH,CAAAA,CAAAA,GAAAA,GAAA4R,EAAAA,IAAAA,KAAA5R,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA8R;IAAA9R,CAAAA,CAAA,EAAA,CAAA,KAAA2R,MAAA3R,CAAAA,CAAAA,GAAAA,KAAA4R,KAAAA,CAZGE,KAAAA;QACT;QACA,iBAAe;WACXH;WAGAC,EAME;KAAA,EACP5R,CAAAA,CAAAA,GAAAA,GAAA2R,IAAA3R,CAAAA,CAAAA,GAAAA,GAAA4R,IAAA5R,CAAAA,CAAAA,GAAAA,GAAA8R,EAAAA,IAAAA,KAAA9R,CAAAA,CAAA,EAAA,CAAA;IAbU,MAAAgS,KAAAF,GAaV/N,IAAAA,CAAM,GAAG;IAAC,IAAAkO;IAAAjS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAqF,QAAAA,GAAAA,CAKN6K,KAAAlS,MAAKgC,SAAAA,CAAAqF,QAAAA,KAAAzD,KAAAA,IAAiC;QAAA,kBAEnB5D,MAAKgC,SAAAA,CAAAqF,QAAAA;IAAAA,IAAA,CAAA,GAEvBpH,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAqF,QAAAA,EAAApH,CAAAA,CAAAA,GAAAA,GAAAiS,EAAAA,IAAAA,KAAAjS,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAkS;IAAAlS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAwR,KAAAA,GAAAA,CACDrB,KAAAnS,MAAKgC,SAAAA,CAAAwR,KAAAA,KAAA5P,KAAAA,IAA8B;QAAA,cAEpB5D,MAAKgC,SAAAA,CAAAwR,KAAAA;IAAAA,IAAA,CAAA,GAEnBvT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAwR,KAAAA,EAAAvT,CAAAA,CAAAA,GAAAA,GAAAkS,EAAAA,IAAAA,KAAAlS,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAwT;IAAAxT,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAG,KAAAA,GAAAA,CACDsR,MAAAzT,MAAKgC,SAAAA,CAAAG,KAAAA,KAAAyB,KAAAA,IAA8B;QAAA,cAEpB5D,MAAKgC,SAAAA,CAAAG,KAAAA;IAAAA,IAAA,CAAA,GAEnBlC,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAG,KAAAA,EAAAlC,CAAAA,CAAAA,GAAAA,GAAAwT,GAAAA,IAAAA,MAAAxT,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAyT;IAAAzT,CAAAA,CAAAA,GAAAA,KAAAgT,YAAAA,CACDS,MAAAT,cAASrP,KAAAA,IAAc;QAAA,mBAEHqP;IAAAA,IAAS,CAAA,GAE5BhT,CAAAA,CAAAA,GAAAA,GAAAgT,WAAAhT,CAAAA,CAAAA,GAAAA,GAAAyT,GAAAA,IAAAA,MAAAzT,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA0T;IAAA1T,CAAAA,CAAAA,GAAAA,KAAA4Q,oBAAAA,CAEL8C,MAAA9C,sBAAsB,UAAA,aAAA,GAAA,IAAA,6KAAA,EAAW,eAAA,CAAA,KAAgB,MAAO5Q,CAAAA,CAAAA,GAAAA,GAAA4Q,mBAAA5Q,CAAAA,CAAAA,GAAAA,GAAA0T,GAAAA,IAAAA,MAAA1T,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA2T;IAAA3T,CAAAA,CAAA,EAAA,CAAA,KAAAsC,YAAAtC,CAAAA,CAAA,EAAA,CAAA,KAAAoR,WAAApR,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAuR,YAAAA,IAAAtR,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgS,WAAAA,IAAA/R,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,IAAA/B,CAAAA,CAAA,EAAA,CAAA,KAAAiR,WAAAA,CAEtD0C,MAAA5T,MAAKgS,WAAAA,GACJ,aAAA,GAAA,IAAA,6KAAA,EAAA,MAAA,WAAA,EAAA;QACoBc,kBAAAA;QACTzB;QACF,OAAArR,MAAKgC,SAAAA,CAAAwR,KAAAA;QACF,UAAAxT,MAAKgC,SAAAA,CAAAqF,QAAAA;QACT,MAAA;YAAA;gBAAA/F,MAAQtB,MAAKgC,SAAAA,CAAAV,IAAAA;YAAAA,CAAA;SAAA;QACT4P;QACE,YAAAlR,MAAKuR,YAAAA,CAAA1P,KAAAA;QACV,OAAA7B,MAAKgC,SAAAA,CAAAG,KAAAA;QACN,MAAAnC,MAAKuR,YAAAA,CAAA1P,KAAAA;QACJ,OAAA7B,MAAKgC,SAAAA;QAEXO;IAAAA,CACH,IAEAA,UACDtC,CAAAA,CAAAA,GAAAA,GAAAsC,UAAAtC,CAAAA,CAAAA,GAAAA,GAAAoR,SAAApR,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAuR,YAAAA,EAAAtR,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgS,WAAAA,EAAA/R,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,EAAA/B,CAAAA,CAAAA,GAAAA,GAAAiR,UAAAjR,CAAAA,CAAAA,GAAAA,GAAA2T,GAAAA,IAAAA,MAAA3T,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA4T;IAAA5T,CAAAA,CAAAA,GAAAA,KAAA2T,MAAAA,CAlBHC,MAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,OAAA;QAAUf,KAAAA;QACPc,UAAAA;IAAAA,CAkBH,GAAM3T,CAAAA,CAAAA,GAAAA,GAAA2T,KAAA3T,CAAAA,CAAAA,GAAAA,GAAA4T,GAAAA,IAAAA,MAAA5T,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA6T;IAAA7T,CAAAA,CAAAA,GAAAA,KAAA4Q,oBAAAA,CACLiD,MAAAjD,sBAAsB,QAAA,aAAA,GAAA,IAAA,6KAAA,EAAS,eAAA,CAAA,KAAgB,MAAO5Q,CAAAA,CAAAA,GAAAA,GAAA4Q,mBAAA5Q,CAAAA,CAAAA,GAAAA,GAAA6T,GAAAA,IAAAA,MAAA7T,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA8T;IAAA,OAAA9T,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAoS,UAAAA,IAAAnS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgU,UAAAA,IAAA/T,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAV,IAAAA,IAAArB,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgC,SAAAA,CAAAF,KAAAA,IAAA7B,CAAAA,CAAAA,GAAAA,KAAAwT,OAAAxT,CAAAA,CAAA,EAAA,CAAA,KAAAyT,OAAAzT,CAAAA,CAAA,EAAA,CAAA,KAAA0T,OAAA1T,CAAAA,CAAA,EAAA,CAAA,KAAA4T,OAAA5T,CAAAA,CAAA,EAAA,CAAA,KAAA6T,OAAA7T,CAAAA,CAAA,EAAA,CAAA,KAAAgS,MAAAhS,CAAAA,CAAA,EAAA,CAAA,KAAAiS,MAAAjS,CAAAA,CAAA,EAAA,CAAA,KAAAkS,KAAAA,CA9DzD4B,MAAAA,aAAAA,GAAAA,IAAAA,8KAAAA,EAAA,OAAA;QA+DM,GA9DAvC,EAAAA;QACO,WAAAS;QAcC,YAAAjS,MAAKgU,UAAAA;QACD,kBAAAhU,MAAKgC,SAAAA,CAAAV,IAAAA;QACJ,mBAAAtB,MAAKgC,SAAAA,CAAAF,KAAAA;QACN,mBAAA;QAAM,GACjBoQ,EAAAA;QAIC,GACDC,EAAAA;QAIC,GACDsB,GAAAA;QAIC,GACDC,GAAAA;QAMJC,UAAAA;YAAAA;YACDE;YAoBCC;SAAAA;IAAAA,CACH,GAAM7T,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAoS,UAAAA,EAAAnS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgU,UAAAA,EAAA/T,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAV,IAAAA,EAAArB,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgC,SAAAA,CAAAF,KAAAA,EAAA7B,CAAAA,CAAAA,GAAAA,GAAAwT,KAAAxT,CAAAA,CAAAA,GAAAA,GAAAyT,KAAAzT,CAAAA,CAAAA,GAAAA,GAAA0T,KAAA1T,CAAAA,CAAAA,GAAAA,GAAA4T,KAAA5T,CAAAA,CAAAA,GAAAA,GAAA6T,KAAA7T,CAAAA,CAAAA,GAAAA,GAAAgS,IAAAhS,CAAAA,CAAAA,GAAAA,GAAAiS,IAAAjS,CAAAA,CAAAA,GAAAA,GAAAkS,IAAAlS,CAAAA,CAAAA,GAAAA,GAAA8T,GAAAA,IAAAA,MAAA9T,CAAAA,CAAA,EAAA,CAAA,EA/DN8T;AA+DM;AC7JH,SAAAE,cAAAjU,KAAAA,EAAA;IAAA,MAAAC,QAAAC,qKAAAA,EAAA,EAAA,GAWLkI,kBAAoBkI,2KAAAA,EAAA1C,kBAA6B,GACjDnH,aAAeyN,oMAAAA,EAAY9L,aAAW+L,OAAyB,GAC/D5C,eAAqB2C,wMAAAA,EAAY9L,aAAWgM,QAE5C,GACAC,kBAAoB9B,0LAAAA,CAAAA;IAG4C,IAA9D,cAAcvS,MAAK6G,OAAAA,IAAY7G,MAAK6G,OAAAA,CAAA/D,QAAAA,KAAA,CAAA,GAE1B;QAAA,IAAAzC;QAAA,OAAAJ,CAAAA,CAAA,CAAA,CAAA,KAAAsR,gBAAAtR,CAAAA,CAAAA,EAAAA,KAAAD,MAAAoS,UAAAA,IAAAnS,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAuC,QAAAA,IAAAtC,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA6G,OAAAA,IAAA5G,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA8R,QAAAA,IAAA7R,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA4S,WAAAA,IAAA3S,CAAAA,CAAAA,EAAAA,KAAAwG,SAAAA,CAERpG,MAAAA,aAAAA,GAAAA,IAAAA,6KAAAA,EAAC,oBAAA;YACa,YAAAL,MAAKoS,UAAAA;YACR,SAAApS,MAAK6G,OAAAA;YACA0K;YACJ,UAAAvR,MAAK8R,QAAAA;YACF,aAAA9R,MAAK4S,WAAAA;YACVnM;YAEPzG,UAAAA,MAAKuC,QAAAA;QAAAA,CACR,GAAqBtC,CAAAA,CAAAA,EAAAA,GAAAsR,cAAAtR,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAoS,UAAAA,EAAAnS,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAuC,QAAAA,EAAAtC,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6G,OAAAA,EAAA5G,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA8R,QAAAA,EAAA7R,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA4S,WAAAA,EAAA3S,CAAAA,CAAAA,EAAAA,GAAAwG,QAAAxG,CAAAA,CAAAA,EAAAA,GAAAI,GAAAA,IAAAA,MAAAJ,CAAAA,CAAA,CAAA,CAAA,EATrBI;IASqB;IAAA,IAAAwB,OAAAxB;IAAA,IAAAJ,CAAAA,CAAAA,EAAAA,KAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,IAAArB,CAAAA,CAAA,CAAA,CAAA,KAAAwG,UAAAxG,CAAAA,CAAA,EAAA,CAAA,KAAAoU,YAAAzH,aAAAA,IAAA3M,CAAAA,CAAA,EAAA,CAAA,KAAAoU,YAAAhT,KAAAA,EAAA;QAIzB,MAAAoD,aAAmB4P,YAAWzH,aAAAA,CAAAC,GAAAA,CAAmB7M,MAAK6G,OAAAA,CAAAvF,IAAa;QACnEO,QACE4C,eAAUb,KAAAA,IAAiByQ,YAAWhT,KAAAA,CAAAiD,EAAAA,CAAUG,UAAU,IAACb,KAAAA,GAEzDvD,SAAA6E,2KAAAA,EAAA;YAAAuB;QAAAA,GAAsB5E,KAAK,GAAC5B,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA6G,OAAAA,CAAAvF,IAAAA,EAAArB,CAAAA,CAAAA,EAAAA,GAAAwG,QAAAxG,CAAAA,CAAA,EAAA,CAAA,GAAAoU,YAAAzH,aAAAA,EAAA3M,CAAAA,CAAA,EAAA,CAAA,GAAAoU,YAAAhT,KAAAA,EAAApB,CAAAA,CAAAA,GAAAA,GAAA4B,OAAA5B,CAAAA,CAAAA,GAAAA,GAAAI;IAAA,OAAAwB,QAAA5B,CAAAA,CAAA,EAAA,CAAA,EAAAI,KAAAJ,CAAAA,CAAA,EAAA,CAAA;IAAA,IAA5BI,IAA4B;QAAA,IAAAC;QAAA,OAAAL,CAAAA,CAAA,EAAA,CAAA,KAAA4B,SAAA5B,CAAAA,CAAAA,GAAAA,KAAAsR,gBAAAtR,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAoS,UAAAA,IAAAnS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAuC,QAAAA,IAAAtC,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA6G,OAAAA,IAAA5G,CAAAA,CAAAA,GAAAA,KAAAD,MAAA8R,QAAAA,IAAA7R,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgS,WAAAA,IAAA/R,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAoT,cAAAA,IAAAnT,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAkT,WAAAA,IAAAjT,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAgU,UAAAA,GAAAA,CAE5B1T,MAAAA,aAAAA,GAAAA,IAAAA,6KAAAA,EAAC,iBAAA;YACa,YAAAN,MAAKoS,UAAAA;YACR,SAAApS,MAAK6G,OAAAA;YACA0K;YACJ,UAAAvR,MAAK8R,QAAAA;YACF,aAAA9R,MAAKgS,WAAAA;YACF,gBAAAhS,MAAKoT,cAAAA;YACR,aAAApT,MAAKkT,WAAAA;YACN,YAAAlT,MAAKgU,UAAAA;YACNnS,WAAAA;YAEV7B,UAAAA,MAAKuC,QAAAA;QAAAA,CACR,GAAkBtC,CAAAA,CAAAA,GAAAA,GAAA4B,OAAA5B,CAAAA,CAAAA,GAAAA,GAAAsR,cAAAtR,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAoS,UAAAA,EAAAnS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAuC,QAAAA,EAAAtC,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,EAAA5G,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA8R,QAAAA,EAAA7R,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgS,WAAAA,EAAA/R,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAoT,cAAAA,EAAAnT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAkT,WAAAA,EAAAjT,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgU,UAAAA,EAAA/T,CAAAA,CAAAA,GAAAA,GAAAK,GAAAA,IAAAA,MAAAL,CAAAA,CAAA,EAAA,CAAA,EAZlBK;IAYkB;IAAA,IAAAA;IAAA,OAAAL,CAAAA,CAAA,EAAA,CAAA,KAAA4B,SAAA5B,CAAAA,CAAA,EAAA,CAAA,KAAAsR,gBAAAtR,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAoS,UAAAA,IAAAnS,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAuC,QAAAA,IAAAtC,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA6G,OAAAA,IAAA5G,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA8R,QAAAA,IAAA7R,CAAAA,CAAAA,GAAAA,KAAAD,MAAAgS,WAAAA,IAAA/R,CAAAA,CAAAA,GAAAA,KAAAwG,SAAAA,CAKpBnG,KAAA,aAAA,GAAA,IAAA,6KAAA,EAAC,mBAAA;QACa,YAAAN,MAAKoS,UAAAA;QACJvQ,aAAAA;QACJ,SAAA7B,MAAK6G,OAAAA;QACA0K;QACJ,UAAAvR,MAAK8R,QAAAA;QACF,aAAA9R,MAAKgS,WAAAA;QACVvL;QAEPzG,UAAAA,MAAKuC,QAAAA;IAAAA,CACR,GAAoBtC,CAAAA,CAAAA,GAAAA,GAAA4B,OAAA5B,CAAAA,CAAAA,GAAAA,GAAAsR,cAAAtR,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAoS,UAAAA,EAAAnS,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAuC,QAAAA,EAAAtC,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA6G,OAAAA,EAAA5G,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA8R,QAAAA,EAAA7R,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAgS,WAAAA,EAAA/R,CAAAA,CAAAA,GAAAA,GAAAwG,QAAAxG,CAAAA,CAAAA,GAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,EAAA,CAAA,EAVpBK;AAUoB;AArEjB,SAAA8T,SAAAE,GAAAA,EAAA;IAAA,OAcHC,IAAC1L,OAAAA,CAAA2L,eAAAA,CAAAA;AAA0B;AAdxB,SAAAL,QAAAI,CAAAA,EAAA;IAAA,OAY0CA,EAAC1L,OAAAA,CAAApC,MAAAA;AAAA;ACrBlD,SAASgO,eAAkBC,CAAAA,EAAMC,CAAAA,EAAM;IACrC,OAAOD,MAAMC;AACf;AA+BO,SAAAC,kBAAAzU,MAAAA,EAAA0U,QAAAA,EAAAxU,EAAAA,EAAA;IAAA,MAAAJ,QAAAC,qKAAAA,EAAA,CAAA,GAGL4U,UAAAzU,OAAiEuD,KAAAA,IAAA6Q,iBAAjEpU;IAAiE,IAAAC;IAAA,OAAAL,CAAAA,CAAA,CAAA,CAAA,KAAAE,UAAAF,CAAAA,CAAAA,EAAAA,KAAA4U,WAAAA,CAI/DvU,KAAAyU,CAAAA,wBAAA;QACE,MAAA1I,WAAiB2I,kBAAA;YAAAD;YAAAE,qBAEO9U,OAAM+U,SAAAA,CAAA7M,WAAAA,CAAA8M,QAAAA;QAAAA,CAE7B;QAAC,OAEKN,SAASxI,QAAQ;IAAC,GAC1BpM,CAAAA,CAAAA,EAAAA,GAAAE,QAAAF,CAAAA,CAAAA,EAAAA,GAAA4U,UAAA5U,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA,EAVIiU,wMAAAA,EACJ/T,OAAM+U,SAAAA,CAAA9M,WAAAA,EACP9H,IASAwU,OACF;AAAC;AAGI,SAASE,uBAMhB;UALED,mBAAAA,EACAE,mBAAAA,EAIF,EAAmB,CANe;IAOhC,OAAO;QACLrI,eAAeqI,oBAAoBrI,aAAAA;QACnC/D,SAAS;YACPuM,YAAY,CAAC;mBAAGL,oBAAoBlM,OAAAA,CAAQuM,UAAU;aAAA;YACtDC,cAAcN,oBAAoBlM,OAAAA,CAAQwM,YAAAA;YAC1CvD,UAAUiD,oBAAoBvM,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY;YAChE/B,QAAQsO,oBAAoBlM,OAAAA,CAAQpC,MAAAA;YACpC9B,WAAWoQ,oBAAoBlM,OAAAA,CAAQlE,SAAAA;YACvCtD,OAAO4T,oBAAoB5T,KAAAA;QAAAA;QAE7BiU,gBAAgBL,oBAAoBK,cAAAA;IAAAA;AAExC;ACpDO,SAAAC,WAAAvV,KAAAA,EAAA;IAAA,MAAAC,QAAAC,qKAAAA,EAAA,EAAA,GACLmI,kBAAoBkK,0LAAAA,CAAAA,IACpBnK,kBAAoBkI,2KAAAA,EAAA1C,kBAA6B,GACjD2D,mBAAqB2C,oMAAAA,EAAY9L,aAAW+L,OAE5C,GACAqB,cAAgBvE,uKAAAA,EAAA,IAAwB;IAAC,IAAA5Q;IAAAJ,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAyV,IAAAA,CAAAnU,IAAAA,IAAArB,CAAAA,CAAA,CAAA,CAAA,KAAAoI,cAAAA,CAMAhI,KAAA0U,CAAAA,wBAAA;QACvC,MAAA1I,WAAiB2I,kBAAA;YAAAD;YAAAE,qBAEM5M;QAAAA,CACtB;QAEY,IAFX,CAEGgE,SAAQxD,OAAAA,CAAAlE,SAAAA,IAAA,KAIR+Q,sOAAAA,EAAqBrJ,QAAQ,GAAC,OAAA,CAAA;QAInC,MAAAsJ,kBAAoB3Q,8NAAAA,EAAaqH,QAAQ;QAAC,OAErCsJ,cAIEA,YAAW/Q,IAAAA,CAAAtD,IAAAA,KAAetB,MAAKyV,IAAAA,CAAAnU,IAAAA,GAJtB,CAAA;IAIgC,GACjDrB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAyV,IAAAA,CAAAnU,IAAAA,EAAArB,CAAAA,CAAAA,EAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IArBD,MAAAoR,cAAgB6C,oMAAAA,EAAY9L,aAAa/H,EAqBxC;IAAC,IAAAC;IAAAL,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAuC,QAAAA,CAAAvC,KAAAA,CAAA8G,MAAAA,IAAA7G,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAyV,IAAAA,CAAAnU,IAAAA,IAAArB,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAyV,IAAAA,CAAA7S,IAAAA,IAAA3C,CAAAA,CAAA,CAAA,CAAA,KAAAoI,cAAAA,CAMwC/H,KAAAsV,CAAAA,0BAAA;QACxC,MAAAC,aAAiBb,kBAAA;YAAAD,qBACfA;YAAmBE,qBACE5M;QAAAA,CACtB;QAAC,IAAA,CAEGgE,WAAQxD,OAAAA,CAAAlE,SAAAA,EAAA,OAAA,CAAA;QAIb,MAAAmC,SAAe9G,MAAKuC,QAAAA,CAAAvC,KAAAA,CAAA8G,MAAAA,EACpBjF,QACEiF,cAAU5B,2KAAAA,EAAYmH,WAAQxD,OAAAA,EAAU/B,MAAM,IAAIA,SAAMlD,KAAAA,GAC1DkS,gBAAuCjU,QAAK;YAAAgG,QAAA;gBAAA/C,MAAA;oBAAA;wBAAAxD,MAGtBO,MAAKP,IAAAA;oBAAAA;oBAAQ;oBAAU;wBAAAA,MAAStB,MAAKyV,IAAAA,CAAAnU,IAAAA;oBAAAA,CAAA;iBAAA;gBAAAyG,QAAA;YAAA;YAAAlD,OAAA;gBAAAC,MAAA;oBAAA;wBAAAxD,MAIrCO,MAAKP,IAAAA;oBAAAA;oBAAQ;oBAAU;wBAAAA,MAAStB,MAAKyV,IAAAA,CAAAnU,IAAAA;oBAAAA,CAAA;iBAAA;gBAAAyG,QAC3C/H,MAAKyV,IAAAA,CAAA7S,IAAAA,CAAAiB,MAAAA;YAAAA;QAAA,IAAA;QAGb,WAEDkS,gPAAAA,EAAuBD,aAAa,EAAEzJ,UAAQ;IAAC,GACvDpM,CAAAA,CAAAA,EAAAA,GAAAD,MAAAuC,QAAAA,CAAAvC,KAAAA,CAAA8G,MAAAA,EAAA7G,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAyV,IAAAA,CAAAnU,IAAAA,EAAArB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAyV,IAAAA,CAAA7S,IAAAA,EAAA3C,CAAAA,CAAAA,EAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA;IA3BD,MAAAiR,eAAiBgD,oMAAAA,EAAY9L,aAAa9H,EA2BzC,GAED0V,WAAehW,MAAKuC,QAAAA,CAAAvC,KAAAA,CAAA8G,MAAAA,EACpBmP,UAAcnP,YAAUuB,YAAWnD,WAAAA,CAAa4B,QAAM,IAAIA,WAAMlD,KAAAA;IAAY,IAAA2M;IAAAtQ,CAAAA,CAAA,CAAA,CAAA,KAAAgW,WAAAhW,CAAAA,CAAAA,EAAAA,KAAAD,MAAAyV,IAAAA,CAAAnU,IAAAA,GAAAA,CAIxEiP,KAAA1O,UAAK;QAAA;YAAAP,MACOO,QAAKP,IAAAA;QAAAA;QAAQ;QAAU;YAAAA,MAAStB,MAAKyV,IAAAA,CAAAnU,IAAAA;QAAAA,CAAA;KAAA,GAAAsC,KAAAA,GACpC3D,CAAAA,CAAAA,EAAAA,GAAAgW,SAAAhW,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAyV,IAAAA,CAAAnU,IAAAA,EAAArB,CAAAA,CAAAA,GAAAA,GAAAsQ,EAAAA,IAAAA,KAAAtQ,CAAAA,CAAA,EAAA,CAAA;IAJjB,MAAA6E,OAEIyL;IAIH,IAAA2F,oBAAA3T;IAAA,IAAAtC,CAAAA,CAAAA,GAAAA,KAAAgW,WAAAhW,CAAAA,CAAA,EAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAA,EAAA,CAAA,KAAAoR,WAAApR,CAAAA,CAAA,EAAA,CAAA,KAAAsR,gBAAAtR,CAAAA,CAAAA,GAAAA,KAAA6E,QAAA7E,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAuC,QAAAA,IAAAtC,CAAAA,CAAAA,GAAAA,KAAAD,MAAAyV,IAAAA,CAAA5S,KAAAA,IAAA5C,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAmW,gBAAAA,IAAAlW,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAoW,eAAAA,IAAAnW,CAAAA,CAAA,EAAA,CAAA,KAAAiR,UAAA;YAOElR;QALH,MAAAqW,uBAA6BjO,YAAWG,WAAAA,CAAAA,EACxBM,OAAAA,CAAApC,MAAAA,CAAA6P,UAAAA,CAAA1U,GAAAA,CAAAwS,QAC8C,GAE9DkC,aAAmBC,gJAAAA,EAAAA,4BACXd,IAAAA,CAAA5S,KAAAA,iEAAA,CAAA,CAAA,EAAiB2T,MAAAA,CAAAC,CAAAA,OACrBJ,qBAAoBK,QAAAA,CAAUD,IAAI,CACpC,CACF;;QAEAP,qBAAAA,uBAA4BlW,MAAKyV,IAAAA,CAAA5S,KAAAA,mEAAA,EAAA,EAAiB8T,OAAAA,CAAAC,CAAAA,WAAA;;YAAA,IAC5CP,qBAAoBK,QAAAA,CAAUD,MAAI,GAAC,OAAA,CAAA,CAAA;YAIvC,MAAAI,+DAAgBhV,4BAAKQ,QAAAA,wEAAA0J,IAAAA,CAAA+K,CAAAA,UAA8BA,QAAOxV,IAAAA,KAAUmV,MAAI;YAAC,OAErEK,YAAO;gBACDA,SAAO;aAAA,GAAA,CAAA,CAAA;QAAA,CAIlB,GAEDvU,WAAevC,MAAKuC,QAAAA;QAAS,KAAA,MAKxBwU,UAAcT,WAAU;YAC3B,MAAAU,4BAAkCzF,aAAY+E,UAAAA,CAAAvK,IAAAA,CAAAkL,CAAAA,MACnCA,IAAG5V,KAAAA,KAAWoV,MACzB;YAEI3R,QAAQkS,6BAA6BhX,MAAKoW,eAAAA,IAAAA,CAC5C7T,WACEA,aAAAA,GAAAA,IAAAA,6KAAAA,EAAAA,MAAAA,eAAAA,EAAAA;gBACoBiT,kBAAAA;gBACTnE;gBACHvM;gBACIoM;gBACE8F,YAAAA;gBACLP,OAAAA;gBACDO,MAAAA;gBAELzU;YAAAA,CACH,CAAA;QAXM;QAAA,KAAA,MAmBP2U,qBAA2BhB,mBAAkB;YAChD,MAAAiB,6BAAmC5F,aAAY6F,WAAAA,CAAArL,IAAAA,CAAAvI,CAAAA,IACtCA,EAAC1C,IAAAA,KAAUoW,kBAAiBpV,KACrC;YACIqV,8BAAAA,CACEtV,WAASiD,QAAQ9E,MAAKmW,gBAAAA,GACxB5T,WACEA,aAAAA,GAAAA,IAAAA,6KAAAA,EAAAA,QAAAA;gBAAWiT,KAAAA;gBACT,UAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,MAAA,gBAAA,EAAA;oBACS3T,OAAAA;oBACW2T,kBAAAA;oBACTnE;oBACHvM;oBACIoM;oBACEiG,YAAAA;oBACLD,OAAAA;oBACDC,MAAAA;oBAEL5U;gBAAAA,CACH;YAAA,CACF,IAGFA,WAAWA,aAAAA,GAAAA,IAAAA,6KAAAA,EAAAA,QAAAA;gBAAWiT,KAAAA;gBAAUjT;YAAAA,CAAS,CAAA;QAAjC;QAAAtC,CAAAA,CAAAA,GAAAA,GAAAgW,SAAAhW,CAAAA,CAAAA,GAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,GAAAA,GAAAoR,SAAApR,CAAAA,CAAAA,GAAAA,GAAAsR,cAAAtR,CAAAA,CAAAA,GAAAA,GAAA6E,MAAA7E,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAuC,QAAAA,EAAAtC,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAyV,IAAAA,CAAA5S,KAAAA,EAAA5C,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAmW,gBAAAA,EAAAlW,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAoW,eAAAA,EAAAnW,CAAAA,CAAAA,GAAAA,GAAAiR,UAAAjR,CAAAA,CAAAA,GAAAA,GAAAiW,oBAAAjW,CAAAA,CAAAA,GAAAA,GAAAsC;IAAA,OAAA2T,qBAAAjW,CAAAA,CAAA,EAAA,CAAA,EAAAsC,WAAAtC,CAAAA,CAAA,EAAA,CAAA;IAAA,IAQV4B,WAASiD,QAAQ9E,MAAK4S,WAAAA,EAAY;QAAA,IAAApB;QAAA,IAAAvR,CAAAA,CAAA,EAAA,CAAA,KAAAgW,QAAA1T,QAAAA,IAAAtC,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAyV,IAAAA,EAAA;YAAA,IAAA7D;YAAA3R,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAyV,IAAAA,GAAAA,CAElC7D,KAAAyF,CAAAA,SAAYA,OAAM/V,IAAAA,KAAUtB,MAAKyV,IAAAA,CAAAnU,IAAAA,EAAUrB,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAyV,IAAAA,EAAAxV,CAAAA,CAAAA,GAAAA,GAAA2R,EAAAA,IAAAA,KAAA3R,CAAAA,CAAA,EAAA,CAAA,EAD/BuR,MAAA3P,QAAKU,QAAAA,CAAAwJ,IAAAA,CACjB6F,EACF,GAAC3R,CAAAA,CAAA,EAAA,CAAA,GAAAgW,QAAA1T,QAAAA,EAAAtC,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAyV,IAAAA,EAAAxV,CAAAA,CAAAA,GAAAA,GAAAuR;QAAA,OAAAA,MAAAvR,CAAAA,CAAA,EAAA,CAAA;QAFD,MAAAuC,QAAcgP;QAEb,IAEGhP,OAAK;YAAA,IAAAoP;YAAA3R,CAAAA,CAAA,EAAA,CAAA,KAAAiW,sBAAAjW,CAAAA,CAAA,EAAA,CAAA,KAAAuC,SAAAvC,CAAAA,CAAAA,GAAAA,KAAAsC,YAAAtC,CAAAA,CAAA,EAAA,CAAA,KAAAoR,WAAApR,CAAAA,CAAA,EAAA,CAAA,KAAAsR,aAAA+F,IAAAA,IAAArX,CAAAA,CAAAA,GAAAA,KAAA6E,QAAA7E,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAA4S,WAAAA,IAAA3S,CAAAA,CAAAA,GAAAA,KAAAiR,WAAAA,CAELU,KAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,MAAA,WAAA,EAAA;gBACesE,aAAAA;gBACKV,kBAAAA;gBACTnE;gBACHvM;gBACM,YAAAyM,aAAY+F,IAAAA;gBACdpG;gBACH1O,OAAAA;gBACD,MAAA+O,aAAY+F,IAAAA;gBAEjB/U;YAAAA,CACH,GAAoBtC,CAAAA,CAAAA,GAAAA,GAAAiW,oBAAAjW,CAAAA,CAAAA,GAAAA,GAAAuC,OAAAvC,CAAAA,CAAAA,GAAAA,GAAAsC,UAAAtC,CAAAA,CAAAA,GAAAA,GAAAoR,SAAApR,CAAAA,CAAA,EAAA,CAAA,GAAAsR,aAAA+F,IAAAA,EAAArX,CAAAA,CAAAA,GAAAA,GAAA6E,MAAA7E,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAA4S,WAAAA,EAAA3S,CAAAA,CAAAA,GAAAA,GAAAiR,UAAAjR,CAAAA,CAAAA,GAAAA,GAAA2R,EAAAA,IAAAA,KAAA3R,CAAAA,CAAA,EAAA,CAAA,EAZtBsC,WACEA;QADM;IAAA;IAAA,IAAAiP;IAAA,OAAAvR,CAAAA,CAAAA,GAAAA,KAAAsC,YAAAtC,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAoS,UAAAA,GAAAA,CAkBVZ,KAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,QAAA;QAEO,GAFGxR,MAAKoS,UAAAA;QAAkBoD,KAAAA;QAC9BjT;IAAAA,CACH,GAAOtC,CAAAA,CAAAA,GAAAA,GAAAsC,UAAAtC,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAoS,UAAAA,EAAAnS,CAAAA,CAAAA,GAAAA,GAAAuR,EAAAA,IAAAA,KAAAvR,CAAAA,CAAA,EAAA,CAAA,EAFPuR;AAEO;AA9LJ,SAAA4C,SAAAmD,SAAAA,EAAA;IAAA,OAiF2CA,UAASzW,IAAAA;AAAA;AAjFpD,SAAAqT,QAAAI,CAAAA,EAAA;IAAA,OAIHA,EAAC1L,OAAAA,CAAA2L,eAAAA,CAAAA;AAA0B;ACjB/B,MAAMgD,oBAAmC;IACvC3M,UAAU;IACVwD,YAAY;IACZoJ,eAAe;IACfC,MAAM;IACNC,OAAO;AACT;AAEO,SAAAC,WAAA5X,KAAAA,EAAA;IAAA,MAAAC,QAAAC,qKAAAA,EAAA,EAAA,GAULkI,kBAAoBkI,2KAAAA,EAAA1C,kBAA6B,GACjDnH,SAAeyN,wMAAAA,EAAY9L,aAAW+L,OAAyB;IAAC,IAE5DnU,MAAKyV,IAAAA,CAAA3T,KAAAA,KAAgB2E,OAAM6Q,IAAAA,CAAAxW,IAAAA,EAAU,OAChCd,MAAKuC,QAAAA;IAAA,IAAAlC;IAAAJ,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CAGKK,KAAA,aAAA,GAAA,IAAA,6KAAA,EAAC,YAAA;QAAU,GAAKL,KAAAA;IAAAA,CAAK,GAAIC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IAA5C,IAAA4X,eAAmBxX;IAAyB,IAG1CL,MAAK8X,iBAAAA,IACL9X,MAAKyV,IAAAA,CAAAsC,WAAAA,IACL/X,MAAK4C,IAAAA,CAAAA,IAAAA,KAAe,IAAE;QAAA,IAAAtC;QAAAL,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA8X,iBAAAA,GAAAA,CAKfxX,KAAAN,MAAK8X,iBAAAA,IAAoB7X,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA8X,iBAAAA,EAAA7X,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA;QAAA,IAAAsQ;QAAAtQ,CAAAA,CAAAA,EAAAA,KAAAK,KAAAA,CAD5BiQ,KAAAA,aAAAA,GAAAA,IAAAA,6KAAAA,EAAAA,QAAAA;YAAaiH,OAAAA;YAAoC,iBAAA,CAAA;YAC9ClX,UAAAA;QAAAA,CACH,GAAOL,CAAAA,CAAAA,EAAAA,GAAAK,IAAAL,CAAAA,CAAAA,EAAAA,GAAAsQ,EAAAA,IAAAA,KAAAtQ,CAAAA,CAAA,CAAA,CAAA;QAAA,IAAAuR;QAAA,OAAAvR,CAAAA,CAAA,CAAA,CAAA,KAAA4X,gBAAA5X,CAAAA,CAAAA,EAAAA,KAAAsQ,KAAAA,CAHTiB,KAAA,aAAA,GAAA,IAAA,8KAAA,EAAA,kLAAA,EAAA;YACEjB,UAAAA;gBAAAA;gBAAAA;;SAGa,GACZtQ,CAAAA,CAAAA,EAAAA,GAAA4X,cAAA5X,CAAAA,CAAAA,EAAAA,GAAAsQ,IAAAtQ,CAAAA,CAAAA,EAAAA,GAAAuR,EAAAA,IAAAA,KAAAvR,CAAAA,CAAA,CAAA,CAAA,EALHuR;IAKG;IAIP,MAAAwG,kBAAwBhY,MAAKyV,IAAAA,CAAAuC,eAAAA;IAAqB,IAE9CA,iBAAe;QAAA,IAAA1X;QAAAL,CAAAA,CAAA,CAAA,CAAA,KAAA+X,mBAAA/X,CAAAA,CAAAA,GAAAA,KAAA4X,eAAAA,CACFvX,KAAA0X,gBAAeC,SAAAA,CAAA;YAAA1V,UAAsBsV;QAAAA,CAAa,GAAC5X,CAAAA,CAAAA,EAAAA,GAAA+X,iBAAA/X,CAAAA,CAAAA,GAAAA,GAAA4X,cAAA5X,CAAAA,CAAAA,GAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,EAAA,CAAA,EAAlE4X,eAAeA;IAAH;IAAA,OAGPA;AAAY;AAxCd,SAAA1D,QAAAI,CAAAA,EAAA;IAAA,OAW0CA,EAAC1L,OAAAA,CAAApC,MAAAA;AAAA;AC3B3C,SAAAyR,WAAAlY,KAAAA,EAAA;IAAA,MAAAC,QAAAC,qKAAAA,EAAA,CAAA;IAAA,IAAAG;IAAA,OAAAJ,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAoS,UAAAA,IAAAnS,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAuC,QAAAA,IAAAtC,CAAAA,CAAAA,EAAAA,KAAAD,MAAA4C,IAAAA,CAAAtB,IAAAA,IAAArB,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAA4C,IAAAA,CAAAd,KAAAA,GAAAA,CAEHzB,KAAAA,aAAAA,GAAAA,IAAAA,6KAAAA,EAAAA,QAAAA;QAOO,GANDL,MAAKoS,UAAAA;QACO,kBAAApS,MAAK4C,IAAAA,CAAAtB,IAAAA;QACJ,mBAAAtB,MAAK4C,IAAAA,CAAAd,KAAAA;QACN,mBAAA;QAEf9B,UAAAA,MAAKuC,QAAAA;IAAAA,CACR,GAAOtC,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAoS,UAAAA,EAAAnS,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAuC,QAAAA,EAAAtC,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA4C,IAAAA,CAAAtB,IAAAA,EAAArB,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAA4C,IAAAA,CAAAd,KAAAA,EAAA7B,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAPPI;AAOO;ACTJ,MAAM8X,gCACXtK,8KAAAA,EAAyC,IAAI,GAOlCuK,wBAAwBA,MAAA;IACnC,MAAAjY,SAAemQ,+KAAAA,EAAA6H,yBAAoC;IAAC,IAAA,CAE/ChY,QAAM,MAAA,IAAAiD,MAEP,oGAAsG;IAAA,OAInGjD;AAAM,GCLFkY,SACX,OAAO7N,SAAW,OAClB,uBAAuB8N,IAAAA,CAAK9N,OAAO+N,SAAAA,CAAUC,SAAS,GAIlDC,YAAkD;IACtDC,KAAK;IACLC,SAAS;IACTC,MAAM;IACNC,OAAO;AACT,GAEMC,UAA8C;IAClDC,KAAK;IACLC,OAAO;IACPC,KAAK;IACLC,SAAS;IACTC,KAAK;IACLC,MAAM;IACNC,KAAK;IACLC,MAAM;IACNC,KAAK;IACLC,KAAK;IACL9B,MAAM;IACN+B,KAAKpB,SAAS,SAAS;IACvBqB,KAAK;IACLC,QAAQ;IACRC,QAAQ;IACRjC,OAAO;IACPkC,OAAO;IACPC,UAAU;IACVC,IAAI;IACJC,KAAK;IACLC,SAAS;AACX,GAEMC,WAA+C;IACnD,WAAa;IACb,KAAO;IACP,OAAS;IACT,OAAS;IACT,SAAW;IACX,KAAO;IACP,OAAS;IACT,UAAY;IACZ,QAAU;IACV,KAAK;IACL,QAAU;IACV,UAAY;IACZ,KAAO;IACP,MAAQ;IACR,WAAa;IACb,SAAW;IACX,YAAc;IACd,WAAa;IACb,QAAU;IACV,QAAU;IACV,MAAQ;IACR,SAAW;IACX,YAAc;IACd,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,MAAM;IACN,KAAK;IACL,KAAK;IACL,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,IAAM;IACN,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;IACP,KAAO;AACT;AAEO,SAASC,SAASC,MAAAA,EAAgB9R,KAAAA,EAAmC;IAC1E,OAAO+R,cAAcC,YAAYF,MAAM,GAAG9R,KAAK;AACjD;AAEA,SAASgS,YAAYF,MAAAA,EAAwB;IAE3C,MAAMG,eAAuB;QAC3BC,QAAQ,CAAA;QACRC,SAAS,CAAA;QACTC,SAAS,CAAA;QACTC,UAAU,CAAA;IAAA,GAINC,iBAAiBR,OAAOS,OAAAA,CAAQ,MAAM,MAAM,EAAEC,KAAAA,CAAM,GAAG;IAE7D,KAAA,MAAWC,oBAAoBH,eAAgB;QAC7C,MAAMI,WACJD,iBAAiBE,QAAAA,CAAS,GAAG,KAAKF,iBAAiBlX,MAAAA,GAAS,GACxDqX,gBAAgBF,WAClBD,iBAAiBhW,KAAAA,CAAM,GAAG,CAAA,CAAE,IAC5BgW,kBACEI,UAAUC,UAAUF,aAAa,GACjCG,WAAW5C,SAAAA,CAAU0C,OAAO,CAAA,EAC5BG,QAAQxC,OAAAA,CAAQoC,aAAa,CAAA,EAC7BK,QAAOrB,QAAAA,CAASiB,OAAO,CAAA;QAE7B,IACED,cAAcrX,MAAAA,GAAS,KACvBwX,aAAazX,KAAAA,KACb0X,UAAU1X,KAAAA,KACV2X,UAAS3X,KAAAA,GAET,MAAM,IAAI4X,UAAU,sBAAmC,OAAbN,aAAa,EAAA,EAAG;QAG5D,CAAIN,eAAe/W,MAAAA,KAAW,KAAKwX,aAAazX,KAAAA,CAAAA,KAAAA,CAC9C2W,aAAahL,GAAAA,GAAM4L,SACnBZ,aAAakB,OAAAA,GAAUC,UAAUR,aAAa,CAAA,GAG5CG,aAAazX,KAAAA,KAAAA,CACf2W,YAAAA,CAAac,QAAQ,CAAA,GAAIL,WAAW,OAAO,CAAA,CAAA;IAE/C;IAEA,OAAOT;AACT;AAEA,SAASF,cACPE,YAAAA,EACAjS,KAAAA,EACS;IAeT,OAAA,CAbGiS,aAAaC,MAAAA,IAAU,QACpBD,aAAaC,MAAAA,KAAWlS,MAAMkS,MAAAA,KAAAA,CAEjCD,aAAaE,OAAAA,IAAW,QACrBF,aAAaE,OAAAA,KAAYnS,MAAMmS,OAAAA,KAAAA,CAElCF,aAAaG,OAAAA,IAAW,QACrBH,aAAaG,OAAAA,KAAYpS,MAAMoS,OAAAA,KAAAA,CAElCH,aAAaI,QAAAA,IAAY,QACtBJ,aAAaI,QAAAA,KAAarS,MAAMqS,QAAAA,IAOlCJ,aAAakB,OAAAA,KAAY7X,KAAAA,KAAa0E,MAAMmT,OAAAA,KAAY7X,KAAAA,IACtD2W,aAAakB,OAAAA,KAAY,MAAMnT,MAAMmT,OAAAA,KAAY,KAC5C,CAAA,IAGFlB,aAAakB,OAAAA,KAAYnT,MAAMmT,OAAAA,GAItClB,aAAakB,OAAAA,KAAYnT,MAAMmT,OAAAA,IAC/BlB,aAAahL,GAAAA,KAAQjH,MAAMiH,GAAAA,CAAIoM,WAAAA,CAAAA,IAbxB,CAAA;AAeX;AAEA,SAASD,UAAU5a,IAAAA,EAAsB;IACvC,MAAMqa,UAAUC,UAAUta,IAAI;;IAG9B,oCAFgBoZ,CAASiB,OAAO,CAAA,6CAAhBjB,oBAAqBiB,QAAQS,WAAAA,CAAAA,EAAcC,UAAAA,CAAW,CAAC;AAGzE;AAEA,SAAST,UAAUta,IAAAA,EAAsB;IACvC,MAAMqa,UAAUra,KAAK6a,WAAAA,CAAAA;;IAErB,kCAAO7C,CAAQqC,OAAO,CAAA,cAAfrC,iDAAoBqC;AAC7B;ACvMA,MAAMva,UAAQC,cAAc,oBAAoB;AAMzC,SAASib,kBACd1T,WAAAA,EACA2T,kBAAAA,EACAC,kBAAAA,EACwD;IACxD,MAAMC,kBAAkB;QAAC;QAAS;QAAO;QAAS;QAAU,KAAK;KAAA,EAC3DC,+EAAgBF,qBAAsB,CAAA;IAC5C,OAAO,SAAqB7b,MAAAA,EAA+C;QACzEA,OAAAA,OAAOgc,cAAAA,GAAkB7T,CAAAA,UAA+C;YAEtE8T,OAAOC,IAAAA,CAAKH,aAAa,EAAEI,OAAAA,CAASC,CAAAA,QAAQ;gBAC1C,IAAIA,QAAQ,SACV,IAAA,MAAWnC,UAAU8B,aAAAA,CAAcK,GAAG,CAAA,CAAG;oBACvC,IAAIN,gBAAgBvF,QAAAA,CAAS0D,MAAM,GACjC,MAAM,IAAIhX,MAAM,cAAoB,OAANgX,MAAM,EAAA,cAAe;oBAErD,IAAID,SAASC,QAAQ9R,MAAMkU,WAAW,GAAG;wBACvClU,MAAMmU,cAAAA,CAAAA;wBACN,MAAMC,eAAeR,aAAAA,CAAcK,GAAG,CAAA;wBACtC,IAAIG,cAAc;4BAChB,MAAMjG,OAAOiG,YAAAA,CAAatC,MAAM,CAAA;4BAChCxZ,QAAM,iBAAUwZ,MAAM,EAAA,eAAkB,CAAE,MAAN3D,IAAI,IACxCrO,YAAYsI,IAAAA,CAAK;gCACfV,MAAM;gCACN2M,eAAe;oCACb3M,MAAM;oCACNuH,WAAWd;gCAAAA;gCAEbtW;4BAAAA,CACD;wBACH;oBACF;gBACF;gBAEF,IAAIoc,QAAQ,UACV,IAAA,MAAWnC,UAAU8B,aAAAA,CAAcK,GAAG,CAAA,CAAG;oBACvC,IAAIN,gBAAgBvF,QAAAA,CAAS0D,MAAM,GACjC,MAAM,IAAIhX,MAAM,cAAoB,OAANgX,MAAM,EAAA,cAAe;oBAErD,IAAID,SAASC,QAAQ9R,MAAMkU,WAAW,GAAG;wBACvC,MAAMI,kBAAkBV,aAAAA,CAAcK,GAAG,CAAA;wBACzC,IAAIK,iBAAiB;4BACnB,MAAM1D,UAAU0D,eAAAA,CAAgBxC,MAAM,CAAA;4BACtClB,QAAQ5Q,OAAOyT,kBAAkB;wBACnC;oBACF;gBACF;YAEJ,CAAC;QACH,GACO5b;IACT;AACF;ACjEO,SAAS0c,qBACdlV,KAAAA,EACAmV,SAAAA,EACc;IACd,MAAMjV,SAASkV,wJAAAA,CAAMC,SAAAA,CAAUrV,MAAME,MAAAA,EAAQiV,SAAS,GAChDjY,QAAQkY,wJAAAA,CAAMC,SAAAA,CAAUrV,MAAM9C,KAAAA,EAAOiY,SAAS;IAEpD,OAAIjV,WAAW,QAAQhD,UAAU,OACxB,OAGLkY,wJAAAA,CAAME,MAAAA,CAAOpV,QAAQF,MAAME,MAAM,KAAKkV,wJAAAA,CAAME,MAAAA,CAAOpY,OAAO8C,MAAM9C,KAAK,IAChE8C,QAGF;QAACE;QAAQhD;IAAAA;AAClB;ACMA,MAAMqY,yBAIFA;QAAC,EAACC,KAAAA,EAAOC,QAAAA,EAAQ,KAAM;IACzB,MAAMC,gBAAgBF,MAAM9U,WAAAA,CAAYiV,KAAAA;IAExCH,OAAAA,MAAM9U,WAAAA,CAAYiV,KAAAA,GAASC,CAAAA,OAAO;QAC5BA,GAAGvN,IAAAA,KAAS,mBACdoN,SAAS;YAACpN,MAAM;YAAmB8M,WAAWS;QAAAA,CAAG,GAGnDF,cAAcE,EAAE;IAClB,GAEO,MAAM;QACXJ,MAAM9U,WAAAA,CAAYiV,KAAAA,GAAQD;IAC5B;AACF,GAIaG,8BAA0B/U,0LAAAA,EAAM;IAC3CgV,OAAO;QACL5U,SAAS,CAAA;QAQTsU,OAAO,CAAA;QAOPO,QAAQ,CAAA;IAAC;IAiBX3N,SAAS;QACP,wCAAoC4N,sNAAAA,EAAO;YACzCC,yBAAyBA;oBAAC,EAAC/U,OAAAA,EAASP,KAAAA,EAAAA;uBAC9BA,MAAM0H,IAAAA,KAAS,8BACVnH,QAAQ+U,uBAAAA,GAGVtV,MAAMuV,gBAAAA;;QAAAA,CAEhB;QACD,oCAAoCC;gBAAC,EAACjV,OAAAA,EAAAA,KAAa;YACjD,MAAMkV,uBAA8C,CAAA,CAAA;YAEpD,KAAA,MAAW/F,mBAAmBnP,QAAQ+U,uBAAAA,CAAyB;gBAC7D,MAAMI,aAAazS,aAAa;oBAC9B1C,SAAS;wBACPpC,QAAQoC,QAAQpC,MAAAA;wBAChBpF,OAAOwH,QAAQR,WAAAA,CAAYhH,KAAAA;wBAC3BsD,WAAWqT,gBAAgBrT,SAAAA;oBAAAA;oBAE7BiI,eAAe/D,QAAQR,WAAAA,CAAYuE,aAAAA;gBAAAA,CACpC;gBAED,IAAI,CAACtH,wJAAAA,CAAM2Y,OAAAA,CAAQD,UAAU,GAAG;wBAC9BhG;qBAAAA,2BAAAA,gBAAgBkG,OAAAA,cAAhBlG,+CAAAA,8BAAAA,iBAA0B;wBACxBmG,cAAc;wBACdnG;wBACAoG,QAAQ;oBAAA,CACT;oBACD;gBACF;gBAEAL,qBAAqB7V,IAAAA,CAAK;oBACxB8P;oBACA,GAAGgG,UAAAA;gBAAAA,CACJ;YACH;YAEAnV,QAAQR,WAAAA,CAAYgW,eAAAA,GAAkBN;QACxC;QACA,4BAA4BO;gBAAC,EAACzV,OAAAA,EAASP,KAAAA,EAAAA,KAAW;YAChD,IAAIA,MAAM0H,IAAAA,KAAS,6BACjB;YAGF,MAAM+N,uBAA8C,CAAA,CAAA;YAEpD,KAAA,MAAW/F,mBAAmB1P,MAAMuV,gBAAAA,CAAkB;gBACpD,MAAMG,aAAazS,aAAa;oBAC9B1C,SAAS;wBACPpC,QAAQoC,QAAQpC,MAAAA;wBAChBpF,OAAOwH,QAAQR,WAAAA,CAAYhH,KAAAA;wBAC3BsD,WAAWqT,gBAAgBrT,SAAAA;oBAAAA;oBAE7BiI,eAAe/D,QAAQR,WAAAA,CAAYuE,aAAAA;gBAAAA,CACpC;gBAED,IAAI,CAACtH,wJAAAA,CAAM2Y,OAAAA,CAAQD,UAAU,GAAG;wBAC9BhG;qBAAAA,2BAAAA,gBAAgBkG,OAAAA,cAAhBlG,+CAAAA,8BAAAA,iBAA0B;wBACxBmG,cAAc;wBACdnG;wBACAoG,QAAQ;oBAAA,CACT;oBACD;gBACF;gBAEAL,qBAAqB7V,IAAAA,CAAK;oBACxB8P;oBACA,GAAGgG,UAAAA;gBAAAA,CACJ;YACH;YAEAnV,QAAQR,WAAAA,CAAYgW,eAAAA,GAAkBN;QACxC;QAEA,0BAA0BQ;gBAAC,EAAC1V,OAAAA,EAASP,KAAAA,EAAAA,KAAW;YAC9C,IAAIA,MAAM0H,IAAAA,KAAS,mBACjB;YAGF,MAAM+N,uBAA8C,CAAA,CAAA;YAEpD,KAAA,MAAWS,kBAAkB3V,QAAQR,WAAAA,CAAYgW,eAAAA,CAAiB;gBAChE,MAAML,aAAazS,aAAa;oBAC9B1C,SAAS;wBACPpC,QAAQoC,QAAQpC,MAAAA;wBAChBpF,OAAOwH,QAAQR,WAAAA,CAAYhH,KAAAA;wBAC3BsD,WAAW6Z,eAAexG,eAAAA,CAAgBrT,SAAAA;oBAAAA;oBAE5CiI,eAAe/D,QAAQR,WAAAA,CAAYuE,aAAAA;gBAAAA,CACpC;gBAED,IAAI,CAACtH,wJAAAA,CAAM2Y,OAAAA,CAAQD,UAAU,GAAG;wBAC9BQ,yCAAAA;qBAAAA,0CAAAA,CAAAA,kCAAAA,eAAexG,eAAAA,EAAgBkG,OAAAA,cAA/BM,8DAAAA,6CAAAA,iCAAyC;wBACvCL,cAAc;wBACdnG,iBAAiBwG,eAAexG,eAAAA;wBAChCoG,QAAQ;oBAAA,CACT;oBACD;gBACF;gBAEA,IAAIK;gBAGJ,IADAA,WAAW5B,qBAAqBmB,YAAY1V,MAAMwU,SAAS,GAExD2B,YAAYA,aAAaT,cACzBS,aAAa,QAAQT,YACtB;wBASAQ,0CAAAA;oBARA,MAAME,oBAAoBD,WACtB/W,sBAAsB;wBACpBjB,QAAQoC,QAAQpC,MAAAA;wBAChBtG,QAAQ0I,QAAQR,WAAAA;wBAChBV,OAAO8W;oBAAAA,CACR,IACD;qBAEJD,2CAAAA,CAAAA,mCAAAA,eAAexG,eAAAA,EAAgBkG,OAAAA,cAA/BM,+DAAAA,8CAAAA,kCAAyC;wBACvCL,cAAcO;wBACd1G,iBAAiBwG,eAAexG,eAAAA;wBAChCoG,QAAQ;oBAAA,CACT;gBACH;gBAIIK,aAAa,QACfV,qBAAqB7V,IAAAA,CAAK;oBACxB,GAAIuW,YAAYT,UAAAA;oBAChBhG,iBAAiB;wBACf,GAAGwG,eAAexG,eAAAA;wBAClBrT,WAAW+C,sBAAsB;4BAC/BjB,QAAQoC,QAAQpC,MAAAA;4BAChBtG,QAAQ0I,QAAQR,WAAAA;4BAChBV,OAAO8W;wBAAAA,CACR;oBAAA;gBACH,CACD;YAEL;YAEA5V,QAAQR,WAAAA,CAAYgW,eAAAA,GAAkBN;QACxC;QACA,mBAAmBJ,0NAAAA,EAAO;YACxB7L,UAAUA;oBAAC,EAACjJ,OAAAA,EAASP,KAAAA,EAAAA;uBACfA,MAAM0H,IAAAA,KAAS,qBACVnH,QAAQiJ,QAAAA,GAGVxJ,MAAMwJ,QAAAA;;QAAAA,CAEhB;QACD,uBAAmB6L,sNAAAA,EAAO;YACxBgB,UAAUA;oBAAC,EAAC9V,OAAAA,EAAAA;uBACH;oBACL+V,IAAIC,eAAehW,QAAQpC,MAAAA,EAAQoC,QAAQR,WAAW;gBAAA;;QACxD,CAEH;IAAA;IAEHyW,QAAQ;QACN,gCAA4BC,qMAAAA,EAAa7B,sBAAsB;IAAA;IAEjE8B,QAAQ;QACN,iCAAiCC;gBAAC,EAACpW,OAAAA,EAAAA;mBACjCA,QAAQ+U,uBAAAA,CAAwB/Z,MAAAA,GAAS;;QAC3C,yBAAyBqb;gBAAC,EAACrW,OAAAA,EAAAA;mBACzBA,QAAQR,WAAAA,CAAYgW,eAAAA,CAAgBxa,MAAAA,GAAS;;QAC/C,6BAA6Bsb;gBAAC,EAACtW,OAAAA,EAASP,KAAAA,EAAAA,KAAW;YACjD,IAAIA,MAAM0H,IAAAA,KAAS,6BACjB,OAAO,CAAA;YAGT,MAAMoP,2BAA2BvW,QAAQR,WAAAA,CAAYgW,eAAAA,CAAgBzc,GAAAA,CAClE4c,CAAAA;oBACSA,2CACDA;uBAFY;oBACnB3W,MAAAA,8DAAuBmQ,eAAAA,CAAgBrT,SAAAA,wHAAWkD,MAAAA;oBAClDhD,KAAAA,+DAAsBmT,eAAAA,CAAgBrT,SAAAA,0HAAWE,KAAAA;oBACjDwa,SAASb,eAAexG,eAAAA,CAAgBqH,OAAAA;gBAAAA,EAE5C;gBAEMC,sBAAsBhX,MAAMuV,gBAAAA,CAAiBjc,GAAAA,CAChDoW,CAAAA;;uBAAqB;oBACpBnQ,MAAAA,gDAAwBlD,SAAAA,+DAAhBqT,2BAA2BnQ,MAAAA;oBACnChD,KAAAA,iCAAOmT,gBAAgBrT,SAAAA,4FAAWE,KAAAA;oBAClCwa,SAASrH,gBAAgBqH,OAAAA;gBAAAA,EAE7B;;YAIA,OAFkB,KAAC9d,+IAAAA,EAAQ6d,0BAA0BE,mBAAmB;QAG1E;QACA,iBAAiBC;gBAAC,EAAC1W,OAAAA,EAAAA;mBAAa,CAACA,QAAQiJ,QAAAA;;QACzC,qBAAqB0N;gBAAC,EAAC3W,OAAAA,EAAAA;mBAAaA,QAAQ4W,SAAAA;;IAAAA;AAEhD,CAAC,EAAEC,aAAAA,CAAc;IACfxQ,IAAI;IACJrG,SAASA;YAAC,EAACsU,KAAAA,EAAAA;eAAY;YACrBrL,UAAUqL,MAAMrL,QAAAA;YAChB8L,yBAAyBT,MAAMU,gBAAAA;YAC/BQ,iBAAiB,CAAA,CAAA;YACjBoB,WAAWtC,MAAMsC,SAAAA;YACjBhZ,QAAQ0W,MAAM1W,MAAAA;YACd4B,aAAa8U,MAAM9U,WAAAA;YACnBsW,UAAU;gBAACC,IAAIC,eAAe1B,MAAM1W,MAAAA,EAAQ0W,MAAM9U,WAAW;YAAA;QAAC;;IAEhEsX,QAAQ;QACNC,KAAK;QACLzC,OAAOA;gBAAC,EAACtU,OAAAA,EAAAA;mBAAc;gBAACR,aAAaQ,QAAQR,WAAAA;YAAAA;;IAAW;IAE1D9H,IAAI;QACF,oBAAoB;YAClBwP,SAAS;gBAAC,iBAAiB;aAAA;QAAA;IAC7B;IAEF8P,SAAS;IACTC,QAAQ;QACN,cAAc;YACZC,QAAQ;gBACN;oBACEpQ,WAAOqQ,+MAAAA,EAAI;wBAAC;wBAAqB,+BAA+B;qBAAC;oBACjEzW,QAAQ;oBACRwG,SAAS;wBAAC;wBAAoC,iBAAiB;qBAAA;gBAAA;gBAEjE;oBACEJ,OAAO;oBACPpG,QAAQ;gBAAA,CACT;aAAA;YAEHhJ,IAAI;gBACF,6BAA6B;oBAC3BwP,SAAS;wBAAC,kCAAkC;qBAAA;gBAAA;gBAE9C,OAAS;oBACP;wBACExG,QAAQ;wBACRoG,OAAO;wBACPI,SAAS;4BAAC;4BAAoC,iBAAiB;yBAAA;oBAAA;oBAEjE;wBACExG,QAAQ;oBAAA,CACT;iBAAA;YAAA;QAEL;QAEF,OAAS;YACPsW,SAAS;YACTtf,IAAI;gBACF,6BAA6B;oBAC3BgJ,QAAQ;oBACRoG,OAAO;oBACPI,SAAS;wBAAC;wBAA4B,iBAAiB;qBAAA;gBAAA;YACzD;YAEF+P,QAAQ;gBACN,MAAQ;oBACNvf,IAAI;wBACF,mBAAmB;4BACjBgJ,QAAQ;4BACRoG,WAAOqQ,+MAAAA,EAAI;gCAAC;gCAAyB,eAAe;6BAAC;wBAAA;oBACvD;gBACF;gBAEF,4BAA4B;oBAC1BC,OAAO;wBAAC,wBAAwB;qBAAA;oBAChCF,QAAQ;wBACNxW,QAAQ;oBAAA;gBACV;YACF;QACF;IACF;AAEJ,CAAC;AAED,SAASsV,eACPpY,MAAAA,EACA4B,WAAAA,EACA;IACA,OAAO,cAA6B;aAAVzD,MAAME,IAAI,CAAA,EAAgC,CAA3C;QACvB,IAAInB,qBAAqB0E,YAAY9F,QAAAA,EAAUkE,MAAM,GACnD,OAAO;YACL;gBACEoB,QAAQ;oBACN/C,MAAM;wBAAC;wBAAG,CAAC;qBAAA;oBACXiD,QAAQ;gBAAA;gBAEVlD,OAAO;oBACLC,MAAM;wBAAC;wBAAG,CAAC;qBAAA;oBACXiD,QAAQ;gBAAA;gBAEVgQ,aAAa,CAAA;YAAA,CACd;SAAA;QAKL,IAAIjT,KAAKjB,MAAAA,KAAW,GAClB,OAAO,CAAA,CAAA;QAGT,IAAI,CAACd,0JAAAA,CAAQC,SAAAA,CAAU4B,IAAI,KAAKA,KAAKrC,QAAAA,CAASsB,MAAAA,KAAW,GACvD,OAAO,CAAA,CAAA;QAGT,MAAMY,aAAaK,KAAKR,EAAAA,CAAG,CAAC;QAE5B,OAAIG,eAAeb,KAAAA,IACV,CAAA,CAAA,GAGFyE,YAAYgW,eAAAA,CAAgB7H,MAAAA,CAAQgI,CAAAA,iBAErClZ,wJAAAA,CAAM8L,WAAAA,CAAYoN,cAAc,IAE3B5Z,KAAKrC,QAAAA,CAASyE,IAAAA,CACnB,CAACkZ,GAAGna,aACFoa,uJAAAA,CAAKlD,MAAAA,CAAOuB,eAAe3W,MAAAA,CAAO/C,IAAAA,EAAM;oBAACL;oBAAYsB,UAAU;iBAAC,KAChEoa,uJAAAA,CAAKlD,MAAAA,CAAOuB,eAAe3Z,KAAAA,CAAMC,IAAAA,EAAM;oBAACL;oBAAYsB,UAAU;iBAAC,CACnE,IAIAT,wJAAAA,CAAM8a,YAAAA,CAAa5B,gBAAgB;gBACjC3W,QAAQ;oBAAC/C;oBAAMiD,QAAQ;gBAAA;gBACvBlD,OAAO;oBAACC;oBAAMiD,QAAQ;gBAAA;YAAC,CACxB,KAAKzC,wJAAAA,CAAMoR,QAAAA,CAAS8H,gBAAgB1Z,IAAI,CAE5C;IACH;AACF;ACtZO,MAAMub,wBAAoBxS,8KAAAA,EAA0B,CAAA,CAAgB,GCmDrEjN,UAAQC,cAAc,oBAAoB,GA+CnCyf,2BAAuBC,2KAAAA,EAGlC,SAAAvgB,KAAAA,EAAAwgB,YAAAA,EAAA;IAAA,MAAAvgB,QAAAC,qKAAAA,EAAA,GAAA;IAAA,IAAAugB,SAAAC,eAAAC,QAAAC,SAAAC,QAAAC,OAAAC,QAAAC,WAAAC,aAAAC,aAAAC,YAAAC,aAAAC,QAAAC,SAAAC,SAAAC,gBAAA3D,kBAAA1H,kBAAAnE,aAAAY,aAAAwD,iBAAAhD,gBAAA0E,mBAAA5E,aAAAuO,WAAAC,yBAAA1N;IAAA/T,CAAAA,CAAAA,EAAAA,KAAAD,QAAAA,CACA,EAAAygB,OAAAA,EAAAE,MAAAA,EAAAW,OAAAA,EAAAZ,aAAAA,EAAAa,OAAAA,EAAAV,MAAAA,EAAAC,KAAAA,EAAAF,OAAAA,EAAAQ,WAAAA,EAAAL,MAAAA,EAAAC,SAAAA,EAAAC,WAAAA,EAAAE,UAAAA,EAAAE,MAAAA,EAAAH,WAAAA,EAAArD,gBAAAA,EAAA1H,gBAAAA,EAAAnE,WAAAA,EAAAY,WAAAA,EAAAwD,eAAAA,EAAAhD,cAAAA,EAAA0E,iBAAAA,EAAA5E,WAAAA,EAAAvO,WAAA6c,cAAAA,EAAAE,uBAAAA,EAAA1N,UAAAA,EAAA,GAAAyN,WAAAA,GA4BIzhB,OAAKC,CAAAA,CAAAA,EAAAA,GAAAD,OAAAC,CAAAA,CAAAA,EAAAA,GAAAwgB,SAAAxgB,CAAAA,CAAAA,EAAAA,GAAAygB,eAAAzgB,CAAAA,CAAAA,EAAAA,GAAA0gB,QAAA1gB,CAAAA,CAAAA,EAAAA,GAAA2gB,SAAA3gB,CAAAA,CAAAA,EAAAA,GAAA4gB,QAAA5gB,CAAAA,CAAAA,EAAAA,GAAA6gB,OAAA7gB,CAAAA,CAAAA,EAAAA,GAAA8gB,QAAA9gB,CAAAA,CAAAA,EAAAA,GAAA+gB,WAAA/gB,CAAAA,CAAAA,EAAAA,GAAAghB,aAAAhhB,CAAAA,CAAAA,GAAAA,GAAAihB,aAAAjhB,CAAAA,CAAAA,GAAAA,GAAAkhB,YAAAlhB,CAAAA,CAAAA,GAAAA,GAAAmhB,aAAAnhB,CAAAA,CAAAA,GAAAA,GAAAohB,QAAAphB,CAAAA,CAAAA,GAAAA,GAAAqhB,SAAArhB,CAAAA,CAAAA,GAAAA,GAAAshB,SAAAthB,CAAAA,CAAAA,GAAAA,GAAAuhB,gBAAAvhB,CAAAA,CAAAA,GAAAA,GAAA4d,kBAAA5d,CAAAA,CAAAA,GAAAA,GAAAkW,kBAAAlW,CAAAA,CAAAA,GAAAA,GAAA+R,aAAA/R,CAAAA,CAAAA,GAAAA,GAAA2S,aAAA3S,CAAAA,CAAAA,GAAAA,GAAAmW,iBAAAnW,CAAAA,CAAAA,GAAAA,GAAAmT,gBAAAnT,CAAAA,CAAAA,GAAAA,GAAA6X,mBAAA7X,CAAAA,CAAAA,GAAAA,GAAAiT,aAAAjT,CAAAA,CAAAA,GAAAA,GAAAwhB,WAAAxhB,CAAAA,CAAAA,GAAAA,GAAAyhB,yBAAAzhB,CAAAA,CAAAA,GAAAA,GAAA+T,UAAAA,IAAAA,CAAAyM,UAAAxgB,CAAAA,CAAA,CAAA,CAAA,EAAAygB,gBAAAzgB,CAAAA,CAAA,CAAA,CAAA,EAAA0gB,SAAA1gB,CAAAA,CAAA,CAAA,CAAA,EAAA2gB,UAAA3gB,CAAAA,CAAA,CAAA,CAAA,EAAA4gB,SAAA5gB,CAAAA,CAAA,CAAA,CAAA,EAAA6gB,QAAA7gB,CAAAA,CAAA,CAAA,CAAA,EAAA8gB,SAAA9gB,CAAAA,CAAA,CAAA,CAAA,EAAA+gB,YAAA/gB,CAAAA,CAAA,CAAA,CAAA,EAAAghB,cAAAhhB,CAAAA,CAAA,CAAA,CAAA,EAAAihB,cAAAjhB,CAAAA,CAAA,EAAA,CAAA,EAAAkhB,aAAAlhB,CAAAA,CAAA,EAAA,CAAA,EAAAmhB,cAAAnhB,CAAAA,CAAA,EAAA,CAAA,EAAAohB,SAAAphB,CAAAA,CAAA,EAAA,CAAA,EAAAqhB,UAAArhB,CAAAA,CAAA,EAAA,CAAA,EAAAshB,UAAAthB,CAAAA,CAAA,EAAA,CAAA,EAAAuhB,iBAAAvhB,CAAAA,CAAA,EAAA,CAAA,EAAA4d,mBAAA5d,CAAAA,CAAA,EAAA,CAAA,EAAAkW,mBAAAlW,CAAAA,CAAA,EAAA,CAAA,EAAA+R,cAAA/R,CAAAA,CAAA,EAAA,CAAA,EAAA2S,cAAA3S,CAAAA,CAAA,EAAA,CAAA,EAAAmW,kBAAAnW,CAAAA,CAAA,EAAA,CAAA,EAAAmT,iBAAAnT,CAAAA,CAAA,EAAA,CAAA,EAAA6X,oBAAA7X,CAAAA,CAAA,EAAA,CAAA,EAAAiT,cAAAjT,CAAAA,CAAA,EAAA,CAAA,EAAAwhB,YAAAxhB,CAAAA,CAAA,EAAA,CAAA,EAAAyhB,0BAAAzhB,CAAAA,CAAA,EAAA,CAAA,EAAA+T,aAAA/T,CAAAA,CAAA,EAAA,CAAA;IAET,MAAA8b,qBAA2B3D,sBAAAA,GAC3B,CAAAuJ,iBAAAC,kBAAA,CAAA,OAA8C7Q,yKAAAA,EAAAA,CAAAA,CAAc,GAE5D3I,kBAAoBkI,2KAAAA,EAAA1C,kBAA6B,GACjDiU,iBAAmBvR,2KAAAA,EAAA+P,iBAA4B,GAC/CvO,eAAiBoC,oMAAAA,EAAY9L,aAAW+L,KAExC,GACA9L,kBAAoByZ,oLAAAA,CAAAA;IAAU,IAAAzhB;IAAAJ,CAAAA,CAAAA,GAAAA,KAAA4d,mBAAAA,CAIRxd,gEAAAwd,mBAAgB,CAAA,CAAA,EAAM5d,CAAAA,CAAAA,GAAAA,GAAA4d,kBAAA5d,CAAAA,CAAAA,GAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAK;IAAAL,CAAAA,CAAAA,GAAAA,KAAAmI,cAAAA,CAEhC9H,KAAA8H,YAAWG,WAAAA,IAActI,CAAAA,CAAAA,GAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,GAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,EAAA,CAAA;IAEtB,MAAAsQ,KAAAA,CAACnI,YAAWG,WAAAA,CAAAA,EAAcC,OAAAA,CAAA;QAAAC,OAAiB;IAAA,CAAa;IAAC,IAAA+I;IAAAvR,CAAAA,CAAAA,GAAAA,KAAA6R,YAAA7R,CAAAA,CAAA,EAAA,CAAA,KAAAoI,eAAApI,CAAAA,CAAA,EAAA,CAAA,KAAAI,MAAAJ,CAAAA,CAAA,EAAA,CAAA,KAAAK,GAAAuI,OAAAA,CAAApC,MAAAA,IAAAxG,CAAAA,CAAA,EAAA,CAAA,KAAAsQ,KAAAA,CANLiB,KAAA;QAAA2L,OAAA;YAAAU,kBAE7Cxd;YAAsByR;YAAArL,QAEhCnG,GAAyBuI,OAAAA,CAAApC,MAAAA;YAAA4B;YAAAoX,WAEtBlP;QAAAA;IAAyD,GAEvEtQ,CAAAA,CAAAA,GAAAA,GAAA6R,UAAA7R,CAAAA,CAAAA,GAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,GAAAA,GAAAI,IAAAJ,CAAAA,CAAA,EAAA,CAAA,GAAAK,GAAAuI,OAAAA,CAAApC,MAAAA,EAAAxG,CAAAA,CAAAA,GAAAA,GAAAsQ,IAAAtQ,CAAAA,CAAAA,GAAAA,GAAAuR,EAAAA,IAAAA,KAAAvR,CAAAA,CAAA,EAAA,CAAA;IARD,MAAA8hB,4BAA8BC,oMAAAA,EAAAxE,yBAAqChM,EAQlE,GACDmN,eAAiBzK,oMAAAA,EACf6N,uBAAqB3N,MAEvB;IAAC,IAAAxC,IAAAC;IAAA5R,CAAAA,CAAA,EAAA,CAAA,KAAA8hB,yBAAA9hB,CAAAA,CAAAA,GAAAA,KAAA6R,WAAAA,CAESF,KAAAA,MAAA;QACRmQ,sBAAqBrR,IAAAA,CAAA;YAAAV,MACb;YAAkB8B;QAAAA,CAEzB;IAAC,GACDD,KAAA;QAACkQ;QAAuBjQ,QAAQ;KAAA,EAAC7R,CAAAA,CAAAA,GAAAA,GAAA8hB,uBAAA9hB,CAAAA,CAAAA,GAAAA,GAAA6R,UAAA7R,CAAAA,CAAAA,GAAAA,GAAA2R,IAAA3R,CAAAA,CAAAA,GAAAA,GAAA4R,EAAAA,IAAAA,CAAAD,KAAA3R,CAAAA,CAAA,EAAA,CAAA,EAAA4R,KAAA5R,CAAAA,CAAA,EAAA,CAAA,GALpCS,8KAAAA,EAAUkR,IAKPC,EAAiC;IAAC,IAAAE,IAAAE;IAAAhS,CAAAA,CAAA,EAAA,CAAA,KAAA4d,oBAAA5d,CAAAA,CAAAA,GAAAA,KAAA8hB,wBAAAA,CAE3BhQ,KAAAA,MAAA;QACRgQ,sBAAqBrR,IAAAA,CAAA;YAAAV,MACb;YAA2B6N,6EACfA,mBAAgB,CAAA,CAAA;QAAA,CACnC;IAAC,GACD5L,KAAA;QAAC8P;QAAuBlE,gBAAgB;KAAA,EAAC5d,CAAAA,CAAAA,GAAAA,GAAA4d,kBAAA5d,CAAAA,CAAAA,GAAAA,GAAA8hB,uBAAA9hB,CAAAA,CAAAA,GAAAA,GAAA8R,IAAA9R,CAAAA,CAAAA,GAAAA,GAAAgS,EAAAA,IAAAA,CAAAF,KAAA9R,CAAAA,CAAA,EAAA,CAAA,EAAAgS,KAAAhS,CAAAA,CAAA,EAAA,CAAA,OAL5CS,0KAAAA,EAAUqR,IAKPE,EAAyC;IAACgQ,KAAA;QAAA,IAOvCnQ,UACgB,MAAAmQ;QAEAnG,kBAClB1T,aACA2T,oBACA0E,OACF,EAEmBpY,WAAW;IAAC;IAAA,IAAA8J;IAAAlS,CAAAA,CAAAA,GAAAA,KAAA6R,YAAA7R,CAAAA,CAAA,EAAA,CAAA,KAAA+R,eAAA/R,CAAAA,CAAA,EAAA,CAAA,KAAA2S,eAAA3S,CAAAA,CAAA,EAAA,CAAA,KAAAmT,kBAAAnT,CAAAA,CAAAA,GAAAA,KAAAiT,eAAAjT,CAAAA,CAAA,EAAA,CAAA,KAAA+T,aAAAA,CAI/B7B,KAAA+P,CAAAA,SACE,aAAA,GAAA,IAAA,6KAAA,EAAC,eAAA;YAAA,GACKA,MAAAA;YACMpQ;YACGE;YACAY;YACGQ;YACHF;YACDc;QAAAA,CAAU,GAEzB/T,CAAAA,CAAAA,GAAAA,GAAA6R,UAAA7R,CAAAA,CAAAA,GAAAA,GAAA+R,aAAA/R,CAAAA,CAAAA,GAAAA,GAAA2S,aAAA3S,CAAAA,CAAAA,GAAAA,GAAAmT,gBAAAnT,CAAAA,CAAAA,GAAAA,GAAAiT,aAAAjT,CAAAA,CAAAA,GAAAA,GAAA+T,YAAA/T,CAAAA,CAAAA,GAAAA,GAAAkS,EAAAA,IAAAA,KAAAlS,CAAAA,CAAA,EAAA,CAAA;IAXH,MAAAkiB,gBAAsBhQ;IAoBrB,IAAAsB;IAAAxT,CAAAA,CAAA,EAAA,CAAA,KAAA6R,YAAA7R,CAAAA,CAAA,EAAA,CAAA,KAAAkW,oBAAAlW,CAAAA,CAAA,EAAA,CAAA,KAAA2S,eAAA3S,CAAAA,CAAA,EAAA,CAAA,KAAAmW,mBAAAnW,CAAAA,CAAAA,GAAAA,KAAA6X,oBAAAA,CAGCrE,MAAA2O,CAAAA,YAKE,aAAA,GAAA,IAAA,6KAAA,EAAC,YAAA;YAAU,GACLA,SAAAA;YACMtQ;YACQqE;YACLvD;YACIwD;YACE0B;QAAAA,CAAiB,GAEvC7X,CAAAA,CAAAA,GAAAA,GAAA6R,UAAA7R,CAAAA,CAAAA,GAAAA,GAAAkW,kBAAAlW,CAAAA,CAAAA,GAAAA,GAAA2S,aAAA3S,CAAAA,CAAAA,GAAAA,GAAAmW,iBAAAnW,CAAAA,CAAAA,GAAAA,GAAA6X,mBAAA7X,CAAAA,CAAAA,GAAAA,GAAAwT,GAAAA,IAAAA,MAAAxT,CAAAA,CAAA,EAAA,CAAA;IAdH,MAAAoiB,aAAmB5O,KAwBnB6O,aAAAC;IAGC,IAAA7O;IAAAzT,CAAAA,CAAA,EAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,GAAAA,KAAAuhB,kBAAAvhB,CAAAA,CAAA,EAAA,CAAA,KAAAoI,cAAAA,CAE6CqL,MAAAA,MAAA;QAAA,IACxC8N,gBAAc;YAChB5gB,QAAM,wBAAsD,CAAE,MAAhC4hB,KAAAC,SAAAA,CAAejB,cAAc,CAAC;YAC5D,MAAAkB,sBAA4BxW,mBAC1BsV,gBACAte,eACEmF,YAAW9F,QAAAA,EACX6F,YAAWG,WAAAA,CAAAA,EAAcM,OAAAA,CAAApC,MAAAA,CAAA5E,KAAAA,CAAAf,IAC3B,CACF;YAAC,IACG4hB,wBAAmB,MAAS;gBAC9B9hB,QACE,mCAAsE,CACxE,MADqC4hB,KAAAC,SAAAA,CAAeC,mBAAmB,CAAC;gBAExE,MAAA1E,aAAmBzS,aAAA;oBAAA1C,SAAA;wBAAApC,QAEP2B,YAAWG,WAAAA,CAAAA,EAAcM,OAAAA,CAAApC,MAAAA;wBAAApF,OAC1BgH,YAAWhH,KAAAA;wBAAAsD,WACP+d;oBAAAA;oBAAmB9V,eAEjBvE,YAAWuE,aAAAA;gBAAAA,CAC3B;gBACGoR,cAAAA,CACF2E,6JAAAA,CAAAC,MAAAA,CAAkBva,aAAa2V,UAAU,GAGpC3V,YAAWwa,UAAAA,CAAA7b,IAAAA,CAAA8b,MAAkD,KAChE1a,YAAWsI,IAAAA,CAAA;oBAAAV,MACH;oBAAkBrL,WACb+d;gBAAAA,CACZ,GAEHra,YAAW0a,QAAAA,EAAAA;YAAW;QAAA;IAAA,GAI7B9iB,CAAAA,CAAAA,GAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,GAAAA,GAAAuhB,gBAAAvhB,CAAAA,CAAAA,GAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,GAAAA,GAAAyT,GAAAA,IAAAA,MAAAzT,CAAAA,CAAA,EAAA,CAAA;IApCD,MAAA+iB,4BAAkCtP;IAoCY,IAAAC,KAAAC;IAAA3T,CAAAA,CAAA,EAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,GAAAA,KAAA8hB,yBAAA9hB,CAAAA,CAAA,EAAA,CAAA,KAAA+iB,4BAAAA,CAGpCrP,MAAAA,MAAA;QACR,MAAAsP,UAAgB7a,YAAW7H,EAAAA,CAAI,SAAO,MAAA;YACpCwhB,sBAAqBrR,IAAAA,CAAA;gBAAAV,MACb;YAAA,CACP,GAEDgT,0BAAAA;QAA2B,CAC5B,GAEDE,iBAAuB9a,YAAW7H,EAAAA,CAAI,iBAAe,MAAA;YACnDqhB,mBAAAA,CAAAA,CAAuB;QAAC,CACzB,GAEDuB,iBAAuB/a,YAAW7H,EAAAA,CAAI,iBAAe,MAAA;YACnDqhB,mBAAAA,CAAAA,CAAwB;QAAC,CAC1B;QAAC,OAAA,MAAA;YAGAqB,QAAOxiB,WAAAA,IACPyiB,eAAcziB,WAAAA,CAAAA,GACd0iB,eAAc1iB,WAAAA,CAAAA;QAAc;IAAA,GAE7BmT,MAAA;QAACmO;QAAuB3Z;QAAa4a,yBAAyB;KAAA,EAAC/iB,CAAAA,CAAAA,GAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,GAAAA,GAAA8hB,uBAAA9hB,CAAAA,CAAAA,GAAAA,GAAA+iB,2BAAA/iB,CAAAA,CAAAA,GAAAA,GAAA0T,KAAA1T,CAAAA,CAAAA,GAAAA,GAAA2T,GAAAA,IAAAA,CAAAD,MAAA1T,CAAAA,CAAA,EAAA,CAAA,EAAA2T,MAAA3T,CAAAA,CAAA,EAAA,CAAA,OAtBlES,0KAAAA,EAAUiT,KAsBPC,GAA+D;IAAC,IAAAC,KAAAC;IAAA7T,CAAAA,CAAA,EAAA,CAAA,KAAA0hB,mBAAA1hB,CAAAA,CAAAA,GAAAA,KAAAuhB,kBAAAvhB,CAAAA,CAAA,EAAA,CAAA,KAAA+iB,4BAAAA,CAGzDnP,MAAAA,MAAA;QACJ2N,kBAAAA,CAAmBG,mBACrBqB,0BAAAA;IAA2B,GAE5BlP,MAAA;QAAC6N;QAAiBH;QAAgBwB,yBAAyB;KAAA,EAAC/iB,CAAAA,CAAAA,GAAAA,GAAA0hB,iBAAA1hB,CAAAA,CAAAA,GAAAA,GAAAuhB,gBAAAvhB,CAAAA,CAAAA,GAAAA,GAAA+iB,2BAAA/iB,CAAAA,CAAAA,GAAAA,GAAA4T,KAAA5T,CAAAA,CAAAA,GAAAA,GAAA6T,GAAAA,IAAAA,CAAAD,MAAA5T,CAAAA,CAAA,EAAA,CAAA,EAAA6T,MAAA7T,CAAAA,CAAA,EAAA,CAAA,OAJ/DS,0KAAAA,EAAUmT,KAIPC,GAA4D;IAAC,IAAAC;IAAA9T,CAAAA,CAAA,EAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,GAAAA,KAAA4gB,UAAA5gB,CAAAA,CAAA,EAAA,CAAA,KAAAoI,cAAAA,CAI9D0L,MAAAzL,CAAAA,UAAA;QAAA,IACMuY,QACaA,OAAOvY,KAAK,MAEjB1E,KAAAA,KACR0E,MAAKmU,cAAAA,CAAAA;aAAAA,IAEEnU,MAAKkU,WAAAA,CAAA4G,aAAAA,EAAA;YAEd9a,MAAK+a,eAAAA,CAAAA,GACL/a,MAAKmU,cAAAA,CAAAA;YAEL,MAAA9X,YAAkB0D,YAAW1D,SAAAA,GACzB+C,sBAAA;gBAAAjB,QACU2B,YAAWG,WAAAA,CAAAA,EAAcM,OAAAA,CAAApC,MAAAA;gBAAAtG,QACzBkI;gBAAWV,OACZU,YAAW1D,SAAAA;YAAAA,CACnB,IAACf,KAAAA,GAENiH,WAAiBlG,YAAS;gBAAAA;YAAAA,IAAAf,KAAAA;YAA0B,IAAA,CAE/CiH,UAAQ;gBACXQ,QAAAC,IAAAA,CAAa,wCAAwC;gBAAC;YAAA;YAIxDlD,YAAWsI,IAAAA,CAAA;gBAAAV,MACH;gBAAgB2M,eAAA;oBAAA3M,MAEd;oBAAgBsT,aAAA;wBAAAC,cAENjb,MAAKkU,WAAAA,CAAA4G,aAAAA;oBAAAA;oBAAAvY;gBAAAA;gBAAA1K,QAIfkI;gBAAWmU,aACNlU;YAAAA,CACd;QAAC;IAAA,GAELrI,CAAAA,CAAAA,GAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,GAAAA,GAAA4gB,QAAA5gB,CAAAA,CAAAA,GAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,GAAAA,GAAA8T,GAAAA,IAAAA,MAAA9T,CAAAA,CAAA,EAAA,CAAA;IAxCH,MAAAujB,aAAmBzP;IA0ClB,IAAA0P;IAAAxjB,CAAAA,CAAA,EAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,GAAAA,KAAA6gB,SAAA7gB,CAAAA,CAAA,EAAA,CAAA,KAAAoI,cAAAA,CAGCob,MAAAC,CAAAA,YAAA;QAAA,IACM5C,OACaA,MAAMxY,OAAK,MAEhB1E,KAAAA,KACR0E,QAAKmU,cAAAA,CAAAA;aAAAA,IAEEnU,QAAKkU,WAAAA,CAAA4G,aAAAA,EAAA;YAEd9a,QAAK+a,eAAAA,CAAAA,GACL/a,QAAKmU,cAAAA,CAAAA;YAEL,MAAAkH,cAAkBvb,YAAWG,WAAAA,CAAAA,EAAcM,OAAAA,CAAAlE,SAAAA,EAC3Cif,aAAiBjf,cAAS;gBAAAA,WAAIA;YAAAA,IAASf,KAAAA;YAAa,IAAA,CAE/CiH,YAAQ;gBACXQ,QAAAC,IAAAA,CAAa,uCAAuC;gBAAC;YAAA;YAIvDlD,YAAWsI,IAAAA,CAAA;gBAAAV,MACH;gBAAgB2M,eAAA;oBAAA3M,MAEd;oBAAesT,aAAA;wBAAAC,cAELjb,QAAKkU,WAAAA,CAAA4G,aAAAA;oBAAAA;oBAAAvY,UAErBA;gBAAAA;gBAAQ1K,QAEFkI;gBAAWmU,aACNlU;YAAAA,CACd;QAAC;IAAA,GAELrI,CAAAA,CAAAA,GAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,GAAAA,GAAA6gB,OAAA7gB,CAAAA,CAAAA,GAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,GAAAA,GAAAwjB,GAAAA,IAAAA,MAAAxjB,CAAAA,CAAA,EAAA,CAAA;IAlCH,MAAA4jB,YAAkBJ;IAoCjB,IAAAK;IAAA7jB,CAAAA,CAAA,EAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAA,EAAA,CAAA,KAAAshB,WAAAthB,CAAAA,CAAA,EAAA,CAAA,KAAA8b,sBAAA9b,CAAAA,CAAA,EAAA,CAAA,KAAA4hB,cAAA5hB,CAAAA,CAAAA,GAAAA,KAAAoI,cAAAA,CAICyb,MAAAC,CAAAA,YAAA;YAaEjf;QAZA,MAAAzD,QAAc6B,eACZmF,YAAW9F,QAAAA,EACX6F,YAAWG,WAAAA,CAAAA,EAAcM,OAAAA,CAAApC,MAAAA,CAAA5E,KAAAA,CAAAf,IAAAA,EACzB4M,qBAAAb,GAAAA,CAAyBxE,WAAW,CACtC,GAQAvD,OAAAA,EAAAA,QAPgBuD,YAAW1D,SAAAA,GACvB+C,sBAAA;YAAAjB,QACU2B,YAAWG,WAAAA,CAAAA,EAAcM,OAAAA,CAAApC,MAAAA;YAAAtG,QACzBkI;YAAWV,OACZU,YAAW1D,SAAAA;QAAAA,CACnB,IAAC,kBAENG,4BAAAA,MAAoBD,KAAAA,CAAAC,IAAAA,KAAA,CAAA,CAAA,EACpBkf,kEAAsBzC,QAAO;YAAAjZ,OAC3BA;YAAKjH;YAAAyD;YAAArD,aAGQsa,mBAAkBta,WAAAA;QAAAA,CAAA;QAC/B,IAEEuiB,iBAAa,CAAK3b,YAAW1D,SAAAA,EAC/B2D,QAAKmU,cAAAA,CAAAA,GAGLoF,WAAUnR,IAAAA,CAAA;YAAAV,MAAa;QAAA,CAAU,GAEjCiU,QAAAC,OAAAA,CAAgBF,aAAa,EAACG,IAAAA,CAAAC,CAAAA,aAAA;YAEiC,IAA3DxjB,QAAM,8CAA8CyjB,QAAM,GAEtD,CAACA,YAAM,CAAKA,SAAMC,MAAAA,EAAO;gBAC3B1jB,QAAM,uDAAuD;gBAE7D,MAAA2jB,cAAkBnc,YAAWG,WAAAA,CAAAA,EAAcM,OAAAA,CAAAlE,SAAAA,EAC3C6f,aAAiB7f,cAAS;oBAAAA,WAAIA;gBAAAA,IAASf,KAAAA;gBAAa,IAAA,CAE/CiH,YAAQ;oBACXQ,QAAAC,IAAAA,CAAa,yCAAyC;oBAAC;gBAAA;gBAIzDlD,YAAWsI,IAAAA,CAAA;oBAAAV,MACH;oBAAgB2M,eAAA;wBAAA3M,MAEd;wBAAiBsT,aAAA;4BAAAC,cAEPjb,QAAK8a,aAAAA;wBAAAA;wBAAAvY,UAErBA;oBAAAA;oBAAQ1K,QAEFkI;oBAAWmU,aACNlU;gBAAAA,CACd;YAAC,OACO+b,SAAMC,MAAAA,GACflc,YAAWsI,IAAAA,CAAA;gBAAAV,MACH;gBAAgB2M,eAAA;oBAAA3M,MAEd;oBAAeyU,YACbC,6MAAAA,EAAA;wBAAA7b,SAAA;4BAAAwM,cAGFjN,YAAWG,WAAAA,CAAAA,EAAcM,OAAAA,CAAAwM,YAAAA;4BAAA5O,QACnB2B,YAAWG,WAAAA,CAAAA,EAAcM,OAAAA,CAAApC,MAAAA;wBAAAA;wBAAAge,QAE3BJ,SAAMC,MAAAA;wBAAAK,SAAA;4BAAAC,gBAAA,CAAA;wBAAA;oBAAA,CAIf;oBAACC,WACS;gBAAA;gBAAM1kB,QAEXkI;YAAAA,CACT,IAEDgD,QAAAC,IAAAA,CACE,wDACA+Y,QACF;QAAC,CAEJ,EAACS,KAAAA,CAAAC,MAKD,EAACC,OAAAA,CAAA,MAAA;YAEAnD,WAAUnR,IAAAA,CAAA;gBAAAV,MAAa;YAAA,CAAe;QAAC,CACxC;aAAA,IACM1H,QAAKkU,WAAAA,CAAA4G,aAAAA,EAAA;YAEd9a,QAAKmU,cAAAA,CAAAA,GACLnU,QAAK+a,eAAAA,CAAAA;YAEL,MAAA4B,cAAkB7c,YAAWG,WAAAA,CAAAA,EAAcM,OAAAA,CAAAlE,SAAAA,EAC3CugB,aAAiBvgB,cAAS;gBAAAA,WAAIA;YAAAA,IAASf,KAAAA;YAAa,IAAA,CAE/CiH,YAAQ;gBACXQ,QAAAC,IAAAA,CAAa,yCAAyC;gBAAC;YAAA;YAIzDlD,YAAWsI,IAAAA,CAAA;gBAAAV,MACH;gBAAgB2M,eAAA;oBAAA3M,MAEd;oBAAiBsT,aAAA;wBAAAC,cAEPjb,QAAKkU,WAAAA,CAAA4G,aAAAA;oBAAAA;oBAAAvY,UAErBA;gBAAAA;gBAAQ1K,QAEFkI;gBAAWmU,aACNlU;YAAAA,CACd;QAAC;QAGJ1H,QAAM,uDAAuD;IAAC,GAC/DX,CAAAA,CAAAA,GAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,GAAAA,GAAAshB,SAAAthB,CAAAA,CAAAA,GAAAA,GAAA8b,oBAAA9b,CAAAA,CAAAA,GAAAA,GAAA4hB,YAAA5hB,CAAAA,CAAAA,GAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,GAAAA,GAAA6jB,GAAAA,IAAAA,MAAA7jB,CAAAA,CAAA,EAAA,CAAA;IAtHH,MAAAklB,cAAoBrB;IAwHnB,IAAAsB;IAAAnlB,CAAAA,CAAA,EAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAA,EAAA,CAAA,KAAAqhB,WAAArhB,CAAAA,CAAA,EAAA,CAAA,KAAA4hB,cAAA5hB,CAAAA,CAAAA,GAAAA,KAAAoI,cAAAA,CAGC+c,MAAAC,CAAAA,YAAA;QACM/D,WACFA,QAAQhZ,OAAK,GAGVA,QAAKgd,kBAAAA,CAAAA,KAAAA,CACRzD,WAAUnR,IAAAA,CAAA;YAAAV,MAAa;YAAS1H,OAAEA;QAAAA,CAAM,GAGtC,CAACD,YAAW1D,SAAAA,IACZhB,qBACE0E,YAAW9F,QAAAA,EACX6F,YAAWG,WAAAA,GAAcM,OAAAA,CAAApC,MAC3B,KAAA,CAEAkc,6JAAAA,CAAAC,MAAAA,CAAkBva,aAAajE,yJAAAA,CAAAmB,KAAAA,CAAa8C,aAAW,CAAA,CAAI,CAAC,GAC5DA,YAAW0a,QAAAA,CAAAA,CAAAA,CAAAA;IAAW,GAG3B9iB,CAAAA,CAAAA,GAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,GAAAA,GAAAqhB,SAAArhB,CAAAA,CAAAA,GAAAA,GAAA4hB,YAAA5hB,CAAAA,CAAAA,GAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,GAAAA,GAAAmlB,GAAAA,IAAAA,MAAAnlB,CAAAA,CAAA,EAAA,CAAA;IApBH,MAAAslB,gBAAyDH;IAsBxD,IAAAI;IAAAvlB,CAAAA,CAAA,EAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,GAAAA,KAAA2gB,WAAA3gB,CAAAA,CAAA,EAAA,CAAA,KAAAoI,cAAAA,CAGCmd,MAAAC,CAAAA,YAAA;QAEkB,IADZ7E,WACFA,QAAQtY,OAAK,GAGXA,QAAKgd,kBAAAA,CAAAA,KAAyBhd,QAAKod,oBAAAA,CAAAA,GAAuB;QAI9D,MAAAC,aAAiBxd,iBAAA;YAAAC;YAAAC;YAAAC,OAGRA,QAAKkU,WAAAA;QAAAA,CACb;QAEG3R,cACFzC,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAgB2M,eAAA;gBAAA3M,MAEd;gBAAanF,UACnBA;YAAAA;YAAQ1K,QAEFkI;YAAWmU,aACNlU;QAAAA,CACd;IAAC,GAELrI,CAAAA,CAAAA,GAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,GAAAA,GAAA2gB,SAAA3gB,CAAAA,CAAAA,GAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,GAAAA,GAAAulB,GAAAA,IAAAA,MAAAvlB,CAAAA,CAAA,EAAA,CAAA;IA3BH,MAAA2lB,cAAoBJ;IA6BnB,IAAAK;IAAA5lB,CAAAA,CAAA,EAAA,CAAA,KAAA0gB,UAAA1gB,CAAAA,CAAAA,GAAAA,KAAA4hB,aAAAA,CAGCgE,MAAAC,CAAAA,YAAA;QACMnF,UACFA,OAAOrY,OAAK,GAETA,QAAKod,oBAAAA,CAAAA,KACR7D,WAAUnR,IAAAA,CAAA;YAAAV,MAAa;YAAS1H,OAAEA;QAAAA,CAAM;IAAC,GAE5CrI,CAAAA,CAAAA,GAAAA,GAAA0gB,QAAA1gB,CAAAA,CAAAA,GAAAA,GAAA4hB,YAAA5hB,CAAAA,CAAAA,GAAAA,GAAA4lB,GAAAA,IAAAA,MAAA5lB,CAAAA,CAAA,EAAA,CAAA;IARH,MAAA8lB,eAAwDF;IAUvD,IAAAG;IAAA/lB,CAAAA,CAAAA,GAAAA,KAAAygB,gBAAAA,CAGCsF,MAAAC,CAAAA,YAAA;QACMvF,iBACFA,cAAcpY,OAAK;IAAC,GAEvBrI,CAAAA,CAAAA,GAAAA,GAAAygB,eAAAzgB,CAAAA,CAAAA,IAAAA,GAAA+lB,GAAAA,IAAAA,MAAA/lB,CAAAA,CAAA,GAAA,CAAA;IALH,MAAAimB,sBAA4BF;IAO3B,IAAAG;IAAAlmB,CAAAA,CAAA,GAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,IAAAA,KAAAD,SAAAC,CAAAA,CAAA,GAAA,CAAA,KAAAoI,cAAAA,CAGC8d,MAAAC,CAAAA,YAAA;QACMpmB,MAAKqmB,SAAAA,IACPrmB,MAAKqmB,SAAAA,CAAW/d,OAAK,GAElBA,QAAKgd,kBAAAA,CAAAA,KACRjd,YAAW8T,cAAAA,CAAgB7T,OAAK,GAE7BA,QAAKgd,kBAAAA,CAAAA,KACRld,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAgB2M,eAAA;gBAAA3M,MAEd;gBAAkBsT,aAAA;oBAAA/T,KAEjBjH,QAAKiH,GAAAA;oBAAAgM,MACJjT,QAAKiT,IAAAA;oBAAAf,QACHlS,QAAKkS,MAAAA;oBAAAC,SACJnS,QAAKmS,OAAAA;oBAAAC,SACLpS,QAAKoS,OAAAA;oBAAAC,UACJrS,QAAKqS,QAAAA;gBAAAA;YAAA;YAAAxa,QAGXkI;YAAWmU,aACNlU;QAAAA,CACd;IAAC,GAELrI,CAAAA,CAAAA,IAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,IAAAA,GAAAD,OAAAC,CAAAA,CAAAA,IAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,IAAAA,GAAAkmB,GAAAA,IAAAA,MAAAlmB,CAAAA,CAAA,GAAA,CAAA;IA1BH,MAAAqmB,gBAAsBH;IA4BrB,IAAAI;IAAAtmB,CAAAA,CAAA,GAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,IAAAA,KAAAD,SAAAC,CAAAA,CAAA,GAAA,CAAA,KAAAoI,cAAAA,CAGCke,MAAAC,CAAAA,YAAA;QACMxmB,MAAKymB,OAAAA,IACPzmB,MAAKymB,OAAAA,CAASne,OAAK,GAEhBA,QAAKgd,kBAAAA,CAAAA,KACRld,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAgB2M,eAAA;gBAAA3M,MAEd;gBAAgBsT,aAAA;oBAAA/T,KAEfjH,QAAKiH,GAAAA;oBAAAgM,MACJjT,QAAKiT,IAAAA;oBAAAf,QACHlS,QAAKkS,MAAAA;oBAAAC,SACJnS,QAAKmS,OAAAA;oBAAAC,SACLpS,QAAKoS,OAAAA;oBAAAC,UACJrS,QAAKqS,QAAAA;gBAAAA;YAAA;YAAAxa,QAGXkI;YAAWmU,aACNlU;QAAAA,CACd;IAAC,GAELrI,CAAAA,CAAAA,IAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,IAAAA,GAAAD,OAAAC,CAAAA,CAAAA,IAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,IAAAA,GAAAsmB,GAAAA,IAAAA,MAAAtmB,CAAAA,CAAA,GAAA,CAAA;IAvBH,MAAAymB,cAAoBH;IAyBnB,IAAAI;IAAAC,KAAA;QAAA,IAIKlF,4BAAuB9d,KAAAA,GAAc;YACvC+iB,MAAA/iB,KAAAA;YAAgB,MAAAgjB;QAAA;QAAA,IAGdlF,4BAAuB,MAAS;YAClCiF,MAAAE,4IAAAA;YAAW,MAAAD;QAAA;QAAA,IAAAE;QAAA7mB,CAAAA,CAAA,GAAA,CAAA,KAAA8b,sBAAA9b,CAAAA,CAAAA,IAAAA,KAAAyhB,0BAAAA,CAGNoF,OAAAA,CAAAC,SAAArc,aAAA;YACLgX,wBAAwB3F,oBAAoBrR,QAAQ;QAAC,GACtDzK,CAAAA,CAAAA,IAAAA,GAAA8b,oBAAA9b,CAAAA,CAAAA,IAAAA,GAAAyhB,yBAAAzhB,CAAAA,CAAAA,IAAAA,GAAA6mB,IAAAA,IAAAA,OAAA7mB,CAAAA,CAAA,GAAA,CAAA,EAFD0mB,MAAOG;IAEN;IAZH,MAAAE,iCAAuCL;IAaU,IAAAG,KAAAG;IAAAhnB,CAAAA,CAAA,GAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,IAAAA,KAAAoI,cAAAA,CAEvCye,MAAAA,MAAA;QACR,MAAAtc,UAAe0c,uLAAAA,CAAAzc,SAAAA,CAAsBpC,WAAW,GAEhD8e,cAAAA,MAAA;YACE/e,YAAWsI,IAAAA,CAAA;gBAAAV,MAAa;YAAA,CAAU;QAAC,GAErCoX,WAAAA,MAAA;YACEhf,YAAWsI,IAAAA,CAAA;gBAAAV,MAAa;YAAA,CAAO;QAAC;QAGlCxF,OAAAA,QAAMG,QAAAA,CAAA0c,gBAAAA,CAA2B,WAAWrG,WAAS,GACrDxW,QAAMG,QAAAA,CAAA0c,gBAAAA,CAA2B,QAAQhG,QAAM,GAAC,MAAA;YAG9C7W,QAAMG,QAAAA,CAAA2c,mBAAAA,CAA8B,WAAWtG,WAAS,GACxDxW,QAAMG,QAAAA,CAAA2c,mBAAAA,CAA8B,QAAQjG,QAAM;QAAC;IAAA,GAEpD4F,MAAA;QAAC5e;QAAaD,WAAW;KAAA,EAACnI,CAAAA,CAAAA,IAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,IAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,IAAAA,GAAA6mB,KAAA7mB,CAAAA,CAAAA,IAAAA,GAAAgnB,GAAAA,IAAAA,CAAAH,MAAA7mB,CAAAA,CAAA,GAAA,CAAA,EAAAgnB,MAAAhnB,CAAAA,CAAA,GAAA,CAAA,OAjB7BS,0KAAAA,EAAUomB,KAiBPG,GAA0B;IAAC,IAAAM;IAAAtnB,CAAAA,CAAA,GAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,IAAAA,KAAAmhB,eAAAnhB,CAAAA,CAAA,GAAA,CAAA,KAAAoI,cAAAA,CAG5Bkf,MAAAC,CAAAA,YAAA;QACqB,8DAAnBpG,YAAc9Y,OAAK,GAEfA,QAAKgd,kBAAAA,CAAAA,KAAyBhd,QAAKod,oBAAAA,CAAAA,GAAuB;QAI9D,MAAA+B,aAAiBtf,iBAAA;YAAAC;YAAAC;YAAAC,OAGRA,QAAKkU,WAAAA;QAAAA,CACb;QAAC,IAAA,CAEG3R,YAAQ;YACXQ,QAAAC,IAAAA,CAAa,6CAA6C;YAAC;QAAA;QAI7DlD,OAAAA,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAWoO,QACTvT;QAAAA,CACT,GAEDzC,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAgB2M,eAAA;gBAAA3M,MAEd;gBAAgBsT,aAAA;oBAAAxY,SAEXxC,QAAKwC,OAAAA;oBAAAC,SACLzC,QAAKyC,OAAAA;oBAAAwY,cACAjb,QAAKib,YAAAA;gBAAAA;gBAAA1Y,UAErBA;YAAAA;YAAQ1K,QAEFkI;QAAAA,CACT,GAAC,CAAA;IAAA,GAIHpI,CAAAA,CAAAA,IAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,IAAAA,GAAAmhB,aAAAnhB,CAAAA,CAAAA,IAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,IAAAA,GAAAsnB,GAAAA,IAAAA,MAAAtnB,CAAAA,CAAA,GAAA,CAAA;IAxCH,MAAAynB,kBAAwBH;IA0CvB,IAAAI;IAAA1nB,CAAAA,CAAA,GAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,IAAAA,KAAA8gB,UAAA9gB,CAAAA,CAAA,GAAA,CAAA,KAAAoI,cAAAA,CAGCsf,MAAAC,CAAAA,YAAA;QAWI,IAVF7G,uDAASzY,OAAK,GAEVA,CAAAA,CAAAA,QAAKgd,kBAAAA,CAAAA,KAAyBhd,QAAKod,oBAAAA,MAQrC,CAJevd,iBAAA;YAAAC;YAAAC;YAAAC,OAGRA,QAAKkU,WAAAA;QAAAA,CACb,CAAA,GAMDpU,OAAAA,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAgB2M,eAAA;gBAAA3M,MAEd;gBAAWsT,aAAA;oBAAAC,cAEDjb,QAAKib,YAAAA;gBAAAA;YAAA;YAAApjB,QAGfkI;QAAAA,CACT,GAAC,CAAA;IAAA,GAIHpI,CAAAA,CAAAA,IAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,IAAAA,GAAA8gB,QAAA9gB,CAAAA,CAAAA,IAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,IAAAA,GAAA0nB,GAAAA,IAAAA,MAAA1nB,CAAAA,CAAA,GAAA,CAAA;IA/BH,MAAA4nB,aAAmBF;IAiClB,IAAAG;IAAA7nB,CAAAA,CAAA,GAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,IAAAA,KAAA+gB,aAAA/gB,CAAAA,CAAA,GAAA,CAAA,KAAAoI,cAAAA,CAGCyf,MAAAC,CAAAA,aAAA;QACmB,0DAAjB/G,UAAY1Y,QAAK,GAEbA,CAAAA,CAAAA,SAAKgd,kBAAAA,MAAyBhd,SAAKod,oBAAAA,EAAAA,GAIvCtd,OAAAA,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAgB2M,eAAA;gBAAA3M,MAEd;gBAAcsT,aAAA;oBAAAC,cAEJjb,SAAKib,YAAAA;gBAAAA;YAAA;YAAApjB,QAGfkI;QAAAA,CACT,GAAC,CAAA;IAAA,GAIHpI,CAAAA,CAAAA,IAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,IAAAA,GAAA+gB,WAAA/gB,CAAAA,CAAAA,IAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,IAAAA,GAAA6nB,GAAAA,IAAAA,MAAA7nB,CAAAA,CAAA,GAAA,CAAA;IArBH,MAAA+nB,gBAAsBF;IAuBrB,IAAAG;IAAAhoB,CAAAA,CAAA,GAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,IAAAA,KAAAghB,eAAAhhB,CAAAA,CAAA,GAAA,CAAA,KAAAoI,cAAAA,CAGC4f,MAAAC,CAAAA,aAAA;QACqB,4BAAnBjH,8CAAc3Y,QAAK,GAEfA,SAAKgd,kBAAAA,CAAAA,KAAyBhd,SAAKod,oBAAAA,CAAAA,GAAuB;QAI9D,MAAAyC,aAAiBhgB,iBAAA;YAAAC;YAAAC;YAAAC,OAGRA,SAAKkU,WAAAA;QAAAA,CACb;QAAC,IAEG3R,YAILzC,OAAAA,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAgB2M,eAAA;gBAAA3M,MAEd;gBAAgBsT,aAAA;oBAAAC,cAENjb,SAAKib,YAAAA;gBAAAA;gBAAA1Y,UAErBA;YAAAA;YAAQ1K,QAEFkI;QAAAA,CACT,GAAC,CAAA;IAAA,GAIHpI,CAAAA,CAAAA,IAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,IAAAA,GAAAghB,aAAAhhB,CAAAA,CAAAA,IAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,IAAAA,GAAAgoB,GAAAA,IAAAA,MAAAhoB,CAAAA,CAAA,GAAA,CAAA;IAhCH,MAAAmoB,kBAAwBH;IAkCvB,IAAAI;IAAApoB,CAAAA,CAAA,GAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,IAAAA,KAAAkhB,cAAAlhB,CAAAA,CAAA,GAAA,CAAA,KAAAoI,cAAAA,CAGCggB,MAAAC,CAAAA,aAAA;YAwBkBlgB;QAvBE,2BAAlB+Y,4CAAa7Y,QAAK,GAEdA,SAAKgd,kBAAAA,CAAAA,KAAyBhd,SAAKod,oBAAAA,CAAAA,GAAuB;QAI9D,MAAA6C,aAAiBpgB,iBAAA;YAAAC;YAAAC;YAAAC,OAGRA,SAAKkU,WAAAA;QAAAA,CACb;QAAC,IAEG3R,YAILzC,OAAAA,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAgB2M,eAAA;gBAAA3M,MAEd;gBAAesT,aAAA;oBAAAC,cAELjb,SAAKib,YAAAA;gBAAAA;gBAAA1T,UAAAA,+DAEEtH,WAAAA,CAAAA,EAAcM,OAAAA,CAAA2f,YAAAA,gIAAApK,MAAAA;gBAAAvT,UACrCA;YAAAA;YAAQ1K,QAEFkI;YAAWmU,aACNlU;QAAAA,CACd,GAAC,CAAA;IAAA,GAIHrI,CAAAA,CAAAA,IAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,IAAAA,GAAAkhB,YAAAlhB,CAAAA,CAAAA,IAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,IAAAA,GAAAooB,GAAAA,IAAAA,MAAApoB,CAAAA,CAAA,GAAA,CAAA;IAlCH,MAAAwoB,iBAAuBJ;IAoCtB,IAAAK;IAAAzoB,CAAAA,CAAA,GAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,IAAAA,KAAAohB,UAAAphB,CAAAA,CAAA,GAAA,CAAA,KAAAoI,cAAAA,CAGCqgB,MAAAC,CAAAA,aAAA;YAyBkBvgB;QAxBF,uBAAdiZ,oCAAS/Y,QAAK,GAEVA,SAAKgd,kBAAAA,CAAAA,KAAyBhd,SAAKod,oBAAAA,CAAAA,GAAuB;QAI9D,MAAAkD,aAAiBzgB,iBAAA;YAAAC;YAAAC;YAAAC,OAGRA,SAAKkU,WAAAA;QAAAA,CACb;QAAC,IAAA,CAEG3R,YAAQ;YACXQ,QAAAC,IAAAA,CAAa,wCAAwC;YAAC;QAAA;QAIxDlD,OAAAA,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAgB2M,eAAA;gBAAA3M,MAEd;gBAAWsT,aAAA;oBAAAC,cAEDjb,SAAKib,YAAAA;gBAAAA;gBAAA1T,UAAAA,+DAEEtH,WAAAA,CAAAA,EAAcM,OAAAA,CAAA2f,YAAAA,gIAAApK,MAAAA;gBAAAvT,UACrCA;YAAAA;YAAQ1K,QAEFkI;YAAWmU,aACNlU;QAAAA,CACd,GAAC,CAAA;IAAA,GAIHrI,CAAAA,CAAAA,IAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,IAAAA,GAAAohB,QAAAphB,CAAAA,CAAAA,IAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,IAAAA,GAAAyoB,GAAAA,IAAAA,MAAAzoB,CAAAA,CAAA,GAAA,CAAA;IAnCH,MAAA4oB,aAAmBH;IAqClB,IAAAI;IAAA7oB,CAAAA,CAAA,GAAA,CAAA,KAAAmI,eAAAnI,CAAAA,CAAAA,IAAAA,KAAAihB,eAAAjhB,CAAAA,CAAA,GAAA,CAAA,KAAAoI,cAAAA,CAGCygB,MAAAC,CAAAA,aAAA;QAWI,8DAVF7H,YAAc5Y,QAAK,GAEfA,CAAAA,CAAAA,SAAKgd,kBAAAA,CAAAA,KAAyBhd,SAAKod,oBAAAA,MAQrC,CAJevd,iBAAA;YAAAC;YAAAC;YAAAC,OAGRA,SAAKkU,WAAAA;QAAAA,CACb,CAAA,GAMDpU,OAAAA,YAAWsI,IAAAA,CAAA;YAAAV,MACH;YAAgB2M,eAAA;gBAAA3M,MAEd;gBAAgBsT,aAAA;oBAAAC,cAENjb,SAAKib,YAAAA;gBAAAA;YAAA;YAAApjB,QAGfkI;QAAAA,CACT,GAAC,CAAA;IAAA,GAIHpI,CAAAA,CAAAA,IAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,IAAAA,GAAAihB,aAAAjhB,CAAAA,CAAAA,IAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,IAAAA,GAAA6oB,GAAAA,IAAAA,MAAA7oB,CAAAA,CAAA,GAAA,CAAA;IA/BH,MAAA+oB,kBAAwBF;IAiCvB,IAAAG;IAAAhpB,CAAAA,CAAA,GAAA,CAAA,KAAAugB,gBAAAvgB,CAAAA,CAAAA,IAAAA,KAAAoI,cAAAA,CAGC4gB,MAAArkB,CAAAA,SAAA;QAI+B,IAHzB,OAAO4b,gBAAiB,aAC1BA,aAAa5b,IAAI,IACR4b,gBAAAA,CACTA,aAAY0I,OAAAA,GAAWtkB,IAAAA,GAGrBA,MAAI;YAGN,MAAAukB,mBAAAA,IAAAC,iBAAA,MAAA;gBACEC,kBAAkBhhB,aAAazD,IAAI;YAAC,CAAA;YAGtCukB,OAAAA,iBAAgBG,OAAAA,CAAS1kB,MAAI;gBAAA2kB,mBAAA,CAAA;gBAAAnX,YAAA,CAAA;gBAAAoX,eAAA,CAAA;gBAAAC,WAAA,CAAA;gBAAAC,SAAA,CAAA;YAAA,CAM5B,GAAC,MAAA;gBAGAP,iBAAgBQ,UAAAA,CAAAA;YAAa;QAAA;IAAA,GAGlC1pB,CAAAA,CAAAA,IAAAA,GAAAugB,cAAAvgB,CAAAA,CAAAA,IAAAA,GAAAoI,aAAApI,CAAAA,CAAAA,IAAAA,GAAAgpB,GAAAA,IAAAA,MAAAhpB,CAAAA,CAAA,GAAA,CAAA;IA3BH,MAAA2pB,cAAoBX;IA6BnB,IAAA,CAEIlN,oBAAkB,OAAA;IAAA,IAAA8N;IAAA,OAAA5pB,CAAAA,CAAAA,IAAAA,KAAA2pB,eAAA3pB,CAAAA,CAAA,GAAA,CAAA,KAAA0e,YAAA1e,CAAAA,CAAA,GAAA,CAAA,KAAA2lB,eAAA3lB,CAAAA,CAAAA,IAAAA,KAAAujB,cAAAvjB,CAAAA,CAAA,GAAA,CAAA,KAAA4jB,aAAA5jB,CAAAA,CAAA,GAAA,CAAA,KAAA4nB,cAAA5nB,CAAAA,CAAAA,IAAAA,KAAA+nB,iBAAA/nB,CAAAA,CAAA,GAAA,CAAA,KAAAmoB,mBAAAnoB,CAAAA,CAAA,GAAA,CAAA,KAAA+oB,mBAAA/oB,CAAAA,CAAAA,IAAAA,KAAAwoB,kBAAAxoB,CAAAA,CAAA,GAAA,CAAA,KAAAynB,mBAAAznB,CAAAA,CAAA,GAAA,CAAA,KAAA4oB,cAAA5oB,CAAAA,CAAA,GAAA,CAAA,KAAAqmB,iBAAArmB,CAAAA,CAAAA,IAAAA,KAAAymB,eAAAzmB,CAAAA,CAAA,GAAA,CAAA,KAAAimB,uBAAAjmB,CAAAA,CAAA,GAAA,CAAA,KAAA8lB,gBAAA9lB,CAAAA,CAAAA,IAAAA,KAAAslB,iBAAAtlB,CAAAA,CAAA,GAAA,CAAA,KAAAklB,eAAAllB,CAAAA,CAAA,GAAA,CAAA,KAAA0hB,mBAAA1hB,CAAAA,CAAAA,IAAAA,KAAA6R,YAAA7R,CAAAA,CAAA,GAAA,CAAA,KAAAkiB,iBAAAliB,CAAAA,CAAA,GAAA,CAAA,KAAAoiB,cAAApiB,CAAAA,CAAAA,IAAAA,KAAAwhB,aAAAxhB,CAAAA,CAAA,GAAA,CAAA,KAAA+mB,iCAAAA,CAIhB6C,MAAAlI,kBAAe,OACpB,aAAA,GAAA,IAAA,6KAAA,EAACmI,oLAAAA,EAAA;QAAa,GACRrI,SAAAA;QACCmI,KAAAA;QACW9X,kBAAAA;QACL,WAAA,CAAA;QACA,WAAA2P,UAASsI,SAAAA,IAAc;QACxBpL;QACFoH,QAAAA;QACAvC,QAAAA;QACDK,OAAAA;QACE+B,SAAAA;QACSM,kBAAAA;QACLwB,aAAAA;QACLG,QAAAA;QACGG,WAAAA;QACEI,aAAAA;QACDK,YAAAA;QACJI,QAAAA;QACKG,aAAAA;QACJzD,SAAAA;QACEe,WAAAA;QACFI,SAAAA;QACAvB,SAAAA;QACCrT;QAGSlO,mBAAAA,KAAAA;QACJue;QACHE;QACAC;QACa0E,yBAAAA;IAAAA,CAA8B,GAE1D/mB,CAAAA,CAAAA,IAAAA,GAAA2pB,aAAA3pB,CAAAA,CAAAA,IAAAA,GAAA0e,UAAA1e,CAAAA,CAAAA,IAAAA,GAAA2lB,aAAA3lB,CAAAA,CAAAA,IAAAA,GAAAujB,YAAAvjB,CAAAA,CAAAA,IAAAA,GAAA4jB,WAAA5jB,CAAAA,CAAAA,IAAAA,GAAA4nB,YAAA5nB,CAAAA,CAAAA,IAAAA,GAAA+nB,eAAA/nB,CAAAA,CAAAA,IAAAA,GAAAmoB,iBAAAnoB,CAAAA,CAAAA,IAAAA,GAAA+oB,iBAAA/oB,CAAAA,CAAAA,IAAAA,GAAAwoB,gBAAAxoB,CAAAA,CAAAA,IAAAA,GAAAynB,iBAAAznB,CAAAA,CAAAA,IAAAA,GAAA4oB,YAAA5oB,CAAAA,CAAAA,IAAAA,GAAAqmB,eAAArmB,CAAAA,CAAAA,IAAAA,GAAAymB,aAAAzmB,CAAAA,CAAAA,IAAAA,GAAAimB,qBAAAjmB,CAAAA,CAAAA,IAAAA,GAAA8lB,cAAA9lB,CAAAA,CAAAA,IAAAA,GAAAslB,eAAAtlB,CAAAA,CAAAA,IAAAA,GAAAklB,aAAAllB,CAAAA,CAAAA,IAAAA,GAAA0hB,iBAAA1hB,CAAAA,CAAAA,IAAAA,GAAA6R,UAAA7R,CAAAA,CAAAA,IAAAA,GAAAkiB,eAAAliB,CAAAA,CAAAA,IAAAA,GAAAoiB,YAAApiB,CAAAA,CAAAA,IAAAA,GAAAwhB,WAAAxhB,CAAAA,CAAAA,IAAAA,GAAA+mB,gCAAA/mB,CAAAA,CAAAA,IAAAA,GAAA4pB,GAAAA,IAAAA,MAAA5pB,CAAAA,CAAA,GAAA,CAAA,EAjCM4pB;AAiCN,CACF;AAEDvJ,qBAAqB0J,WAAAA,GAAc;AAkBnC,SAASX,kBAAkBhhB,WAAAA,EAAqB4hB,aAAAA,EAA+B;IAC7E,IAAI,CAAC5hB,YAAY1D,SAAAA,EACf;IAGF,IAAIulB;IAEJ,IAAI;QACFA,OAAOhD,uLAAAA,CAAYiD,wBAAAA,CAAyB9hB,WAAW;IACzD,EAAA,UAAQ,CAAC;IAQT,IANI,CAAC6hB,QAMDD,kBAAkBC,KAAKD,aAAAA,EACzB;IAGF,MAAMG,eADSlD,uLAAAA,CAAYzc,SAAAA,CAAUpC,WAAW,EACpBgiB,YAAAA,CAAAA;IAC5B,IAAI,CAACD,gBAAgBA,aAAaE,UAAAA,KAAe,GAC/C;IAEF,MAAMC,mBAAmBH,aAAaI,UAAAA,CAAW,CAAC;IAClD,IAAI;QACF,MAAMC,cAAcvD,uLAAAA,CAAYwD,UAAAA,CAC9BriB,aACAA,YAAY1D,SACd;QACA,CACE8lB,YAAYE,WAAAA,KAAgBJ,iBAAiBI,WAAAA,IAC7CF,YAAYG,SAAAA,KAAcL,iBAAiBK,SAAAA,KAAAA,CAE3ChqB,QAAM,6CAA6C,+DAEnDwpB,aAAcS,eAAAA,CAAAA,GAEdT,aAAaU,QAAAA,CAASL,WAAW,CAAA;IAErC,EAAA,UAAQ;QACN7pB,QAAM,qDAAqD,GAE3D+hB,6JAAAA,CAAWoI,QAAAA,CAAS1iB,WAAW,GAE3BA,YAAY9F,QAAAA,CAASsB,MAAAA,GAAS,KAChC8e,6JAAAA,CAAWC,MAAAA,CAAOva,aAAa;YAAC;YAAG,CAAC;SAAC,GAEvCA,YAAY0a,QAAAA,CAAAA;IACd;AACF;AA58BE,SAAA5O,MAAAI,CAAAA,EAAA;IAAA,OAqCEA,EAAC/L,OAAAA,CAAA;QAAA,aAAuB;IAAA,CAAY;AAAC;AArCvC,SAAA4L,OAAAE,GAAAA,EAAA;;IAAA,oCAoDUzL,OAAAA,CAAA8V,QAAAA,0DAADpK,sBAACqK,EAAAA;AAAA;AApDV,SAAA2D,OAAAyI,OAAAA,EAAA;IAAA,OAqI8B,aAAA,GAAA,IAAA,6KAAA,EAAC,YAAA;QAAU,GAAKhrB,OAAAA;IAAAA,CAAK;AAAI;AArIvD,SAAA8iB,OAAAmI,CAAAA,EAAA;IAAA,OAmKgDA,EAACjb,IAAAA,KAAU;AAAe;AAnK1E,SAAA+U,OAAApT,KAAAA,EAAA;IAsXUtG,OAAAA,QAAAC,IAAAA,CAAaqG,KAAK,GAEXA;AAAK;ACzdxB,MAAMuZ,eAAeA,CACnBC,UACAC,aACG;IACHA,SAASD,QAAQ;IACjB,MAAM5oB,WAAW4oB,SAAS5iB,WAAAA,CAAAA,EAAchG,QAAAA;IACpCA,YACF6Z,OAAOiP,MAAAA,CAAO9oB,QAAQ,EAAE+Z,OAAAA,CAAS9Z,CAAAA,UAAU;QACzC0oB,aAAa1oB,OAAsB4oB,QAAQ;IAC7C,CAAC;AAEL;AAEO,SAASE,UAAUH,QAAAA,EAAuB;QAcxBA;IATvB,MAAMI,qBAA8D,CAAA,CAAA;IACpEL,aAAaC,UAAWK,CAAAA,QAAQ;QAC9BD,mBAAmBrjB,IAAAA,CAAK;YAACsjB;YAAKA,IAAIjjB,WAAAA,EAAa;SAAC,GAK9CijB,IAAYC,SAAAA,GAAY,aAAA,GAAA,IAAIC,IAAAA;IAChC,CAAC;IACD,MAAMC,8EAA0BC,MAAAA,EAAOrjB,WAAAA,GAAAA;IAEvC4iB,SAASU,IAAAA,CAAAA,GACPV,SAASS,MAAAA,CAAeE,SAAAA,GAAYH,gBACtCJ,mBAAmBjP,OAAAA,CAAQ;YAAC,CAACkP,KAAKnf,QAAQ,CAAA,KAAM;QAC5Cmf,IAAYO,iBAAAA,GAAoB,GAChCP,IAAYM,SAAAA,GAAYzf;IAC5B,CAAC;AACH;ACxCO,MAAM2f,gBAAgC;IAC3CC,UAAU;IACVC,WAAWA;YAAC,EAAC7f,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAChC,MAAM6jB,wBAAwB9f,SAASxD,OAAAA,CAAQuM,UAAAA,CAAWrJ,IAAAA,CACvDqgB,CAAAA,YAAcA,UAAUH,QAAAA,KAAa,6BACxC;QAEA,OAAKE,wBAcE;YACL,GANyBA,sBAAsBD,SAAAA,CAAU;gBACzD7f;gBACA/D;YAAAA,CACD,CAAA;YAIC2jB,UAAU;YACV3I,aAAahb,MAAMgb,WAAAA;QAAAA,IAhBZ;YACLtT,MAAM;YACNic,UAAU;YACV3I,aAAahb,MAAMgb,WAAAA;YACnB+I,QAAQ;QAAA;IAcd;IACAC,aAAaA;YAAC,EAACjgB,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAClC,MAAM6jB,wBAAwB9f,SAASxD,OAAAA,CAAQuM,UAAAA,CAAWrJ,IAAAA,CACvDqgB,CAAAA,YAAcA,UAAUH,QAAAA,KAAa,6BACxC;QAEA,OAAKE,wBAaE;YACL,GAN2BA,sBAAsBG,WAAAA,CAAY;gBAC7DjgB;gBACA/D;YAAAA,CACD,CAAA;YAIC2jB,UAAU;QAAA,IAdH;YACLjc,MAAM;YACNic,UAAU;YACVI,QAAQ;QAAA;IAad;AACF,GChDaE,wBAAwC;IACnDN,UAAU;IACVC,WAAWA;YAAC,EAAC7f,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAGhC,IAAI,CAFc+D,SAASxD,OAAAA,CAAQlE,SAAAA,EAGjC,OAAO;YACLqL,MAAM;YACNic,UAAU;YACV3I,aAAahb,MAAMgb,WAAAA;YACnB+I,QAAQ;QAAA;QAIZ,MAAM5H,aAAS/V,kOAAAA,EAA2BrC,QAAQ;QAElD,OAAIoY,OAAO5gB,MAAAA,KAAW,IACb;YACLmM,MAAM;YACNic,UAAU;YACVI,QAAQ;YACR/I,aAAahb,MAAMgb,WAAAA;QAAAA,IAIhB;YACLtT,MAAM;YACNwc,MAAMhK,KAAKC,SAAAA,CAAUgC,MAAM;YAC3BwH,UAAU;YACV3I,aAAahb,MAAMgb,WAAAA;QAAAA;IAEvB;IACAgJ,aAAaA;YAAC,EAACjgB,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAClC,MAAMmc,SAASjC,KAAKiK,KAAAA,CAAMnkB,MAAMkkB,IAAI;QAEpC,IAAI,CAAC9qB,MAAMC,OAAAA,CAAQ8iB,MAAM,GACvB,OAAO;YACLzU,MAAM;YACNic,UAAU;YACVI,QAAQ;QAAA;QAIZ,MAAMK,eAAejI,OAAO9N,OAAAA,CAAS9U,CAAAA,UAAU;YAC7C,MAAM8qB,kBAAcC,4MAAAA,EAAW;gBAC7B/jB,SAASwD,SAASxD,OAAAA;gBAClBhH;gBACA8iB,SAAS;oBACPC,gBAAgB,CAAA;gBAAA;YAClB,CACD;YACD,OAAO+H,cAAc;gBAACA,WAAW;aAAA,GAAI,CAAA,CAAA;QACvC,CAAC;QAED,OAAID,aAAa7oB,MAAAA,KAAW,KAAK4gB,OAAO5gB,MAAAA,GAAS,IACxC;YACLmM,MAAM;YACNic,UAAU;YACVI,QAAQ;QAAA,IAIL;YACLrc,MAAM;YACNwc,MAAME;YACNT,UAAU;QAAA;IAEd;AACF;AChEO,SAASY,wBACdtb,YAAAA,EACA;IACA,OAAuB;QACrB0a,UAAU;QACVC,WAAWA;gBAAC,EAAC7f,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAGhC,IAAI,CAFc+D,SAASxD,OAAAA,CAAQlE,SAAAA,EAGjC,OAAO;gBACLqL,MAAM;gBACNic,UAAU;gBACV3I,aAAahb,MAAMgb,WAAAA;gBACnB+I,QAAQ;YAAA;YAIZ,MAAM5H,aAAS/V,kOAAAA,EAA2BrC,QAAQ,GAE5CygB,WAAOC,sLAAAA,EAAOtI,QAAQ;gBAC1BuI,oBAAoB,CAAA;gBACpBC,YAAY;oBACVC,aAAaA;4BAAC,EAAC3qB,QAAAA,EAAAA;+BACbA,aAAaqB,KAAAA,IAAY,GAAW,OAARrB,QAAQ,IAAK;;gBAAA;YAC7C,CACD;YAED,OAAIuqB,SAAS,KACJ;gBACL9c,MAAM;gBACNic,UAAU;gBACV3I,aAAahb,MAAMgb,WAAAA;gBACnB+I,QAAQ;YAAA,IAIL;gBACLrc,MAAM;gBACNwc,MAAMM;gBACNb,UAAU;gBACV3I,aAAahb,MAAMgb,WAAAA;YAAAA;QAEvB;QACAgJ,aAAaA;gBAAC,EAACjgB,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAOlC,MAAMokB,eANSS,uLAAAA,EAAa7kB,MAAMkkB,IAAAA,EAAMjb,aAAa6b,YAAAA,EAAc;gBACjE/X,cAAchJ,SAASxD,OAAAA,CAAQwM,YAAAA;gBAC/BgY,gCACE9b,aAAa1P,KAAAA,CAAM8iB,OAAAA,CAAQ0I,8BAAAA;YAAAA,CAC9B,EAE2B1W,OAAAA,CAAS9U,CAAAA,UAAU;gBAC7C,MAAM8qB,kBAAcC,4MAAAA,EAAW;oBAC7B/jB,SAASwD,SAASxD,OAAAA;oBAClBhH;oBACA8iB,SAAS;wBACPC,gBAAgB,CAAA;oBAAA;gBAClB,CACD;gBACD,OAAO+H,cAAc;oBAACA,WAAW;iBAAA,GAAI,CAAA,CAAA;YACvC,CAAC;YAED,OAAID,aAAa7oB,MAAAA,KAAW,IACnB;gBACLmM,MAAM;gBACNic,UAAU;gBACVI,QAAQ;YAAA,IAIL;gBACLrc,MAAM;gBACNwc,MAAME;gBACNT,UAAU;YAAA;QAEd;IAAA;AAEJ;AC5EO,SAASqB,yBACd/b,YAAAA,EACA;IACA,OAAuB;QACrB0a,UAAU;QACVC,WAAWA;gBAAC,EAAC7f,QAAAA,EAAU/D,KAAAA,EAAAA;mBACH+D,SAASxD,OAAAA,CAAQlE,SAAAA,GA6C5B;gBACLqL,MAAM;gBACNwc,UApCa9d,kOAAAA,EAA2BrC,QAAQ,EAG/CzK,GAAAA,CAAKC,CAAAA;;;+BACAqD,2KAAAA,EAAYmH,SAASxD,OAAAA,EAAShH,KAAK,IAC9BA,MAAMU,QAAAA,CACVX,GAAAA,CAAKY,CAAAA;;4BAOE6J;+BANF7J,MAAMV,KAAAA,KAAUuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO6Q,IAAAA,CAAKxW,IAAAA,GACxC0B,MAAMI,IAAAA,GAGR0F,MAAMgb,WAAAA,KAAgB,mBACzB,IAIsB,oHAHXza,OAAAA,CAAQpC,MAAAA,CAAO+L,aAAAA,CAAczG,IAAAA,CACnCwhB,CAAAA,mBACCA,iBAAiBzsB,IAAAA,KAAS0B,MAAMV,KACpC,6HAAG0rB,KAAAA,iIAAS,QAAQ,EAAA,OAEtB,EACL;uBACAxpB,IAAAA,CAAK,EAAE,IAGLsE,MAAMgb,WAAAA,KAAgB,mBACzB,IAGsB,yGAFpBjX,SAASxD,OAAAA,CAAQpC,MAAAA,CAAOS,YAAAA,CAAa6E,IAAAA,CAClC0hB,CAAAA,kBAAoBA,gBAAgB3sB,IAAAA,KAASe,MAAMC,KACtD,2HAAG0rB,KAAAA,+HAAS,QAAQ,EAAA,OAEtB,EACL;mBACAhX,MAAAA,CAAQ3U,CAAAA,QAAUA,UAAU,EAAE,EAC9BmC,IAAAA,CAAK;gBAKNioB,UAAU;gBACV3I,aAAahb,MAAMgb,WAAAA;YAAAA,IA9CZ;gBACLtT,MAAM;gBACNic,UAAU;gBACV3I,aAAahb,MAAMgb,WAAAA;gBACnB+I,QAAQ;YAAA;;QA6CdC,aAAaA;gBAAC,EAACjgB,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAUlC,MAAMolB,aAAa,eAAmB,OATzBC,WAAWrlB,MAAMkkB,IAAI,EAC/B1R,KAAAA,CAAM,QAAQ,EACdlZ,GAAAA,CAAKgsB,CAAAA,OACJA,OACI,MAA8C,OAAxCA,KAAK/S,OAAAA,CAAQ,mBAAmB,OAAO,CAAC,EAAA,UAC9C,SACN,EACC7W,IAAAA,CAAK,EAAE,CAE4B,EAAA,mBAMhC0oB,mBAJSS,mLAAAA,EAAaO,YAAYnc,aAAa6b,YAAAA,EAAc;gBACjE/X,cAAchJ,SAASxD,OAAAA,CAAQwM,YAAAA;YAAAA,CAChC,EAE2BsB,OAAAA,CAAS9U,CAAAA,UAAU;gBAC7C,MAAM8qB,kBAAcC,4MAAAA,EAAW;oBAC7B/jB,SAASwD,SAASxD,OAAAA;oBAClBhH;oBACA8iB,SAAS;wBACPC,gBAAgB,CAAA;oBAAA;gBAClB,CACD;gBACD,OAAO+H,cAAc;oBAACA,WAAW;iBAAA,GAAI,CAAA,CAAA;YACvC,CAAC;YAED,OAAID,aAAa7oB,MAAAA,KAAW,IACnB;gBACLmM,MAAM;gBACNic,UAAU;gBACVI,QAAQ;YAAA,IAIL;gBACLrc,MAAM;gBACNwc,MAAME;gBACNT,UAAU;YAAA;QAEd;IAAA;AAEJ;AAEA,MAAM4B,YAAoC;IACxC,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;AACP;AAEA,SAASF,WAAWG,GAAAA,EAAa;IAC/B,OAAOC,OAAOD,GAAG,EAAEjT,OAAAA,CAAQ,eAAgBtG,CAAAA,IAAcsZ,SAAAA,CAAUtZ,CAAC,CAAC;AACvE;ACrHO,SAASyZ,qBACdzc,YAAAA,EACA;IACA,OAAO;QACLya;QACAO;QACAM,wBAAwBtb,YAAY;QACpC+b,yBAAyB/b,YAAY,CAAC;KAAA;AAE1C;ACbO,SAAS0c,YAAYC,OAAAA,EAAc;IACxC,OAAOC,gLAAAA,CAAOC,OAAAA,CAAQ;QACpBttB,MAAM;QACN2c,OAAO;YAACyQ,OAAO;SAAA;IAAA,CAChB,EAAErhB,GAAAA,CAAIqhB,QAAQptB,IAAI;AACrB;ACFA,MAAMutB,iBAAAA,aAAAA,GAAAA,IAAqBC,IAAAA;AAKpB,SAASC,eACd1lB,OAAAA,EACA,KAMA;UALE+D,aAAAA,EACAoG,YAAAA,EAIF,EACM;IACNpG,cAAc4hB,KAAAA,IACdxb,aAAawb,KAAAA,CAAAA,GACbH,eAAeG,KAAAA,CAAAA;IAEf,IAAIC;IAOJ,IAAA,IAAShqB,aAAa,GAAGA,aAAaoE,QAAQxH,KAAAA,CAAMwC,MAAAA,EAAQY,aAAc;QACxE,MAAM5C,QAAQgH,QAAQxH,KAAAA,CAAMiD,EAAAA,CAAGG,UAAU;QAEzC,IAAI5C,UAAU+B,KAAAA,GACZ;QAMF,IAHAgJ,cAAc8hB,GAAAA,CAAI7sB,MAAMP,IAAAA,EAAMmD,UAAU,GAGpC,KAACS,2KAAAA,EAAY2D,SAAShH,KAAK,GAAG;YAChCwsB,eAAeG,KAAAA,IACfC,mBAAmB7qB,KAAAA;YAEnB;QACF;QAGA,IAAI/B,MAAMwF,QAAAA,KAAazD,KAAAA,KAAa/B,MAAM2R,KAAAA,KAAU5P,KAAAA,GAAW;YAC7DyqB,eAAeG,KAAAA,IACfC,mBAAmB7qB,KAAAA;YAEnB;QACF;QAIA,IAAI,CAAC6qB,kBAAkB;;YAErB,MAAME,uDACW9hB,GAAAA,CAAIhL,MAAMwF,QAAQ,gDAAjCgnB,sBAAiC,aAAA,GAAA,IAASC,IAAAA;YAC5CK,eAAcD,GAAAA,CAAI7sB,MAAM2R,KAAAA,EAAOP,CAAS,GACxCob,eAAeK,GAAAA,CAAI7sB,MAAMwF,QAAAA,EAAUsnB,cAAa,GAEhD3b,aAAa0b,GAAAA,CAAI7sB,MAAMP,IAAAA,EAAM2R,CAAS,GAEtCwb,mBAAmB;gBACjBpnB,UAAUxF,MAAMwF,QAAAA;gBAChBmM,OAAO3R,MAAM2R,KAAAA;YAAAA;YAGf;QACF;QAIA,IACEib,iBAAiBpnB,QAAAA,KAAaxF,MAAMwF,QAAAA,IACpConB,iBAAiBjb,KAAAA,GAAQ3R,MAAM2R,KAAAA,EAC/B;gBAGE6a;YADF,MAAMM,wDACW9hB,GAAAA,CAAIhL,MAAMwF,QAAQ,wEAAA,aAAA,GAAA,IAASinB,IAAAA;YAC5CK,eAAcD,GAAAA,CAAI7sB,MAAM2R,KAAAA,EAAOP,CAAS,GACxCob,eAAeK,GAAAA,CAAI7sB,MAAMwF,QAAAA,EAAUsnB,cAAa,GAEhD3b,aAAa0b,GAAAA,CAAI7sB,MAAMP,IAAAA,EAAM2R,CAAS,GAEtCwb,mBAAmB;gBACjBpnB,UAAUxF,MAAMwF,QAAAA;gBAChBmM,OAAO3R,MAAM2R,KAAAA;YAAAA;YAGf;QACF;QAGA6a,eAAe/R,OAAAA,CAAQ,CAACqS,gBAAetnB,aAAa;YAClD,IAAIA,aAAaxF,MAAMwF,QAAAA,EACrB;YAIF,MAAMunB,iBAA2B,CAAA,CAAA;YAEjCD,eAAcrS,OAAAA,CAAQ,CAAC4D,GAAG1M,UAAU;gBAC9BA,SAAS3R,MAAM2R,KAAAA,IACjBob,eAAe1mB,IAAAA,CAAKsL,KAAK;YAE7B,CAAC,GAEDob,eAAetS,OAAAA,CAAS9I,CAAAA,UAAU;gBAChCmb,eAAcE,MAAAA,CAAOrb,KAAK;YAC5B,CAAC;QACH,CAAC;kCAIoBmb;QAFrB,MAAMA,uDACW9hB,GAAAA,CAAIhL,MAAMwF,QAAQ,iDAAjCgnB,uBAAsC,aAAA,GAAA,IAAIC,IAAAA,GACtCQ,mDAA6BjiB,GAAAA,CAAIhL,MAAM2R,KAAK,oEAAK;QACvDmb,cAAcD,GAAAA,CAAI7sB,MAAM2R,KAAAA,EAAOsb,eAAe,CAAC,GAC/CT,eAAeK,GAAAA,CAAI7sB,MAAMwF,QAAAA,EAAUsnB,aAAa,GAEhD3b,aAAa0b,GAAAA,CAAI7sB,MAAMP,IAAAA,EAAMwtB,eAAe,CAAC,GAE7CL,mBAAmB;YACjBpnB,UAAUxF,MAAMwF,QAAAA;YAChBmM,OAAO3R,MAAM2R,KAAAA;QAAAA;IAEjB;AACF;AC/HO,SAASub,uBACdlmB,OAAAA,EACA;;IACA,OAAO;QACL/G,OAAO+G,QAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;QAC5BQ,MAAMuH,QAAQwM,YAAAA,CAAAA;QACdlT,+CAAesE,MAAAA,CAAOxD,MAAAA,CAAO,CAAC,CAAA,CAAEnC,IAAAA,wDAAzB+H,+BAAiC;QACxCxG,UAAU,CAAA,CAAA;QACVE,UAAU;YACR;gBACET,OAAO+G,QAAQpC,MAAAA,CAAO6Q,IAAAA,CAAKxW,IAAAA;gBAC3BQ,MAAMuH,QAAQwM,YAAAA,CAAAA;gBACdzS,MAAM;gBACNC,OAAO,CAAA,CAAA;YAAA,CACR;SAAA;IAAA;AAGP;AChBO,SAASmsB,qBAQhB,EAAiC;QARD,EAC9B7uB,MAAAA,EACA+D,SAAAA,EACA+qB,QAAAA,EAKF;IACE,IAAIC;IAEJ,KAAA,MAAW,CAAC1sB,OAAO0K,SAAS,CAAA,IAAKjH,uJAAAA,CAAK1D,QAAAA,CAASpC,QAAQ+D,WAAW;QAChEirB,SAAS,CAAA;IAAA,CACV,EACC,IAAKhvB,OAAOgF,UAAAA,CAAW3C,KAAK,KAIxB2d,uJAAAA,CAAKiP,QAAAA,CAASliB,WAAW+hB,QAAQ,GAAG;QACtCC,eAAe1sB;QACf;IACF;IAGF,OAAO0sB;AACT;AAEO,SAASG,iBAQhB;UAPElvB,MAAAA,EACA+D,SAAAA,EACA+qB,QAAAA,EAKF,EAAiC,CARL;IAS1B,IAAIK;IAEJ,KAAA,MAAW,CAAC9sB,OAAO0K,SAAS,CAAA,IAAKjH,uJAAAA,CAAK1D,QAAAA,CAASpC,QAAQ+D,SAAS,EAC9D,IAAK/D,OAAOgF,UAAAA,CAAW3C,KAAK,KAIxB2d,uJAAAA,CAAKoP,OAAAA,CAAQriB,WAAW+hB,QAAQ,GAAG;QACrCK,WAAW9sB;QACX;IACF;IAGF,OAAO8sB;AACT;ACnDO,SAASE,kBAAkBrvB,MAAAA,EAAgBye,EAAAA,EAAsB;IACtE,MAAM6Q,OAAOC,mBAAmBvvB,MAAM,KAAK,CAAA;IAC3CoN,6BAA6BmhB,GAAAA,CAAIvuB,QAAQ,CAAA,CAAI,GAC7Cye,MACArR,6BAA6BmhB,GAAAA,CAAIvuB,QAAQsvB,IAAI;AAC/C;AAEO,SAASC,mBAAmBvvB,MAAAA,EAAqC;IACtE,OAAOoN,6BAA6BV,GAAAA,CAAI1M,MAAM;AAChD;ACVA,MAAMwvB,YAAkD,aAAA,GAAA,IAAIniB,QAAAA,GACtDoiB,aAAAA,aAAAA,GAAAA,IAAuDpiB,QAAAA;AAEtD,SAASqiB,YAAY1vB,MAAAA,EAAgBye,EAAAA,EAAgB;IAC1D,MAAM6Q,OAAOK,UAAU3vB,MAAM;IAC7BwvB,UAAUjB,GAAAA,CAAIvuB,QAAQ,CAAA,CAAI,GAC1Bye,MACA+Q,UAAUjB,GAAAA,CAAIvuB,QAAQsvB,IAAI;AAC5B;AAEO,SAASK,UAAU3vB,MAAAA,EAAgB;QACjCwvB;IAAP,mCAAiB9iB,GAAAA,CAAI1M,MAAM,4DAAK,CAAA;AAClC;AAEO,SAAS4vB,aAAa5vB,MAAAA,EAAgB2vB,UAAAA,EAAoB;IAC/DH,UAAUjB,GAAAA,CAAIvuB,QAAQ2vB,UAAS;AACjC;AAEO,SAASE,YAAY7vB,MAAAA,EAAgBye,EAAAA,EAAgB;IAC1D,MAAM6Q,OAAOQ,UAAU9vB,MAAM;IAC7ByvB,WAAWlB,GAAAA,CAAIvuB,QAAQ,CAAA,CAAI,GAC3Bye,MACAgR,WAAWlB,GAAAA,CAAIvuB,QAAQsvB,IAAI;AAC7B;AAEO,SAASQ,UAAU9vB,MAAAA,EAAgB;;IACxC,0BAAOyvB,WAAW/iB,GAAAA,CAAI1M,MAAM,8DAAK,CAAA;AACnC;AAEO,SAAS+vB,aAAa/vB,MAAAA,EAAgB8vB,UAAAA,EAAoB;IAC/DL,WAAWlB,GAAAA,CAAIvuB,QAAQ8vB,UAAS;AAClC;ACZA,MAAMrvB,UAAQC,cAAc,kCAAkC;AAEvD,SAASsvB,gCACd/nB,WAAAA,EAC8D;IAC9D,OAAO,SAAmCjI,MAAAA,EAAiC;QACzE,MAAM,EAACmd,OAAAA,MAAAA,EAAO8S,aAAAA,EAAAA,GAAiBjwB,QACzBmW,aAAalO,YAChBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAAW1U,GAAAA,CAAK4B,CAAAA,IAAMA,EAAE1C,IAAI;QAG9CX,OAAAA,OAAOiwB,aAAAA,GAAiBC,CAAAA,cAAc;YACpC,MAAM,CAACzrB,MAAME,IAAI,CAAA,GAAIurB;YAErB,IAAIlwB,OAAO+E,WAAAA,CAAYN,IAAI,GAAG;gBAC5B,MAAMrC,WAAW0D,uJAAAA,CAAK1D,QAAAA,CAASpC,QAAQ2E,IAAI;gBAE3C,KAAA,MAAW,CAACtC,OAAO0K,SAAS,CAAA,IAAK3K,SAAU;wBAMvCC;oBALF,MAAM8tB,WAAW1rB,KAAKrC,QAAAA,CAAS2K,SAAAA,CAAU,CAAC,CAAA,GAAI,CAAC,CAAA;oBAE/C,IACE/M,OAAOgF,UAAAA,CAAW3C,KAAK,KACvBrC,OAAOgF,UAAAA,CAAWmrB,QAAQ,4BACpBztB,KAAAA,8DAAO0E,KAAAA,CAAOkP,CAAAA;;gCAAS6Z,2BAASztB,KAAAA,oEAAO6T,QAAAA,CAASD,IAAI,CAAC;6BAC3D6Z,2BAASztB,KAAAA,oEAAO0E,KAAAA,CAAOkP,CAAAA;;qDAAe5T,KAAAA,iDAANL,aAAakU,QAAAA,CAASD,IAAI,CAAC;yBAC3D;wBACA7V,QACE,iBACA4hB,KAAKC,SAAAA,CAAUjgB,OAAO,MAAM,CAAC,GAC7BggB,KAAKC,SAAAA,CAAU6N,UAAU,MAAM,CAAC,CAClC,GACAloB,YAAYsI,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAc,GACtC2S,6JAAAA,CAAW4N,UAAAA,CAAWpwB,QAAQ;4BAC5BmE,IAAI;gCAAC4I,SAAAA,CAAU,CAAC,CAAA;gCAAGA,SAAAA,CAAU,CAAC,CAAA,GAAI,CAAC;6BAAA;4BACnCsjB,OAAO,CAAA;wBAAA,CACR,GACDpoB,YAAYsI,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAmB;wBAC3C;oBACF;gBACF;YACF;YAKA,IAAI7P,OAAO+E,WAAAA,CAAYN,IAAI,KAAK,CAAClD,MAAMC,OAAAA,CAAQiD,KAAKvC,QAAQ,GAAG;gBAC7DzB,QAAM,gCAAgC,GACtCwH,YAAYsI,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAc,GACtC2S,6JAAAA,CAAW8N,QAAAA,CAAStwB,QAAQ;oBAACkC,UAAU,CAAA,CAAA;gBAAA,GAAK;oBAACiC,IAAIQ;gBAAAA,CAAK,GACtDsD,YAAYsI,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAmB;gBAC3C;YACF;YAKA,IAAI7P,OAAOgF,UAAAA,CAAWP,IAAI,KAAK,CAAClD,MAAMC,OAAAA,CAAQiD,KAAK/B,KAAK,GAAG;gBACzDjC,QAAM,4BAA4B,GAClCwH,YAAYsI,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAc,GACtC2S,6JAAAA,CAAW8N,QAAAA,CAAStwB,QAAQ;oBAAC0C,OAAO,CAAA,CAAA;gBAAA,GAAK;oBAACyB,IAAIQ;gBAAAA,CAAK,GACnDsD,YAAYsI,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAmB;gBAC3C;YACF;YAKA,IAAI7P,OAAOgF,UAAAA,CAAWP,IAAI,GAAG;oBAMPA;gBALpB,MAAMV,YAAYic,uJAAAA,CAAKrZ,MAAAA,CAAOhC,IAAI,GAC5B,CAACjD,KAAK,CAAA,GAAIuC,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQ+D,SAAS,GACvCoS,cAAalO,YAChBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAAW1U,GAAAA,CAAK2V,CAAAA,YAAcA,UAAUzW,IAAI,GACxDsW,kCAAmBvU,KAAAA,4DAAO2T,MAAAA,CAC7BC,CAAAA,OAAS,CAACH,YAAWI,QAAAA,CAASD,IAAI,CACrC;gBAEA,IAAItW,OAAO+E,WAAAA,CAAYrD,KAAK,KACtB+C,KAAKhC,IAAAA,KAAS,MAAMwU,eAAeA,YAAYvT,MAAAA,GAAS,GAAG;wBAKnDe;oBAJVhE,QAAM,2CAA2C,GACjDwH,YAAYsI,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAc,GACtC2S,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;wBAAC0C,KAAAA,uBAAYA,KAAAA,8DAAO2T,MAAAA,CAAQC,CAAAA,OAASH,YAAWI,QAAAA,CAASD,IAAI,CAAC;oBAAA,GAC9D;wBAACnS,IAAIQ;oBAAAA,CACP,GACAsD,YAAYsI,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAmB;oBAC3C;gBACF;YAEJ;YAKA,IAAI7P,OAAO+E,WAAAA,CAAYN,IAAI,GAAG;gBAC5B,MAAM0R,cAAalO,YAChBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAAW1U,GAAAA,CAAK2V,CAAAA,YAAcA,UAAUzW,IAAI;gBAE9D,KAAA,MAAW,CAAC0B,OAAO0K,SAAS,CAAA,IAAKjH,uJAAAA,CAAK1D,QAAAA,CAASpC,QAAQ2E,IAAI,EACzD,IAAI3E,OAAOgF,UAAAA,CAAW3C,KAAK,GAAG;;oBAC5B,MAAMK,QAAQL,uBAAMK,KAAAA,yDAAS,CAAA,CAAA,EACvB6tB,sBAAsB7tB,MAAM2T,MAAAA,CAAQC,CAAAA;4BAGrC7R;+BADD,CAAC0R,YAAWI,QAAAA,CAASD,IAAI,KACzB,yBAAMpU,QAAAA,kEAAU0J,IAAAA,CAAM4kB,CAAAA,MAAQA,IAAIrvB,IAAAA,KAASmV,IAAI,CAElD;;oBAED,IAAIia,oBAAoB7sB,MAAAA,GAAS,GAAG;wBAClCjD,QAAM,8CAA8C,GACpDwH,YAAYsI,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAc,GACtC2S,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;4BACE0C,OAAOA,MAAM2T,MAAAA,CACVC,CAAAA,OAAS,CAACia,oBAAoBha,QAAAA,CAASD,IAAI,CAC9C;wBAAA,GAEF;4BAACnS,IAAI4I;wBAAAA,CACP,GACA9E,YAAYsI,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAmB;wBAC3C;oBACF;gBACF;YAEJ;YAKA,IAAI7P,OAAOgF,UAAAA,CAAWP,IAAI,GAAG;gBAC3B,MAAMV,YAAYic,uJAAAA,CAAKrZ,MAAAA,CAAOhC,IAAI,GAC5B,CAACjD,KAAK,CAAA,GAAIuC,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQ+D,SAAS;gBAE7C,IAAI/D,OAAO+E,WAAAA,CAAYrD,KAAK,GAAG;wBAIf+C;oBAHd,MAAM0R,cAAalO,YAChBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAAW1U,GAAAA,CAAK2V,CAAAA,YAAcA,UAAUzW,IAAI,GACxD+B,6BAAaA,KAAAA,uDAAS,CAAA,CAAA,EACtB6tB,sBAAsB7tB,MAAM2T,MAAAA,CAAQC,CAAAA;;+BAEtC,CAACH,YAAWI,QAAAA,CAASD,IAAI,KACzB,2BAAOpU,QAAAA,oDAANR,gBAAgBkK,IAAAA,CAAM4kB,CAAAA,MAAQA,IAAIrvB,IAAAA,KAASmV,IAAI,CAEnD;;oBAED,IAAIia,oBAAoB7sB,MAAAA,GAAS,GAAG;wBAClCjD,QAAM,8CAA8C,GACpDwH,YAAYsI,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAc,GACtC2S,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;4BACE0C,OAAOA,MAAM2T,MAAAA,CACVC,CAAAA,OAAS,CAACia,oBAAoBha,QAAAA,CAASD,IAAI,CAC9C;wBAAA,GAEF;4BAACnS,IAAIQ;wBAAAA,CACP,GACAsD,YAAYsI,IAAAA,CAAK;4BAACV,MAAM;wBAAA,CAAmB;wBAC3C;oBACF;gBACF;YACF;YAGA,IAAI7P,OAAO+E,WAAAA,CAAYN,IAAI,GAAG;;gBAC5B,MAAMvC,kCAAgBA,QAAAA,0CAALuC,iBAAiB,CAAA,CAAA,EAC5BgsB,cAAc,aAAA,GAAA,IAAIlF,OAClBmF,cAAyC,CAAA,CAAA;gBAE/C,KAAA,MAAW/Z,WAAWzU,SACfuuB,YAAYE,GAAAA,CAAIha,QAAQxV,IAAI,KAAA,CAC/BsvB,YAAY7X,GAAAA,CAAIjC,QAAQxV,IAAI,GAC5BuvB,YAAY3oB,IAAAA,CAAK4O,OAAO,CAAA;gBAI5B,IAAIzU,SAASwB,MAAAA,KAAWgtB,YAAYhtB,MAAAA,EAAQ;oBAC1CjD,QAAM,6BAA6B,GACnCwH,YAAYsI,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAc,GACtC2S,6JAAAA,CAAW8N,QAAAA,CAAStwB,QAAQ;wBAACkC,UAAUwuB;oBAAAA,GAAc;wBAACvsB,IAAIQ;oBAAAA,CAAK,GAC/DsD,YAAYsI,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAmB;oBAC3C;gBACF;YACF;YAGA,IACE7P,OAAO+E,WAAAA,CAAYN,IAAI,KACvB,CAACzE,OAAO0iB,UAAAA,CAAW7b,IAAAA,CAChBuW,CAAAA,KACCA,GAAGvN,IAAAA,KAAS,gBACZ,cAAcuN,GAAGwT,UAAAA,IACjBxT,GAAGzY,IAAAA,CAAKjB,MAAAA,KAAW,CACvB,GACA;gBACA,MAAMgtB,cAAAA,CAAejsB,KAAKvC,QAAAA,IAAY,CAAA,CAAA,EAAImU,MAAAA,CAAQma,CAAAA,MACzC/rB,KAAKrC,QAAAA,CAASwJ,IAAAA,CAAMvJ,CAAAA,QAEvBsB,uJAAAA,CAAKC,MAAAA,CAAOvB,KAAK,KACjBd,MAAMC,OAAAA,CAAQa,MAAMK,KAAK,KACzBL,MAAMK,KAAAA,CAAM6T,QAAAA,CAASia,IAAIrvB,IAAI,CAEhC,CACF;gBACD,IAAIsD,KAAKvC,QAAAA,IAAY,KAACd,+IAAAA,EAAQsvB,aAAajsB,KAAKvC,QAAQ,GAAG;oBACzDzB,QAAM,6BAA6B,GACnCwH,YAAYsI,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAc,GACtC2S,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;wBACEkC,UAAUwuB;oBAAAA,GAEZ;wBAACvsB,IAAIQ;oBAAAA,CACP,GACAsD,YAAYsI,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAmB;oBAC3C;gBACF;YACF;YAEAogB,cAAcC,SAAS;QACzB,GAEAlwB,OAAOmd,KAAAA,GAASC,CAAAA,OAAO;YAKrB,IAAImS,mBAAmBvvB,MAAM,GAAG;gBAC9Bmd,OAAMC,EAAE;gBACR;YACF;YAMA,IAAIuS,UAAU3vB,MAAM,KAAK8vB,UAAU9vB,MAAM,GAAG;gBAC1Cmd,OAAMC,EAAE;gBACR;YACF;YAEA,IAAIA,GAAGvN,IAAAA,KAAS,mBAEZuN,GAAGwT,UAAAA,IACHxT,GAAGyT,aAAAA,IACHzT,GAAGwT,UAAAA,CAAWlpB,MAAAA,IACd0V,GAAGwT,UAAAA,CAAWlsB,KAAAA,IACd0Y,GAAGyT,aAAAA,CAAcnpB,MAAAA,IACjB0V,GAAGyT,aAAAA,CAAcnsB,KAAAA,EACjB;gBACA,MAAMosB,+BAA+B3rB,wJAAAA,CAAM8L,WAAAA,CAAY;oBACrDvJ,QAAQ0V,GAAGwT,UAAAA,CAAWlpB,MAAAA;oBACtBhD,OAAO0Y,GAAGwT,UAAAA,CAAWlsB,KAAAA;gBAAAA,CACtB,GACKqsB,0BAA0B5rB,wJAAAA,CAAM8L,WAAAA,CAAY;oBAChDvJ,QAAQ0V,GAAGyT,aAAAA,CAAcnpB,MAAAA;oBACzBhD,OAAO0Y,GAAGyT,aAAAA,CAAcnsB,KAAAA;gBAAAA,CACzB;gBAED,IAAIosB,gCAAgCC,yBAAyB;sCASRxvB;oBARnD,MAAMyvB,aAA0CzvB,qBAAMyC,IAAAA,CACpDC,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;wBACnB4G,MAAM;wBACNzC,IAAIiZ,GAAGwT,UAAAA,CAAWlsB,KAAAA;wBAClBN,OAAQC,CAAAA,IAAMrE,OAAOgF,UAAAA,CAAWX,CAAC;wBACjCgsB,OAAO,CAAA;oBAAA,CACR,CACH,CAAA,CAAE,CAAC,CAAA,6DAAA,CAAI,CAAC,CAAA,EACFY,sCAAmDjtB,IAAAA,CACvDC,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;wBACnB4G,MAAM;wBACNzC,IAAIiZ,GAAGyT,aAAAA,CAAcnsB,KAAAA;wBACrBN,OAAQC,CAAAA,IAAMrE,OAAOgF,UAAAA,CAAWX,CAAC;wBACjCgsB,OAAO,CAAA;oBAAA,CACR,CACH,CAAA,CAAE,CAAC,CAAA,+DAAA,CAAI,CAAC,CAAA,EACFa,kBACJF,aACAC,gBACA7T,GAAGyT,aAAAA,CAAcnsB,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,KAAMyY,GAAGwT,UAAAA,CAAWlsB,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,IAC7DyY,GAAGyT,aAAAA,CAAcnsB,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,KAC3ByY,GAAGwT,UAAAA,CAAWlsB,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,GAAI,KAChCqsB,UAAUvuB,IAAAA,CAAKiB,MAAAA,KAAW0Z,GAAGwT,UAAAA,CAAWlsB,KAAAA,CAAMkD,MAAAA,IAC9CwV,GAAGyT,aAAAA,CAAcnsB,KAAAA,CAAMkD,MAAAA,KAAW,GAC9BupB,sBACJH,aACAC,gBACA7T,GAAGyT,aAAAA,CAAcnsB,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,KAAMyY,GAAGwT,UAAAA,CAAWlsB,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,IAC7DyY,GAAGyT,aAAAA,CAAcnsB,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,KAC3ByY,GAAGwT,UAAAA,CAAWlsB,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,GAAI,KAChCyY,GAAGwT,UAAAA,CAAWlsB,KAAAA,CAAMkD,MAAAA,KAAW,KAC/BqpB,aAAaxuB,IAAAA,CAAKiB,MAAAA,KAAW0Z,GAAGyT,aAAAA,CAAcnsB,KAAAA,CAAMkD,MAAAA;oBAIlD,CAACspB,mBAAmB,CAACC,uBAAAA,CACvBnxB,OAAOmV,cAAAA,GAAiB,CAAA,CAAA;gBAE5B;YACF;YAGF,IAAIiI,GAAGvN,IAAAA,KAAS,eAAe;gBAC7B,MAAM,EAACrL,SAAAA,EAAAA,GAAaxE;gBAEpB,IAAIwE,WAAW;6CAiBT2qB,iBAYF/R,gBAsBAA,iBAcA+R,kBAQA/R;wBApDAkU;oBApBF,MAAM,CAACF,QAAQrtB,SAAS,CAAA,GAAIE,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQwE,WAAW;wBAAC6sB,OAAO;oBAAA,CAAE,GAC/DtC,eAAeF,gBAAgB;wBACnC7uB;wBACA+D;wBACA+qB,UAAU1R,GAAGzY,IAAAA;oBAAAA,CACd,GACK2sB,0BAA0BvC,mDACfrsB,KAAAA,wDAAbqsB,oBAAoB1Y,MAAAA,CAAQC,CAAAA,OAAS,CAACH,WAAWI,QAAAA,CAASD,IAAI,CAAC,IAC/D,CAAA,CAAA,EAEE6Y,WAAWD,YAAY;wBAC3BlvB;wBACA+D;wBACA+qB,UAAU;4BAAC1R,GAAGzY,IAAAA,CAAK,CAAC,CAAA;4BAAGyY,GAAGzY,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC;yBAAA;oBAAA,CACtC,GACK4sB,sBAAsBpC,uCACfzsB,KAAAA,oEAAO2T,MAAAA,CAAQC,CAAAA,OAAS,CAACH,WAAWI,QAAAA,CAASD,IAAI,CAAC,IAC3D,CAAA,CAAA,EAEEkb,iKACqBnb,MAAAA,CACtBob,CAAAA,aAAe,kCAACF,8DAAqBhb,QAAAA,CAASkb,UAAU,CAC3D,+FAAK,CAAA,CAAA,EACDC,uBAAuBF,kBAAkB9tB,MAAAA,GAAS;oBAExD,IACEguB,wBACAzkB,0KAAAA,EAAOhF,YAAYG,WAAAA,GAAcM,OAAAA,EAAS0U,GAAG3Y,IAAI,2BAC9CA,IAAAA,CAAK/B,KAAAA,kEAAOmE,IAAAA,CAAMyP,CAAAA,OAASkb,kBAAkBjb,QAAAA,CAASD,IAAI,CAAC,IAC9D;;;wBACAkM,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;4BAC7B,GAAGod,GAAG3Y,IAAAA;4BACNtD,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;4BACxCxS,mDACE0a,GAAG3Y,IAAAA,CAAK/B,KAAAA,oEAAO2T,MAAAA,CACZC,CAAAA,OAAS,CAACkb,kBAAkBjb,QAAAA,CAASD,IAAI,CAC5C,0EAAK,CAAA,CAAA;wBAAA,CACR;wBACD;oBACF;;oBAEA,MAAMsb,uBACJL,4HAAqBlb,MAAAA,CAClBob,CAAAA,aAAe,oFAACH,wBAAyB/a,QAAAA,CAASkb,UAAU,CAC/D,uFAAK,CAAA,CAAA,EACDI,yBAAyBD,oBAAoBluB,MAAAA,GAAS;oBAE5D,IACEmuB,8BACA5kB,sKAAAA,EAAOhF,YAAYG,WAAAA,GAAcM,OAAAA,EAAS0U,GAAG3Y,IAAI,4BAC9CA,IAAAA,CAAK/B,KAAAA,oEAAOmE,IAAAA,CAAMyP,CAAAA,OAASsb,oBAAoBrb,QAAAA,CAASD,IAAI,CAAC,IAChE;;;wBACAkM,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;4BAC7B,GAAGod,GAAG3Y,IAAAA;4BACNtD,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;4BACxCxS,kCACE0a,qBAAG3Y,IAAAA,CAAK/B,KAAAA,oEAAO2T,MAAAA,CACZC,CAAAA,OAAS,CAACsb,oBAAoBrb,QAAAA,CAASD,IAAI,CAC9C,4EAAK,CAAA,CAAA;wBAAA,CACR;wBACD;oBACF;;oBAEA,MAAMwb,gIACMpvB,KAAAA,sEAAO2T,MAAAA,CAAQC,CAAAA,OAASH,WAAWI,QAAAA,CAASD,IAAI,CAAC,4EAAK,CAAA,CAAA;oBAGlE,IAF0Bwb,mBAAmBpuB,MAAAA,GAAS,KAIpDguB,wBACA,CAACG,8BACD5kB,sKAAAA,EAAOhF,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAAS0U,GAAG3Y,IAAI,4BAC9CA,IAAAA,CAAK/B,KAAAA,oEAAOgB,MAAAA,MAAW,GAC1B;wBACA8e,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;4BAC7B,GAAGod,GAAG3Y,IAAAA;4BACNtD,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;4BACxCxS,OAAOovB;wBAAAA,CACR;wBACD;oBACF;gBACF;YACF;YAEA,IAAI1U,GAAGvN,IAAAA,KAAS,eAAe;gBAC7B,MAAM3D,WAAW2I,kBAAkB;oBACjCD,qBAAqB3M,YAAYG,WAAAA,CAAAA;oBACjC0M,qBAAqB9U;gBAAAA,CACtB,GAEK+xB,gBAAYC,sOAAAA,EAAa9lB,QAAQ;gBAEvC,IAAI,CAAC6lB,WAAW;oBACd5U,OAAMC,EAAE;oBACR;gBACF;gBAEA,IAAI2U,UAAUE,KAAAA,KAAU,aAAa;oBACnC9U,OAAMC,EAAE;oBACR;gBACF;gBAEAoF,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;oBAC7B2B,OAAO;oBACPR,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;oBACxCzS,MAAM2a,GAAG3a,IAAAA;oBACTC,OAAOqvB,UAAUrvB,KAAAA;gBAAAA,CAClB;gBAED;YACF;YAEA,IAAI0a,GAAGvN,IAAAA,KAAS,eAAe;gBAC7B,MAAM,EAACrL,SAAAA,EAAAA,GAAaxE;gBAEpB,IAAIwE,aAAaW,wJAAAA,CAAM+sB,UAAAA,CAAW1tB,SAAS,GAAG;;oBAC5C,MAAM,CAAC9C,OAAOqC,SAAS,CAAA,GAAIE,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQwE,WAAW;wBACxD6sB,OAAO;oBAAA,CACR,GACK,CAACla,MAAM2X,QAAQ,CAAA,oBACnBvtB,MAAMyC,IAAAA,CACJC,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;wBACnB4G,MAAM;wBACNzC,IAAI;4BAACQ,MAAMyY,GAAGzY,IAAAA;4BAAMiD,QAAQwV,GAAGxV,MAAAA;wBAAAA;wBAC/BxD,OAAQC,CAAAA,IAAMrE,OAAOgF,UAAAA,CAAWX,CAAC;wBACjCgsB,OAAO,CAAA;oBAAA,CACR,CACH,CAAA,CAAE,CAAC,CAAA,yDAAM;wBAAC5sB,KAAAA;wBAAWA,KAAAA,CAAS;qBAAA;oBAEhC,IACE0T,QACAzV,aACAqD,2KAAAA,EAAYkD,YAAYG,WAAAA,GAAcM,OAAAA,EAAShH,KAAK,GACpD;4BAcIqtB,sBAKAI;6CAjBUhY;wBADd,MAAMjV,8BAAWR,MAAMQ,QAAAA,6DAAY,CAAA,CAAA,EAC7BQ,4BAAaA,KAAAA,qDAAS,CAAA,CAAA,EACtByvB,qBAAqBzvB,MAAMmE,IAAAA,CAAMyP,CAAAA,OACrCpU,SAAS0J,IAAAA,CAAM+K,CAAAA,UAAYA,QAAQxV,IAAAA,KAASmV,IAAI,CAClD,GACM8b,qBACJhV,GAAGxV,MAAAA,GAASwV,GAAG3a,IAAAA,CAAKiB,MAAAA,KAAWyT,KAAK1U,IAAAA,CAAKiB,MAAAA,EACrC2uB,kBAAkBjV,GAAGxV,MAAAA,KAAW,KAAKwqB,oBAErCrD,eAAeF,gBAAgB;4BAAC7uB;4BAAQ+D;4BAAW+qB;wBAAAA,CAAS,GAC5DK,WAAWD,YAAY;4BAAClvB;4BAAQ+D;4BAAW+qB;wBAAAA,CAAS,GAEpDwD,gCAAgCvD,oDACrBrsB,KAAAA,8EAAOmE,IAAAA,CACjByP,CAAAA,OAAS,CAACH,WAAWI,QAAAA,CAASD,IAAI,KAAK5T,MAAM6T,QAAAA,CAASD,IAAI,CAC7D,IACA,CAAA,GACEic,4BAA4BpD,wCACrBzsB,KAAAA,sEAAOmE,IAAAA,CACbyP,CAAAA,OAAS,CAACH,WAAWI,QAAAA,CAASD,IAAI,KAAK5T,MAAM6T,QAAAA,CAASD,IAAI,CAC7D,IACA,CAAA;wBAEJ,IACE6b,sBACAE,mBACA,CAACC,iCACD,CAACC,2BACD;4BACA,MAAMrmB,WAAW2I,kBAAkB;gCACjCD,qBAAqB3M,YAAYG,WAAAA,CAAAA;gCACjC0M,qBAAqB9U;4BAAAA,CACtB;4BAEDiE,yJAAAA,CAAOuuB,kBAAAA,CAAmBxyB,QAAQ,MAAM;gCACtCmd,OAAMC,EAAE,GACRoF,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;oCAAC0C,WAAO+vB,6OAAAA,EAAoBvmB,QAAQ;gCAAA,GACpC;oCAAC/H,IAAIiZ,GAAGzY,IAAAA;gCAAAA,CACV;4BACF,CAAC,GAED3E,OAAO4iB,QAAAA,CAAAA;4BACP;wBACF;oBACF;gBACF;YACF;YAKA,IACExF,GAAGvN,IAAAA,KAAS,gBACZuN,GAAGzY,IAAAA,CAAKjB,MAAAA,KAAW,KACnB,cAAc0Z,GAAGwT,UAAAA,IACjBxT,GAAGwT,UAAAA,CAAWjvB,KAAAA,KACZsG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA,IACjDY,MAAMC,OAAAA,CAAQ4b,GAAGwT,UAAAA,CAAW1uB,QAAQ,KACpCkb,GAAGwT,UAAAA,CAAW1uB,QAAAA,CAASwB,MAAAA,GAAS,KAChC0Z,GAAGzY,IAAAA,CAAK,CAAC,CAAA,GAAI,KAAK,GAClB;gBACA,MAAM,CAAC+tB,aAAaC,UAAU,CAAA,GAAI1uB,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQ;oBAACod,GAAGzY,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC;iBAAC;gBAEtE,IAAI3E,OAAO+E,WAAAA,CAAY2tB,WAAW,GAAG;oBACnC,MAAME,UACHrxB,MAAMC,OAAAA,CAAQkxB,YAAYxwB,QAAQ,KAAKwwB,YAAYxwB,QAAAA,IAAa,CAAA,CAAA,EAC7DwuB,kBAActa,4IAAAA,EAAK,CAAC;2BAAGwc,SAAS;2BAAGxV,GAAGwT,UAAAA,CAAW1uB,QAAQ;qBAAC;oBAEhEzB,QAAM,yCAAyC2c,EAAE,GACjDoF,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;wBAACkC,UAAUwuB;oBAAAA,GACX;wBAACvsB,IAAIwuB;wBAAYtC,OAAO,CAAA;oBAAA,CAC1B,GACAlT,OAAMC,EAAE;oBACR;gBACF;YACF;YAEAD,OAAMC,EAAE;QACV,GAEOpd;IACT;AACF;AAEO,MAAM6yB,yCAETA;QAAC,EAAClW,SAAAA,EAAS,KAAM;IACnB,MAAM3c,SAAS2c,UAAU3c,MAAAA,EACnBsW,OAAOqG,UAAUvF,SAAAA,EACjB,EAAC5S,SAAAA,EAAAA,GAAaxE;IAEpB,IAAIwE,WAAW;QACb,IAAIW,wJAAAA,CAAM+sB,UAAAA,CAAW1tB,SAAS,GAE5Bge,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA,CAAA,GACA;YAACoE,OAAOT,uJAAAA,CAAKC,MAAAA;YAAQ+W,OAAO,CAAA;YAAMmY,SAAS,CAAA;QAAA,CAC7C,GACI9yB,OAAOwE,SAAAA,IACc,CACrB;eAAGP,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;gBACtBmE,IAAInE,OAAOwE,SAAAA;gBACXJ,OAAOT,uJAAAA,CAAKC,MAAAA;YAAAA,CACb,CAAC;SAAA,CAEWuY,OAAAA,CAAQ;gBAAC,CAAC1X,MAAME,IAAI,CAAA,KAAM;YACvC,MAAMjD,QAAQ1B,OAAOoC,QAAAA,CAASuC,IAAAA,CAAK,CAAC,CAAC,CAAA;YACjC/B,0JAAAA,CAAQC,SAAAA,CAAUnB,KAAK,KAAKA,MAAMU,QAAAA,CAASmU,QAAAA,CAAS9R,IAAI,KAC1D+d,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;gBACE0C,OAAAA,CAAQnB,MAAMC,OAAAA,CAAQiD,KAAK/B,KAAK,IAAI+B,KAAK/B,KAAAA,GAAQ,CAAA,CAAA,EAAI2T,MAAAA,CAClD0c,CAAAA,QAAkBA,UAAUzc,IAC/B;gBACA3U,OAAO;YAAA,GAET;gBAACwC,IAAIQ;YAAAA,CACP;QAEJ,CAAC;aAEE;YACL,MAAM,CAACjD,OAAOqC,SAAS,CAAA,GAAIE,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQwE,WAAW;gBACxD6sB,OAAO;YAAA,CACR,GACK2B,kBACJhzB,OAAO+E,WAAAA,CAAYrD,KAAK,KACxBA,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,KAC1B1D,OAAOgF,UAAAA,CAAWtD,MAAMU,QAAAA,CAAS,CAAC,CAAC,KACnCV,MAAMU,QAAAA,CAAS,CAAC,CAAA,CAAEK,IAAAA,KAAS,KACvBf,MAAMU,QAAAA,CAAS,CAAC,CAAA,GAChBqB,KAAAA;YAEN,IAAIuvB,iBAAiB;;gBAEnB,MAAMC,gCAAAA,2CADgCvwB,KAAAA,kDAAhBswB,yBAAyB,CAAA,CAAA,EACK3c,MAAAA,CACjD6c,CAAAA,eAAiBA,iBAAiB5c,IACrC;gBAEAkM,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;oBACE0C,OAAOuwB;gBAAAA,GAET;oBACE9uB,IAAIJ;oBACJK,OAAQK,CAAAA,OAASzE,OAAOgF,UAAAA,CAAWP,IAAI;gBAAA,CAE3C;YACF,OACEzE,OAAOmV,cAAAA,CAAemB,IAAI,CAAA,GAAI,CAAA;QAElC;QAEA,IAAItW,OAAOwE,SAAAA,EAAW;YAEpB,MAAMA,aAAYxE,OAAOwE,SAAAA;YACzBxE,OAAOwE,SAAAA,GAAY;gBAAC,GAAGA,UAAAA;YAAAA;QACzB;IACF;AACF;AC7mBO,SAAS2uB,UAAUC,KAAAA,EAAkB;IACpC,MAAA,CAACvjB,MAAMwjB,KAAK,CAAA,GAAID;IACf,OAAA;QAACvjB;QAAMwjB,KAAK;KAAA;AACroBAAAA,aAAAA,GAAAA,IACAjmB,QAAAA;AAoBC,SAASkmB,qBAAqBvzB,MAAAA,EAAgB;QAC5CszB;IAAP,mDAAyB5mB,GAAAA,CAAI1M,MAAM,mFAAGwzB,UAAAA;AACxC;AAEO,SAASC,eAAezzB,MAAAA,EAAgB;IAC7CszB,kBAAkB/E,GAAAA,CAAIvuB,QAAQ;QAC5BwzB,YAAYxkB,yNAAAA,CAAAA;IAAoB,CACjC;AACH;AAEO,SAAS0kB,cAAc1zB,MAAAA,EAAgB;IAC5CszB,kBAAkB/E,GAAAA,CAAIvuB,QAAQyD,KAAAA,CAAS;AACzC;ACEA,MAAMhD,UAAQC,cAAc,qBAAqB,GAG3CizB,SAAAA,aAAAA,GAAAA,IAAatmB,WACbumB,iBAAiB,aAAA,GAAA,IAAIvmB,QAAAA,GASrBwmB,kBAAkB,KAElBC,WAAY9zB,CAAAA,WAAwC;IACxD,MAAMiyB,QAAQ0B,OAAOjnB,GAAAA,CAAI1M,MAAM;IAC/B,OAAOiyB,UAAUxuB,KAAAA,IAAY,CAAA,IAAOwuB;AACtC,GAOM8B,mBAAoB/zB,CAAAA,SAAAA,CACnB4zB,eAAelnB,GAAAA,CAAI1M,MAAM,KAC5B4zB,eAAerF,GAAAA,CAAIvuB,QAAQ,CAAA,CAAE,GAExB4zB,eAAelnB,GAAAA,CAAI1M,MAAM,KAAK,CAAA,CAAA;AAGhC,SAASg0B,mBACdxP,OAAAA,EAC8D;IAC9D,MAAM,EAACvc,WAAAA,EAAAA,GAAeuc;IAEtB,OAAQxkB,CAAAA,WAAoC;QAC1C,IAAIi0B,mBAAoDlxB,eACtD/C,OAAOoC,QAAAA,EACP6F,YAAYG,WAAAA,GAAcM,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IACjD;QACA,MAAMuzB,gBAAgBH,iBAAiB/zB,MAAM;QAC7C,IAAIm0B,qBAAqBZ,qBAAqBvzB,MAAM;QAEpDwkB,QAAQ4P,aAAAA,CAAcrsB,IAAAA,CAAK,MAAM;YAC/BtH,QAAM,wBAAwB;YAC9B,MAAM4zB,MAAMpsB,YAAY7H,EAAAA,CAAG,WAAW;oBAAC,EAACk0B,OAAAA,EAASpoB,QAAAA,EAAAA,KAAc;gBAC7D,IAAIqoB,QAAQ,CAAA;gBACZD,QAAQnY,OAAAA,CAASkX,CAAAA,UAAU;oBACzB,IAAI,CAACkB,SAASlB,MAAMpV,MAAAA,KAAW,WAAWiW,eAAe;wBACvD,IAAIb,MAAMxjB,IAAAA,KAAS,WAAWwjB,MAAM1uB,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;4BACrDjD,QACE,+DACF,GACAT,OAAOw0B,OAAAA,GAAU;gCAACC,OAAO,CAAA,CAAA;gCAAIC,OAAO,CAAA,CAAA;4BAAA,GACpCR,cAAcS,MAAAA,CAAO,GAAGT,cAAcxwB,MAAM,GAC5CiwB,OAAOpF,GAAAA,CAAIvuB,QAAQ,CAAA,CAAI,GACvBu0B,QAAQ,CAAA;4BACR;wBACF;wBACAL,cAAcnsB,IAAAA,CAAK;4BACjBsrB;4BACAuB,MAAAA,aAAAA,GAAAA,IAAUC,KAAAA;4BACV3oB;4BACA+nB;wBAAAA,CACD;oBACH;gBACF,CAAC,GACDA,mBAAmB/nB;YACrB,CAAC;YACD,OAAO,MAAM;gBACXzL,QAAM,0BAA0B,GAChC4zB,IAAI/zB,WAAAA,CAAAA;YACN;QACF,CAAC,GAEDN,OAAOw0B,OAAAA,GAAU;YAACC,OAAO,CAAA,CAAA;YAAIC,OAAO,CAAA,CAAA;QAAA;QAEpC,MAAM,EAACvX,OAAAA,MAAAA,EAAAA,GAASnd;QAEhBA,OAAAA,OAAOmd,KAAAA,GAASC,CAAAA,OAAkB;YAChC,IAAInV,YAAYG,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY,GAAG;gBACjE8U,OAAMC,EAAE;gBACR;YACF;YAMA,IAAImS,mBAAmBvvB,MAAM,GAAG;gBAC9Bmd,OAAMC,EAAE;gBACR;YACF;YAMA,IAAIuS,UAAU3vB,MAAM,KAAK8vB,UAAU9vB,MAAM,GAAG;gBAC1Cmd,OAAMC,EAAE;gBACR;YACF;YAEA,MAAM,EAACsF,UAAAA,EAAY8R,OAAAA,EAAAA,GAAWx0B,QACxB,EAACy0B,KAAAA,EAAAA,GAASD,SACVM,OAAOL,KAAAA,CAAMA,MAAM/wB,MAAAA,GAAS,CAAC,CAAA,EAC7BqxB,SACJD,QAAQA,KAAKpS,UAAAA,IAAcoS,KAAKpS,UAAAA,CAAWoS,KAAKpS,UAAAA,CAAWhf,MAAAA,GAAS,CAAC,CAAA,EACjEsxB,YAAYC,gBAAgB7X,IAAI2X,MAAM,GACtCG,OAAOpB,SAAS9zB,MAAM,GAEtBm1B,oBAAoB5B,qBAAqBvzB,MAAM;YAErD,IAAIo1B,QAAQD,sBAAsBhB;YAElC,IAAIe,MAAM;gBAUR,IATKJ,OAEMpS,WAAWhf,MAAAA,KAAW,KAAA,CAC/B0xB,QACED,sBAAsB1xB,KAAAA,KAAa0wB,uBAAuB1wB,KAAAA,IACtD4xB,YAAYjY,IAAI2X,MAAM,KAAKC,YAC3BI,KAAAA,IALNA,QAAQ,CAAA,GAQNN,QAAQM,OACVN,KAAKpS,UAAAA,CAAW3a,IAAAA,CAAKqV,EAAE;qBAClB;oBACL,MAAMkY,UAAU;wBACd5S,YAAY,CACV;+BAAI1iB,OAAOwE,SAAAA,KAAc,OACrB,EAAA,GACA;gCAAC+wB,sBAAsBv1B,MAAM,CAAC;6BAAA;4BAClCod,EAAE;yBAAA;wBAEJoY,WAAAA,aAAAA,GAAAA,IAAeX,KAAAA;oBAAK;oBAEtBJ,MAAM1sB,IAAAA,CAAKutB,OAAO,GAClB70B,QAAM,yBAAyBq0B,IAAI;gBACrC;gBAEA,MAAOL,MAAM/wB,MAAAA,GAASmwB,iBACpBY,MAAM/b,KAAAA,CAAAA;gBAGJ+c,YAAYrY,EAAE,KAAA,CAChBoX,QAAQE,KAAAA,GAAQ,CAAA,CAAA;YAEpB;YAEAP,qBAAqBgB,mBAErBhY,OAAMC,EAAE;QACV,GAGOpd;IACT;AACF;AAEO,MAAM01B,qCAETA;QAAC,EAAC/Y,SAAAA,EAAS,KAAM;IACnB,MAAM3c,SAAS2c,UAAU3c,MAAAA,EACnB,EAACy0B,KAAAA,EAAAA,GAASz0B,OAAOw0B,OAAAA,EACjBN,gBAAgBH,iBAAiB/zB,MAAM;IAE7C,IAAIy0B,MAAM/wB,MAAAA,GAAS,GAAG;QACpB,MAAMoxB,OAAOL,KAAAA,CAAMA,MAAM/wB,MAAAA,GAAS,CAAC,CAAA;QAEnC,IADAjD,QAAM,WAAWq0B,IAAI,GACjBA,KAAKpS,UAAAA,CAAWhf,MAAAA,GAAS,GAAG;YAC9B,MAAMiyB,eAAezB,cAAc7d,MAAAA,CAChCuf,CAAAA,OAASA,KAAKhB,IAAAA,IAAQE,KAAKU,SAC9B;YACA,IAAIK,wBAAwBf,KAAKpS,UAAAA;YACjCiT,aAAaxZ,OAAAA,CAASyZ,CAAAA,SAAS;gBAC7BC,4BAAwBC,+IAAAA,EACtBD,sBAAsBp0B,GAAAA,CAAK2b,CAAAA,KACzB2Y,mBACE/1B,QACA41B,KAAKvC,KAAAA,EACLjW,IACAwY,KAAK1pB,QAAAA,EACL0pB,KAAK3B,gBACP,CACF,CACF;YACF,CAAC;YACD,MAAM+B,qBAAqBH,sBACxBp0B,GAAAA,CAAIw0B,4JAAAA,CAAUC,OAAO,EACrBlH,OAAAA,CAAAA;YAEH,IAAI;gBACF/qB,yJAAAA,CAAOuuB,kBAAAA,CAAmBxyB,QAAQ,MAAM;oBACtC0vB,YAAY1vB,QAAQ,MAAM;wBACxBm2B,cAAcn2B,QAAQ,MAAM;4BAC1Bg2B,mBAAmB7Z,OAAAA,CAASiB,CAAAA,OAAO;gCACjCpd,OAAOmd,KAAAA,CAAMC,EAAE;4BACjB,CAAC;wBACH,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,EAAA,OAASgZ,KAAK;gBACZ31B,QAAM,+BAA+B21B,GAAG,GACxClC,cAAcS,MAAAA,CAAO,GAAGT,cAAcxwB,MAAM,GAC5C8e,6JAAAA,CAAWoI,QAAAA,CAAS5qB,MAAM,GAC1BA,OAAOw0B,OAAAA,GAAU;oBAACC,OAAO,CAAA,CAAA;oBAAIC,OAAO,CAAA,CAAA;gBAAA,GACpCf,OAAOpF,GAAAA,CAAIvuB,QAAQ,CAAA,CAAI,GACvB4vB,aAAa5vB,QAAQ,CAAA,CAAK,GAC1BA,OAAO4iB,QAAAA,CAAAA;gBACP;YACF;YACA5iB,OAAOw0B,OAAAA,CAAQE,KAAAA,CAAM3sB,IAAAA,CAAK+sB,IAAI,GAC9B90B,OAAOw0B,OAAAA,CAAQC,KAAAA,CAAM4B,GAAAA,CAAAA;QACvB;IACF;AACF,GAEaC,qCAETA;QAAC,EAAC3Z,SAAAA,EAAS,KAAM;IACnB,MAAM3c,SAAS2c,UAAU3c,MAAAA,EACnB,EAAC00B,KAAAA,EAAAA,GAAS10B,OAAOw0B,OAAAA,EACjBN,gBAAgBH,iBAAiB/zB,MAAM;IAE7C,IAAI00B,MAAMhxB,MAAAA,GAAS,GAAG;QACpB,MAAMoxB,OAAOJ,KAAAA,CAAMA,MAAMhxB,MAAAA,GAAS,CAAC,CAAA;QAEnC,IADAjD,QAAM,WAAWq0B,IAAI,GACjBA,KAAKpS,UAAAA,CAAWhf,MAAAA,GAAS,GAAG;YAC9B,MAAMiyB,eAAezB,cAAc7d,MAAAA,CAChCuf,CAAAA,OAASA,KAAKhB,IAAAA,IAAQE,KAAKU,SAC9B;YACA,IAAIK,wBAAwBf,KAAKpS,UAAAA;YACjCiT,aAAaxZ,OAAAA,CAASyZ,CAAAA,SAAS;gBAC7BC,4BAAwBC,+IAAAA,EACtBD,sBAAsBp0B,GAAAA,CAAK2b,CAAAA,KACzB2Y,mBACE/1B,QACA41B,KAAKvC,KAAAA,EACLjW,IACAwY,KAAK1pB,QAAAA,EACL0pB,KAAK3B,gBACP,CACF,CACF;YACF,CAAC;YACD,IAAI;gBACFhwB,yJAAAA,CAAOuuB,kBAAAA,CAAmBxyB,QAAQ,MAAM;oBACtC6vB,YAAY7vB,QAAQ,MAAM;wBACxBm2B,cAAcn2B,QAAQ,MAAM;4BAC1B61B,sBAAsB1Z,OAAAA,CAASiB,CAAAA,OAAO;gCACpCpd,OAAOmd,KAAAA,CAAMC,EAAE;4BACjB,CAAC;wBACH,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,EAAA,OAASgZ,KAAK;gBACZ31B,QAAM,+BAA+B21B,GAAG,GACxClC,cAAcS,MAAAA,CAAO,GAAGT,cAAcxwB,MAAM,GAC5C8e,6JAAAA,CAAWoI,QAAAA,CAAS5qB,MAAM,GAC1BA,OAAOw0B,OAAAA,GAAU;oBAACC,OAAO,CAAA,CAAA;oBAAIC,OAAO,CAAA,CAAA;gBAAA,GACpCf,OAAOpF,GAAAA,CAAIvuB,QAAQ,CAAA,CAAI,GACvB+vB,aAAa/vB,QAAQ,CAAA,CAAK,GAC1BA,OAAO4iB,QAAAA,CAAAA;gBACP;YACF;YACA5iB,OAAOw0B,OAAAA,CAAQC,KAAAA,CAAM1sB,IAAAA,CAAK+sB,IAAI,GAC9B90B,OAAOw0B,OAAAA,CAAQE,KAAAA,CAAM2B,GAAAA,CAAAA;QACvB;IACF;AACF;AAMA,SAASN,mBACP/1B,MAAAA,EACAqzB,KAAAA,EACA1W,SAAAA,EACAzQ,QAAAA,EACA+nB,gBAAAA,EACa;IASb,MAAMsC,uBAAuB;QAAC,GAAG5Z,SAAAA;IAAAA;IAEjC,IAAI0W,MAAMxjB,IAAAA,KAAS,YAAYwjB,MAAM1uB,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QACtD,MAAM8yB,mBAAAA,CAAoBtqB,YAAY,CAAA,CAAA,EAAIuqB,SAAAA,CAAW5qB,CAAAA,MACnDzK,qJAAQ;gBAACD,MAAM0K,IAAI1K,IAAAA;YAAAA,GAAOkyB,MAAM1uB,IAAAA,CAAK,CAAC,CAAC,CACzC;QACAlE,OAAAA,QACE,iCAA0B4yB,MAAMqD,KAAAA,CAAMhzB,MAAM,EAAA,kBAAU6yB,qBAAqB1mB,IAAI,EAAA,2BAAoC,EACrH,KAD2GwjB,MAAMxjB,IAAI,EAAA,OAE9G;YACL8mB,gBACEJ,sBACAlD,MAAMqD,KAAAA,CAAMhzB,MAAAA,EACZ8yB,gBACF,CAAC;SAAA;IAEL;IAEA,IAAInD,MAAMxjB,IAAAA,KAAS,WAAWwjB,MAAM1uB,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QACrD,MAAMkzB,kBAAAA,CAAmB3C,oBAAoB,CAAA,CAAA,EAAIwC,SAAAA,CAAW5qB,CAAAA,MAC1DzK,qJAAQ;gBAACD,MAAM0K,IAAI1K,IAAAA;YAAAA,GAAOkyB,MAAM1uB,IAAAA,CAAK,CAAC,CAAC,CACzC;QAEA,OACE,UAAU4xB,wBACVh1B,MAAMC,OAAAA,CAAQ+0B,qBAAqB5xB,IAAI,KACvC4xB,qBAAqB5xB,IAAAA,CAAK,CAAC,CAAA,KAAMiyB,kBAAAA,CAEjCn2B,QAAM,qDAAqD,GACpD,EAAA,IAQF;YAACk2B,gBAAgBJ,sBAAsB,CAAA,GAAIK,eAAe,CAAC;SAAA;IACpE;IAGA,IAAIvD,MAAMxjB,IAAAA,KAAS,WAAWwjB,MAAM1uB,IAAAA,CAAKjB,MAAAA,KAAW,GAClDjD,OAAAA,QACE,sDAAoE,OAAdkc,UAAU9M,IAAI,EAAA,WACtE,KACO,CAAA,CAAA;IAGT,IAAIwjB,MAAMxjB,IAAAA,KAAS,kBAAkB;QACnC,MAAMgnB,uBAAuBC,yBAC3B92B,QACAu2B,oBACF;QACA,OACE,CAACM,wBACD,KAACz1B,+IAAAA,EAAQ;YAACD,MAAM01B,qBAAqB11B,IAAAA;QAAAA,GAAOkyB,MAAM1uB,IAAAA,CAAK,CAAC,CAAC,IAElD;YAAC4xB,oBAAoB;SAAA,GAAA,CAEVQ,MAAW1D,MAAMnyB,KAAK,EAC9Bib,OAAAA,CAAS6a,CAAAA,cAAc;YACjC,IAAIC,iBAAiB,GACjBC,gBAAgBF,UAAUG,UAAAA;YAC9B,MAAM,EAACC,KAAAA,EAAAA,GAASJ;YAgChB,IA/BAI,MAAMjb,OAAAA,CAAQ,CAACkb,OAAMC,UAAU;gBAC7B,MAAM,CAACC,UAAU90B,IAAI,CAAA,GAAI40B;gBACrBE,aAAaC,cAAAA,CACfP,kBAAkBx0B,KAAKiB,MAAAA,EACvBwzB,iBAAiBz0B,KAAKiB,MAAAA,IACb6zB,aAAaE,cAAAA,CACtBR,kBAAkBx0B,KAAKiB,MAAAA,EACvBwzB,iBAAiBz0B,KAAKiB,MAAAA,IACb6zB,aAAaG,cAAAA,CAEjBN,MAAMxyB,KAAAA,CAAM0yB,KAAK,EAAElwB,KAAAA,CAAM;wBAAC,CAACuwB,KAAK,CAAA;2BAAMA,UAAUD,UAAU;sBAAA,CAC7DR,iBAAiBz0B,KAAKiB,MAAAA,CAAAA;YAG5B,CAAC,GAEG6yB,qBAAqB1mB,IAAAA,KAAS,iBAC5BqnB,gBAAgBX,qBAAqB3uB,MAAAA,IAAAA,CACvC2uB,qBAAqB3uB,MAAAA,IAAUqvB,cAAAA,GAI/BV,qBAAqB1mB,IAAAA,KAAS,iBAE9BqnB,iBACAX,qBAAqB3uB,MAAAA,GAAS2uB,qBAAqB9zB,IAAAA,CAAKiB,MAAAA,IAAAA,CAExD6yB,qBAAqB3uB,MAAAA,IAAUqvB,cAAAA,GAI/BV,qBAAqB1mB,IAAAA,KAAS,iBAAiB;sDAI3B0mB,mCAGLA;gBANjB,MAAMqB,yEAAoChH,UAAAA,qEAArB2F,iCAAiC7xB,KAAAA,IAClD;oBAAC,GAAG6xB,qBAAqB3F,UAAAA,CAAWlsB,KAAAA;gBAAAA,IACpCjB,KAAAA,GACEo0B,uJAAsCjH,UAAAA,wGAAYlpB,MAAAA,IACpD;oBAAC,GAAG6uB,qBAAqB3F,UAAAA,CAAWlpB,MAAAA;gBAAAA,IACpCjE,KAAAA,GACEwI,oJAAiC4kB,aAAAA,4GAAensB,KAAAA,IAClD;oBAAC,GAAG6xB,qBAAqB1F,aAAAA,CAAcnsB,KAAAA;gBAAAA,IACvCjB,KAAAA,GACEuI,8CAAYuqB,wGAAsB1F,aAAAA,8GAAenpB,MAAAA,IACnD;oBAAC,GAAG6uB,qBAAqB1F,aAAAA,CAAcnpB,MAAAA;gBAAAA,IACvCjE,KAAAA;gBACJ,CAAKm0B,gBAAgBC,iBAAmB5rB,YAAYD,SAAAA,KAAAA,CACnC;oBAAC4rB;oBAAcC;oBAAe5rB;oBAAUD,SAAS;iBAAA,CACzDmQ,OAAAA,CAAS7W,CAAAA,UAAU;oBACpBA,SAAS4xB,gBAAgB5xB,MAAMsC,MAAAA,IAAAA,CACjCtC,MAAMsC,MAAAA,IAAUqvB,cAAAA;gBAEpB,CAAC,GACGW,gBAAgBC,iBAAAA,CAClBtB,qBAAqB3F,UAAAA,GAAa;oBAChClsB,OAAOkzB;oBACPlwB,QAAQmwB;gBAAAA,CAAAA,GAGR5rB,YAAYD,aAAAA,CACduqB,qBAAqB1F,aAAAA,GAAgB;oBACnCnsB,OAAOuH;oBACPvE,QAAQsE;gBAAAA,CAAAA,CAAAA;YAIhB;QACF,CAAC,GACM;YAACuqB,oBAAoB;SAAA;IAC9B;IACA,OAAO;QAACA,oBAAoB;KAAA;AAC9B;AAIA,SAASI,gBACPha,SAAAA,EACAtJ,KAAAA,EACA/O,UAAAA,EACW;IACX,MAAMiyB,uBAAuB;QAAC,GAAG5Z,SAAAA;IAAAA;IACjC,IACErY,cAAc,KACdiyB,qBAAqB1mB,IAAAA,KAAS,mBAC9BtO,MAAMC,OAAAA,CAAQ+0B,qBAAqB5xB,IAAI,KACvC4xB,qBAAqB5xB,IAAAA,CAAK,CAAC,CAAA,IAAKL,aAAa+O,SAC7CkjB,qBAAqB5xB,IAAAA,CAAK,CAAC,CAAA,GAAI0O,QAAQ,CAAA,GACvC;QACA,MAAM7H,UAAU;YACd+qB,qBAAqB5xB,IAAAA,CAAK,CAAC,CAAA,GAAI0O,OAC/B;eAAGkjB,qBAAqB5xB,IAAAA,CAAKC,KAAAA,CAAM,CAAC,CAAC;SAAA;QAEvC2xB,qBAAqB5xB,IAAAA,GAAO6G;IAC9B;IACA,IAAI+qB,qBAAqB1mB,IAAAA,KAAS,iBAAiB;8CAI3B0mB,mCAGLA,qCAGCA;QATlB,MAAMqB,oDAAerB,qBAAqB3F,UAAAA,sGAAYlsB,KAAAA,IAClD;YAAC,GAAG6xB,qBAAqB3F,UAAAA,CAAWlsB,KAAAA;QAAAA,IACpCjB,KAAAA,GACEo0B,uJAAsCjH,UAAAA,wGAAYlpB,MAAAA,IACpD;YAAC,GAAG6uB,qBAAqB3F,UAAAA,CAAWlpB,MAAAA;QAAAA,IACpCjE,KAAAA,GACEwI,oJAAiC4kB,aAAAA,4GAAensB,KAAAA,IAClD;YAAC,GAAG6xB,qBAAqB1F,aAAAA,CAAcnsB,KAAAA;QAAAA,IACvCjB,KAAAA,GACEuI,sJAAkC6kB,aAAAA,8GAAenpB,MAAAA,IACnD;YAAC,GAAG6uB,qBAAqB1F,aAAAA,CAAcnpB,MAAAA;QAAAA,IACvCjE,KAAAA;QACJ,CAAKm0B,gBAAgBC,iBAAmB5rB,YAAYD,SAAAA,KAAAA,CACnC;YAAC4rB;YAAcC;YAAe5rB;YAAUD,SAAS;SAAA,CACzDmQ,OAAAA,CAAS7W,CAAAA,UAAU;YAEtBA,SACAA,MAAMX,IAAAA,CAAK,CAAC,CAAA,IAAKL,aAAa+O,SAC9B/N,MAAMX,IAAAA,CAAK,CAAC,CAAA,GAAI0O,QAAQ,CAAA,KAAA,CAExB/N,MAAMX,IAAAA,GAAO;gBAACW,MAAMX,IAAAA,CAAK,CAAC,CAAA,GAAI0O,OAAO;mBAAG/N,MAAMX,IAAAA,CAAKC,KAAAA,CAAM,CAAC,CAAC;aAAA;QAE/D,CAAC,GACGgzB,gBAAgBC,iBAAAA,CAClBtB,qBAAqB3F,UAAAA,GAAa;YAChClsB,OAAOkzB;YACPlwB,QAAQmwB;QAAAA,CAAAA,GAGR5rB,YAAYD,aAAAA,CACduqB,qBAAqB1F,aAAAA,GAAgB;YACnCnsB,OAAOuH;YACPvE,QAAQsE;QAAAA,CAAAA,CAAAA;IAIhB;IAEA,OAAOuqB;AACT;AAIA,MAAMlB,cAAcA,CAACjY,IAAekS,OAC9BlS,CAAAA,CAAAA,CAAAA,GAAGvN,IAAAA,KAAS,mBAMdyf,QACAlS,GAAGvN,IAAAA,KAAS,iBACZyf,KAAKzf,IAAAA,KAAS,iBACduN,GAAGxV,MAAAA,KAAW0nB,KAAK1nB,MAAAA,GAAS0nB,KAAK7sB,IAAAA,CAAKiB,MAAAA,IACtCsc,uJAAAA,CAAKlD,MAAAA,CAAOM,GAAGzY,IAAAA,EAAM2qB,KAAK3qB,IAAI,KAC9ByY,GAAG3a,IAAAA,KAAS,OAOZ6sB,QACAlS,GAAGvN,IAAAA,KAAS,iBACZyf,KAAKzf,IAAAA,KAAS,iBACduN,GAAGxV,MAAAA,GAASwV,GAAG3a,IAAAA,CAAKiB,MAAAA,KAAW4rB,KAAK1nB,MAAAA,IACpCoY,uJAAAA,CAAKlD,MAAAA,CAAOM,GAAGzY,IAAAA,EAAM2qB,KAAK3qB,IAAI,CAAA,GAS5BswB,kBAAkBA,CACtB7X,IACAkS,OAEIA,CAAAA,CAAAA,CAAAA,QAAQlS,GAAGvN,IAAAA,KAAS,mBAAmByf,KAAKzf,IAAAA,KAAS,eAAA,GAOrD4lB,cAAerY,CAAAA,KACfA,GAAGvN,IAAAA,KAAS;AAOX,SAASsmB,cAAcn2B,MAAAA,EAAgBye,EAAAA,EAAsB;IAClE,MAAM6Q,OAAOwE,SAAS9zB,MAAM;IAC5B2zB,OAAOpF,GAAAA,CAAIvuB,QAAQ,CAAA,CAAK,GACxBye,MACAkV,OAAOpF,GAAAA,CAAIvuB,QAAQsvB,IAAI;AACzB;AAEA,SAASiG,sBAAsBv1B,MAAAA,EAAoC;IACjE,OAAO;QACL6P,MAAM;QACN+gB,YAAY;YAAC,GAAG5wB,OAAOwE,SAAAA;QAAAA;QACvBqsB,eAAe;YAAC,GAAG7wB,OAAOwE,SAAAA;QAAAA;IAAS;AAEvC;AAEA,SAASsyB,yBACP92B,MAAAA,EACA2c,SAAAA,EACwB;IACxB,IAAIjb;IACJ,OAAIib,UAAU9M,IAAAA,KAAS,mBAAmB7P,OAAOwE,SAAAA,GAC/C9C,QAAQ1B,OAAOoC,QAAAA,CAASpC,OAAOwE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAC,CAAA,GAC7C,UAAUgY,aAAAA,CACnBjb,QAAQ1B,OAAOoC,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,GAEpCjD;AACT;AC5lBO,MAAMo2B,uCAETA;QAAC,EAACpvB,OAAAA,EAASiU,SAAAA,EAAS,KAAM;IAC5B,MAAMob,uBAAmBC,iNAAAA,EAAgB;QACvCvG,YAAY;YACV9vB,OAAOgb,UAAU8U,UAAAA,CAAW9wB,IAAAA;YAC5B,GAAGgc,UAAU8U,UAAAA,CAAWvwB,KAAAA;QAAAA;QAE1BwH;QACA8b,SAAS;YAACC,gBAAgB,CAAA;QAAA;IAAI,CAC/B;IAED,IAAI,CAACsT,kBACH,MAAM,IAAI90B,MACR,8BAAkE,CACpE,MADgCof,KAAKC,SAAAA,CAAU3F,UAAU8U,UAAU,CAAC;IAItE,MAAMzxB,SAAS2c,UAAU3c,MAAAA;IAEzB,IAAI,CAACA,OAAOwE,SAAAA,IAAaW,wJAAAA,CAAM8L,WAAAA,CAAYjR,OAAOwE,SAAS,GACzD;IAGF,MAAM2C,iBAAiBlD,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;QAC1CmE,IAAInE,OAAOwE,SAAAA;QACXJ,OAAQK,CAAAA,OAASzE,OAAO+E,WAAAA,CAAYN,IAAI;QACxCuqB,SAAS7pB,wJAAAA,CAAM2C,UAAAA,CAAW9H,OAAOwE,SAAS;IAAA,CAC3C;IAED,IAAIF,aAAa;IAEjB,KAAA,MAAW,CAAC5C,OAAOqC,SAAS,CAAA,IAAKoD,eAAgB;QAK/C,IAJIzF,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,KAI1BhC,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,KAAKhC,MAAMU,QAAAA,CAAS,CAAC,CAAA,CAAEK,IAAAA,KAAS,IAC5D;YAMef;QAFjB,MAAMu2B,gBACJ3zB,eAAe,IAAIyzB,iBAAiB52B,IAAAA,GAAOuH,QAAQwM,YAAAA,IAC/ChT,oCAAiBA,QAAAA,6DAAY,CAAA,CAAA;QACXA,SAAS0J,IAAAA,CAC9B+K,CAAAA,UACCA,QAAQhV,KAAAA,KAAUo2B,iBAAiBp2B,KAAAA,IACnCgV,QAAQxV,IAAAA,KAAS82B,aACrB,MAEwBx0B,KAAAA,KACtB+e,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;YACEkC,UAAU,CACR;mBAAGA;gBACH;oBACE,GAAG61B,gBAAAA;oBACH52B,MAAM82B;gBAAAA,CACP;aAAA;QAAA,GAGL;YAAC9zB,IAAIJ;QAAAA,CACP,GAGFye,6JAAAA,CAAW8N,QAAAA,CAAStwB,QAAQ,CAAA,GAAI;YAACoE,OAAOT,uJAAAA,CAAKC,MAAAA;YAAQ+W,OAAO,CAAA;QAAA,CAAK;QAEjE,MAAMvY,WAAW0D,uJAAAA,CAAK1D,QAAAA,CAASpC,QAAQ+D,SAAS;QAEhD,KAAA,MAAW,CAACoT,MAAMxS,IAAI,CAAA,IAAKvC,SAAU;YAKnC,IAJI,CAACpC,OAAOgF,UAAAA,CAAWmS,IAAI,KAIvB,CAAChS,wJAAAA,CAAMoR,QAAAA,CAASvW,OAAOwE,SAAAA,EAAWG,IAAI,GACxC;;YAGF,MAAMjC,4BAAaA,KAAAA,uCAALyU,cAAc,CAAA,CAAA;YAE5BqL,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;gBACE0C,OAAO,CAAC;uBAAGA;oBAAOu1B,aAAa;iBAAA;YAAA,GAEjC;gBAAC9zB,IAAIQ;YAAAA,CACP;QACF;QAEAL;IACF;AACF,GC7Fa4zB,0CAETA;QAAC,EAACvb,SAAAA,EAAS,KAAM;IACnB,MAAM3c,SAAS2c,UAAU3c,MAAAA;IAEzB,IAAKA,OAAOwE,SAAAA,EAIZ,IAAIW,wJAAAA,CAAM8L,WAAAA,CAAYjR,OAAOwE,SAAS,GAAG;YA0BZ4zB,sBAuBrB/1B,cAoBAA,eAeOA;QAnFb,MAAM,CAACX,OAAOqC,SAAS,CAAA,GAAIE,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQA,OAAOwE,SAAAA,EAAW;YAC/D6sB,OAAO;QAAA,CACR;QAED,IAAI,CAACrxB,OAAO+E,WAAAA,CAAYrD,KAAK,GAC3B;;QAIF,MAAMy2B,uBAAAA,oBADWz2B,MAAMQ,QAAAA,6DAAY,CAAA,CAAA,EACGmU,MAAAA,CACnCM,CAAAA,UAAYA,QAAQhV,KAAAA,KAAUgb,UAAU8U,UAAAA,CAAW9wB,IACtD,GAEM,CAACy3B,eAAeC,iBAAiB,CAAA,GAAIp0B,yJAAAA,CAAOQ,IAAAA,CAChDzE,QACAA,OAAOwE,SAAAA,EACP;YACE6sB,OAAO;QAAA,CAEX;QAEA,IAAI,CAACrxB,OAAOgF,UAAAA,CAAWozB,aAAa,GAClC;QAGF,MAAME,2DAAmC51B,KAAAA,8EAAOkJ,IAAAA,CAAM0K,CAAAA,OACpD6hB,qBAAqBtxB,IAAAA,CAAM8P,CAAAA,UAAYA,QAAQxV,IAAAA,KAASmV,IAAI,CAC9D;QAEA,IAAI,CAACgiB,oBACH;QAGF,MAAMC,kCAEF,CAAA,CAAA;QAEJ,KAAA,MAAW,CAACl2B,OAAO0K,SAAS,CAAA,IAAKjH,uJAAAA,CAAK1D,QAAAA,CAASpC,QAAQ+D,WAAW;YAChEirB,SAAS,CAAA;QAAA,CACV,EACC,IAAKhvB,OAAOgF,UAAAA,CAAW3C,KAAK,KAIvB2d,uJAAAA,CAAKiP,QAAAA,CAASliB,WAAWsrB,iBAAiB,GAI/C,0BAAU31B,KAAAA,8DAAO6T,QAAAA,CAAS+hB,kBAAkB,GAC1CC,gCAAgCxwB,IAAAA,CAAK;YAAC1F;YAAO0K,SAAS;SAAC;aAEvD;QAIJ,MAAMyrB,8BAEF,CAAA,CAAA;QAEJ,KAAA,MAAW,CAACn2B,OAAO0K,SAAS,CAAA,IAAKjH,uJAAAA,CAAK1D,QAAAA,CAASpC,QAAQ+D,SAAS,EAC9D,IAAK/D,OAAOgF,UAAAA,CAAW3C,KAAK,KAIvB2d,uJAAAA,CAAKoP,OAAAA,CAAQriB,WAAWsrB,iBAAiB,GAI9C,2BAAU31B,KAAAA,gEAAO6T,QAAAA,CAAS+hB,kBAAkB,GAC1CE,4BAA4BzwB,IAAAA,CAAK;YAAC1F;YAAO0K,SAAS;SAAC;aAEnD;QAIJ,KAAA,MAAW,CAAC1K,OAAO0K,SAAS,CAAA,IAAK,CAC/B;eAAGwrB;YACH;gBAACH;gBAAeC,iBAAiB;aAAA,EACjC;eAAGG,2BAA2B;SAAA,CAE9BhW,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;YACE0C,KAAAA,yBAAaA,KAAAA,gEAAO2T,MAAAA,CAAQC,CAAAA,OAASA,SAASgiB,kBAAkB;QAAA,GAElE;YAACn0B,IAAI4I;QAAAA,CACP;IAEJ,OAAO;QACLyV,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA,CAAA,GACA;YACEoE,OAAQK,CAAAA,OAASzE,OAAOgF,UAAAA,CAAWP,IAAI;YACvCkW,OAAO,CAAA;YACPmY,SAAS,CAAA;QAAA,CAEb;QAEA,MAAMxO,SAASrgB,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;YAClCmE,IAAInE,OAAOwE,SAAAA;YACXJ,OAAQK,CAAAA,OAASzE,OAAO+E,WAAAA,CAAYN,IAAI;QAAA,CACzC;QAED,KAAA,MAAW,CAAC/C,OAAOqC,SAAS,CAAA,IAAKugB,OAAQ;YACvC,MAAMliB,WAAW0D,uJAAAA,CAAK1D,QAAAA,CAASpC,QAAQ+D,SAAS;YAEhD,KAAA,MAAW,CAAC1B,OAAO0K,SAAS,CAAA,IAAK3K,SAAU;gBAKzC,IAJI,CAACpC,OAAOgF,UAAAA,CAAW3C,KAAK,KAIxB,CAAC8C,wJAAAA,CAAMoR,QAAAA,CAASvW,OAAOwE,SAAAA,EAAWuI,SAAS,GAC7C;sCAIY1K;gBADd,MAAMH,WAAWR,0BAAMQ,QAAAA,+DAAY,EAAA,EAC7BQ,+BAAcA,KAAAA,yDAAS,CAAA,CAAA,EACvB+1B,yBAAyB/1B,MAAM2T,MAAAA,CAAQC,CAAAA;wBAC3BpU;uDAAS0J,IAAAA,CAAM+K,CAAAA,WAAYA,SAAQxV,IAAAA,KAASmV,IAAI,mEAChD3U,KAAAA,MAAUgb,UAAU8U,UAAAA,CAAW9wB,IAChD;;gBAEG83B,uBAAuB/0B,MAAAA,KAAWhB,MAAMgB,MAAAA,IAC1C8e,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;oBACE0C,OAAO+1B;gBAAAA,GAET;oBAACt0B,IAAI4I;gBAAAA,CACP;YAEJ;QACF;IACF;AACF,GChJa2rB,kCAETA;QAAC,EAAChwB,OAAAA,EAASiU,SAAAA,EAAS,KAAM;QAkCTtb;IAjCnB,MAAMiD,aAAaqY,UAAU3c,MAAAA,CAAOyM,aAAAA,CAAcC,GAAAA,CAAIiQ,UAAUxY,EAAAA,CAAG,CAAC,CAAA,CAAEhD,IAAI;IAE1E,IAAImD,eAAeb,KAAAA,GACjB,MAAM,IAAIR,MACR,2CAAuE,CACzE,MAD6Cof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;IAI3E,MAAMzC,QAAQib,UAAU3c,MAAAA,CAAOkB,KAAAA,CAAMiD,EAAAA,CAAGG,UAAU;IAElD,IAAI,CAAC5C,OACH,MAAM,IAAIuB,MAAM,2BAAuD,CAAE,MAA9Bof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;IAGzE,MAAM,EAACxC,KAAAA,EAAO,GAAGg3B,eAAAA,GAAiBhc,UAAU9c,KAAAA,EAEtC+4B,eAAe;QACnB,GAAGl3B,KAAAA;QACH,GAAGi3B,aAAAA;IAAAA,GAGCnM,kBAAcC,4MAAAA,EAAW;QAC7B/jB;QACAhH,OAAOk3B;QACPpU,SAAS;YAACC,gBAAgB,CAAA;QAAA;IAAI,CAC/B;IAED,IAAI,CAAC+H,aACH,MAAM,IAAIvpB,MAAM,6BAAyD,CAAE,MAA9Bof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;IAG3EqoB,YAAYtqB,QAAAA,GAAW02B,aAAa12B,QAAAA;IAEpC,MAAM22B,2CAA0B;QAACrM,WAAW;KAAA,EAAG;QAC7ClrB,aAAaoH,QAAQpC,MAAAA;IAAAA,CACtB,iEAAGnC,EAAAA,CAAG,CAAC;IAER,IAAI,CAAC00B,YACH,MAAM,IAAI51B,MAAM,wCAAwC;IAG1Duf,6JAAAA,CAAW8N,QAAAA,CAAS3T,UAAU3c,MAAAA,EAAQ64B,YAAY;QAAC10B,IAAI;YAACG,UAAU;SAAA;IAAA,CAAE;AACtE,GCzCaw0B,oCAETA;QAAC,EAACpwB,OAAAA,EAASiU,SAAAA,EAAS,KAAM;QAmBT1Y;IAlBnB,MAAM80B,WAAW3tB,aAAa;QAC5B1C,SAAS;YACPpC,QAAQoC,QAAQpC,MAAAA;YAChBpF,OAAOyb,UAAU3c,MAAAA,CAAOkB,KAAAA;YACxBsD,WAAW;gBACTkD,QAAQ;oBAAC/C,MAAMgY,UAAUxY,EAAAA;oBAAIyD,QAAQ;gBAAA;gBACrClD,OAAO;oBAACC,MAAMgY,UAAUxY,EAAAA;oBAAIyD,QAAQ;gBAAA;YAAC;QACvC;QAEF6E,eAAekQ,UAAU3c,MAAAA,CAAOyM,aAAAA;IAAAA,CACjC;IAED,IAAI,CAACssB,UACH,MAAM,IAAI91B,MACR,qBAAiD,OAA5Bof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC,EAAA,oBACnD;IAIF,MAAMzC,iLADauC,CAAOQ,IAAAA,CAAKkY,UAAU3c,MAAAA,EAAQ+4B,UAAU;QAAC1H,OAAO;IAAA,CAAE,8DAAA,CAC1C,CAAC,CAAA;IAE5B,IAAI,CAAC3vB,OACH,MAAM,IAAIuB,MAAM,2BAAuD,CAAE,MAA9Bof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;IAGzE,MAAMqoB,cAAczpB,eAClB;QAACrB,KAAK;KAAA,EACNgH,QAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA,EACrB4M,qBAAqBb,GAAAA,CAAIiQ,UAAU3c,MAAM,CAC3C,EAAEmE,EAAAA,CAAG,CAAC;IAEN,IAAI,CAACqoB,aACH,MAAM,IAAIvpB,MAAM,4BAAwD,CAAE,MAA9Bof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;IAG1E,QAAIY,2KAAAA,EAAY2D,SAAS8jB,WAAW,GAAG;QACrC,MAAMwM,gBAAgBrc,UAAU9c,KAAAA,CAAMwW,MAAAA,CAAQ4iB,CAAAA,OAASA,SAAS,OAAO,GAEjEC,uBAAmBzM,4MAAAA,EAAW;YAClC/jB;YACAhH,WAAOy3B,4IAAAA,EAAK3M,aAAawM,aAAa;YACtCxU,SAAS;gBAACC,gBAAgB,CAAA;YAAA;QAAI,CAC/B;QAED,IAAI,CAACyU,kBACH,MAAM,IAAIj2B,MACR,6BAAyD,CAC3D,MAD+Bof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;QAI7D,MAAMi1B,aAAsC,CAAA;QAE5C,KAAA,MAAWH,QAAQD,cACXC,QAAQC,mBAGZE,UAAAA,CAAWH,IAAI,CAAA,GAAKC,gBAAAA,CAA6CD,IAAI,CAAA,GAFrEG,UAAAA,CAAWH,IAAI,CAAA,GAAIx1B,KAAAA;QAMvB+e,6JAAAA,CAAW8N,QAAAA,CAAS3T,UAAU3c,MAAAA,EAAQo5B,YAAY;YAACj1B,IAAI40B;QAAAA,CAAS;QAEhE;IACF;IAEA,MAAMM,yBAAqB5M,4MAAAA,EAAW;QACpC/jB;QACAhH,WAAOy3B,4IAAAA,EACL3M,aACA7P,UAAU9c,KAAAA,CAAMwW,MAAAA,CAAQ4iB,CAAAA,OAASA,SAAS,OAAO,CACnD;QACAzU,SAAS;YAACC,gBAAgB,CAAA;QAAA;IAAI,CAC/B;IAED,IAAI,CAAC4U,oBACH,MAAM,IAAIp2B,MAAM,6BAAyD,CAAE,MAA9Bof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;IAG3E,MAAM,EAACxC,KAAAA,EAAOR,IAAAA,EAAM,GAAGtB,OAAAA,GAASw5B;IAEhC7W,6JAAAA,CAAW8N,QAAAA,CACT3T,UAAU3c,MAAAA,EACV;QACE2B;QACAR;QACAD,OAAOrB;IAAAA,GAET;QAACsE,IAAI40B;IAAAA,CACP;AACF,GCjGaO,kCAETA;QAAC,EAAC5wB,OAAAA,EAASiU,SAAAA,EAAS,KAAM;IAC5B,MAAMoc,WAAW3tB,aAAa;QAC5B1C,SAAS;YACPpC,QAAQoC,QAAQpC,MAAAA;YAChBpF,OAAOyb,UAAU3c,MAAAA,CAAOkB,KAAAA;YACxBsD,WAAW;gBACTkD,QAAQ;oBAAC/C,MAAMgY,UAAUxY,EAAAA;oBAAIyD,QAAQ;gBAAA;gBACrClD,OAAO;oBAACC,MAAMgY,UAAUxY,EAAAA;oBAAIyD,QAAQ;gBAAA;YAAC;QACvC;QAEF6E,eAAekQ,UAAU3c,MAAAA,CAAOyM,aAAAA;IAAAA,CACjC;IAED,IAAI,CAACssB,UACH,MAAM,IAAI91B,MACR,qBAAiD,OAA5Bof,KAAKC,QAC5B,CAD4BA,CAAU3F,UAAUxY,EAAE,CAAC,EAAA;IAIrD,MAAMo1B,aAAat1B,yJAAAA,CAAOQ,IAAAA,CAAKkY,UAAU3c,MAAAA,EAAQ+4B,UAAU;QAAC1H,OAAO;IAAA,CAAE,GAC/DhvB,gEAAQk3B,UAAAA,CAAa,CAAC,CAAA,EACtBxsB,YAAYwsB,kEAAAA,CAAa,CAAC,CAAA;IAEhC,IAAI,CAACl3B,SAAS,CAAC0K,WACb,MAAM,IAAI9J,MAAM,2BAAuD,CAAE,MAA9Bof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;IAGzE,IAAIwY,UAAU3c,MAAAA,CAAOgF,UAAAA,CAAW3C,KAAK,GAAG;QACtC,MAAM,EAACV,KAAAA,EAAOc,IAAAA,EAAM,GAAGb,MAAAA,GAAQ+a,UAAU9c,KAAAA;QAEzC2iB,6JAAAA,CAAW8N,QAAAA,CACT3T,UAAU3c,MAAAA,EACV;YACE,GAAGqC,KAAAA;YACH,GAAGT,IAAAA;QAAAA,GAEL;YAACuC,IAAI4I;QAAAA,CACP,GAEI,OAAOtK,QAAS,YACdJ,MAAMI,IAAAA,KAASA,QAAAA,CACjBka,UAAU3c,MAAAA,CAAOmd,KAAAA,CAAM;YACrBtN,MAAM;YACNlL,MAAMoI;YACNnF,QAAQ;YACRnF,MAAMJ,MAAMI,IAAAA;QAAAA,CACb,GAEDka,UAAU3c,MAAAA,CAAOmd,KAAAA,CAAM;YACrBtN,MAAM;YACNlL,MAAMoI;YACNnF,QAAQ;YACRnF;QAAAA,CACD,CAAA;QAIL;IACF;IAEA,IAAIG,0JAAAA,CAAQC,SAAAA,CAAUR,KAAK,GAAG;QAC5B,MAAMm3B,aAAa9wB,QAAQpC,MAAAA,CAAO+L,aAAAA,CAAczG,IAAAA,CAC7C4tB,CAAAA,cAAeA,YAAW74B,IAAAA,KAAS0B,MAAMV,KAC5C;QAEA,IAAI,CAAC63B,YACH,MAAM,IAAIv2B,MACR,2DAAsE,CACxE,MAD6DZ,MAAMV,KAAK;QAI1E,MAAMT,QACJ,WAAWmB,SAAS,OAAOA,MAAMnB,KAAAA,IAAU,WAAWmB,MAAMnB,KAAAA,GAAQ,CAAA,GAChE,EAACS,KAAAA,EAAOR,IAAAA,EAAM,GAAGS,MAAAA,GAAQ+a,UAAU9c,KAAAA;QAEzC,IAAA,MAAWo5B,QAAQr3B,KACZ43B,WAAWC,MAAAA,CAAO5yB,IAAAA,CAAM6yB,CAAAA,QAAUA,MAAM/4B,IAAAA,KAASs4B,IAAI,KACxD,OAAOr3B,IAAAA,CAAKq3B,IAAI,CAAA;QAIpBzW,6JAAAA,CAAW8N,QAAAA,CACT3T,UAAU3c,MAAAA,EACV;YACE,GAAGqC,KAAAA;YACHlB,MAAM,OAAOA,QAAS,WAAWA,OAAOkB,MAAMlB,IAAAA;YAC9CD,OAAO;gBACL,GAAGA,KAAAA;gBACH,GAAGU,IAAAA;YAAAA;QACL,GAEF;YAACuC,IAAI4I;QAAAA,CACP;QAEA;IACF;IAEA,MAAM,IAAI9J,MACR,4CAAwE,CAC1E,MAD8Cof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;AAE5E,GCrGaw1B,oCAETA;QAAC,EAACjxB,OAAAA,EAASiU,SAAAA,EAAS,KAAM;IAC5B,MAAMoc,WAAW3tB,aAAa;QAC5B1C,SAAS;YACPpC,QAAQoC,QAAQpC,MAAAA;YAChBpF,OAAOyb,UAAU3c,MAAAA,CAAOkB,KAAAA;YACxBsD,WAAW;gBACTkD,QAAQ;oBAAC/C,MAAMgY,UAAUxY,EAAAA;oBAAIyD,QAAQ;gBAAA;gBACrClD,OAAO;oBAACC,MAAMgY,UAAUxY,EAAAA;oBAAIyD,QAAQ;gBAAA;YAAC;QACvC;QAEF6E,eAAekQ,UAAU3c,MAAAA,CAAOyM,aAAAA;IAAAA,CACjC;IAED,IAAI,CAACssB,UACH,MAAM,IAAI91B,MACR,qBAAiD,OAA5Bof,KAAKC,QAC5B,CAD4BA,CAAU3F,UAAUxY,EAAE,CAAC,EAAA;IAIrD,MAAMo1B,aAAat1B,yJAAAA,CAAOQ,IAAAA,CAAKkY,UAAU3c,MAAAA,EAAQ+4B,UAAU;QAAC1H,OAAO;IAAA,CAAE,GAC/DhvB,QAAQk3B,kEAAAA,CAAa,CAAC,CAAA,EACtBxsB,oEAAYwsB,UAAAA,CAAa,CAAC,CAAA;IAEhC,IAAI,CAACl3B,SAAS,CAAC0K,WACb,MAAM,IAAI9J,MAAM,2BAAuD,CAAE,MAA9Bof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;IAGzE,IAAIwY,UAAU3c,MAAAA,CAAOgF,UAAAA,CAAW3C,KAAK,GAAG;QAClCsa,UAAU9c,KAAAA,CAAM0W,QAAAA,CAAS,MAAM,KACjCoG,UAAU3c,MAAAA,CAAOmd,KAAAA,CAAM;YACrBtN,MAAM;YACNlL,MAAMoI;YACNnF,QAAQ;YACRnF,MAAMJ,MAAMI,IAAAA;QAAAA,CACb;QAGH,MAAMm3B,UAAmC,CAAA;QAEzC,KAAA,MAAWX,QAAQtc,UAAU9c,KAAAA,CAC3B,IAAIo5B,SAAS,SAKb;YAAA,IAAIA,SAAS,QAAQ;gBACnBW,QAAQz4B,IAAAA,GAAOuH,QAAQwM,YAAAA,CAAAA;gBACvB;YACF;YAEA0kB,OAAAA,CAAQX,IAAI,CAAA,GAAI;QAAA;QAGlBzW,6JAAAA,CAAW8N,QAAAA,CAAS3T,UAAU3c,MAAAA,EAAQ45B,SAAS;YAACz1B,IAAI4I;QAAAA,CAAU;QAE9D;IACF;IAEA,IAAInK,0JAAAA,CAAQC,SAAAA,CAAUR,KAAK,GAAG;QAC5B,MAAMnB,QACJ,WAAWmB,SAAS,OAAOA,MAAMnB,KAAAA,IAAU,WAAWmB,MAAMnB,KAAAA,GAAQ,CAAA,GAChEozB,UAAU3X,UAAU9c,KAAAA,CAAM4B,GAAAA,CAAKw3B,CAAAA,OAAAA,CAAU;gBAC7CppB,MAAM;gBACNlL,MAAM;oBAACs0B,IAAI;iBAAA;YAAA,CAAA,CACX,GACIY,eAAWC,yKAAAA,EAAS54B,OAAOozB,OAAO;QAExC9R,6JAAAA,CAAW8N,QAAAA,CACT3T,UAAU3c,MAAAA,EACV;YACE,GAAGqC,KAAAA;YACHlB,MAAMwb,UAAU9c,KAAAA,CAAM0W,QAAAA,CAAS,MAAM,IACjC7N,QAAQwM,YAAAA,KACR7S,MAAMlB,IAAAA;YACVD,OAAO24B;QAAAA,GAET;YAAC11B,IAAI4I;QAAAA,CACP;QAEA;IACF;IAEA,MAAM,IAAI9J,MACR,4CAAwE,CAC1E,MAD8Cof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;AAE5E,GCnFa41B,sCAETA;QAAC,EAACrxB,OAAAA,EAASiU,SAAAA,EAAS,KAAM;QASPA,eAUDA;;IAlBpB,MAAM3c,SAAS2c,UAAU3c,MAAAA,EACnBsW,OAAOqG,UAAUvF,SAAAA,EACjBlW,QAAQ6B,eACZ/C,OAAOoC,QAAAA,EACPsG,QAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA,EACrB4M,qBAAqBb,GAAAA,CAAI1M,MAAM,CACjC,GAEMg6B,2CAAyB71B,EAAAA,gEAAIuD,MAAAA,QAC/BqB,iOAAAA,EAAsC;QACpCL,SAAS;YACP,GAAGA,OAAAA;YACHxH;QAAAA;QAEF4L,aAAa6P,UAAUxY,EAAAA,CAAGuD,MAAAA;QAC1B8E,WAAW;IAAA,CACZ,IACD/I,KAAAA,GACEw2B,2CAAwB91B,EAAAA,kEAAIO,KAAAA,QAC9BqE,iOAAAA,EAAsC;QACpCL,SAAS;YACP,GAAGA,OAAAA;YACHxH;QAAAA;QAEF4L,aAAa6P,UAAUxY,EAAAA,CAAGO,KAAAA;QAC1B8H,WAAW;IAAA,CACZ,IACD/I,KAAAA,GACEy2B,kBACJF,gBAAgBC,cACZ;QACEvyB,QAAQsyB;QACRt1B,OAAOu1B;IAAAA,IAETx2B,KAAAA,GAEAe,YAAY01B,mBACb9uB,6BAAa;QACZ1C,SAAS;YACPpC,QAAQoC,QAAQpC,MAAAA;YAChBpF,OAAOyb,UAAU3c,MAAAA,CAAOkB,KAAAA;YACxBsD,WAAW01B;QAAAA;QAEbztB,eAAekQ,UAAU3c,MAAAA,CAAOyM,aAAAA;IAAAA,CACjC,0DAAKzM,OAAOwE,SAAAA,GACbxE,OAAOwE,SAAAA;IAEX,IAAI,CAACA,WACH;IAGF,MAAM21B,kBAAkB5yB,sBAAsB;QAC5CjB,QAAQoC,QAAQpC,MAAAA;QAChBtG;QACAwH,OAAOhD;IAAAA,CACR,GACK41B,eAAeD,sBACjBpxB,oOAAAA,EAAkC;QAChCL,SAAS;YACP,GAAGA,OAAAA;YACHxH;QAAAA;QAEFqL,gBAAgB4tB,gBAAgBzyB,MAAAA;IAAAA,CACjC,IACDjE,KAAAA,GACE42B,cAAcF,sBAChBpxB,oOAAAA,EAAkC;QAChCL,SAAS;YACP,GAAGA,OAAAA;YACHxH;QAAAA;QAEFqL,gBAAgB4tB,gBAAgBz1B,KAAAA;IAAAA,CACjC,IACDjB,KAAAA;IAEJ,IAAI,CAAC22B,gBAAgB,CAACC,aACpB,MAAM,IAAIp3B,MAAM,uCAAuC;IAGzD,IAAIkC,wJAAAA,CAAM+sB,UAAAA,CAAW1tB,SAAS,GAAG;QAE/Bge,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA,CAAA,GACA;YAACmE,IAAIK;YAAWJ,OAAOT,uJAAAA,CAAKC,MAAAA;YAAQ+W,OAAO,CAAA;YAAMmY,SAAS,CAAA;QAAA,CAC5D;QAGA,MAAM+G,WAAW92B,eACf/C,OAAOoC,QAAAA,EACPsG,QAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA,EACrB4M,qBAAqBb,GAAAA,CAAI1M,MAAM,CACjC,GAGMge,mBAAejV,8PAAAA,EAA8B;YACjDL,SAAS;gBACP,GAAGA,OAAAA;gBACHxH,OAAO24B;YAAAA;YAETS,SAAS;gBAAC5yB,QAAQ0yB;gBAAc11B,OAAO21B;YAAAA;YACvCxyB,QAAAA,oEAAUsyB,gBAAiBtyB,QAAAA;QAAAA,CAC5B,GAEK0yB,mBAAmBhsB,iPAAAA,EAA8B;YACrD9B,eAAezM,OAAOyM,aAAAA;YACtB/D,SAAS;gBACPuM,YAAY,CAAA,CAAA;gBACZC,cAAcxM,QAAQwM,YAAAA;gBACtBvD,UAAU,CAAA;gBACVrL,QAAQoC,QAAQpC,MAAAA;gBAChB9B,WAAWwZ;gBACX9c,OAAO24B;YAAAA;YAET1kB,gBAAgBnV,OAAOmV,cAAAA;QAAAA,CACxB;QAED,IAAI,CAAColB,kBACH,MAAM,IAAIt3B,MAAM,kCAAkC;QAGpD,MAAMqb,WAAWlT,aAAa;YAC5B1C,SAAS;gBACPpC,QAAQoC,QAAQpC,MAAAA;gBAChBpF,OAAOyb,UAAU3c,MAAAA,CAAOkB,KAAAA;gBACxBsD,WAAW+1B;YAAAA;YAEb9tB,eAAekQ,UAAU3c,MAAAA,CAAOyM,aAAAA;QAAAA,CACjC;QAED,IAAI,CAAC6R,UACH,MAAM,IAAIrb,MAAM,8BAA8B;QAIhD,MAAMu3B,iBAAiBr1B,wJAAAA,CAAM2Y,OAAAA,CAAQQ,QAAQ,IACzC,CACE;eAAGra,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;gBACtBmE,IAAIma;gBACJla,OAAQK,CAAAA,OAASd,uJAAAA,CAAKC,MAAAA,CAAOa,IAAI;YAAA,CAClC,CAAC;SAAA,GAEJ,CAAA,CAAA;QAEJ,KAAA,MAAW,CAACA,MAAME,IAAI,CAAA,IAAK61B,eAAgB;YACzC,MAAM93B,QAAQ,CACZ;mBAAA,CAAInB,MAAMC,OAAAA,CAAQiD,KAAK/B,KAAK,IAAI+B,KAAK/B,KAAAA,GAAQ,CAAA,CAAA,EAAI2T,MAAAA,CAC9C0c,CAAAA,QAAkBA,UAAUzc,IAC/B;gBACAA,IAAI;aAAA;YAENkM,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;gBAAC0C;YAAAA,GACD;gBAACyB,IAAIQ;gBAAMP,OAAOT,uJAAAA,CAAKC,MAAAA;gBAAQ+W,OAAO,CAAA;gBAAMmY,SAAS,CAAA;YAAA,CACvD;QACF;IACF,OAAO;;QAQL,IAAI,iBAPiBvxB,MAAMyC,IAAAA,CACzBC,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;YACnBmE,IAAIK;YACJJ,OAAQK,CAAAA,OAASzE,OAAOgF,UAAAA,CAAWP,IAAI;QAAA,CACxC,CACH,6DAAGN,EAAAA,CAAG,CAAC,IAGL;QAGF,MAAM,CAACzC,OAAOqC,SAAS,CAAA,GAAIE,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQwE,WAAW;YACxD6sB,OAAO;QAAA,CACR,GACK2B,kBACJhzB,OAAO+E,WAAAA,CAAYrD,KAAK,KACxBA,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,KAC1B1D,OAAOgF,UAAAA,CAAWtD,MAAMU,QAAAA,CAAS,CAAC,CAAC,KACnCV,MAAMU,QAAAA,CAAS,CAAC,CAAA,CAAEK,IAAAA,KAAS,KACvBf,MAAMU,QAAAA,CAAS,CAAC,CAAA,GAChBqB,KAAAA;QAEN,IAAIuvB,iBAAiB;gBACGA;YAAtB,MAAMyH,0DAAgC/3B,KAAAA,2EAAS,EAAA,EACzCuwB,gCAAgCwH,cAAcpkB,MAAAA,CACjD6c,CAAAA,eAAiBA,iBAAiB5c,IACrC;YAEAkM,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;gBACE0C,OACE+3B,cAAc/2B,MAAAA,KAAWuvB,8BAA8BvvB,MAAAA,GACnD,CAAC;uBAAG+2B;oBAAenkB,IAAI;iBAAA,GACvB2c;YAAAA,GAER;gBACE9uB,IAAIJ;gBACJK,OAAQK,CAAAA,OAASzE,OAAOgF,UAAAA,CAAWP,IAAI;YAAA,CAE3C;QACF,OACEzE,OAAOmV,cAAAA,CAAemB,IAAI,CAAA,GAAI,CAAA;IAElC;IAEA,IAAItW,OAAOwE,SAAAA,EAAW;QAEpB,MAAMA,aAAYxE,OAAOwE,SAAAA;QACzBxE,OAAOwE,SAAAA,GAAY;YAAC,GAAGA,UAAAA;QAAAA;IACzB;AACF,GC5Mak2B,gCAETA;QAAC,EAAChyB,OAAAA,EAASiU,SAAAA,EAAS,KAAM;IAC5B,MAAMge,qBAAiB1xB,+NAAAA,EAA8B0T,UAAUxY,EAAAA,CAAGuD,MAAM,GAClEkzB,gBAAgB3xB,mOAAAA,EAA8B0T,UAAUxY,EAAAA,CAAGO,KAAK,GAEhEm2B,gBAAgBle,UAAUxY,EAAAA,CAAG0D,QAAAA,GAAW+yB,gBAAgBD,gBACxDG,cAAcne,UAAUxY,EAAAA,CAAG0D,QAAAA,GAAW8yB,iBAAiBC,eACvDnQ,YAAY9N,UAAUxY,EAAAA,CAAG0D,QAAAA,GAC3B8U,UAAUxY,EAAAA,CAAGO,KAAAA,CAAMkD,MAAAA,GACnB+U,UAAUxY,EAAAA,CAAGuD,MAAAA,CAAOE,MAAAA;IAExB,IAAI,CAACizB,eACH,MAAM,IAAI53B,MAAM,+BAA+B;IAGjD,IAAI,CAAC63B,aACH,MAAM,IAAI73B,MAAM,6BAA6B;IAG/C,MAAM83B,kBAAkBpe,UAAU3c,MAAAA,CAAOyM,aAAAA,CAAcC,GAAAA,CAAImuB,aAAa;IAExE,IAAIE,oBAAoBt3B,KAAAA,GACtB,MAAM,IAAIR,MAAM,iCAAiC;IAGnD,MAAM+3B,aAAare,UAAU3c,MAAAA,CAAOkB,KAAAA,CAAMiD,EAAAA,CAAG42B,eAAe;IAE5D,IAAI,CAACC,YACH,MAAM,IAAI/3B,MAAM,2BAA2B;IAG7C,MAAMg4B,gBAAgBte,UAAU3c,MAAAA,CAAOyM,aAAAA,CAAcC,GAAAA,CAAIouB,WAAW;IAEpE,IAAIG,kBAAkBx3B,KAAAA,GACpB,MAAM,IAAIR,MAAM,+BAA+B;IAGjD,MAAMi4B,WAAWve,UAAU3c,MAAAA,CAAOkB,KAAAA,CAAMiD,EAAAA,CAAG82B,aAAa;IAExD,IAAI,CAACC,UACH,MAAM,IAAIj4B,MAAM,yBAAyB;IAG3C,MAAMk4B,kBACJR,mBAAmBl3B,KAAAA,IACfK,aAAa;QACX9D,QAAQ2c,UAAU3c,MAAAA;QAClBmB,MAAMw5B;IAAAA,CACP,IACDl3B,KAAAA,GACAkC,iBACJi1B,kBAAkBn3B,KAAAA,IACdK,aAAa;QACX9D,QAAQ2c,UAAU3c,MAAAA;QAClBmB,MAAMy5B;IAAAA,CACP,IACDn3B,KAAAA;IAEN,IACEkZ,UAAUxY,EAAAA,CAAGuD,MAAAA,CAAO/C,IAAAA,CAAKjB,MAAAA,KAAW,KACpCiZ,UAAUxY,EAAAA,CAAGO,KAAAA,CAAMC,IAAAA,CAAKjB,MAAAA,KAAW,KACnCy3B,mBACAx1B,kBACAw1B,eAAAA,CAAgB,CAAC,CAAA,KAAMx1B,cAAAA,CAAe,CAAC,CAAA,EACvC;QACA6c,6JAAAA,CAAW4Y,WAAAA,CAAYze,UAAU3c,MAAAA,EAAQ;YACvCmE,IAAI;gBAACg3B,eAAAA,CAAgB,CAAC,CAAC;aAAA;QAAA,CACxB,GAEGxe,UAAU3c,MAAAA,CAAOoC,QAAAA,CAASsB,MAAAA,KAAW,KACvC8e,6JAAAA,CAAWmP,WAAAA,CAAYhV,UAAU3c,MAAAA,EAAQ4uB,uBAAuBlmB,OAAO,CAAC;QAG1E;IACF;IAEA,MAAMlB,QAAQ4D,aAAa;QACzB1C,SAAS;YACPpC,QAAQoC,QAAQpC,MAAAA;YAChBpF,OAAOyb,UAAU3c,MAAAA,CAAOkB,KAAAA;YACxBsD,WAAWmY,UAAUxY,EAAAA;QAAAA;QAEvBsI,eAAekQ,UAAU3c,MAAAA,CAAOyM,aAAAA;IAAAA,CACjC;IAED,IAAI,CAACjF,OACH,MAAM,IAAIvE,MACR,2CAAuE,CACzE,MAD6Cof,KAAKC,SAAAA,CAAU3F,UAAUxY,EAAE,CAAC;IAI3E,IAAIwY,UAAUnQ,SAAAA,KAAc,cAAcmQ,UAAU0e,IAAAA,KAAS,QAAQ;QACnE,MAAMC,mBAAmBr3B,yJAAAA,CAAOs3B,KAAAA,CAAM5e,UAAU3c,MAAAA,EAAQ;YACtDoE,OAAQC,CAAAA,IAAMzB,0JAAAA,CAAQC,SAAAA,CAAUwB,CAAC,KAAKJ,yJAAAA,CAAOu3B,OAAAA,CAAQ7e,UAAU3c,MAAAA,EAAQqE,CAAC;YACxEF,IAAIqD;QAAAA,CACL;QAED,IAAI8zB,kBAAkB;YACpB,MAAM,CAAA,EAAGG,eAAe,CAAA,GAAIH,kBACtBI,qBAAqBz3B,yJAAAA,CAAOuD,KAAAA,CAChCmV,UAAU3c,MAAAA,EACVy7B,iBACAj0B,MAAME,MACR,GAEMi0B,mBAAmBC,qBACvBjf,UAAU3c,MAAAA,EACV07B,kBACF;YAEA,IAAI,CAACv2B,wJAAAA,CAAM8L,WAAAA,CAAY0qB,gBAAgB,GAAG;gBACxCnZ,6JAAAA,CAAWkM,MAAAA,CAAO/R,UAAU3c,MAAAA,EAAQ;oBAACmE,IAAIw3B;gBAAAA,CAAiB;gBAC1D;YACF;QACF;IACF;IAEA,MAAM7I,cAAU/tB,2KAAAA,EAAY2D,SAASwyB,QAAQ,KAAKzQ,cAAc;IAEhEoR,IAAAA,6JAAAA,EAAWlf,UAAU3c,MAAAA,EAAQ;QAC3BmE,IAAIqD;QACJwnB,SAASrS,UAAUnQ,SAAAA,KAAc;QACjC6uB,MAAM1e,UAAU0e,IAAAA;QAChBvI;IAAAA,CACD,GAGCnW,UAAU3c,MAAAA,CAAOwE,SAAAA,IACjBO,+KAAAA,EAAY2D,SAASsyB,UAAU,SAC/Bj2B,2KAAAA,EAAY2D,SAASwyB,QAAQ,KAE7BY,mKAAAA,EAAanf,UAAU3c,MAAAA,EAAQ;QAC7B0H,QAAQiV,UAAU3c,MAAAA,CAAOwE,SAAAA,CAAUE,KAAAA;QACnCA,OAAOiY,UAAU3c,MAAAA,CAAOwE,SAAAA,CAAUE,KAAAA;IAAAA,CACnC;AAEL;AAEA,SAASk3B,qBACP57B,MAAAA,EACA+7B,WAAAA,EACO;IACP,MAAMC,sBAAsB/3B,yJAAAA,CAAOuD,KAAAA,CAAMxH,QAAQmF,wJAAAA,CAAMM,GAAAA,CAAIs2B,WAAW,CAAC,GACjEE,YAAY16B,MAAMyC,IAAAA,CAAKC,yJAAAA,CAAOg4B,SAAAA,CAAUj8B,QAAQ;QAACmE,IAAI43B;IAAAA,CAAY,CAAC;IAExE,IAAIxkB,OAAO,GACPC,QAAQykB,UAAUv4B,MAAAA,EAClBw4B,SAASjyB,KAAKkyB,KAAAA,CAAM3kB,QAAQ,CAAC;IAEjC,IACE4kB,oBACEp8B,QACAiE,yJAAAA,CAAOuD,KAAAA,CAAMxH,QAAQi8B,SAAAA,CAAU1kB,IAAI,CAAC,GACpCykB,mBACF,GAEA,OAAO/3B,yJAAAA,CAAOuD,KAAAA,CAAMxH,QAAQi8B,SAAAA,CAAU1kB,IAAI,CAAA,EAAGykB,mBAAmB;IAGlE,IAAIC,UAAUv4B,MAAAA,GAAS,GACrB,OAAOO,yJAAAA,CAAOuD,KAAAA,CACZxH,QACAi8B,SAAAA,CAAUA,UAAUv4B,MAAAA,GAAS,CAAC,CAAA,EAC9Bs4B,mBACF;IAGF,MAAOE,WAAWD,UAAUv4B,MAAAA,IAAUw4B,WAAW3kB,MAE7C6kB,oBACEp8B,QACAiE,yJAAAA,CAAOuD,KAAAA,CAAMxH,QAAQi8B,SAAAA,CAAUC,MAAM,CAAC,GACtCF,mBACF,IAEAxkB,QAAQ0kB,SAER3kB,OAAO2kB,QAGTA,SAASjyB,KAAKkyB,KAAAA,CAAAA,CAAO5kB,OAAOC,KAAAA,IAAS,CAAC;IAGxC,OAAOvT,yJAAAA,CAAOuD,KAAAA,CAAMxH,QAAQi8B,SAAAA,CAAU1kB,IAAI,CAAA,EAAGykB,mBAAmB;AAClE;AAEA,SAASI,oBAAoBp8B,MAAAA,EAAmBq8B,MAAAA,EAAeC,MAAAA,EAAe;IAC5E,MAAMC,QAAQrzB,mKAAAA,CAAUqhB,UAAAA,CAAWvqB,QAAQq8B,MAAM,EAAE5yB,qBAAAA,CAAAA,GAC7C+yB,QAAQtzB,mKAAAA,CAAUqhB,UAAAA,CAAWvqB,QAAQs8B,MAAM,EAAE7yB,qBAAAA,CAAAA;IAEnD,OAAOgzB,kBAAkBF,OAAOC,KAAK,KAAKC,kBAAkBD,OAAOD,KAAK;AAC1E;AAEA,SAASE,kBAAkBC,IAAAA,EAAeC,WAAAA,EAAsB;IAC9D,MAAMT,SAAAA,CAAUS,YAAYhzB,GAAAA,GAAMgzB,YAAY7yB,MAAAA,IAAU;IAExD,OAAO4yB,KAAK/yB,GAAAA,IAAOuyB,UAAUQ,KAAK5yB,MAAAA,IAAUoyB;AAC9C;ACnMO,MAAMU,qCAETA;QAAC,EAACl0B,OAAAA,EAASiU,SAAAA,EAAS,KAAM;IAC5B,MAAM6P,kBAAcC,4MAAAA,EAAW;QAC7B/qB,OAAOib,UAAUjb,KAAAA;QACjBgH;QACA8b,SAAS;YAACC,gBAAgB,CAAA;QAAA;IAAI,CAC/B;IAED,IAAI,CAAC+H,aACH,MAAM,IAAIvpB,MAAM,yBAAwD,CAAE,MAAjCof,KAAKC,SAAAA,CAAU3F,UAAUjb,KAAK,CAAC;IAG1E,MAAMm7B,WAAWx7B,aAAa;QAACmrB,WAAW;KAAA,EAAG;QAAClrB,aAAaoH,QAAQpC,MAAAA;IAAAA,CAAO,CAAA,CAAE,CAAC,CAAA;IAE7E,IAAI,CAACu2B,UACH,MAAM,IAAI55B,MACR,6CAAwE,CAC1E,MAD+Cof,KAAKC,SAAAA,CAAUkK,WAAW,CAAC;;IAI5EsQ,YAAY;QACVp0B;QACAhH,OAAOm7B;QACPnY,WAAW/H,UAAU+H,SAAAA;QACrBjC,uCAAkBA,MAAAA,cAAV9F,mDAAoB;QAC5B3c,QAAQ2c,UAAU3c,MAAAA;IAAAA,CACnB;AACH;AAEO,SAAS88B,iBAYhB,EAAG;UAXDp0B,OAAAA,EACAhH,KAAAA,EACAgjB,SAAAA,EACAjC,MAAAA,EACAziB,MAAAA,EAOF,GAZ4B;IAa1B,MAAM,CAACg7B,YAAY+B,cAAc,CAAA,GAAI93B,uBAAuB;QAACjF;IAAAA,CAAO,GAC9D,CAACk7B,UAAU8B,YAAY,CAAA,GAAIz3B,qBAAqB;QAACvF;IAAAA,CAAO;IAE9D,IACE,CAACA,OAAOwE,SAAAA,IACR,CAACw2B,cACD,CAAC+B,kBACD,CAAC7B,YACD,CAAC8B,cACD;QACIva,WAAW,UACbvZ,mKAAAA,CAAUxE,KAAAA,CAAM1E,MAAM;QAGxB,MAAM,CAAC4J,WAAWxD,aAAa,CAAA,GAAID,aAAa;YAACnG;QAAAA,CAAO;QAExD,IAAI0kB,cAAc,UAChBlC,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;YAAC0B,KAAK;SAAA,EAAG;YAACyC,IAAI;gBAAC,CAAC;aAAA;QAAA,CAAE,GAE7Cse,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQ;YAAC,CAAC;SAAC,CAAC,IAC1CyiB,WAAW,SACpBD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQ;YAAC,CAAC;SAAC,CAAC;aAAA,IAE1C0kB,cAAc,SAAS;YAChC,MAAMuY,WAAW72B,gBAAgB;gBAACA,aAAAA,CAAc,CAAC,CAAA,GAAI,CAAC;aAAA,GAAI;gBAAC,CAAC;aAAA;YAC5Doc,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;gBAAC0B,KAAK;aAAA,EAAG;gBAACyC,IAAI84B;YAAAA,CAAS,GAElDxa,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQi9B,QAAQ,CAAC,IAC/Cxa,WAAW,SACpBD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQi9B,QAAQ,CAAC;QAE1D,OAAO;YAGL,IAAIrzB,aAAapG,qBAAqB;gBAACoG,SAAS;aAAA,EAAGlB,QAAQpC,MAAM,GAAG;gBAGlEkc,6JAAAA,CAAW4Y,WAAAA,CAAYp7B,QAAQ;oBAACmE,IAAIiC;gBAAAA,CAAc,GAElDoc,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;oBAAC0B,KAAK;iBAAA,EAAG;oBACtCyC,IAAIiC;oBACJqc,QAAQ,CAAA;gBAAA,CACT,GAEDD,6JAAAA,CAAWoI,QAAAA,CAAS5qB,MAAM,GAEtByiB,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQoG,aAAa,CAAC,IACpDqc,WAAW,SACpBD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQoG,aAAa,CAAC;gBAG7D;YACF;YAEA,IACEpG,OAAO+E,WAAAA,CAAYrD,KAAK,KACxBkI,aACA5J,OAAO+E,WAAAA,CAAY6E,SAAS,GAC5B;gBACA,MAAMszB,kBAAkBj5B,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQoG,aAAa;gBAExDoc,6JAAAA,CAAW2a,cAAAA,CAAen9B,QAAQ;oBAAC0B,KAAK;iBAAA,EAAG;oBACzCyC,IAAIF,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQoG,aAAa;gBAAA,CACrC,GAEGqc,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQk9B,eAAe,IAChCza,WAAW,UACpBD,6JAAAA,CAAWoI,QAAAA,CAAS5qB,MAAM;gBAG5B;YACF;YAEA,MAAMi9B,WAAW72B,gBAAgB;gBAACA,aAAAA,CAAc,CAAC,CAAA,GAAI,CAAC;aAAA,GAAI;gBAAC,CAAC;aAAA;YAE5Doc,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;gBAAC0B,KAAK;aAAA,EAAG;gBAACyC,IAAI84B;gBAAUxa,QAAQ,CAAA;YAAA,CAAM,GAEjEA,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQi9B,QAAQ,CAAC,IAC/Cxa,WAAW,SACpBD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQi9B,QAAQ,CAAC;QAE1D;IACF,OAAA,IACMvY,cAAc,UAAU;QAC1B,MAAM0Y,mBAAmBp9B,OAAOwE,SAAAA,EAC1BU,sBAAsBC,wJAAAA,CAAMC,KAAAA,CAAMg4B,gBAAgB;QAExD5a,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;YAAC0B,KAAK;SAAA,EAAG;YACtCyC,IAAI;gBAACe,oBAAoBP,IAAAA,CAAK,CAAC,CAAC;aAAA;YAChC8d,QAAQ,CAAA;QAAA,CACT,GAEGA,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CACTziB,QACAiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQ;YAACkF,oBAAoBP,IAAAA,CAAK,CAAC,CAAC;SAAC,CACpD,IACS8d,WAAW,SACpBD,6JAAAA,CAAWC,MAAAA,CACTziB,QACAiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQ;YAACkF,oBAAoBP,IAAAA,CAAK,CAAC,CAAC;SAAC,CAClD;IAEJ,OAAA,IAAW+f,cAAc,SAAS;QAChC,MAAM0Y,mBAAmBp9B,OAAOwE,SAAAA,EAG1By4B,WAAW;YAFS93B,wJAAAA,CAAMM,GAAAA,CAAI23B,gBAAgB,EAEhBz4B,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC;SAAA;QAE/C6d,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;YAAC0B,KAAK;SAAA,EAAG;YACtCyC,IAAI84B;YACJxa,QAAQ,CAAA;QAAA,CACT,GAEGA,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQi9B,QAAQ,CAAC,IAC/Cxa,WAAW,SACpBD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQi9B,QAAQ,CAAC;IAE1D,OAAO;QAGL,MAAMG,mBAAmBp9B,OAAOwE,SAAAA,EAC1B64B,mBAAmBp5B,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQg9B,YAAY;QAE1D,IAAI73B,wJAAAA,CAAM+sB,UAAAA,CAAWkL,gBAAgB,KAAK,CAACp9B,OAAO+E,WAAAA,CAAYrD,KAAK,GAAG;YACpE8gB,6JAAAA,CAAWkM,MAAAA,CAAO1uB,QAAQ;gBAACmE,IAAIi5B;YAAAA,CAAiB;YAEhD,MAAMpf,eAAehe,OAAOwE,SAAAA,EAEtB,CAACM,YAAYa,cAAc,CAAA,GAAIpB,cAAc;gBAACvE;YAAAA,CAAO;YAE3DwiB,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;gBAAC0B,KAAK;aAAA,EAAG;gBACtC2uB,OAAO,CAAA;YAAA,CACR;YAED,MAAMiN,oBACJtf,aAAatW,MAAAA,CAAOE,MAAAA,KAAW,IAC3BzC,wJAAAA,CAAM0X,SAAAA,CAAUmB,cAAc;gBAC5BnO,MAAM;gBACNpL,MAAM/C;gBACNiD,MAAM;oBAACqZ,aAAatW,MAAAA,CAAO/C,IAAAA,CAAK,CAAC,CAAC;iBAAA;YAAA,CACnC,IACDqZ;YAEFyE,WAAW,UAAU6a,qBACvB9a,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQs9B,iBAAiB,GAGzCx4B,cAActB,qBAAqB;gBAACsB,UAAU;aAAA,EAAG4D,QAAQpC,MAAM,KACjEkc,6JAAAA,CAAW4Y,WAAAA,CAAYp7B,QAAQ;gBAACmE,IAAIwB;YAAAA,CAAe;YAGrD;QACF;QAEA,IAAI3F,OAAO+E,WAAAA,CAAYm2B,QAAQ,KAAKl7B,OAAO+E,WAAAA,CAAYrD,KAAK,GAAG;gBAyB3Dw5B,oBAKuBx5B;YA7BzB,MAAMwD,sBAAsBC,wJAAAA,CAAMC,KAAAA,CAAMg4B,gBAAgB;YAExD,IAAI55B,qBAAqB;gBAAC03B,QAAQ;aAAA,EAAGxyB,QAAQpC,MAAM,GAAG;gBACpD,MAAM82B,oBAAmBp9B,OAAOwE,SAAAA;gBAEhCge,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;oBAAC0B,KAAK;iBAAA,EAAG;oBACtCyC,IAAI64B;oBACJva,QAAQ,CAAA;gBAAA,CACT,GACDD,6JAAAA,CAAW4Y,WAAAA,CAAYp7B,QAAQ;oBAACmE,IAAI6b,uJAAAA,CAAKud,IAAAA,CAAKP,YAAY;gBAAA,CAAE,GAExDva,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQkF,mBAAmB,IACpCud,WAAW,QACpBD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQg9B,YAAY,CAAC,IAE1Dxa,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQo9B,iBAAgB;gBAG5C;YACF;;YAEA,MAAMI,oBAAoBtC,SAAS94B,QAAAA,CAASX,GAAAA,CAAKY,CAAAA,QAAUA,MAAMlB,IAAI,GAC/Ds8B,gFACKv7B,QAAAA,0EAAUT,GAAAA,CAAKkV,CAAAA,UAAYA,QAAQxV,IAAI,4EAAK,CAAA,CAAA,EAIjDu8B,gBAAgB,aAAA,GAAA,IAAIvP,OACpBwP,4CAAyBz7B,QAAAA,oEAAUT,GAAAA,CAAKkV,CAAAA,YAAY;gBACxD,IAAI8mB,qBAAqBlnB,QAAAA,CAASI,QAAQxV,IAAI,GAAG;oBAC/C,MAAMy8B,SAASl1B,QAAQwM,YAAAA,CAAAA;oBACvBwoB,OAAAA,cAAcnP,GAAAA,CAAI5X,QAAQxV,IAAAA,EAAMy8B,MAAM,GAC/B;wBACL,GAAGjnB,OAAAA;wBACHxV,MAAMy8B;oBAAAA;gBAEV;gBAEA,OAAOjnB;YACT,CAAC,GAIKknB,mBAAmBn8B,MAAMU,QAAAA,CAASX,GAAAA,CAAKY,CAAAA,UAAU;gBACrD,QAAI4K,sKAAAA,EAAOvE,SAASrG,KAAK,GAAG;;wBAExBA;oBADF,MAAMK,kDACEA,KAAAA,8DAAOjB,GAAAA,CAAK6U,CAAAA,OACGonB,cAAchxB,GAAAA,CAAI4J,IAAI,KAMlCA,IACR,gEAAK,CAAA,CAAA;oBAER,IAAI,KAAClV,+IAAAA,EAAQiB,MAAMK,KAAAA,EAAOA,KAAK,GAC7B,OAAO;wBACL,GAAGL,KAAAA;wBACHlB,MAAMq8B,kBAAkBjnB,QAAAA,CAASlU,MAAMlB,IAAI,IACvCuH,QAAQwM,YAAAA,KACR7S,MAAMlB,IAAAA;wBACVuB;oBAAAA;gBAGN;gBAEA,OAAI86B,kBAAkBjnB,QAAAA,CAASlU,MAAMlB,IAAI,IAChC;oBACL,GAAGkB,KAAAA;oBACHlB,MAAMuH,QAAQwM,YAAAA,CAAAA;gBAAa,IAIxB7S;YACT,CAAC;gBAOS64B;YAJV1Y,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;gBACEkC,UAAU,CACR;uDAAaA,QAAAA,qEAAY,CAAA,CAAA,EACzB;uBAAIy7B,8EAAoB,CAAA,CAAG;iBAAA;YAAA,GAG/B;gBACEx5B,IAAI64B;YAAAA,CAER;YAIA,MAAMc,oBAAiB18B,+IAAAA,EAAQM,MAAMU,QAAAA,EAAUy7B,gBAAgB,IAK3Dn8B,QAJA;gBACE,GAAGA,KAAAA;gBACHU,UAAUy7B;YAAAA;YAIhB,IAAIpb,WAAW,OAAO;gBACpBD,6JAAAA,CAAW2a,cAAAA,CAAen9B,QAAQ;oBAAC89B,aAAa;iBAAA,EAAG;oBACjDzN,OAAO,CAAA;gBAAA,CACR;gBAED;YACF;YAEA7N,6JAAAA,CAAW2a,cAAAA,CAAen9B,QAAQ;gBAAC89B,aAAa;aAAA,EAAG;gBACjD35B,IAAIi5B;gBACJ/M,OAAO,CAAA;YAAA,CACR,GAEG5N,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQkF,mBAAmB,IAExC0X,wJAAAA,CAAME,MAAAA,CAAO5X,qBAAqBm4B,gBAAgB,KACrD7a,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQkF,mBAAmB;QAGnD,OAAA,IACOlF,OAAO+E,WAAAA,CAAYm2B,QAAQ,GAUzB;YACL,MAAM6C,qBAAqB95B,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQg9B,YAAY,GACtDK,oBAAmBp5B,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQg9B,YAAY,GAClD93B,sBAAsBC,wJAAAA,CAAMC,KAAAA,CAAMg4B,gBAAgB,GAClD53B,oBAAoBL,wJAAAA,CAAMM,GAAAA,CAAI23B,gBAAgB;YAEpD,IACEj4B,wJAAAA,CAAM8L,WAAAA,CAAYmsB,gBAAgB,KAClCxgB,wJAAAA,CAAME,MAAAA,CAAO5X,qBAAqB64B,kBAAkB,GAEpDvb,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;gBAAC0B,KAAK;aAAA,EAAG;gBACtCyC,IAAI64B;gBACJva,QAAQ,CAAA;YAAA,CACT,GAAA,CAEGA,WAAW,WAAWA,WAAW,KAAA,KACnCD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQg9B,YAAY,CAAC,GAG1DgB,mOAAAA,EAAiBt1B,SAASwyB,QAAQ,KACpC1Y,6JAAAA,CAAW4Y,WAAAA,CAAYp7B,QAAQ;gBAACmE,IAAI6b,uJAAAA,CAAKud,IAAAA,CAAKP,YAAY;YAAA,CAAE;iBAAA,IAG9D73B,wJAAAA,CAAM8L,WAAAA,CAAYmsB,gBAAgB,KAClCxgB,wJAAAA,CAAME,MAAAA,CAAOtX,mBAAmB63B,iBAAgB,GAChD;gBACA,MAAMJ,WAAW;oBAACD,YAAAA,CAAa,CAAC,CAAA,GAAI,CAAC;iBAAA;gBAErCxa,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;oBAAC0B,KAAK;iBAAA,EAAG;oBACtCyC,IAAI84B;oBACJxa,QAAQ,CAAA;gBAAA,CACT,GAAA,CAEGA,WAAW,WAAWA,WAAW,KAAA,KACnCD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQi9B,QAAQ,CAAC;YAE5D,OAAA,IACE93B,wJAAAA,CAAM+sB,UAAAA,CAAWkL,gBAAgB,KACjCxgB,wJAAAA,CAAME,MAAAA,CAAO5X,qBAAqB64B,kBAAkB,KACpDnhB,wJAAAA,CAAME,MAAAA,CAAOtX,mBAAmB63B,iBAAgB,GAEhD7a,6JAAAA,CAAW2a,cAAAA,CAAen9B,QAAQ;gBAAC0B,KAAK;aAAA,EAAG;gBACzCyC,IAAIi5B;YAAAA,CACL,GAEG3a,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQg9B,YAAY,CAAC,IACnDva,WAAW,SACpBD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQg9B,YAAY,CAAC;iBAAA,IAG5D73B,wJAAAA,CAAM+sB,UAAAA,CAAWkL,gBAAgB,KACjCxgB,wJAAAA,CAAME,MAAAA,CAAO5X,qBAAqB64B,kBAAkB,GAEpDvb,6JAAAA,CAAW2a,cAAAA,CAAen9B,QAAQ;gBAAC0B,KAAK;aAAA,EAAG;gBACzCyC,IAAIi5B;YAAAA,CACL,GAEG3a,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQg9B,YAAY,CAAC,IACnDva,WAAW,SACpBD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQg9B,YAAY,CAAC;iBAAA,IAG5D73B,wJAAAA,CAAM+sB,UAAAA,CAAWkL,gBAAgB,KACjCxgB,wJAAAA,CAAME,MAAAA,CAAOtX,mBAAmB63B,iBAAgB,GAEhD7a,6JAAAA,CAAW2a,cAAAA,CAAen9B,QAAQ;gBAAC0B,KAAK;aAAA,EAAG;gBACzCyC,IAAIi5B;YAAAA,CACL,GAEG3a,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CACTziB,QACAiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQggB,uJAAAA,CAAKud,IAAAA,CAAKP,YAAY,CAAC,CAC9C,IACSva,WAAW,SACpBD,6JAAAA,CAAWC,MAAAA,CACTziB,QACAiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQggB,uJAAAA,CAAKud,IAAAA,CAAKP,YAAY,CAAC,CAC5C;iBAEG;gBACL,MAAMI,oBAAmBp9B,OAAOwE,SAAAA,EAC1B,CAACqB,UAAU,CAAA,GAAIH,cAAc;oBAAC1F;gBAAAA,CAAO;gBAE3C,IAAI6F,cAAc7F,OAAOgF,UAAAA,CAAWa,UAAU,GAC5C2c,6JAAAA,CAAWyb,UAAAA,CAAWj+B,QAAQ;oBAC5BmE,IAAIi5B;gBAAAA,CACL,GAED5a,6JAAAA,CAAW2a,cAAAA,CAAen9B,QAAQ;oBAAC0B,KAAK;iBAAA,EAAG;oBACzCyC,IAAIi5B;gBAAAA,CACL,GAEG3a,WAAW,WAAWA,WAAW,QACnCD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQ;oBAACg9B,YAAAA,CAAa,CAAC,CAAA,GAAI,CAAC;iBAAC,IAE/Cxa,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQo9B,iBAAgB;qBAEvC;oBACL,MAAMH,WAAW;wBAACD,YAAAA,CAAa,CAAC,CAAA,GAAI,CAAC;qBAAA;oBACrCxa,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;wBAAC0B,KAAK;qBAAA,EAAG;wBACtCyC,IAAI84B;wBACJxa,QAAQ,CAAA;oBAAA,CACT,GACDD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQo9B,iBAAgB,GAEtC3a,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQi9B,QAAQ,CAAC,IAC/Cxa,WAAW,SACpBD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQi9B,QAAQ,CAAC;gBAE1D;YACF;QACF,OA7HmC;YACjCza,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ;gBAAC0B,KAAK;aAAA,EAAG;gBAAC+gB,QAAQ,CAAA;YAAA,CAAM;YAEvD,MAAMwa,WAAW;gBAACD,YAAAA,CAAa,CAAC,CAAA,GAAI,CAAC;aAAA;YAEjCva,WAAW,UACbD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOmB,KAAAA,CAAMpF,QAAQi9B,QAAQ,CAAC,IAC/Cxa,WAAW,SACpBD,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQiE,yJAAAA,CAAOwB,GAAAA,CAAIzF,QAAQi9B,QAAQ,CAAC;QAE1D;IAqHJ;AAEJ;AChdO,MAAMiB,oCAETA;QAAC,EAACx1B,OAAAA,EAASiU,SAAAA,EAAS,KAAM;IAC5B,MAAMzQ,WAA2B;QAC/BO,eAAekQ,UAAU3c,MAAAA,CAAOyM,aAAAA;QAChC/D,SAAS;YACPxH,OAAOyb,UAAU3c,MAAAA,CAAOkB,KAAAA;YACxBsD,WAAWmY,UAAU3c,MAAAA,CAAOwE,SAAAA,GACxB+C,sBAAsB;gBACpBjB,QAAQoC,QAAQpC,MAAAA;gBAChBtG,QAAQ2c,UAAU3c,MAAAA;gBAClBwH,OAAOmV,UAAU3c,MAAAA,CAAOwE,SAAAA;YAAAA,CACzB,IACD;YACJ8B,QAAQoC,QAAQpC,MAAAA;YAChB4O,cAAcxM,QAAQwM,YAAAA;YACtBD,YAAY,CAAA,CAAA;YACZtD,UAAU,CAAA;QAAA;QAEZwD,gBAAgBwH,UAAU3c,MAAAA,CAAOmV,cAAAA;IAAAA,GAG7B4c,gBAAYC,sOAAAA,EAAa9lB,QAAQ,GACjCiyB,uBAAmB1L,6OAAAA,EAAoBvmB,QAAQ,GAC/CkyB,wBAAoBC,mPAAAA,EAA0BnyB,QAAQ,GAEtD,CAAC8kB,SAAS,CAAA,GAAInsB,aAAa;QAC/B7E,QAAQ2c,UAAU3c,MAAAA;IAAAA,CACnB;IAED,IAAI,CAACgxB,WAAW;QACdxO,6JAAAA,CAAW8b,UAAAA,CAAW3hB,UAAU3c,MAAAA,EAAQ2c,UAAUla,IAAI;QACtD;IACF;IAEA,IAAIsvB,aAAaA,UAAUE,KAAAA,KAAU,aAAa;;QAChD,MAAMsM,sBAAAA,+BAAiC77B,KAAAA,4CAAVqvB,mBAAmB,CAAA,CAAA,EAAI1b,MAAAA,CAAQC,CAAAA,OAC1D5N,QAAQpC,MAAAA,CAAO6P,UAAAA,CACZ1U,GAAAA,CAAK2V,CAAAA,YAAcA,UAAUzW,IAAI,EACjC4V,QAAAA,CAASD,IAAI,CAClB;QAEA,IACEioB,oBAAoB76B,MAAAA,KAAWy6B,iBAAiBz6B,MAAAA,IAChD66B,oBAAoBn3B,KAAAA,CAAOkP,CAAAA,OAAS6nB,iBAAiB5nB,QAAAA,CAASD,IAAI,CAAC,GACnE;YACAkM,6JAAAA,CAAW8b,UAAAA,CAAW3hB,UAAU3c,MAAAA,EAAQ2c,UAAUla,IAAI;YACtD;QACF;IACF;IAEA+f,6JAAAA,CAAWmP,WAAAA,CAAYhV,UAAU3c,MAAAA,EAAQ;QACvC2B,OAAOqvB,UAAUrvB,KAAAA;QACjBR,MAAMuH,QAAQwM,YAAAA,CAAAA;QACdzS,MAAMka,UAAUla,IAAAA;QAChBC,OAAO,CAAC;eAAGy7B,kBAAkB;eAAGC,iBAAiB;SAAA;IAAA,CAClD,GAIDI,qLAAAA,CAA4BjQ,GAAAA,CAAI5R,UAAU3c,MAAAA,EAAQ2c,UAAU3c,MAAAA,CAAOwE,SAAS,GAE5EmY,UAAU3c,MAAAA,CAAOmV,cAAAA,GAAiB,CAAA;AACpC,GCxEaspB,sCAETA;QAAC,EAAC9hB,SAAAA,EAAS,KAAM;IACnB6F,6JAAAA,CAAWkc,IAAAA,CAAK/hB,UAAU3c,MAAAA,EAAQ;QAChCq7B,MAAM;QACNsD,UAAUhiB,UAAUgiB,QAAAA;QACpB3P,SAAS,CAAA;IAAA,CACV;AACH,GCPa4P,mCAETA;QAAC,EAACjiB,SAAAA,EAAS,KAAM;IACnB,MAAMkiB,YAAY51B,mOAAAA,EAA8B;QAC9CtE,MAAMgY,UAAUxY,EAAAA;IAElB,CAAC;IAED,IAAI,CAAC06B,WACH,MAAM,IAAI57B,MAAM,8CAA8C;IAGhE,MAAM67B,mBAAmBniB,UAAU3c,MAAAA,CAAOyM,aAAAA,CAAcC,GAAAA,CAAImyB,SAAS;IAErE,IAAIC,qBAAqBr7B,KAAAA,GACvB,MAAM,IAAIR,MAAM,0CAA0C;IAG5D,MAAM87B,qBAAiB91B,+NAAAA,EAA8B;QACnDtE,MAAMgY,UAAUqiB,EAAAA;IAElB,CAAC;IAED,IAAI,CAACD,gBACH,MAAM,IAAI97B,MAAM,8CAA8C;IAGhE,MAAMg8B,wBACJtiB,UAAU3c,MAAAA,CAAOyM,aAAAA,CAAcC,GAAAA,CAAIqyB,cAAc;IAEnD,IAAIE,0BAA0Bx7B,KAAAA,GAC5B,MAAM,IAAIR,MAAM,0CAA0C;IAG5Duf,6JAAAA,CAAW0c,SAAAA,CAAUviB,UAAU3c,MAAAA,EAAQ;QACrCmE,IAAI;YAAC26B,gBAAgB;SAAA;QACrBE,IAAI;YAACC,qBAAqB;SAAA;QAC1Br4B,MAAM;IAAA,CACP;AACH,GCxCau4B,qCAETA;QAAC,EAACxiB,SAAAA,EAAS,KAAM;IACnB6F,6JAAAA,CAAWkc,IAAAA,CAAK/hB,UAAU3c,MAAAA,EAAQ;QAChCq7B,MAAM;QACNsD,UAAUhiB,UAAUgiB,QAAAA;IAAAA,CACrB;AACH,GCLaS,gCAETA;QAAC,EAAC12B,OAAAA,EAASiU,SAAAA,EAAS,KAAM;IAC5B,MAAMqB,eAAe5S,aAAa;QAChC1C,SAAS;YACPpC,QAAQoC,QAAQpC,MAAAA;YAChBpF,OAAOyb,UAAU3c,MAAAA,CAAOkB,KAAAA;YACxBsD,WAAWmY,UAAUxY,EAAAA;QAAAA;QAEvBsI,eAAekQ,UAAU3c,MAAAA,CAAOyM,aAAAA;IAAAA,CACjC;IAEGuR,eACFwE,6JAAAA,CAAWC,MAAAA,CAAO9F,UAAU3c,MAAAA,EAAQge,YAAY,IAEhDwE,6JAAAA,CAAWoI,QAAAA,CAASjO,UAAU3c,MAAM,GAGlCq/B,oKAAAA,CAAW3yB,GAAAA,CAAIiQ,UAAU3c,MAAM,KAAKs/B,sKAAAA,CAAa5yB,GAAAA,CAAIiQ,UAAU3c,MAAM,KACvEq/B,oKAAAA,CAAW9Q,GAAAA,CAAI5R,UAAU3c,MAAAA,EAAQ,CAAA,CAAK;AAE1C,GC6BMu/B,mCAAqE;IACzE,kBAAkBzH;IAClB,qBAAqBI;IACrB,aAAaQ;IACb,eAAeI;IACf,aAAaQ;IACb,eAAeK;IACf,iBAAiBI;IACjB,oBAAoBlH;IACpB,QAAU6H;IACV,gBAAgBpE;IAChB,gBAAgBZ;IAChB,gBAAgBkH;IAChB,eAAesB;IACf,iBAAiBO;IACjB,cAAcG;IACd,gBAAgBO;IAChB,QAAUC;AACZ;AAEO,SAASI,sBAMhB;UALE92B,OAAAA,EACAiU,SAAAA,EAIF,EAAG,CAN8B;IAO/B1Y,yJAAAA,CAAOuuB,kBAAAA,CAAmB7V,UAAU3c,MAAAA,EAAQ,MAAM;QAChD,IAAI;YACF,OAAQ2c,UAAU9M,IAAAA,EAAAA;gBAChB,KAAK;oBAAkB;wBACrB0vB,gCAAAA,CAAiC,gBAAgB,CAAA,CAAE;4BACjD72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAqB;wBACxB4iB,gCAAAA,CAAiC,mBAAmB,CAAA,CAAE;4BACpD72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAa;wBAChB4iB,gCAAAA,CAAiC,WAAW,CAAA,CAAE;4BAC5C72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAe;wBAClB4iB,gCAAAA,CAAiC,aAAa,CAAA,CAAE;4BAC9C72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAa;wBAChB4iB,gCAAAA,CAAiC,WAAW,CAAA,CAAE;4BAC5C72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAe;wBAClB4iB,gCAAAA,CAAiC,aAAa,CAAA,CAAE;4BAC9C72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAiB;wBACpB4iB,gCAAAA,CAAiC,eAAe,CAAA,CAAE;4BAChD72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAoB;wBACvB4iB,gCAAAA,CAAiC,kBAAkB,CAAA,CAAE;4BACnD72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAU;wBACb4iB,iCAAiC7Q,MAAAA,CAAO;4BACtChmB;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAgB;wBACnB4iB,gCAAAA,CAAiC,cAAc,CAAA,CAAE;4BAC/C72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAgB;wBACnB4iB,gCAAAA,CAAiC,cAAc,CAAA,CAAE;4BAC/C72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAgB;wBACnB4iB,gCAAAA,CAAiC,cAAc,CAAA,CAAE;4BAC/C72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAe;wBAClB4iB,gCAAAA,CAAiC,aAAa,CAAA,CAAE;4BAC9C72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAiB;wBACpB4iB,gCAAAA,CAAiC,eAAe,CAAA,CAAE;4BAChD72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAc;wBACjB4iB,gCAAAA,CAAiC,YAAY,CAAA,CAAE;4BAC7C72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA,KAAK;oBAAgB;wBACnB4iB,gCAAAA,CAAiC,cAAc,CAAA,CAAE;4BAC/C72B;4BACAiU;wBAAAA,CACD;wBACD;oBACF;gBACA;oBAAS;wBACP4iB,iCAAiC9c,MAAAA,CAAO;4BACtC/Z;4BACAiU;wBAAAA,CACD;wBACD;oBACF;YAAA;QAEJ,EAAA,OAASnL,OAAO;YACdtG,QAAQsG,KAAAA,CACN,IAAIvO,MACF,qBAAc0Z,UAAU9M,IAAI,EAAA,qBAAiC,CAC/D,CACF,KAFoD2B,MAAMiuB,OAAO;QAGnE;IACF,CAAC;AACH;ACnNA,MAAMC,0BAAAA,aAAAA,GAAAA,IACAryB,QAAAA;AAEC,SAASsyB,gCACd3/B,MAAAA,EACAye,EAAAA,EACA;IACA,MAAM6Q,OAAOoQ,wBAAwBhzB,GAAAA,CAAI1M,MAAM;IAE/C0/B,wBAAwBnR,GAAAA,CAAIvuB,QAAQ,CAAA,CAAI,GAExCye,MAEAihB,wBAAwBnR,GAAAA,CAAIvuB,QAAQsvB,IAAI;AAC1C;AAEO,SAASsQ,8BAA8B5/B,MAAAA,EAAgB;;IAC5D,+DAA+B0M,GAAAA,CAAI1M,MAAM,yDAAlC0/B,+BAAuC,CAAA;AAChD;ACdO,SAASG,yBAAyB53B,WAAAA,EAA0B;IACjE,OAAO,SAA4BjI,MAAAA,EAAgB;QACjD,IAAIiI,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQo3B,SAAAA,KAAcr8B,KAAAA,GAClD,OAAOzD;QAGT,MAAM,EAAC0uB,QAAQqR,YAAAA,EAActd,MAAAA,EAAAA,GAAUziB;QAEvCA,OAAAA,OAAO0uB,MAAAA,GAAUlK,CAAAA,YAAY;YAC3B,IAAIob,8BAA8B5/B,MAAM,GAAG;gBACzC+/B,aAAavb,OAAO;gBACpB;YACF;;YAEA,MAAMrgB,oBAAKqgB,0DAASrgB,EAAAA,qDAAMnE,OAAOwE,SAAAA;YAEjC,IAAI,CAACL,IAAI;gBACP+G,QAAQsG,KAAAA,CAAM,qDAAqD;gBACnE;YACF;YAEA,MAAMhK,QAAQvD,yJAAAA,CAAOuD,KAAAA,CAAMxH,QAAQmE,EAAE,GAE/BK,YAAY+C,sBAAsB;gBACtCjB,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;gBAC1CtG;gBACAwH;YAAAA,CACD;YAED,IAAI,CAAChD,WAAW;gBACd0G,QAAQsG,KAAAA,CACN,0DACF;gBACA;YACF;YAEAvJ,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACN1L,IAAIK;oBACJgI,gCAAWgY,sCAASwK,OAAAA,IAAU,aAAa;oBAC3CqM,IAAAA,oDAAM7W,QAAS6W,IAAAA;gBAAAA;gBAEjBr7B;YAAAA,CACD;QACH,GAEAA,OAAOggC,cAAAA,GAAkB3E,CAAAA,SAAS;YAChC,IAAIuE,8BAA8B5/B,MAAM,GAAG;gBACzCkL,QAAQsG,KAAAA,CAAM,yCAAyC;gBACvD;YACF;YAEAvJ,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACNwrB;gBAAAA;gBAEFr7B;YAAAA,CACD;QAEH,GAEAA,OAAOigC,aAAAA,GAAiB5E,CAAAA,SAAS;YAC/B,IAAIuE,8BAA8B5/B,MAAM,GAAG;gBACzCkL,QAAQsG,KAAAA,CAAM,wCAAwC;gBACtD;YACF;YAEAvJ,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACNwrB;gBAAAA;gBAEFr7B;YAAAA,CACD;QAEH,GAEAA,OAAOkgC,WAAAA,GAAc,MAAM;YACzB,IAAIN,8BAA8B5/B,MAAM,GAAG;gBACzCkL,QAAQsG,KAAAA,CAAM,sCAAsC;gBACpD;YACF;YAEAvJ,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;gBAAA;gBAER7P;YAAAA,CACD;QAEH,GAEAA,OAAOmgC,UAAAA,GAAc/c,CAAAA,iBAAiB;YACpC,IAAIwc,8BAA8B5/B,MAAM,GAAG;gBACzCkL,QAAQsG,KAAAA,CAAM,qCAAqC;gBACnD;YACF;YAEAvJ,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACNsT,aAAa;wBACXC;oBAAAA;gBACF;gBAEFpjB;YAAAA,CACD;QACH,GAEAA,OAAOogC,eAAAA,GAAkB,MAAM;YAC7B,IAAIR,8BAA8B5/B,MAAM,GAAG;gBACzCw/B,iBAAiB;oBACf92B,SAAS;wBACPwM,cAAcjN,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA;wBAChD5O,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;oBAAAA;oBAE5CqW,WAAW;wBAAC9M,MAAM;wBAAepN,MAAM;wBAAMzC;oBAAAA;gBAAM,CACpD;gBACD;YACF;YAEAiI,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;gBAAA;gBAER7P;YAAAA,CACD;QAEH,GAEAA,OAAOs+B,UAAAA,GAAc77B,CAAAA,SAAS;YAC5B,IAAIm9B,8BAA8B5/B,MAAM,GAAG;gBACzCw/B,iBAAiB;oBACf92B,SAAS;wBACPwM,cAAcjN,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA;wBAChD5O,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;oBAAAA;oBAE5CqW,WAAW;wBAAC9M,MAAM;wBAAepN;wBAAMzC;oBAAAA;gBAAM,CAC9C;gBACD;YACF;YAEAiI,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACNpN;gBAAAA;gBAEFzC;YAAAA,CACD;QAEH,GAEAA,OAAOqgC,IAAAA,GAAO,MAAM;YAClB,IAAIT,8BAA8B5/B,MAAM,GAAG;gBACzCw/B,iBAAiB;oBACf92B,SAAS;wBACPwM,cAAcjN,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA;wBAChD5O,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;oBAAAA;oBAE5CqW,WAAW;wBACT9M,MAAM;wBACN7P;oBAAAA;gBACF,CACD;gBACD;YACF;YAEAiI,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;gBAAA;gBAER7P;YAAAA,CACD;QAEH,GAEAA,OAAOyiB,MAAAA,GAAUsW,CAAAA,aAAa;YAC5B,IAAI6G,8BAA8B5/B,MAAM,GAAG;gBACzCyiB,OAAOsW,QAAQ;gBACf;YACF;YAEA,MAAMvxB,QAAQvD,yJAAAA,CAAOuD,KAAAA,CAAMxH,QAAQ+4B,QAAQ;YAE3C9wB,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACN1L,IAAIoD,sBAAsB;wBACxBjB,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;wBAC1CtG;wBACAwH;oBAAAA,CACD;gBAAA;gBAEHxH;YAAAA,CACD;QAEH,GAEAA,OAAOsgC,eAAAA,GAAkB,MAAM;YAC7Bp1B,QAAQsG,KAAAA,CAAM,0CAA0C;QAE1D,GAEAxR,OAAOugC,IAAAA,GAAO,MAAM;YAClB,IAAIX,8BAA8B5/B,MAAM,GAAG;gBACzCw/B,iBAAiB;oBACf92B,SAAS;wBACPwM,cAAcjN,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA;wBAChD5O,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;oBAAAA;oBAE5CqW,WAAW;wBACT9M,MAAM;wBACN7P;oBAAAA;gBACF,CACD;gBACD;YACF;YAEAiI,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;gBAAA;gBAER7P;YAAAA,CACD;QAEH,GAEOA;IACT;AACF;AC9OO,SAASwgC,oBAAoBv4B,WAAAA,EAA0B;IAC5D,OAAO,SACLjI,MAAAA,EACyB;QACzB,MAAM,EAACmd,OAAAA,MAAAA,EAAAA,GAASnd;QAChBA,OAAAA,OAAOmd,KAAAA,GAASR,CAAAA,cAAc;YAC5B,IAAI1U,YAAYG,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY,GAAG;gBACjE8U,OAAMR,SAAS;gBACf;YACF;YAMA,IAAI4S,mBAAmBvvB,MAAM,GAAG;gBAC9Bmd,OAAMR,SAAS;gBACf;YACF;YAMA,IAAIgT,UAAU3vB,MAAM,KAAK8vB,UAAU9vB,MAAM,GAAG;gBAC1Cmd,OAAMR,SAAS;gBACf;YACF;;YAEA,MAAM8jB,OAAOx4B,0DAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQo3B,SAAAA,mHAAa,CAAA;YACxDW,OAAO,KAAKzgC,OAAOoC,QAAAA,CAASsB,MAAAA,IAAU+8B,QAAAA,CAErC9jB,UAAU9M,IAAAA,KAAS,iBAClB8M,UAAU9M,IAAAA,KAAS,YAAA,KACrB8M,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,KAK9ByZ,OAAMR,SAAS;QACjB,GACO3c;IACT;AACF;ACxCO,SAAS0gC,qBAAqBz4B,WAAAA,EAA0B;IAC7D,OAAO,SACLjI,MAAAA,EACyB;QACzB,MAAM,EAACmd,OAAAA,MAAAA,EAAO8S,aAAAA,EAAAA,GAAiBjwB;QAK/BA,OAAAA,OAAOmd,KAAAA,GAASR,CAAAA,cAAc;YAK5B,IAAI4S,mBAAmBvvB,MAAM,GAAG;gBAC9Bmd,OAAMR,SAAS;gBACf;YACF;YAMA,IAAIgT,UAAU3vB,MAAM,KAAK8vB,UAAU9vB,MAAM,GAAG;gBAC1Cmd,OAAMR,SAAS;gBACf;YACF;YAEA,IAAIA,UAAU9M,IAAAA,KAAS,cAAc;gBACnC,MAAM8wB,eAAe,CAAC;uBAAG76B,uJAAAA,CAAK86B,WAAAA,CAAY5gC,MAAM,CAAC;iBAAA,CAAEyB,GAAAA,CACjD;wBAAC,CAACgD,IAAI,CAAA;2BAAMA,KAAKtD,IACnB;;gBAEAgc,OAAM;oBACJ,GAAGR,SAAAA;oBACHiU,YAAY;wBACV,GAAGjU,UAAUiU,UAAAA;wBACbzvB,MACEwb,UAAUiU,UAAAA,CAAWzvB,IAAAA,KAASsC,KAAAA,KAC9Bk9B,aAAapqB,QAAAA,CAASoG,UAAUiU,UAAAA,CAAWzvB,IAAI,IAC3C8G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA,CAAAA,IAClCyH,UAAUiU,UAAAA,CAAWzvB,IAAAA;oBAAAA;gBAC7B,CACD;gBAED;YACF;YAEA,IAAIwb,UAAU9M,IAAAA,KAAS,iBACjB,CAAC5L,yJAAAA,CAAOsC,QAAAA,CAASoW,UAAUlY,IAAI,GAAG;gBACpC,MAAMk8B,eAAe,CAAC;uBAAG76B,uJAAAA,CAAK86B,WAAAA,CAAY5gC,MAAM,CAAC;iBAAA,CAAEyB,GAAAA,CACjD;wBAAC,CAACgD,IAAI,CAAA;2BAAMA,KAAKtD,IACnB;;gBAEAgc,OAAM;oBACJ,GAAGR,SAAAA;oBACHlY,MAAM;wBACJ,GAAGkY,UAAUlY,IAAAA;wBACbtD,MACEwb,UAAUlY,IAAAA,CAAKtD,IAAAA,KAASsC,KAAAA,KACxBk9B,aAAapqB,QAAAA,CAASoG,UAAUlY,IAAAA,CAAKtD,IAAI,IACrC8G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA,CAAAA,IAClCyH,UAAUlY,IAAAA,CAAKtD,IAAAA;oBAAAA;gBACvB,CACD;gBAED;YACF;YAGF,IAAIwb,UAAU9M,IAAAA,KAAS,cAAc;oBAkCjCmxB,yBAKuBt/B;gBAtCzB,MAAM41B,QAAQ3a,UAAUhY,IAAAA,CAAKgY,UAAUhY,IAAAA,CAAKjB,MAAAA,GAAS,CAAC,CAAA,EAChDm9B,WAAW7gB,uJAAAA,CAAK8gB,QAAAA,CAASnkB,UAAUhY,IAAI,GACvCo8B,YAAYF,QAAAA,CAASA,SAASn9B,MAAAA,GAAS,CAAC,CAAA;gBAE9C,IAAIiZ,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,KAAKm9B,SAASn9B,MAAAA,KAAW,GAAG;oBACxDyZ,OAAMR,SAAS;oBACf;gBACF;gBAEA,MAAMjb,QAAQ1B,OAAOkB,KAAAA,CAAMiD,EAAAA,CAAGmzB,KAAK,GAC7B0J,gBAAgBhhC,OAAOkB,KAAAA,CAAMiD,EAAAA,CAAG48B,SAAS;gBAE/C,IAAI,CAACr/B,SAAS,CAACs/B,eAAe;oBAC5B7jB,OAAMR,SAAS;oBACf;gBACF;gBAEA,IACE,KAAC5X,2KAAAA,EAAYkD,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAAShH,KAAK,KACrD,KAACqD,2KAAAA,EAAYkD,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAASs4B,aAAa,GAC7D;oBACA7jB,OAAMR,SAAS;oBACf;gBACF;;gBAMA,MAAMskB,yBAAyBD,cAAc5+B,QAAAA,CAASX,GAAAA,CACnDY,CAAAA,QAAUA,MAAMlB,IACnB,GACM+/B,mGACUh/B,QAAAA,oFAAUT,GAAAA,CAAKkV,CAAAA,UAAYA,QAAQxV,IAAI,sFAAK,CAAA,CAAA,EAItDu8B,gBAAgB,aAAA,GAAA,IAAIvP,OACpBwP,4CAAyBz7B,QAAAA,oEAAUT,GAAAA,CAAKkV,CAAAA,YAAY;oBACxD,IAAIuqB,yBAAyB3qB,QAAAA,CAASI,QAAQxV,IAAI,GAAG;wBACnD,MAAMy8B,SAAS31B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;wBACjDwoB,OAAAA,cAAcnP,GAAAA,CAAI5X,QAAQxV,IAAAA,EAAMy8B,MAAM,GAC/B;4BACL,GAAGjnB,OAAAA;4BACHxV,MAAMy8B;wBAAAA;oBAEV;oBAEA,OAAOjnB;gBACT,CAAC;gBAID,IAAI/Q,aAAa;gBACjB,KAAA,MAAWvD,SAASX,MAAMU,QAAAA,CAAU;oBAClC,QAAI6K,sKAAAA,EAAOhF,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAASrG,KAAK,GAAG;;;wBACpD,MAAMK,kDACEA,KAAAA,8DAAOjB,GAAAA,CAAK6U,CAAAA,OACGonB,cAAchxB,GAAAA,CAAI4J,IAAI,KAMlCA,IACR,6CARDjU,mBAQM,CAAA,CAAA;wBAEHjB,IAAAA,+IAAAA,EAAQiB,MAAMK,KAAAA,EAAOA,KAAK,KAC7B8f,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;4BACE0C;wBAAAA,GAEF;4BACEyB,IAAI;gCAACmzB;gCAAO1xB,UAAU;6BAAA;wBAAA,CAE1B;oBAEJ;oBAEIq7B,uBAAuB1qB,QAAAA,CAASlU,MAAMlB,IAAI,KAC5CqhB,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;wBACEmB,MAAM8G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;oBAAa,GAEvD;wBACE/Q,IAAI;4BAACmzB;4BAAO1xB,UAAU;yBAAA;oBAAA,CAE1B,GAEFA;gBACF;gBAEAuX,OAAM;oBACJ,GAAGR,SAAAA;oBACHiU,YAAY;wBACV,GAAGjU,UAAUiU,UAAAA;wBAAAA,kEAAAA;wBAAAA,YAAAA;wBAGb1uB,UAAUy7B;oBAAAA;gBACZ,CACD;gBACD;YACF;YAEAxgB,OAAMR,SAAS;QACjB,GAEA3c,OAAOiwB,aAAAA,GAAiBnQ,CAAAA,UAAU;YAChC,MAAM,CAACrb,MAAME,IAAI,CAAA,GAAImb;YACrB,IACEld,0JAAAA,CAAQC,SAAAA,CAAU4B,IAAI,KACtBA,KAAK9C,KAAAA,KAAUsG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA,EAC9D;gBAEA,IAAI,CAAC8D,KAAKtD,IAAAA,EAAM;oBACd8G,YAAYsI,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAc,GACtC2S,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;wBAACmB,MAAM8G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;oBAAa,GACtD;wBAAC/Q,IAAIQ;oBAAAA,CACP,GACAsD,YAAYsI,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAmB;oBAC3C;gBACF;gBAEA,KAAA,MAAW,CAACxN,OAAO0K,SAAS,CAAA,IAAKjH,uJAAAA,CAAK1D,QAAAA,CAASpC,QAAQ2E,IAAI,EACzD,IAAI,CAACtC,MAAMlB,IAAAA,EAAM;oBACf8G,YAAYsI,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAc,GACtC2S,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;wBAACmB,MAAM8G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;oBAAa,GACtD;wBAAC/Q,IAAI4I;oBAAAA,CACP,GACA9E,YAAYsI,IAAAA,CAAK;wBAACV,MAAM;oBAAA,CAAmB;oBAC3C;gBACF;YAEJ;YACAogB,cAAcnQ,KAAK;QACrB,GAEO9f;IACT;AACF;ACxMO,SAASmhC,iBACd76B,MAAAA,EAC4D;IAC5D,OAAO,CAACtG,QAAiCqzB,UAA0B;QACjE,IAAI+N,UAAU,CAAA;QAEd,IAAI;YACF,OAAQ/N,MAAMxjB,IAAAA,EAAAA;gBACZ,KAAK;oBACHuxB,UAAUC,YAAYrhC,QAAQqzB,OAAO/sB,MAAM;oBAC3C;gBACF,KAAK;oBACH86B,UAAUE,WAAWthC,QAAQqzB,KAAK;oBAClC;gBACF,KAAK;oBACH+N,UAAUG,SAASvhC,QAAQqzB,KAAK;oBAChC;gBACF,KAAK;oBACH+N,UAAUI,eAAexhC,QAAQqzB,KAAK;oBACtC;YAAA;QAEN,EAAA,OAAS+C,KAAK;YACZlrB,QAAQsG,KAAAA,CAAM4kB,GAAG;QACnB;QAEA,OAAOgL;IACT;AACF;AAEA,SAASI,eACPxhC,MAAAA,EAIAqzB,KAAAA,EACS;IACT,MAAM3xB,QAAQ+/B,UAAUzhC,OAAOoC,QAAAA,EAAUixB,MAAM1uB,IAAI;IAEnD,IAAI,CAACjD,OACH,OAAO,CAAA;IAGT,MAAMW,QAAQq/B,eAAehgC,OAAO2xB,MAAM1uB,IAAI;IAa9C,IAXI,CAACtC,SAWD,CAAA,CANFX,SACA1B,OAAO+E,WAAAA,CAAYrD,MAAM+C,IAAI,KAC7B4uB,MAAM1uB,IAAAA,CAAKjB,MAAAA,KAAW,KACtB2vB,MAAM1uB,IAAAA,CAAK,CAAC,CAAA,KAAM,cAClB0uB,MAAM1uB,IAAAA,CAAK,CAAC,CAAA,KAAM,MAAA,KAEa,CAAChB,uJAAAA,CAAKC,MAAAA,CAAOvB,MAAMoC,IAAI,GACtD,OAAO,CAAA;IAGT,MAAM6vB,UAAUyC,MAAW1D,MAAMnyB,KAAK,GAChC,CAAC24B,QAAQ,CAAA,GAAI8H,MAA2BrN,SAASjyB,MAAMoC,IAAAA,CAAKhC,IAAAA,EAAM;QACtEm/B,uBAAuB,CAAA;IAAA,CACxB,GACKvK,SAAOwK,kBAAkBC,KAASz/B,MAAMoC,IAAAA,CAAKhC,IAAAA,EAAMo3B,QAAQ,GAAG,CAAC;IAErE,IAAIjyB,SAAS;IACb,KAAA,MAAW,CAACwV,IAAI3a,IAAI,CAAA,IAAK40B,OACnBja,OAAOoa,cAAAA,CACTx3B,OAAOmd,KAAAA,CAAM;QACXtN,MAAM;QACNlL,MAAM;YAACjD,MAAM41B,KAAAA;YAAOj1B,MAAMi1B,KAAK;SAAA;QAC/B1vB;QACAnF;IAAAA,CACD,GACDmF,UAAUnF,KAAKiB,MAAAA,IACN0Z,OAAOqa,cAChBz3B,OAAOmd,KAAAA,CAAM;QACXtN,MAAM;QACNlL,MAAM;YAACjD,MAAM41B,KAAAA;YAAOj1B,MAAMi1B,KAAK;SAAA;QAC/B1vB;QACAnF;IAAAA,CACD,IACQ2a,OAAOsa,cAAAA,CAChB9vB,UAAUnF,KAAKiB,MAAAA;IAInB,OAAO,CAAA;AACT;AAEA,SAAS29B,YACPrhC,MAAAA,EACAqzB,KAAAA,EACA/sB,MAAAA,EACA;IACA,MAAM5E,QAAQ+/B,UAAUzhC,OAAOoC,QAAAA,EAAUixB,MAAM1uB,IAAI;IAMnD,IAJI,CAACjD,SAID2xB,MAAM1uB,IAAAA,CAAKjB,MAAAA,GAAS,KAAK2vB,MAAM1uB,IAAAA,CAAK,CAAC,CAAA,KAAM,YAC7C,OAAO,CAAA;IAIT,IAAI0uB,MAAM1uB,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC3B,MAAM,EAACgzB,OAAAA,MAAAA,EAAOhsB,UAAAA,SAAAA,EAAAA,GAAY2oB,OACpB0O,iBAAiB1gC,aACrBq1B,QACA;YAACp1B,aAAagF;QAAAA,GACdgH,qBAAqBZ,GAAAA,CAAI1M,MAAM,CACjC,GACMgiC,mBAAmBtgC,MAAM41B,KAAAA,EACzB2K,iBACJv3B,cAAa,UAAUs3B,mBAAmB,IAAIA,kBAE1CE,uBAAuB1+B,qBAAqBxD,OAAOoC,QAAAA,EAAUkE,MAAM;QAEzEkc,OAAAA,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQ+hC,gBAAgB;YAAC59B,IAAI;gBAAC89B,cAAa;aAAA;QAAA,CAAE,GAGlEC,wBACA,OAAO7O,MAAM1uB,IAAAA,CAAK,CAAC,CAAA,IAAM,YACzB0uB,MAAM1uB,IAAAA,CAAK,CAAC,CAAA,KAAM,KAElB6d,6JAAAA,CAAW4Y,WAAAA,CAAYp7B,QAAQ;YAC7BmE,IAAI;gBAACuG,cAAa,WAAWs3B,mBAAmB,IAAIA,gBAAgB;aAAA;QAAA,CACrE,GAGI,CAAA;IACT;IAGA,MAAM,EAACtL,KAAAA,EAAOhsB,QAAAA,EAAAA,GAAY2oB,OAEpB8O,cAAcT,eAAehgC,OAAO2xB,MAAM1uB,IAAI;IAEpD,IAAI,CAACw9B,aACH,OAAO,CAAA;IAGT,MAAMC,mBAAmB/gC,aACvB;QAAC;YAAC,GAAGK,MAAM+C,IAAAA;YAAMrC,UAAUs0B;QAAAA,CAA6B;KAAA,EACxD;QAACp1B,aAAagF;IAAAA,GACdgH,qBAAqBZ,GAAAA,CAAI1M,MAAM,CACjC,GACMiiC,gBACJv3B,aAAa,UAAUy3B,YAAY7K,KAAAA,GAAQ,IAAI6K,YAAY7K,KAAAA,EACvD+K,kBAAkB;QAAC3gC,MAAM41B,KAAAA;QAAO2K,aAAa;KAAA;IAEnD,OAAIG,oBAAoBx/B,0JAAAA,CAAQC,SAAAA,CAAUu/B,gBAAAA,CAAiB,CAAC,CAAC,KAC3D5f,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQoiC,gBAAAA,CAAiB,CAAC,CAAA,CAAEhgC,QAAAA,EAAU;QAC3D+B,IAAIk+B;IAAAA,CACL,GAGI,CAAA;AACT;AAEA,SAASd,SAASvhC,MAAAA,EAAiCqzB,KAAAA,EAAiB;IAClE,IAAInyB,QAAQmyB,MAAMnyB,KAAAA;IACd,OAAOmyB,MAAM1uB,IAAAA,CAAK,CAAC,CAAA,IAAM,YAAA,CAC3BzD,QAAQ,CAAA,GACRA,KAAAA,CAAMmyB,MAAM1uB,IAAAA,CAAK,CAAC,CAAC,CAAA,GAAI0uB,MAAMnyB,KAAAA;IAG/B,MAAMQ,QAAQ+/B,UAAUzhC,OAAOoC,QAAAA,EAAUixB,MAAM1uB,IAAI;IAEnD,IAAI,CAACjD,OACH,OAAO,CAAA;IAGT,MAAMqD,eAAc/E,OAAO+E,WAAAA,CAAYrD,MAAM+C,IAAI;IAGjD,IAAIM,gBAAesuB,MAAM1uB,IAAAA,CAAKjB,MAAAA,GAAS,KAAK2vB,MAAM1uB,IAAAA,CAAK,CAAC,CAAA,KAAM,YAC5D,OAAO,CAAA;IAGT,MAAMtC,QAAQq/B,eAAehgC,OAAO2xB,MAAM1uB,IAAI;IAG9C,IAAII,gBAAe1C,OAAO;QACxB,IAAIsB,uJAAAA,CAAKC,MAAAA,CAAOvB,MAAMoC,IAAI,GACxB,IAAId,uJAAAA,CAAKC,MAAAA,CAAO1C,KAAK,GAAG;YACtB,MAAMohC,UAAUjgC,MAAMoC,IAAAA,CAAKhC,IAAAA,EACrB8/B,UAAUrhC,MAAMuB,IAAAA;YAClB6/B,YAAYC,WAAAA,CACdviC,OAAOmd,KAAAA,CAAM;gBACXtN,MAAM;gBACNlL,MAAM;oBAACjD,MAAM41B,KAAAA;oBAAOj1B,MAAMi1B,KAAK;iBAAA;gBAC/B1vB,QAAQ;gBACRnF,MAAM6/B;YAAAA,CACP,GACDtiC,OAAOmd,KAAAA,CAAM;gBACXtN,MAAM;gBACNlL,MAAM;oBAACjD,MAAM41B,KAAAA;oBAAOj1B,MAAMi1B,KAAK;iBAAA;gBAC/B1vB,QAAQ;gBACRnF,MAAM8/B;YAAAA,CACP,GAGDviC,OAAO4iB,QAAAA,EAAAA;QAEX,OAAO;YAGL,MAAM4f,WAAWnP,MAAM1uB,IAAAA,CAAKC,KAAAA,CAAM,CAAC,GAC7B69B,YAAYD,SAASr+B,EAAAA,CAAG,CAAC;YAO/B,IAJIs+B,cAAch/B,KAAAA,KAKhB,OAAOg/B,aAAc,YAPD;gBAAC;gBAAQ;gBAAS,MAAM;aAAA,CAQ9BlsB,QAAAA,CAASksB,SAAS,GAEhC,OAAO,CAAA;YAGT,MAAM7I,UAAUE,6KAAAA,EAASz3B,MAAMoC,IAAAA,EAAM;gBACnC;oBACE,GAAG4uB,KAAAA;oBACH1uB,MAAM69B;gBAAAA,CACP;aACF;YAEDhgB,6JAAAA,CAAW8N,QAAAA,CAAStwB,QAAQ45B,SAAS;gBAACz1B,IAAI;oBAACzC,MAAM41B,KAAAA;oBAAOj1B,MAAMi1B,KAAK;iBAAA;YAAA,CAAE;QACvE;aACK;YAGL,MAAMkL,WAAWnP,MAAM1uB,IAAAA,CAAKC,KAAAA,CAAM,CAAC,GAC7B89B,gBAAgB;gBAAC;gBAAQ;gBAAS;gBAAY,UAAU;aAAA,EACxDD,YAAYD,SAASr+B,EAAAA,CAAG,CAAC;YAM/B,IAJIs+B,cAAch/B,KAAAA,KAId,OAAOg/B,aAAc,YAAYC,cAAcnsB,QAAAA,CAASksB,SAAS,GACnE,OAAO,CAAA;YAKT,MAAMvhC,SACJ,WAAWmB,MAAMoC,IAAAA,IAAQ,OAAOpC,MAAMoC,IAAAA,CAAKvD,KAAAA,IAAU,WACjDmB,MAAMoC,IAAAA,CAAKvD,KAAAA,GACX,CAAA,GAEA24B,eAAWC,yKAAAA,EAAS54B,QAAO;gBAC/B;oBACE,GAAGmyB,KAAAA;oBACH1uB,MAAM0uB,MAAM1uB,IAAAA,CAAKC,KAAAA,CAAM,CAAC;gBAAA,CACzB;aACF;YAED4d,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;gBAAC,GAAGqC,MAAMoC,IAAAA;gBAAMvD,OAAO24B;YAAAA,GACvB;gBAAC11B,IAAI;oBAACzC,MAAM41B,KAAAA;oBAAOj1B,MAAMi1B,KAAK;iBAAA;YAAA,CAChC;QACF;QAEA,OAAO,CAAA;IACT,OAAA,IAAW10B,0JAAAA,CAAQC,SAAAA,CAAUnB,MAAM+C,IAAI,KAAK4uB,MAAM1uB,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QACnE,MAAM,EAACtB,QAAAA,EAAU,GAAGugC,UAAAA,GAAYzhC,OAC1B,EAACkB,UAAUwgC,aAAAA,EAAe,GAAGC,UAAAA,GAAYnhC,MAAM+C,IAAAA,IAAQ;YAC3DrC,UAAUqB,KAAAA;QAAAA;QAIZzD,OAAOmd,KAAAA,CAAM;YACXtN,MAAM;YACNlL,MAAM;gBAACjD,MAAM41B,KAAK;aAAA;YAClB1G,YAAY;gBAAC,GAAGiS,QAAAA;YAAAA;YAChBhS,eAAe8R;QAAAA,CAChB;QAID,MAAMG,YAAYphC,MAAM+C,IAAAA;QAExBq+B,UAAU1gC,QAAAA,CAAS+Z,OAAAA,CAAQ,CAAC9Z,QAAOuD,eAAe;YAChD5F,OAAOmd,KAAAA,CAAM;gBACXtN,MAAM;gBACNlL,MAAM;oBAACjD,MAAM41B,KAAAA;oBAAOwL,UAAU1gC,QAAAA,CAASsB,MAAAA,GAAS,IAAIkC,UAAU;iBAAA;gBAC9DnB,MAAMpC;YAAAA,CACP;QACH,CAAC,GAEGd,MAAMC,OAAAA,CAAQY,QAAQ,KACxBA,SAAS+Z,OAAAA,CAAQ,CAAC9Z,QAAOuD,eAAe;YACtC5F,OAAOmd,KAAAA,CAAM;gBACXtN,MAAM;gBACNlL,MAAM;oBAACjD,MAAM41B,KAAAA;oBAAO1xB,UAAU;iBAAA;gBAC9BnB,MAAMpC;YAAAA,CACP;QACH,CAAC;IAEL,OAAA,IAAWX,SAAS,WAAWA,MAAM+C,IAAAA,EACnC,IAAI4uB,MAAM1uB,IAAAA,CAAKjB,MAAAA,GAAS,KAAK2vB,MAAM1uB,IAAAA,CAAK,CAAC,CAAA,KAAM,YAAY;QACzD,MAAMo+B,aAASjJ,yKAAAA,EAASp4B,MAAM+C,IAAAA,CAAKvD,KAAAA,EAAO;YACxC;gBACE,GAAGmyB,KAAAA;gBACH1uB,MAAM0uB,MAAM1uB,IAAAA,CAAKC,KAAAA,CAAM,CAAC;YAAA,CACzB;SACF;QAED4d,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;YAAC,GAAG0B,MAAM+C,IAAAA;YAAMvD,OAAO6hC;QAAAA,GACvB;YAAC5+B,IAAI;gBAACzC,MAAM41B,KAAK;aAAA;QAAA,CACnB;IACF,OACE,OAAO,CAAA;IAIX,OAAO,CAAA;AACT;AAEA,SAASgK,WAAWthC,MAAAA,EAAiCqzB,KAAAA,EAAmB;IAEtE,IAAIA,MAAM1uB,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC3B,MAAMs/B,oBAAoBhjC,OAAOwE,SAAAA;QACjCge,6JAAAA,CAAWoI,QAAAA,CAAS5qB,MAAM;QAE1B,MAAMoC,WAAW0D,uJAAAA,CAAK1D,QAAAA,CAASpC,QAAQ,CAAA,CAAA,EAAI;YACzCgvB,SAAS,CAAA;QAAA,CACV;QAED,KAAA,MAAW,CAACjP,GAAGpb,IAAI,CAAA,IAAKvC,SACtBogB,6JAAAA,CAAW4Y,WAAAA,CAAYp7B,QAAQ;YAACmE,IAAIQ;QAAAA,CAAK;QAG3C6d,OAAAA,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQA,OAAOijC,kBAAAA,CAAmB;YAAC9sB,YAAY,CAAA,CAAA;QAAA,CAAG,CAAC,GACtE6sB,qBACFxgB,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQ;YACxB0H,QAAQ;gBAAC/C,MAAM;oBAAC;oBAAG,CAAC;iBAAA;gBAAGiD,QAAQ;YAAA;YAC/BlD,OAAO;gBAACC,MAAM;oBAAC;oBAAG,CAAC;iBAAA;gBAAGiD,QAAQ;YAAA;QAAC,CAChC,GAGH5H,OAAO4iB,QAAAA,CAAAA,GACA,CAAA;IACT;IAEA,MAAMlhB,QAAQ+/B,UAAUzhC,OAAOoC,QAAAA,EAAUixB,MAAM1uB,IAAI;IAEnD,IAAI,CAACjD,OACH,OAAO,CAAA;IAIT,IAAI2xB,MAAM1uB,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC3B,IAAI1D,OAAOoC,QAAAA,CAASsB,MAAAA,KAAW,GAAG;YAGhC,MAAMs/B,oBAAoBhjC,OAAOwE,SAAAA;YAEjCge,OAAAA,6JAAAA,CAAWoI,QAAAA,CAAS5qB,MAAM,GAC1BwiB,6JAAAA,CAAW4Y,WAAAA,CAAYp7B,QAAQ;gBAACmE,IAAI;oBAACzC,MAAM41B,KAAK;iBAAA;YAAA,CAAE,GAClD9U,6JAAAA,CAAWmP,WAAAA,CACT3xB,QACAA,OAAOijC,kBAAAA,CAAmB;gBAAC9sB,YAAY,CAAA,CAAA;YAAA,CAAG,CAC5C,GAEI6sB,qBACFxgB,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQ;gBACxB0H,QAAQ;oBAAC/C,MAAM;wBAAC;wBAAG,CAAC;qBAAA;oBAAGiD,QAAQ;gBAAA;gBAC/BlD,OAAO;oBAACC,MAAM;wBAAC;wBAAG,CAAC;qBAAA;oBAAGiD,QAAQ;gBAAA;YAAC,CAChC,GAGH5H,OAAO4iB,QAAAA,CAAAA,GAEA,CAAA;QACT;QAEAJ,OAAAA,6JAAAA,CAAW4Y,WAAAA,CAAYp7B,QAAQ;YAACmE,IAAI;gBAACzC,MAAM41B,KAAK;aAAA;QAAA,CAAE,GAE3C,CAAA;IACT;IAEA,MAAMj1B,QAAQq/B,eAAehgC,OAAO2xB,MAAM1uB,IAAI;IAG9C,IAAI3E,OAAO+E,WAAAA,CAAYrD,MAAM+C,IAAI,KAAKpC,SAChCgxB,MAAM1uB,IAAAA,CAAK,CAAC,CAAA,KAAM,cAAc0uB,MAAM1uB,IAAAA,CAAKjB,MAAAA,KAAW,GACxD8e,OAAAA,6JAAAA,CAAW4Y,WAAAA,CAAYp7B,QAAQ;QAACmE,IAAI;YAACzC,MAAM41B,KAAAA;YAAOj1B,MAAMi1B,KAAK;SAAA;IAAA,CAAE,GAExD,CAAA;IAIX,IAAIj1B,SAAS,CAACsB,uJAAAA,CAAKC,MAAAA,CAAOvB,MAAMoC,IAAI,GAAG;QAIrC,MAAMg+B,YADWpP,MAAM1uB,IAAAA,CAAKC,KAAAA,CAAM,CAAC,EACRT,EAAAA,CAAG,CAAC;QAO/B,IAJIs+B,cAAch/B,KAAAA,KAId,OAAOg/B,aAAc,YANH;YAAC;YAAQ;YAAS;YAAY,UAAU;SAAA,CAMXlsB,QAAAA,CAASksB,SAAS,GAInE,OAAO,CAAA;QAGT,MAAMvhC,QACJ,WAAWmB,MAAMoC,IAAAA,IAAQ,OAAOpC,MAAMoC,IAAAA,CAAKvD,KAAAA,IAAU,WACjDmB,MAAMoC,IAAAA,CAAKvD,KAAAA,GACX,CAAA,GAEA24B,eAAWC,yKAAAA,EAAS54B,OAAO;YAC/B;gBACE,GAAGmyB,KAAAA;gBACH1uB,MAAM0uB,MAAM1uB,IAAAA,CAAKC,KAAAA,CAAM,CAAC;YAAA,CACzB;SACF;QAED4d,OAAAA,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;YAAC,GAAGqC,MAAMoC,IAAAA;YAAMvD,OAAO24B;QAAAA,GACvB;YAAC11B,IAAI;gBAACzC,MAAM41B,KAAAA;gBAAOj1B,MAAMi1B,KAAK;aAAA;QAAA,CAChC,GAEO,CAAA;IACT;IAEA,IAAIj1B,SAASsB,uJAAAA,CAAKC,MAAAA,CAAOvB,MAAMoC,IAAI,GAAG;QACpC,MAAM+9B,WAAWnP,MAAM1uB,IAAAA,CAAKC,KAAAA,CAAM,CAAC,GAC7B69B,YAAYD,SAASr+B,EAAAA,CAAG,CAAC;QAO/B,IAJIs+B,cAAch/B,KAAAA,KAId,OAAOg/B,aAAc,YANH;YAAC;YAAQ,OAAO;SAAA,CAMalsB,QAAAA,CAASksB,SAAS,GACnE,OAAO,CAAA;QAGT,IAAI,OAAOA,aAAc,YAAYA,cAAc,QACjDziC,OAAAA,OAAOmd,KAAAA,CAAM;YACXtN,MAAM;YACNlL,MAAM;gBAACjD,MAAM41B,KAAAA;gBAAOj1B,MAAMi1B,KAAK;aAAA;YAC/B1vB,QAAQ;YACRnF,MAAMJ,MAAMoC,IAAAA,CAAKhC,IAAAA;QAAAA,CAClB,GAEM,CAAA;QAGT,MAAMm3B,cAAUE,yKAAAA,EAASz3B,MAAMoC,IAAAA,EAAM;YACnC;gBACE,GAAG4uB,KAAAA;gBACH1uB,MAAM69B;YAAAA,CACP;SACF,GACKU,UAAUjnB,OAAOC,IAAAA,CAAK0d,OAAO,GAE7BuJ,oBAAoBlnB,OAAOC,IAAAA,CAAK7Z,MAAMoC,IAAI,EAAE4R,MAAAA,CAC/C+sB,CAAAA,WAAa,CAACF,QAAQ3sB,QAAAA,CAAS6sB,QAAQ,CAC1C;QAEA5gB,OAAAA,6JAAAA,CAAW6gB,UAAAA,CAAWrjC,QAAQmjC,mBAAmB;YAC/Ch/B,IAAI;gBAACzC,MAAM41B,KAAAA;gBAAOj1B,MAAMi1B,KAAK;aAAA;QAAA,CAC9B,GAEM,CAAA;IACT;IAEA,IAAI,CAACj1B,OAAO;QACV,IAAI,WAAWX,MAAM+C,IAAAA,EAAM;YACzB,MAAMs+B,SAASjJ,6KAAAA,EAASp4B,MAAM+C,IAAAA,CAAKvD,KAAAA,EAAO;gBACxC;oBACE,GAAGmyB,KAAAA;oBACH1uB,MAAM0uB,MAAM1uB,IAAAA,CAAKC,KAAAA,CAAM,CAAC;gBAAA,CACzB;aACF;YAED4d,OAAAA,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;gBAAC,GAAG0B,MAAM+C,IAAAA;gBAAMvD,OAAO6hC;YAAAA,GACvB;gBAAC5+B,IAAI;oBAACzC,MAAM41B,KAAK;iBAAA;YAAA,CACnB,GAEO,CAAA;QACT;QAEA,OAAO,CAAA;IACT;IAEA,OAAO,CAAA;AACT;AAEA,SAASmK,UACPr/B,QAAAA,EACAuC,IAAAA,EAC+C;IAC/C,IAAIL,aAAa,CAAA;IAEjB,MAAM5C,QAAQU,SAASwJ,IAAAA,CAAK,CAACnH,MAAkB6yB,UAAkB;QAC/D,MAAMgM,UAAUC,oNAAAA,EAAe5+B,IAAAA,CAAK,CAAC,CAAC,IAClCF,KAAKtD,IAAAA,KAASwD,IAAAA,CAAK,CAAC,CAAA,CAAExD,IAAAA,GACtBm2B,UAAU3yB,IAAAA,CAAK,CAAC,CAAA;QAEpB,OAAI2+B,WAAAA,CACFh/B,aAAagzB,KAAAA,GAGRgM;IACT,CAAC;IAED,IAAK5hC,OAIL,OAAO;QAAC+C,MAAM/C;QAAO41B,OAAOhzB;IAAAA;AAC9B;AAEA,SAASo9B,eACPhgC,KAAAA,EACAiD,IAAAA,EAC+C;IAC/C,MAAMm+B,YAAYphC,MAAM+C,IAAAA;IAExB,IAAI,CAAC7B,0JAAAA,CAAQC,SAAAA,CAAUigC,SAAS,KAAKn+B,IAAAA,CAAK,CAAC,CAAA,KAAM,YAC/C;IAGF,IAAIiB,aAAa,CAAA;IAEjB,MAAMvD,QAAQygC,UAAU1gC,QAAAA,CAASwJ,IAAAA,CAAK,CAACnH,MAAM6yB,UAAkB;QAC7D,MAAMgM,UAAUC,oNAAAA,EAAe5+B,IAAAA,CAAK,CAAC,CAAC,IAClCF,KAAKtD,IAAAA,KAASwD,IAAAA,CAAK,CAAC,CAAA,CAAExD,IAAAA,GACtBm2B,UAAU3yB,IAAAA,CAAK,CAAC,CAAA;QAEpB,OAAI2+B,WAAAA,CACF19B,aAAa0xB,KAAAA,GAGRgM;IACT,CAAC;IAED,IAAKjhC,OAIL,OAAO;QACLoC,MAAMpC;QACNi1B,OAAO1xB;IAAAA;AAEX;ACrjBO,SAAS49B,gBACdl9B,MAAAA,EACAlE,QAAAA,EACAua,SAAAA,EACA8mB,WAAAA,EACc;IACd,MAAM/hC,QACJqD,+KAAAA,EAAY;QAACuB;IAAAA,GAASlE,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAC,KACjDvC,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;IAC5B,IAAI,CAACjD,OACH,MAAM,IAAIuB,MAAM,sBAAsB;IAExC,MAAMygC,gBACJ3+B,2KAAAA,EAAY;QAACuB;IAAAA,GAAS5E,KAAK,SAC3BuL,sKAAAA,EAAO;QAAC3G;IAAAA,GAAS5E,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAC,KACjDjD,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;IACnC,IAAI,CAAC++B,WACH,MAAM,IAAIzgC,MAAM,sBAAsB;IAExC,MAAM0B,OAAa;QACjB;YAACxD,MAAMO,MAAMP,IAAAA;QAAAA;QACb;QACA;YAACA,MAAMuiC,UAAUviC,IAAAA;QAAAA;QACjB,MAAM;KAAA,EAEFwiC,YAAYF,WAAAA,CAAY9mB,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,EACzCi/B,gBACJ7+B,2KAAAA,EAAY;QAACuB;IAAAA,GAASq9B,SAAS,KAAKA,UAAUvhC,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,EACpEk/B,eAAW52B,sKAAAA,EAAO;QAAC3G;IAAAA,GAASs9B,SAAS,IAAIA,UAAUnhC,IAAAA,GAAO,IAC1D4wB,YAAQmO,+KAAAA,EAAeqC,UAAUH,UAAUjhC,IAAAA,EAAMkC,IAAI;IAC3D,OAAO0uB,MAAMnyB,KAAAA,CAAMwC,MAAAA,GAAS;QAAC2vB,KAAK;KAAA,GAAI,CAAA,CAAA;AACxC;AAEO,SAASyQ,gBACdx9B,MAAAA,EACAlE,QAAAA,EACAua,SAAAA,EACA8mB,WAAAA,EACc;IACd,MAAM/hC,QAAQU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;IACxC,IAAI,CAACjD,OACH,MAAM,IAAIuB,MAAM,sBAAsB;IAExC,MAAMZ,YACH0C,2KAAAA,EAAY;QAACuB;IAAAA,GAAS5E,KAAK,KAAKA,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,IACjElB,KAAAA,GACIigC,YAA0Cz2B,0KAAAA,EAAO;QAAC3G;IAAAA,GAASjE,KAAK,IAClEA,QACAoB,KAAAA;IACJ,IAAIpB,SAAS,CAACqhC,WACZ,MAAM,IAAIzgC,MAAM,eAAe;IAEjC,IAAI,CAACygC,WACH,MAAM,IAAIzgC,MAAM,sBAAsB;IAExC,MAAM0B,OAAa;QACjB;YAACxD,MAAMO,MAAMP,IAAAA;QAAAA;QACb;QACA;YAACA,MAAMuiC,UAAUviC,IAAAA;QAAAA;QACjB,MAAM;KAAA,EAEF4iC,cAAcN,WAAAA,CAAY9mB,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,EAC3Cq/B,oBACJj/B,2KAAAA,EAAY;QAACuB;IAAAA,GAASy9B,WAAW,KACjCA,YAAY3hC,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,EAClCk/B,eAAW52B,sKAAAA,EAAO;QAAC3G;IAAAA,GAAS09B,aAAa,KAAKA,cAAcvhC,IAAAA,EAC5D4wB,QAAQmO,mLAAAA,EAAeqC,YAAY,IAAIH,UAAUjhC,IAAAA,EAAMkC,IAAI;IACjE,OAAO0uB,MAAMnyB,KAAAA,GAAQ;QAACmyB,KAAK;KAAA,GAAI,CAAA,CAAA;AACjC;AAEO,SAAS4Q,aACd39B,MAAAA,EACAlE,QAAAA,EACAua,SAAAA,EACc;IACd,IAAIA,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC/B,MAAMhC,QAAQU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;QACxC,IAAI,OAAOjD,MAAMP,IAAAA,IAAS,UACxB,MAAM,IAAI8B,MAAM,+BAA+B;QAEjD,MAAMihC,cAAUC,8IAAAA,EACd;YAAC,GAAG/hC,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;YAAG,GAAGgY,UAAUkU,aAAAA;QAAAA,GAC9CuT,mJACF;QACA,OAAO;gBACL7V,oKAAAA,EAAIxrB,eAAe;gBAACmhC,OAAO;aAAA,EAAG59B,OAAO5E,KAAAA,CAAMf,IAAI,CAAA,CAAE,CAAC,CAAA,EAAG;gBACnD;oBAACQ,MAAMO,MAAMP,IAAAA;gBAAAA,CAAK;aACnB,CAAC;SAAA;IAEN,OAAA,IAAWwb,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QACtC,MAAMhC,QAAQU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;QACxC,QAAII,2KAAAA,EAAY;YAACuB;QAAAA,GAAS5E,KAAK,GAAG;YAChC,MAAMW,QAAQX,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;YAC9C,IAAItC,OAAO;gBACT,MAAMqJ,WAAWhK,MAAMP,IAAAA,EACjBwK,WAAWtJ,MAAMlB,IAAAA,EACjBmzB,UAAmB,CAAA,CAAA,EACnBpY,OAAOD,OAAOC,IAAAA,CAAKS,UAAUkU,aAAa;gBAChD3U,OAAAA,KAAKC,OAAAA,CAASnB,CAAAA,YAAY;oBAExB,IAAIkB,KAAKxY,MAAAA,KAAW,KAAKsX,YAAY,QAAQ;wBAC3C,MAAMqpB,UAAM33B,2IAAAA,EAAIiQ,UAAUkU,aAAAA,EAAe7V,OAAO;wBAChDsZ,QAAQvsB,IAAAA,KACNwmB,oKAAAA,EAAI8V,KAAK;4BACP;gCAACljC,MAAMuK;4BAAAA;4BACP;4BACAhK,MAAMU,QAAAA,CAASkiC,OAAAA,CAAQjiC,KAAK;4BAC5B2Y,OAAO;yBACR,CACH;oBACF,OAAO;wBACL,MAAMqpB,UAAM33B,2IAAAA,EAAIiQ,UAAUkU,aAAAA,EAAe7V,OAAO;wBAChDsZ,QAAQvsB,IAAAA,KACNwmB,oKAAAA,EAAI8V,KAAK;4BACP;gCAACljC,MAAMuK;4BAAAA;4BACP;4BACA;gCAACvK,MAAMwK;4BAAAA;4BACPqP,OAAO;yBACR,CACH;oBACF;gBACF,CAAC,GACMsZ;YACT;YACA,MAAM,IAAIrxB,MAAM,8BAA8B;QAChD;QACA,MAAM,IAAIA,MAAM,8BAA8B;IAChD,OACE,MAAM,IAAIA,MACR,gCAA8D,CAChE,MADkCof,KAAKC,SAAAA,CAAU3F,UAAUhY,IAAI,CAAC;AAGpE;AAEO,SAAS4/B,gBACdj+B,MAAAA,EACAlE,QAAAA,EACAua,SAAAA,EACA8mB,WAAAA,EACc;IACd,MAAM/hC,QAAQ+hC,WAAAA,CAAY9mB,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;IAC3C,IAAIgY,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC/B,MAAMgH,WAAWiS,UAAUhY,IAAAA,CAAK,CAAC,CAAA,KAAM,IAAI,WAAW,SAChDo/B,cAAcN,WAAAA,CAAY9mB,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,EAC/C6/B,YAAY7nB,UAAUhY,IAAAA,CAAK,CAAC,CAAA,KAAM,kDAAIjD,MAAOP,IAAAA,GAAO4iC,sEAAa5iC,IAAAA;QACvE,OAAIqjC,YACK;YACLrgB,2KAAAA,EACE;gBACEphB,eACE;oBAAC4Z,UAAUlY,IAAI;iBAAA,EACf6B,OAAO5E,KAAAA,CAAMf,IACf,CAAA,CAAE,CAAC,CAAC;aAAA,EAEN+J,UACA;gBAAC;oBAACvJ,MAAMqjC;gBAAAA,CAAU;aACpB,CAAC;SAAA,GAGE;gBACLC,6KAAAA,EAAahB,aAAa,CAAA,CAAE;gBAC5Btf,uKAAAA,EACE;gBAACphB,eAAe;oBAAC4Z,UAAUlY,IAAI;iBAAA,EAAiB6B,OAAO5E,KAAAA,CAAMf,IAAI,CAAA,CAAE,CAAC,CAAC;aAAA,EACrE,UACA;gBAACgc,UAAUhY,IAAAA,CAAK,CAAC,CAAC;aACpB,CAAC;SAAA;IAEL,OAAA,QACEI,2KAAAA,EAAY;QAACuB;IAAAA,GAAS5E,KAAK,KAC3Bib,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,KAC1BtB,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,EAC1B;QACA,MAAM+F,WACJhJ,MAAMU,QAAAA,CAASsB,MAAAA,KAAW,KAAK,CAAChC,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,GAChE,WACA,SACAF,OAAO;YAAC,GAAGkY,UAAUlY,IAAAA;QAAAA;QACvB,CAACA,KAAK9C,KAAAA,IAASgC,uJAAAA,CAAKC,MAAAA,CAAOa,IAAI,KAAA,CACjCA,KAAK9C,KAAAA,GAAQ,QACb8C,KAAK/B,KAAAA,GAAQ,CAAA,CAAA;QAYf,MAAML,QAVMU,eACV;YACE;gBACE5B,MAAM;gBACNQ,OAAO2E,OAAO5E,KAAAA,CAAMf,IAAAA;gBACpByB,UAAU;oBAACqC,IAAI;iBAAA;YAAA,CAChB;SAAA,EAEH6B,OAAO5E,KAAAA,CAAMf,IACf,CAAA,CAAE,CAAC,CAAA,CACeyB,QAAAA,CAAS,CAAC,CAAA;QAC5B,OAAO;gBACL+hB,uKAAAA,EAAO;gBAAC9hB,KAAK;aAAA,EAAGqI,UAAU;gBACxB;oBAACvJ,MAAMO,MAAMP,IAAAA;gBAAAA;gBACb;gBACAO,MAAMU,QAAAA,CAASsB,MAAAA,IAAU,KAAK,CAAChC,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,GAC/D,IACA;oBAACxD,MAAMO,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,CAAExD,IAAAA;gBAAAA,CAAK;aACvD,CAAC;SAAA;IAEN;IACA,OAAO,CAAA,CAAA;AACT;AAEO,SAASujC,eACdp+B,MAAAA,EACAlE,QAAAA,EACAua,SAAAA,EACA8mB,WAAAA,EACc;IACd,MAAMnP,UAAmB,CAAA,CAAA,EACnBqQ,aAAaviC,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;IAC7C,IAAI,KAACI,2KAAAA,EAAY;QAACuB;IAAAA,GAASq+B,UAAU,GACnC,MAAM,IAAI1hC,MACR,mBAEC,OAFkBof,KAAKC,SAAAA,CACtB3F,UAAUhY,IAAAA,CAAK,CAAC,CAClB,CAAC,AACH,EADG;IAGL,IAAIgY,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC/B,MAAMkhC,WAAWnB,WAAAA,CAAY9mB,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;QAC9C,IAAII,+KAAAA,EAAY;YAACuB;QAAAA,GAASs+B,QAAQ,GAAG;YACnC,MAAMC,cAAc9hC,eAClB;gBAACX,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAC;aAAA,EAChC2B,OAAO5E,KAAAA,CAAMf,IACf,CAAA,CAAE,CAAC,CAAA;YACCkkC,eAAAA,CACFvQ,QAAQvsB,IAAAA,KAAKoc,uKAAAA,EAAO;gBAAC0gB,WAAW;aAAA,EAAG,SAAS;gBAAC;oBAAC1jC,MAAMwjC,WAAWxjC,IAAAA;gBAAAA,CAAK;aAAC,CAAC,GACjDyjC,SAASxiC,QAAAA,CAASwC,KAAAA,CAAM+X,UAAUjS,QAAQ,EAClDyR,OAAAA,CAAShF,CAAAA,SAAS;gBAC7B,MAAMxS,OAAO;oBAAC;wBAACxD,MAAMyjC,SAASzjC,IAAAA;oBAAAA;oBAAO;oBAAY;wBAACA,MAAMgW,KAAKhW,IAAAA;oBAAAA,CAAK;iBAAA;gBAClEmzB,QAAQvsB,IAAAA,KAAK+8B,sKAAAA,EAAMngC,IAAI,CAAC;YAC1B,CAAC,CAAA;QAEL;QACA,OAAO2vB;IACT;IACA,IAAI3X,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC/B,MAAMqhC,YAAYJ,WAAWviC,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;QACvD,QAAIsI,sKAAAA,EAAO;YAAC3G;QAAAA,GAASy+B,SAAS,GAAG;YAC/B,MAAMC,cACJjiC,eACE;gBACE;oBACE,GAAG4hC,UAAAA;oBACHviC,UAAUuiC,WAAWviC,QAAAA,CAASwC,KAAAA,CAC5B+X,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAI,GACpBgY,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAI,CACtB;gBAAA,CACD;aAAA,EAEH2B,OAAO5E,KAAAA,CAAMf,IACf,CAAA,CAAE,CAAC,CAAA,CACHyB,QAAAA;YAEFkyB,QAAQvsB,IAAAA,KACNoc,uKAAAA,EAAO6gB,aAAa,SAAS;gBAC3B;oBAAC7jC,MAAMwjC,WAAWxjC,IAAAA;gBAAAA;gBAClB;gBACA;oBAACA,MAAM4jC,UAAU5jC,IAAAA;gBAAAA,CAAK;aACvB,CACH,GACAmzB,QAAQvsB,IAAAA,KACNwmB,oKAAAA,EAAIwW,UAAUtiC,IAAAA,EAAM;gBAClB;oBAACtB,MAAMwjC,WAAWxjC,IAAAA;gBAAAA;gBAClB;gBACA;oBAACA,MAAM4jC,UAAU5jC,IAAAA;gBAAAA;gBACjB,MAAM;aACP,CACH;QACF;QACA,OAAOmzB;IACT;IACA,OAAOA;AACT;AAEO,SAAS2Q,gBACd3+B,MAAAA,EACAm9B,WAAAA,EACA9mB,SAAAA,EACc;IACd,MAAMjb,QAAQ+hC,WAAAA,CAAY9mB,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;IAC3C,IAAIgY,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAE/B,IAAIhC,SAASA,MAAMP,IAAAA,EACjB,OAAO;gBAAC2jC,sKAAAA,EAAM;gBAAC;oBAAC3jC,MAAMO,MAAMP,IAAAA;gBAAAA,CAAK;aAAC,CAAC;SAAA;QAErC,MAAM,IAAI8B,MAAM,iBAAiB;IACnC,OAAA,QAAW8B,2KAAAA,EAAY;QAACuB;IAAAA,GAAS5E,KAAK,KAAKib,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QACtE,MAAMwhC,eAAexjC,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;QAErD,OAAIugC,eACuBxjC,MAAMU,QAAAA,CAASiU,MAAAA,CACrCc,CAAAA,OAASA,KAAKhW,IAAAA,KAASwb,UAAUlY,IAAAA,CAAKtD,IACzC,EAEqBuC,MAAAA,GAAS,IAAA,CAC5BwH,QAAQC,IAAAA,CACN,8BAAmD,OAAnBwR,UAAUlY,IAAAA,CAAKtD,IAAI,EAAA,0CACnDkhB,KAAKC,SAAAA,CAAU5gB,OAAO,MAAM,CAAC,CAC/B,GACO,CAAA,CAAA,IAGF;YACLojC,0KAAAA,EAAM;gBAAC;oBAAC3jC,MAAMO,MAAMP,IAAAA;gBAAAA;gBAAO;gBAAY;oBAACA,MAAM+jC,aAAa/jC,IAAAA;gBAAAA,CAAK;aAAC,CAAC;SAAA,GAG/D,CAAA,CAAA;IACT,OACE,OAAO,CAAA,CAAA;AAEX;AAEO,SAASgkC,eACd7+B,MAAAA,EACAlE,QAAAA,EACAua,SAAAA,EACA8mB,WAAAA,EACc;IACd,MAAMnP,UAAmB,CAAA,CAAA,EAEnB5yB,QAAQ+hC,WAAAA,CAAY9mB,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,EACrCi0B,eAAex2B,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;IAE/C,IAAIgY,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,GAC5B,kDAAIhC,MAAOP,IAAAA,EAAM;QACf,MAAMikC,WAAWriC,eACf;YAACX,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAC;SAAA,EAChC2B,OAAO5E,KAAAA,CAAMf,IACf,CAAA,CAAE,CAAC,CAAA;QACH2zB,QAAQvsB,IAAAA,KAAKwmB,oKAAAA,EAAI6W,UAAU;YAAC;gBAACjkC,MAAMikC,SAASjkC,IAAAA;YAAAA,CAAK;SAAC,CAAC,GACnDmzB,QAAQvsB,IAAAA,CAAK+8B,0KAAAA,EAAM;YAAC;gBAAC3jC,MAAMO,MAAMP,IAAAA;YAAAA,CAAK;SAAC,CAAC;IAC1C,OACE,MAAM,IAAI8B,MAAM,uBAAuB;SAAA,QAGzC8B,2KAAAA,EAAY;QAACuB;IAAAA,GAAS5E,KAAK,SAC3BqD,2KAAAA,EAAY;QAACuB;IAAAA,GAASsyB,YAAY,KAClCjc,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,GAC1B;QACA,MAAM2hC,cACJzM,aAAax2B,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,QAC3CsI,sKAAAA,EAAO;YAAC3G;QAAAA,GAASsyB,aAAax2B,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAC,IACzDi0B,aAAax2B,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAI,CAAC,CAAA,GAC3ClB,KAAAA,GACA6hC,cACJ5jC,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,QAChCsI,sKAAAA,EAAO;YAAC3G;QAAAA,GAAS5E,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAC,IAC9CjD,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,GAChClB,KAAAA;QAEF4hC,eAAAA,CACuB3jC,MAAMU,QAAAA,CAASiU,MAAAA,CACrCc,CAAAA,OAASA,KAAKhW,IAAAA,KAASkkC,YAAYlkC,IACtC,EAEqBuC,MAAAA,KAAW,IAC9B4wB,QAAQvsB,IAAAA,KACNwmB,oKAAAA,EAAI8W,YAAY5iC,IAAAA,EAAM;YACpB;gBAACtB,MAAMO,MAAMP,IAAAA;YAAAA;YACb;YACA;gBAACA,MAAMkkC,YAAYlkC,IAAAA;YAAAA;YACnB,MAAM;SACP,CACH,IAEA+J,QAAQC,IAAAA,CACN,8BAAgD,OAAhBk6B,YAAYlkC,IAAI,EAAA,0CAChDkhB,KAAKC,SAAAA,CAAU5gB,OAAO,MAAM,CAAC,CAC/B,CAAA,GAIA4jC,eAAAA,CACuB5jC,MAAMU,QAAAA,CAASiU,MAAAA,CACrCc,CAAAA,OAASA,KAAKhW,IAAAA,KAASmkC,YAAYnkC,IACtC,EAEqBuC,MAAAA,KAAW,IAC9B4wB,QAAQvsB,IAAAA,KACN+8B,sKAAAA,EAAM;YAAC;gBAAC3jC,MAAMO,MAAMP,IAAAA;YAAAA;YAAO;YAAY;gBAACA,MAAMmkC,YAAYnkC,IAAAA;YAAAA,CAAK;SAAC,CAClE,IAEA+J,QAAQC,IAAAA,CACN,8BAAgD,OAAhBm6B,YAAYnkC,IAAI,EAAA,0CAChDkhB,KAAKC,SAAAA,CAAU5gB,OAAO,MAAM,CAAC,CAC/B,CAAA;IAGN;IACA,OAAO4yB;AACT;AAEO,SAASiR,cACdj/B,MAAAA,EACAm9B,WAAAA,EACA9mB,SAAAA,EACc;IACd,MAAM2X,UAAmB,CAAA,CAAA,EACnB5yB,QAAQ+hC,WAAAA,CAAY9mB,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,EACrC+tB,cAAc+Q,WAAAA,CAAY9mB,UAAUnR,OAAAA,CAAQ,CAAC,CAAC,CAAA;IAEpD,IAAI,CAACknB,aACH,OAAO4B;IAGT,IAAI3X,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,GAAG;QAC/B,MAAMgH,WACJiS,UAAUhY,IAAAA,CAAK,CAAC,CAAA,GAAIgY,UAAUnR,OAAAA,CAAQ,CAAC,CAAA,GAAI,WAAW;QACxD8oB,QAAQvsB,IAAAA,KAAK+8B,sKAAAA,EAAM;YAAC;gBAAC3jC,MAAMO,MAAMP,IAAAA;YAAAA,CAAK;SAAC,CAAC,GACxCmzB,QAAQvsB,IAAAA,KACNoc,uKAAAA,EAAO;YAACphB,eAAe;gBAACrB,KAAK;aAAA,EAAG4E,OAAO5E,KAAAA,CAAMf,IAAI,CAAA,CAAE,CAAC,CAAC;SAAA,EAAG+J,UAAU;YAChE;gBAACvJ,MAAMuxB,YAAYvxB,IAAAA;YAAAA,CAAK;SACzB,CACH;IACF,OAAA,IACEwb,UAAUhY,IAAAA,CAAKjB,MAAAA,KAAW,SAC1BqB,2KAAAA,EAAY;QAACuB;IAAAA,GAAS5E,KAAK,KAC3BqD,+KAAAA,EAAY;QAACuB;IAAAA,GAASosB,WAAW,GACjC;QACA,MAAMrwB,QAAQX,MAAMU,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA,EACxCw9B,cAAczP,YAAYtwB,QAAAA,CAASua,UAAUnR,OAAAA,CAAQ,CAAC,CAAC,CAAA,EACvDd,WACJiS,UAAUnR,OAAAA,CAAQ,CAAC,CAAA,KAAMknB,YAAYtwB,QAAAA,CAASsB,MAAAA,GAAS,UAAU,UAC7D8hC,gBACJziC,eAAe;YAACrB,KAAK;SAAA,EAAG4E,OAAO5E,KAAAA,CAAMf,IAAI,CAAA,CAAE,CAAC,CAAA,CAC5CyB,QAAAA,CAASua,UAAUhY,IAAAA,CAAK,CAAC,CAAC,CAAA;QAC5B2vB,QAAQvsB,IAAAA,KAAK+8B,sKAAAA,EAAM;YAAC;gBAAC3jC,MAAMO,MAAMP,IAAAA;YAAAA;YAAO;YAAY;gBAACA,MAAMkB,MAAMlB,IAAAA;YAAAA,CAAK;SAAC,CAAC,GACxEmzB,QAAQvsB,IAAAA,KACNoc,uKAAAA,EAAO;YAACqhB,aAAa;SAAA,EAAG96B,UAAU;YAChC;gBAACvJ,MAAMuxB,YAAYvxB,IAAAA;YAAAA;YACnB;YACA;gBAACA,MAAMghC,YAAYhhC,IAAAA;YAAAA,CAAK;SACzB,CACH;IACF;IACA,OAAOmzB;AACT;AChdO,MAAMmR,WAAAA,aAAAA,GAAAA,IAAqDp4B,QAAAA;AAE3D,SAASq4B,gBAAgB1lC,MAAAA,EAAgBye,EAAAA,EAAsB;IACpE,MAAM6Q,OAAOqW,WAAW3lC,MAAM;IAC9BylC,SAASlX,GAAAA,CAAIvuB,QAAQ,CAAA,CAAK,GAC1Bye,MACAgnB,SAASlX,GAAAA,CAAIvuB,QAAQsvB,IAAI;AAC3B;AAEO,SAASqW,WAAW3lC,MAAAA,EAAqC;IAC9D,OAAOylC,SAAS/4B,GAAAA,CAAI1M,MAAM;AAC5B;ACkBA,MAAMS,UAAQC,cAAc,oBAAoB;AASzC,SAASklC,uBAIP;UAHP39B,WAAAA,EACAyZ,UAAAA,EACA0S,aAAAA,EACO,EAAiE,CAJxC;IAOhC,IAAIyR;IAEJ,MAAMC,aAAa3E,iBAAiBl5B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAM;IAE5E,OAAO,SAAqBtG,MAAAA,EAAiC;QAC3DoN,6BAA6BmhB,GAAAA,CAAIvuB,QAAQ,CAAA,CAAK,GAC9CylC,SAASlX,GAAAA,CAAIvuB,QAAQ,CAAA,CAAI,GACzB6lC,mBAAmB,CAAC;eAAG7lC,OAAOoC,QAAQ;SAAA;QAEtC,MAAM,EAAC+a,OAAAA,MAAAA,EAAAA,GAASnd;QAChB,IAAI+lC,kBAA2B,CAAA,CAAA;QAE/B,MAAMC,8BAA8BA,MAAM;YACxC,IAAID,gBAAgBriC,MAAAA,KAAW,GAC7B;YAEF,MAAM4wB,UAAUyR;YAChBA,kBAAkB,CAAA,CAAA;YAClB,IAAI3E,UAAU,CAAA;YAEd/R,kBAAkBrvB,QAAQ,MAAM;gBAC9BiE,yJAAAA,CAAOuuB,kBAAAA,CAAmBxyB,QAAQ,MAAM;oBACtC0lC,gBAAgB1lC,QAAQ,MAAM;wBAC5Bm2B,cAAcn2B,QAAQ,MAAM;4BAC1B,KAAA,MAAWqzB,SAASiB,QAAS;gCACvB7zB,QAAMI,OAAAA,IACRJ,QAAM,yBAA8C,CAAE,MAAvB4hB,KAAKC,SAAAA,CAAU+Q,KAAK,CAAC;gCAEtD,IAAI;oCACF+N,UAAU0E,WAAW9lC,QAAQqzB,KAAK;gCACpC,EAAA,OAAS7hB,OAAO;oCACdtG,QAAQsG,KAAAA,CACN,kBAA0DA,OAAxC6Q,KAAKC,SAAAA,CAAU+Q,KAAK,CAAC,EAAA,oBAAgC,CACzE,YADkEoM,OAAO;gCAE3E;4BACF;wBACF,CAAC;oBACH,CAAC;gBACH,CAAC,GACG2B,WAAAA,CACFphC,OAAOimC,SAAAA,CAAAA,GACPjmC,OAAO4iB,QAAAA,EAAAA;YAEX,CAAC;QACH,GAEMsjB,gBAAgBA;gBAAC,EAAC5R,OAAAA,EAAAA,KAAiC;YACvD,MAAMJ,gBAAgBI,QAAQje,MAAAA,CAAQ8vB,CAAAA,IAAMA,EAAEloB,MAAAA,KAAW,OAAO;YAC5DiW,cAAcxwB,MAAAA,KAAW,KAAA,CAG7BqiC,kBAAkBA,gBAAgB74B,MAAAA,CAAOgnB,aAAa,GACtD8R,6BAAAA;QACF;QAEA5R,OAAAA,cAAcrsB,IAAAA,CAAK,MAAM;YACvBtH,QAAM,+BAA+B;YACrC,MAAM4zB,MAAMpsB,YAAY7H,EAAAA,CAAG,WAAW8lC,aAAa;YACnD,OAAO,MAAM;gBACXzlC,QAAM,iCAAiC,GACvC4zB,IAAI/zB,WAAAA,CAAAA;YACN;QACF,CAAC,GAEDN,OAAOmd,KAAAA,GAASR,CAAAA,cAAwC;YACtD,IAAI2X,UAAmB,CAAA,CAAA;YAGvBuR,mBAAmB7lC,OAAOoC,QAAAA;YAE1B,MAAMgkC,iBAAiB5iC,qBACrBqiC,kBACA59B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MACpC;YAGA6W,OAAMR,SAAS;YAEf,MAAM0pB,gBAAgB7iC,qBACpBxD,OAAOoC,QAAAA,EACP6F,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MACpC;YAEA,IAAI,CAACq/B,WAAW3lC,MAAM,GACpB,OAKOA;YAYT,OAPEomC,kBACA,CAACC,iBACD1pB,UAAU9M,IAAAA,KAAS,mBAEnBykB,QAAQvsB,IAAAA,KAAKoc,uKAAAA,EAAO0hB,kBAAkB,UAAU;gBAAC,CAAC;aAAC,CAAC,GAG9ClpB,UAAU9M,IAAAA,EAAAA;gBAChB,KAAK;oBACHykB,UAAU,CACR;2BAAGA,SACH;2BAAGkP,gBACDv7B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,EAClCtG,OAAOoC,QAAAA,EACPua,WACAkpB,gBACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACHvR,UAAU,CACR;2BAAGA,SACH;2BAAGwP,gBACD77B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,EAClCtG,OAAOoC,QAAAA,EACPua,WACAkpB,gBACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACHvR,UAAU,CACR;2BAAGA,SACH;2BAAG2Q,gBACDh9B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,EAClCu/B,kBACAlpB,SACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACH2X,UAAU,CACR;2BAAGA,SACH;2BAAGoQ,eACDz8B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,EAClCtG,OAAOoC,QAAAA,EACPua,WACAkpB,gBACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACHvR,UAAU,CACR;2BAAGA,SACH;2BAAGiQ,gBACDt8B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,EAClCtG,OAAOoC,QAAAA,EACPua,WACAkpB,gBACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACHvR,UAAU,CACR;2BAAGA,SACH;2BAAG2P,aACDh8B,YAAYG,WAAAA,GAAcM,OAAAA,CAAQpC,MAAAA,EAClCtG,OAAOoC,QAAAA,EACPua,SACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACH2X,UAAU,CACR;2BAAGA,SACH;2BAAG6Q,eACDl9B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,EAClCtG,OAAOoC,QAAAA,EACPua,WACAkpB,gBACF,CAAC;qBAAA;oBAEH;gBACF,KAAK;oBACHvR,UAAU,CACR;2BAAGA,SACH;2BAAGiR,cACDt9B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,EAClCu/B,kBACAlpB,SACF,CAAC;qBAAA;oBAEH;YACF;YA6BF,IAvBE,CAACypB,kBACDC,iBACA;gBAAC;gBAAc;gBAAY;gBAAe,aAAa;aAAA,CAAE9vB,QAAAA,CACvDoG,UAAU9M,IACZ,KAAA,CAEAykB,UAAU,CAAC;mBAAGA;oBAASwQ,sKAAAA,EAAM,EAAE,CAAC;aAAA,EAChCpjB,WAAWnR,IAAAA,CAAK;gBACdV,MAAM;gBACNy2B,eAAevjC,eACb8iC,kBACA59B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA,EAC/C4M,qBAAqBb,GAAAA,CAAI1M,MAAM,CACjC;YAAA,CACD,CAAA,GAIComC,kBAAkB9R,QAAQ5wB,MAAAA,GAAS,KAAA,CACrC4wB,UAAU;oBAACmQ,6KAAAA,EAAa,CAAA,CAAA,EAAI,CAAA,CAAE,GAAG;mBAAGnQ,OAAO;aAAA,GAIzCA,QAAQ5wB,MAAAA,GAAS,GACnB,KAAA,MAAW2vB,SAASiB,QAClBrsB,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACNwjB,OAAO;oBAAC,GAAGA,KAAAA;oBAAOpV,QAAQ;gBAAA;gBAC1BsoB,aAAahT,qBAAqBvzB,MAAM;gBACxCkB,OAAOlB,OAAOkB,KAAAA;YAAAA,CACf;YAGL,OAAOlB;QACT,GACOA;IACT;AACF;AC9QA,MAAMS,UAAQC,cAAc,6BAA6B;AAMlD,SAAS8lC,2BACdv+B,WAAAA,EAC8D;IAC9D,OAAO,SACLjI,MAAAA,EACyB;QACzB,MAAM,EAACmd,OAAAA,MAAAA,EAAAA,GAASnd;QAEhBA,OAAAA,OAAOmd,KAAAA,GAASC,CAAAA,OAAO;YACrB,IAAInV,YAAYG,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY,GAAG;gBACjE8U,OAAMC,EAAE;gBACR;YACF;YAMA,IAAImS,mBAAmBvvB,MAAM,GAAG;gBAC9Bmd,OAAMC,EAAE;gBACR;YACF;YAMA,IAAIuS,UAAU3vB,MAAM,KAAK8vB,UAAU9vB,MAAM,GAAG;gBAC1Cmd,OAAMC,EAAE;gBACR;YACF;YAEA,IAAIA,GAAGvN,IAAAA,KAAS,eAAe;gBAC7B,MAAMvL,aAAa8Y,GAAGzY,IAAAA,CAAKR,EAAAA,CAAG,CAAC,GACzBsiC,gBACJrpB,GAAGzY,IAAAA,CAAKjB,MAAAA,KAAW,KACnBY,eAAe,KACftE,OAAOoC,QAAAA,CAASsB,MAAAA,KAAW,GACvBgjC,gBACJtpB,GAAG3Y,IAAAA,CAAK9C,KAAAA,KAAUsG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;gBAE/D8lC,iBAAiBC,iBAAAA,CACnBjmC,QAAM,0BAA0B,GAChCwD,yJAAAA,CAAO0iC,UAAAA,CAAW3mC,QAAQA,OAAOijC,kBAAAA,CAAmB;oBAAC9sB,YAAY,CAAA,CAAA;gBAAA,CAAG,CAAC,CAAA;YAEzE;YAEAgH,OAAMC,EAAE;QACV,GAEOpd;IACT;AACF;ACrDA,MAAMS,UAAQC,cAAc,wBAAwB;AAK7C,SAASkmC,2BAIhB;QAJsC,EACpC3+B,WAAAA,EAGF,EAAG;IACD,OAAO,SACLjI,MAAAA,EACyB;QACzBA,OAAO+E,WAAAA,GAAe7D,CAAAA,QAChB+C,yJAAAA,CAAOsC,QAAAA,CAASrF,KAAK,IAChB,CAAA,QAGF6D,2KAAAA,EAAYkD,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAASxH,KAAK,GAE7DlB,OAAOgF,UAAAA,GAAc9D,CAAAA,QACf+C,yJAAAA,CAAOsC,QAAAA,CAASrF,KAAK,IAChB,CAAA,QAGF+L,sKAAAA,EAAOhF,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAASxH,KAAK,GAExDlB,OAAOqH,WAAAA,GAAenG,CAAAA,QAChB+C,yJAAAA,CAAOsC,QAAAA,CAASrF,KAAK,IAChB,CAAA,IAGFmG,iNAAAA,EAAYY,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAASxH,KAAK,GAE7DlB,OAAO6mC,MAAAA,GAAUngC,CAAAA,UACXzC,yJAAAA,CAAOsC,QAAAA,CAASG,OAAO,IAClB,CAAA,IAIPuB,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA,KAAS+F,QAAQ/E,KAAAA,IAAAA,CAC/DsG,YACEG,WAAAA,GACAM,OAAAA,CAAQpC,MAAAA,CAAOS,YAAAA,CAAatF,GAAAA,CAAKqlC,CAAAA,MAAQA,IAAInmC,IAAI,EACjD4V,QAAAA,CAAS7P,QAAQ/E,KAAK,KACvBsG,YACGG,WAAAA,GACAM,OAAAA,CAAQpC,MAAAA,CAAO+L,aAAAA,CAAc5Q,GAAAA,CAAKqlC,CAAAA,MAAQA,IAAInmC,IAAI,EAClD4V,QAAAA,CAAS7P,QAAQ/E,KAAK,CAAA,GAG/B3B,OAAO8G,QAAAA,GAAYJ,CAAAA,UACbzC,yJAAAA,CAAOsC,QAAAA,CAASG,OAAO,IAClB,CAAA,IAGiBuB,YACvBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQpC,MAAAA,CAAO+L,aAAAA,CAAc5Q,GAAAA,CAAKqlC,CAAAA,MAAQA,IAAInmC,IAAI,EAEjC4V,QAAAA,CAAS7P,QAAQ/E,KAAK,KACxC,cAAc+E,WACdA,QAAQ/D,QAAAA,KAAa,CAAA;QAKzB,MAAM,EAACstB,aAAAA,EAAAA,GAAiBjwB;QACxBA,OAAAA,OAAOiwB,aAAAA,GAAiBnQ,CAAAA,UAAU;YAChC,MAAM,CAACrb,MAAME,IAAI,CAAA,GAAImb;YAGrB,IAAIrb,KAAK9C,KAAAA,KAAU8B,KAAAA,KAAakB,KAAKjB,MAAAA,KAAW,GAAG;gBACjDjD,QAAM,+CAA+C;gBACrD,MAAM0W,OAAO1S,MACP2K,MACJ+H,KAAKhW,IAAAA,IAAQ8G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;gBACjDjN,YAAYsI,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAc,GACtC2S,6JAAAA,CAAW8N,QAAAA,CACTtwB,QACA;oBACE,GAAGmX,IAAAA;oBACHxV,OAAOsG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,CAAO6Q,IAAAA,CAAKxW,IAAAA;oBACrDQ,MAAMiO;gBAAAA,GAER;oBAACjL,IAAIQ;gBAAAA,CACP,GACAsD,YAAYsI,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAmB;gBAC3C;YACF;YAGA,IAAIpL,KAAKtD,IAAAA,KAASsC,KAAAA,KAAAA,CAAckB,KAAKjB,MAAAA,KAAW,KAAKiB,KAAKjB,MAAAA,KAAW,CAAA,GAAI;gBACvEjD,QAAM,iDAAiD;gBACvD,MAAM2O,MAAMnH,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;gBAC9CjN,YAAYsI,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAc,GACtC2S,6JAAAA,CAAW8N,QAAAA,CAAStwB,QAAQ;oBAACmB,MAAMiO;gBAAAA,GAAM;oBAACjL,IAAIQ;gBAAAA,CAAK,GACnDsD,YAAYsI,IAAAA,CAAK;oBAACV,MAAM;gBAAA,CAAmB;gBAC3C;YACF;YAEAogB,cAAcnQ,KAAK;QACrB,GACO9f;IACT;AACF;ACzGO,SAAS+mC,qBAAqC,EAAG;QAAxB,EAAC9+B,WAAAA,EAAoB;IACnD,OAAO,SACLjI,MAAAA,EACyB;QACzBA,OAAAA,OAAOijC,kBAAAA,GAAsBze,CAAAA,UAKbnjB,aACZ;gBACE;oBACEM,OAAOsG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;oBACtDQ,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;oBACxClT,OACEiG,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,CAAOxD,MAAAA,CAAO,CAAC,CAAA,CAAEnC,IAAAA,IACnD;oBACF,GAAI6jB,QAAQtd,QAAAA,GAAW;wBAACA,UAAUsd,QAAQtd,QAAAA;oBAAAA,IAAY,CAAA,CAAA;oBACtD,GAAIsd,QAAQnR,KAAAA,GAAQ;wBAACA,OAAOmR,QAAQnR,KAAAA;oBAAAA,IAAS,CAAA,CAAA;oBAC7CnR,UAAU,CAAA,CAAA;oBACVE,UAAU;wBACR;4BACET,OAAO;4BACPR,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;4BACxCzS,MAAM;4BACNC,OAAO8hB,QAAQrO,UAAAA,CAAWE,MAAAA,CAAQe,CAAAA,YAChCnP,YACGG,WAAAA,CAAAA,EACAM,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAAWvK,IAAAA,CACzB;wCAAC,EAACjL,IAAAA,EAAAA;2CAAUA,SAASyW,SACvB,CACJ;;wBAAA,CACD;qBAAA;gBAAA,CAEJ;aAAA,EAEH;gBAAC9V,aAAa2G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;YAAAA,CAClD,CAAA,CAAE,CAAC,CAAA,EAGEtG;IACT;AACF;ACjDO,SAASgnC,2BAMhB,EAAG;UALDhnC,MAAAA,EACAiI,WAAAA,EAIF,GANsC;IAOpC,MAAMg/B,kBAAkBA,MAAM;QAC5B,IAAIjnC,OAAOwE,SAAAA,EAAW;YACpB,MAAM0iC,oBAAoB15B,6BAA6Bd,GAAAA,CACrD1M,OAAOwE,SACT;YAEA,IAAI0iC,mBACFj/B,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACNrL,WAAW0iC;YAAAA,CACZ;iBACI;gBACL,MAAM1iC,YAAY+C,sBAAsB;oBACtCjB,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;oBAC1CtG;oBACAwH,OAAOxH,OAAOwE,SAAAA;gBAAAA,CACf;gBAEDgJ,6BAA6B+gB,GAAAA,CAAIvuB,OAAOwE,SAAAA,EAAWA,SAAS,GAE5DyD,YAAYsI,IAAAA,CAAK;oBAACV,MAAM;oBAAoBrL;gBAAAA,CAAU;YACxD;QACF,OACEyD,YAAYsI,IAAAA,CAAK;YAACV,MAAM;YAAoBrL,WAAW;QAAA,CAAK;IAEhE,GAEM,EAACoe,QAAAA,EAAAA,GAAY5iB;IAEnBA,OAAAA,OAAO4iB,QAAAA,GAAW,MAAM;QACtBA,YAEK3a,YAAYG,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;YAACC,OAAO;QAAA,CAAa,KAC1D2+B,gBAAAA;IAEJ,GAEOjnC;AACT;AChCO,SAASmnC,aACd1iC,IAAAA,EACmC;IACnC,OAAI,OAAOA,QAAS,YAAYA,SAAS,OAErC,CAAA,CAAE,WAAWA,IAAAA,KAAS,cAAcA,QAAQlD,MAAMC,OAAAA,CAAQiD,KAAKrC,QAAQ,IAIpE,CAAA;AACT;AAWO,SAASglC,gBACd1+B,OAAAA,EACAjE,IAAAA,EACsC;IACtC,WAAO4iC,+MAAAA,EAAc5iC,IAAI,KAAKA,KAAK9C,KAAAA,KAAU+G,QAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;AACpE;AAWO,SAAS2mC,WACd5+B,OAAAA,EACAjE,IAAAA,EACiC;IAKjC,OAJI,OAAOA,QAAS,YAAYA,SAAS,QAIrC,cAAcA,OACT,CAAA,IAGL,WAAWA,OACNA,KAAK9C,KAAAA,KAAU+G,QAAQpC,MAAAA,CAAO6Q,IAAAA,CAAKxW,IAAAA,GAGrC,UAAU8D;AACnB;AASO,SAAS8iC,kBAAkB9iC,IAAAA,EAAwC;IACxE,OACE,OAAOA,QAAS,YAChBA,SAAS,QACT,UAAUA,QACV,OAAOA,KAAKhC,IAAAA,IAAS;AAEzB;AAUO,SAAS+kC,aACd9+B,OAAAA,EACAjE,IAAAA,EACoB;IACpB,OACE,CAAC0iC,aAAa1iC,IAAI,KAClB,CAAC2iC,gBAAgB1+B,SAASjE,IAAI,KAC9B,CAAC6iC,WAAW5+B,SAASjE,IAAI,KACzB,CAAC8iC,kBAAkB9iC,IAAI;AAE3B;AAKO,SAASgjC,SACd1d,IAAAA,EACAplB,IAAAA,EACuD;IACvD,MAAM2yB,QAAQ3yB,KAAKR,EAAAA,CAAG,CAAC;IAEvB,IAAImzB,CAAAA,CAAAA,UAAU7zB,KAAAA,KAAakB,KAAKjB,MAAAA,KAAW,CAAA,GAI3C,OAAOqmB,KAAK3nB,QAAAA,CAAS+B,EAAAA,CAAGmzB,KAAK;AAC/B;AASO,SAASoQ,QACdh/B,OAAAA,EACAqhB,IAAAA,EACAplB,IAAAA,EAC6C;IAC7C,IAAIA,KAAKjB,MAAAA,KAAW,GAClB,OAAOqmB;IAGT,IAAIplB,KAAKjB,MAAAA,KAAW,GAClB,OAAO+jC,SAAS1d,MAAMplB,IAAI;IAG5B,IAAIA,KAAKjB,MAAAA,KAAW,GAAG;QACrB,MAAMhC,QAAQ+lC,SAAS1d,MAAMplB,KAAKC,KAAAA,CAAM,GAAG,CAAC,CAAC;QAE7C,OAAI,CAAClD,SAAS,CAAC0lC,gBAAgB1+B,SAAShH,KAAK,IAC3C,KAAA,IAGYA,MAAMU,QAAAA,CAAS+B,EAAAA,CAAGQ,IAAAA,CAAK,CAAC,CAAC,KAGrC,KAAA;IAIJ;AACF;AAEO,SAASgjC,QACdj/B,OAAAA,EACAqhB,IAAAA,EACAplB,IAAAA,EACA;IACA,MAAMF,OAAOijC,QAAQh/B,SAASqhB,MAAMplB,IAAI;IAExC,IAAIF,QAAQ6iC,WAAW5+B,SAASjE,IAAI,GAClC,OAAOA;AAIX;AAKO,SAASmjC,UACdl/B,OAAAA,EACAqhB,IAAAA,EACAplB,IAAAA,EACA;IACA,IAAIA,KAAKjB,MAAAA,KAAW,GAClB;IAGF,MAAMmkC,aAAaljC,KAAKC,KAAAA,CAAM,GAAG,CAAA,CAAE;IAEnC,IAAIijC,WAAWnkC,MAAAA,KAAW,GACxB,OAAOqmB;IAGT,MAAMzlB,aAAaujC,WAAW1jC,EAAAA,CAAG,CAAC;IAElC,IAAIG,eAAeb,KAAAA,KAAaokC,WAAWnkC,MAAAA,KAAW,GACpD;IAGF,MAAMhC,QAAQqoB,KAAK3nB,QAAAA,CAAS+B,EAAAA,CAAGG,UAAU;IAEzC,IAAI5C,SAAS0lC,gBAAgB1+B,SAAShH,KAAK,GACzC,OAAOA;AAIX;AC3LO,SAASomC,6BACdp/B,OAAAA,EACAxH,KAAAA,EACAyb,SAAAA,EACA;IACA,MAAMorB,YAAQC,yJAAAA,EAAY;QAAC5lC,UAAUlB;IAAAA,CAAM;IAE3C,IAAI;QACF+mC,kCAAkCv/B,SAASq/B,OAAOprB,SAAS;IAC7D,EAAA,OAASurB,GAAG;QACVh9B,QAAQsG,KAAAA,CAAM02B,CAAC;IACjB;IAEA,OAAOC,6JAAAA,EAAYJ,KAAK,EAAE3lC,QAAAA;AAC5B;AAEA,SAAS6lC,kCACPv/B,OAAAA,EACAqhB,IAAAA,EAGApN,SAAAA,EACA;IACA,OAAQA,UAAU9M,IAAAA,EAAAA;QAChB,KAAK;YAAe;gBAClB,MAAM,EAAClL,IAAAA,EAAMF,MAAM2jC,YAAAA,EAAAA,GAAgBzrB,WAC7BhW,SAASihC,UAAUl/B,SAASqhB,MAAMplB,IAAI,GACtC2yB,QAAQ3yB,IAAAA,CAAKA,KAAKjB,MAAAA,GAAS,CAAC,CAAA;gBAMlC,IAJI,CAACiD,UAID2wB,QAAQ3wB,OAAOvE,QAAAA,CAASsB,MAAAA,EAC1B;gBAGF,IAAIiB,KAAKjB,MAAAA,KAAW,GAAG;oBAGrB,IAAI0jC,gBAAgB1+B,SAAS0/B,YAAY,GAAG;wBAG1CzhC,OAAOvE,QAAAA,CAASuyB,MAAAA,CAAO2C,OAAO,GAAG;4BAC/B,GAAG8Q,YAAAA;4BACHhmC,UAAUgmC,aAAahmC,QAAAA,CAASX,GAAAA,CAAKY,CAAAA,QAC/B,cAAcA,QAGT;oCACLlB,MAAMkB,MAAMlB,IAAAA;oCACZQ,OAAOU,MAAMV,KAAAA;oCACb,GAAI,WAAWU,SAAS,OAAOA,MAAMnB,KAAAA,IAAU,WAC3CmB,MAAMnB,KAAAA,GACN,CAAA,CAAA;gCAAC,IAIFmB,KACR;wBAAA,CACF;wBAED;oBACF;oBAEA,IAAIO,0JAAAA,CAAQC,SAAAA,CAAUulC,YAAY,KAAK,CAAA,CAAE,cAAcA,YAAAA,GAAe;wBAGpEzhC,OAAOvE,QAAAA,CAASuyB,MAAAA,CAAO2C,OAAO,GAAG;4BAC/Bn2B,MAAMinC,aAAajnC,IAAAA;4BACnBQ,OAAOymC,aAAazmC,KAAAA;4BACpB,GAAI,WAAWymC,gBACf,OAAOA,aAAalnC,KAAAA,IAAU,WAC1BknC,aAAalnC,KAAAA,GACb,CAAA,CAAA;wBAAC,CACN;wBACD;oBACF;gBACF;gBAEA,IAAIyD,KAAKjB,MAAAA,KAAW,GAAG;oBAGrB,IAAI,CAAC0jC,gBAAgB1+B,SAAS/B,MAAM,GAElC;oBAGF,IAAI4gC,kBAAkBa,YAAY,GAAG;wBAGnCzhC,OAAOvE,QAAAA,CAASuyB,MAAAA,CAAO2C,OAAO,GAAG8Q,YAAY;wBAC7C;oBACF;oBAEA,IAAI,cAAcA,cAAc;wBAG9BzhC,OAAOvE,QAAAA,CAASuyB,MAAAA,CAAO2C,OAAO,GAAG;4BAC/Bn2B,MAAMinC,aAAajnC,IAAAA;4BACnBQ,OAAOymC,aAAazmC,KAAAA;4BACpB,GAAI,WAAWymC,gBACf,OAAOA,aAAalnC,KAAAA,IAAU,WAC1BknC,aAAalnC,KAAAA,GACb,CAAA,CAAA;wBAAC,CACN;wBACD;oBACF;gBACF;gBAEA;YACF;QAEA,KAAK;YAAe;gBAClB,MAAM,EAACyD,IAAAA,EAAMiD,MAAAA,EAAQnF,IAAAA,EAAAA,GAAQka;gBAC7B,IAAIla,KAAKiB,MAAAA,KAAW,EAAG,CAAA;gBACvB,MAAMyT,OAAOwwB,QAAQj/B,SAASqhB,MAAMplB,IAAI;gBAExC,IAAI,CAACwS,MACH;gBAGF,MAAMkxB,SAASlxB,KAAK1U,IAAAA,CAAKmC,KAAAA,CAAM,GAAGgD,MAAM,GAClC0gC,QAAQnxB,KAAK1U,IAAAA,CAAKmC,KAAAA,CAAMgD,MAAM;gBACpCuP,KAAK1U,IAAAA,GAAO4lC,SAAS5lC,OAAO6lC;gBAE5B;YACF;QAEA,KAAK;YAAc;gBACjB,MAAM,EAAC3jC,IAAAA,EAAAA,GAAQgY,WACTlY,OAAOijC,QAAQh/B,SAASqhB,MAAMplB,IAAI,GAClCk8B,WAAW7gB,uJAAAA,CAAK8gB,QAAAA,CAASn8B,IAAI,GAC7B2qB,OAAOoY,QAAQh/B,SAASqhB,MAAM8W,QAAQ,GACtCl6B,SAASihC,UAAUl/B,SAASqhB,MAAMplB,IAAI;gBAE5C,IAAI,CAACF,QAAQ,CAAC6qB,QAAQ,CAAC3oB,QACrB;gBAGF,MAAM2wB,QAAQ3yB,IAAAA,CAAKA,KAAKjB,MAAAA,GAAS,CAAC,CAAA;gBAElC,IAAI6jC,kBAAkB9iC,IAAI,KAAK8iC,kBAAkBjY,IAAI,GACnDA,KAAK7sB,IAAAA,IAAQgC,KAAKhC,IAAAA;qBAAAA,IAElB2kC,gBAAgB1+B,SAASjE,IAAI,KAC7B2iC,gBAAgB1+B,SAAS4mB,IAAI,GAE7BA,KAAKltB,QAAAA,CAAS2F,IAAAA,CAAK,GAAGtD,KAAKrC,QAAQ;qBAEnC;gBAGFuE,OAAOvE,QAAAA,CAASuyB,MAAAA,CAAO2C,OAAO,CAAC;gBAE/B;YACF;QAEA,KAAK;YAAa;gBAChB,MAAM,EAAC3yB,IAAAA,EAAM6G,OAAAA,EAAAA,GAAWmR;gBAExB,IAAIqD,uJAAAA,CAAKuoB,UAAAA,CAAW5jC,MAAM6G,OAAO,GAC/B;gBAGF,MAAM/G,OAAOijC,QAAQh/B,SAASqhB,MAAMplB,IAAI,GAClCgC,SAASihC,UAAUl/B,SAASqhB,MAAMplB,IAAI,GACtC2yB,QAAQ3yB,IAAAA,CAAKA,KAAKjB,MAAAA,GAAS,CAAC,CAAA;gBAElC,IAAI,CAACe,QAAQ,CAACkC,QACZ;gBASFA,OAAOvE,QAAAA,CAASuyB,MAAAA,CAAO2C,OAAO,CAAC;gBAC/B,MAAMkR,WAAWxoB,uJAAAA,CAAKnD,SAAAA,CAAUlY,MAAMgY,SAAS,GACzC8rB,YAAYf,QAAQh/B,SAASqhB,MAAM/J,uJAAAA,CAAKrZ,MAAAA,CAAO6hC,QAAQ,CAAC,GACxDE,WAAWF,QAAAA,CAASA,SAAS9kC,MAAAA,GAAS,CAAC,CAAA;gBAU7C,IARI,CAAC+kC,aAID,CAAA,CAAE,cAAcA,SAAAA,KAIhB,CAAClnC,MAAMC,OAAAA,CAAQinC,UAAUrmC,QAAQ,GACnC;gBAGFqmC,UAAUrmC,QAAAA,CAASuyB,MAAAA,CAAO+T,UAAU,GAAGjkC,IAAI;gBAE3C;YACF;QAEA,KAAK;YAAe;oBAGHmjC;gBAFf,MAAM,EAACjjC,IAAAA,EAAAA,GAAQgY,WACT2a,QAAQ3yB,IAAAA,CAAKA,KAAKjB,MAAAA,GAAS,CAAC,CAAA;iBACnBkkC,aAAAA,UAAUl/B,SAASqhB,MAAMplB,IAAI,eAA7BijC,iCAAAA,WACPxlC,QAAAA,CAASuyB,MAAAA,CAAO2C,OAAO,CAAC;gBAEhC;YACF;QAEA,KAAK;YAAe;gBAClB,MAAM,EAAC3yB,IAAAA,EAAMiD,MAAAA,EAAQnF,IAAAA,EAAAA,GAAQka;gBAE7B,IAAIla,KAAKiB,MAAAA,KAAW,GAClB;gBAGF,MAAMyT,OAAOwwB,QAAQj/B,SAASqhB,MAAMplB,IAAI;gBAExC,IAAI,CAACwS,MACH;gBAGF,MAAMkxB,SAASlxB,KAAK1U,IAAAA,CAAKmC,KAAAA,CAAM,GAAGgD,MAAM,GAClC0gC,QAAQnxB,KAAK1U,IAAAA,CAAKmC,KAAAA,CAAMgD,SAASnF,KAAKiB,MAAM;gBAClDyT,KAAK1U,IAAAA,GAAO4lC,SAASC;gBAErB;YACF;QAEA,KAAK;YAAY;gBACf,MAAM,EAAC3jC,IAAAA,EAAMisB,UAAAA,EAAYC,aAAAA,EAAAA,GAAiBlU,WAEpClY,OAAOijC,QAAQh/B,SAASqhB,MAAMplB,IAAI;gBAMxC,IAJI,CAACF,QAID0iC,aAAa1iC,IAAI,GACnB;gBAGF,IAAI+iC,aAAa9+B,SAASjE,IAAI,GAAG;oBAC/B,MAAMkkC,cACJ,WAAW/X,cAAc,OAAOA,WAAW1vB,KAAAA,IAAU,WACjD0vB,WAAW1vB,KAAAA,GACX,CAAA,GAEA0nC,aACJ,WAAW/X,iBAAiB,OAAOA,cAAc3vB,KAAAA,IAAU,WACvD2vB,cAAc3vB,KAAAA,GACd,CAAA;oBAGN,IAAA,MAAWkO,OAAOyhB,cAAe;wBAC/B,IAAIzhB,QAAQ,SACV;wBAGF,MAAMlO,QAAQ2vB,aAAAA,CAAczhB,GAAG,CAAA;wBAE3BlO,SAAS,OACX,OAAOuD,IAAAA,CAA2C2K,GAAG,CAAA,GAErD3K,IAAAA,CAA2C2K,GAAG,CAAA,GAAIlO;oBAEtD;oBAEA,IAAA,MAAWkO,OAAOwhB,WACZxhB,QAAQ,WAAA,CAIPyhB,cAAcgY,cAAAA,CAAez5B,GAAG,KACnC,OAAO3K,IAAAA,CAA2C2K,GAAG,CAAA;oBAIzD,IAAA,MAAWA,OAAOw5B,WAAY;wBAC5B,MAAM1nC,QAAQ0nC,UAAAA,CAAWx5B,GAAG,CAAA;wBAExBlO,SAAS,OACX,OAAOuD,IAAAA,CAA2C2K,GAAG,CAAA,GAErD3K,IAAAA,CAA2C2K,GAAG,CAAA,GAAIlO;oBAEtD;oBAEA,IAAA,MAAWkO,OAAOu5B,YACXC,WAAWC,cAAAA,CAAez5B,GAAG,KAChC,OAAO3K,IAAAA,CAA2C2K,GAAG,CAAA;oBAIzD;gBACF;gBAEA,IAAIg4B,gBAAgB1+B,SAASjE,IAAI,GAAG;oBAClC,IAAA,MAAW2K,OAAOyhB,cAAe;wBAC/B,IAAIzhB,QAAQ,cAAcA,QAAQ,QAChC;wBAGF,MAAMlO,QAAQ2vB,aAAAA,CAAczhB,GAAG,CAAA;wBAE3BlO,SAAS,OACX,OAAOuD,IAAAA,CAA0B2K,GAAG,CAAA,GAEpC3K,IAAAA,CAA0B2K,GAAG,CAAA,GAAIlO;oBAErC;oBAGA,IAAA,MAAWkO,OAAOwhB,WACXC,cAAcgY,cAAAA,CAAez5B,GAAG,KACnC,OAAO3K,IAAAA,CAA0B2K,GAAG,CAAA;oBAIxC;gBACF;gBAEA,IAAIm4B,kBAAkB9iC,IAAI,GAAG;oBAC3B,IAAA,MAAW2K,OAAOyhB,cAAe;wBAC/B,IAAIzhB,QAAQ,QACV;wBAGF,MAAMlO,QAAQ2vB,aAAAA,CAAczhB,GAAG,CAAA;wBAE3BlO,SAAS,OACX,OAAOuD,IAAAA,CAA2C2K,GAAG,CAAA,GAErD3K,IAAAA,CAA2C2K,GAAG,CAAA,GAAIlO;oBAEtD;oBAGA,IAAA,MAAWkO,OAAOwhB,WACXC,cAAcgY,cAAAA,CAAez5B,GAAG,KACnC,OAAO3K,IAAAA,CAA2C2K,GAAG,CAAA;oBAIzD;gBACF;gBAEA;YACF;QAEA,KAAK;YAAc;gBACjB,MAAM,EAACzK,IAAAA,EAAM+F,QAAAA,EAAUkmB,UAAAA,EAAAA,GAAcjU;gBAErC,IAAIhY,KAAKjB,MAAAA,KAAW,GAClB;gBAGF,MAAMiD,SAASihC,UAAUl/B,SAASqhB,MAAMplB,IAAI,GACtC2yB,QAAQ3yB,IAAAA,CAAKA,KAAKjB,MAAAA,GAAS,CAAC,CAAA;gBAElC,IAAI,CAACiD,QACH;gBAGF,IAAIwgC,aAAaxgC,MAAM,GAAG;oBACxB,MAAMjF,QAAQ+lC,SAAS1d,MAAMplB,IAAI;oBAEjC,IAAI,CAACjD,SAAS,CAAC0lC,gBAAgB1+B,SAAShH,KAAK,GAC3C;oBAGF,MAAM2mC,SAAS3mC,MAAMU,QAAAA,CAASwC,KAAAA,CAAM,GAAG8F,QAAQ,GACzC49B,QAAQ5mC,MAAMU,QAAAA,CAASwC,KAAAA,CAAM8F,QAAQ;oBAC3ChJ,MAAMU,QAAAA,GAAWimC;oBAGjB,MAAMS,mBAAmB;wBACvB,GAAGlY,UAAAA;wBACHxuB,UAAUkmC;wBACV3mC,OAAO+G,QAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAG9BgG,OAAOvE,QAAAA,CAASuyB,MAAAA,CAAO2C,QAAQ,GAAG,GAAGwR,gBAAgB;oBAErD;gBACF;gBAEA,IAAI1B,gBAAgB1+B,SAAS/B,MAAM,GAAG;oBACpC,MAAMlC,OAAOijC,QAAQh/B,SAASqhB,MAAMplB,IAAI;oBAExC,IAAI,CAACF,QAAQ,CAAC6iC,WAAW5+B,SAASjE,IAAI,GACpC;oBAGF,MAAM4jC,SAAS5jC,KAAKhC,IAAAA,CAAKmC,KAAAA,CAAM,GAAG8F,QAAQ,GACpC49B,QAAQ7jC,KAAKhC,IAAAA,CAAKmC,KAAAA,CAAM8F,QAAQ;oBACtCjG,KAAKhC,IAAAA,GAAO4lC;oBAGZ,MAAMU,cAAc;wBAClB,GAAGnY,UAAAA;wBACHnuB,MAAM6lC;oBAAAA;oBAGR3hC,OAAOvE,QAAAA,CAASuyB,MAAAA,CAAO2C,QAAQ,GAAG,GAAGyR,WAAW;gBAClD;gBAEA;YACF;IAAA;IAGF,OAAOhf;AACT;AC7aO,SAASif,kBACdtgC,OAAAA,EACA1I,MAAAA,EACA;IACA,MAAM,EAACmd,OAAAA,MAAAA,EAAAA,GAASnd;IAEhBA,OAAAA,OAAOmd,KAAAA,GAASR,CAAAA,cAAc;QAC5B,IAAIA,UAAU9M,IAAAA,KAAS,iBAAiB;YACtCsN,OAAMR,SAAS;YACf;QACF;QAQA,IANA3c,OAAOkB,KAAAA,GAAQ4mC,6BACbp/B,SACA1I,OAAOkB,KAAAA,EACPyb,SACF,GAEIA,UAAU9M,IAAAA,KAAS,iBAAiB8M,UAAU9M,IAAAA,KAAS,eAAe;YAGxEsN,OAAMR,SAAS;YACf;QACF;QAEAyR,eACE;YACE9nB,QAAQoC,QAAQpC,MAAAA;YAChBpF,OAAOlB,OAAOkB,KAAAA;QAAAA,GAEhB;YACEuL,eAAezM,OAAOyM,aAAAA;YACtBoG,cAAc7S,OAAO6S,YAAAA;QAAAA,CAEzB,GAEAsK,OAAMR,SAAS;IACjB,GAEO3c;AACT;ACjBO,MAAMipC,cAAcA,CACzBjpC,QACAwkB,YAC4B;IAC5B,MAAM0jB,IAAIloC,QACJ,EAACiI,WAAAA,EAAayZ,UAAAA,EAAAA,GAAc8C,SAC5B0kB,iBAAiBxI,qBAAqBz4B,WAAW,GACjDkhC,kBAAkBvC,sBAAsB;QAC5C3+B;IAAAA,CACD,GACKmhC,cAAcxD,kBAAkB;QACpC39B;QACAyZ;QACA0S,eAAe5P,QAAQ4P,aAAAA;IAAAA,CACxB,GACKiV,gBAAgB7I,oBAAoBv4B,WAAW,GAC/CqhC,eAAetV,mBAAmB;QACtC/rB;QACAmsB,eAAe5P,QAAQ4P,aAAAA;IAAAA,CACxB,GACKmV,4BAA4BvZ,gCAAgC/nB,WAAW,GAEvEuhC,uBAAuBhD,2BAA2Bv+B,WAAW,GAE7DwhC,YAAY1C,gBAAgB;QAChC9+B;IAAAA,CACD;IAID,OAH2B43B,yBAAyB53B,WAAW,EAI7DkhC,gBACED,eACEK,0BACEC,qBACEC,UACEJ,cACEC,aACEF,YACEJ,kBACE/gC,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,EAC1Bs+B,sBAAsB;QACpB/+B;QACAjI,QAAQkoC;IAAAA,CACT,CACH,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF;AACF,GCpEMznC,UAAQC,cAAc,OAAO;AAa5B,SAASgpC,kBAAkB56B,MAAAA,EAAwC;IACxErO,QAAM,oCAAoC;IAE1C,MAAMuU,WAAWi0B,gBAAYU,qLAAAA,MAAUC,+JAAAA,CAAAA,CAAc,IAAG;QACtD3hC,aAAa6G,OAAO7G,WAAAA;QACpByZ,YAAY5S,OAAO4S,UAAAA;QACnB0S,eAAetlB,OAAOslB,aAAAA;IAAAA,CACvB;IAED7mB,qBAAqBghB,GAAAA,CAAIvZ,UAAU,CAAA,CAAE,GACrC1H,qBAAqBihB,GAAAA,CAAIvZ,UAAU,CAAA,CAAE,GAErCA,SAASkJ,eAAAA,GAAkB,CAAA,CAAA,EAC3BlJ,SAASG,cAAAA,GAAiB,CAAA;IAE1B,MAAM00B,mBAAmBjb,uBACvB9f,OAAO7G,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OACnC;IACAsM,SAAS9T,KAAAA,GAAQ;QAAC2oC,gBAAgB;KAAA,EAClC70B,SAASvI,aAAAA,GAAgB,aAAA,GAAA,IAAI0hB,IAAAA,GAC7BnZ,SAASnC,YAAAA,GAAe,aAAA,GAAA,IAAIsb,IAAAA,GAE5BC,eACE;QACE9nB,QAAQwI,OAAO7G,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;QACjDpF,OAAO8T,SAAS9T,KAAAA;IAAAA,GAElB;QACEuL,eAAeuI,SAASvI,aAAAA;QACxBoG,cAAcmC,SAASnC,YAAAA;IAAAA,CAE3B;IAEA,MAAMi3B,eAAezoC,aAAa2T,SAAS9T,KAAAA,EAAO;QAChDI,aAAawN,OAAO7G,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;IAAAA,CACvD;IAOD,OALiC;QAC/B0O;QACA80B;IAAAA;AAIJ;AC3CO,SAASC,gBACd9sB,QAAAA,EACA/U,WAAAA,EACW;IACX,OAAO;QACL8hC,eAAgB99B,CAAAA,WAAa89B,cAAc9hC,aAAagE,QAAQ;QAChE+9B,eAAgB/9B,CAAAA,WAAa+9B,cAAc/hC,aAAagE,QAAQ;QAChEg+B,cAAcA;gBAAC,EAAC/hC,KAAAA,EAAOgiC,KAAAA,EAAAA;mBAAWD,aAAa;gBAACjtB;gBAAU9U;gBAAOgiC;YAAAA,CAAM;;IAAA;AAE3E;AAEA,SAASH,cACP9hC,WAAAA,EACAgE,QAAAA,EACA;IACA,IAAI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,EACpB,OAAO,CAAA,CAAA;IAGT,MAAMgD,QAAQ4D,aAAac,QAAQ;IAEnC,IAAI,CAAC1E,OACH,OAAO,CAAA,CAAA;IAGT,IAAI;QASF,OARqBjG,MAAMyC,IAAAA,CACzBC,yJAAAA,CAAOC,KAAAA,CAAMgE,aAAa;YACxB/D,IAAIqD;YACJZ,MAAM;YACNxC,OAAQC,CAAAA,IAAM,CAACJ,yJAAAA,CAAOsC,QAAAA,CAASlC,CAAC;QAAA,CACjC,CACH,EAEoB5C,GAAAA,CAAI;gBAAC,CAACqhC,SAAS,CAAA;mBACjC55B,mKAAAA,CAAUM,SAAAA,CAAUtB,aAAa46B,SAAS,CAC5C;;IACF,EAAA,UAAQ;QACN,OAAO,CAAA,CAAA;IACT;AACF;AAEA,SAASmH,cACP/hC,WAAAA,EACAgE,QAAAA,EACA;IACA,IAAI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,EACpB,OAAO,CAAA,CAAA;IAGT,MAAMgD,QAAQ4D,aAAac,QAAQ;IAEnC,IAAI,CAAC1E,OACH,OAAO,CAAA,CAAA;IAGT,IAAI;QASF,OARqBjG,MAAMyC,IAAAA,CACzBC,yJAAAA,CAAOC,KAAAA,CAAMgE,aAAa;YACxB/D,IAAIqD;YACJZ,MAAM;YACNxC,OAAQC,CAAAA,IAAM,CAACJ,yJAAAA,CAAOsC,QAAAA,CAASlC,CAAC;QAAA,CACjC,CACH,EAEoB5C,GAAAA,CAAI;gBAAC,CAAC2oC,SAAS,CAAA;mBACjClhC,mKAAAA,CAAUM,SAAAA,CAAUtB,aAAakiC,SAAS,CAC5C;;IACF,EAAA,UAAQ;QACN,OAAO,CAAA,CAAA;IACT;AACF;AAEA,SAASF,kBAYT,EAAG;QAZmB,EACpBjtB,QAAAA,EACA9U,KAAAA,EACAgiC,KAAAA,EASF;IACEhiC,MAAMgb,WAAAA,CAAYC,YAAAA,CAAainB,YAAAA,CAAaF,MAAMzjC,OAAAA,EAASyjC,MAAMG,CAAAA,EAAGH,MAAMI,CAAC,GAE3EttB,SAAS;QACPpN,MAAM;QACNs6B,OAAOA,MAAMzjC,OAAAA;IAAAA,CACd;AACH;ACpHA,MAAM8jC,wCAAoCj7B,0LAAAA,EAAe;IACvDnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QACrB,IAAI,KAACqC,sOAAAA,EAA+BrC,QAAQ,GAC1C,OAAO,CAAA;QAGT,MAAMu+B,yBAAqBl8B,+OAAAA,EAAgCrC,QAAQ;QAEnE,OACE,CAACu+B,sBACD,KAACl8B,qOAAAA,EAA8B;YAE7B7F,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAWimC;YAAAA;QACb,CACD,IAEM,CAAA,IAGF;YAACA;QAAAA;IACV;IACA76B,SAAS;QACP;gBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAACsiC,kBAAAA,EAAAA;mBAAwB;gBACjCC,qLAAAA,EAAM;oBAAC76B,MAAM;oBAAU1L,IAAIsmC;gBAAAA,CAAmB;gBAC9CC,qLAAAA,EAAM;oBAAC76B,MAAM;oBAAkB4hB,YAAYtpB,MAAMspB,UAAAA;gBAAAA,CAAW,CAAC;aAC9D;;KAAA;AAEL,CAAC,GAMKkZ,oCAAgCp7B,0LAAAA,EAAe;IAAA,kCAAA;IAEnDnP,IAAI;IAAA,iDAAA;IAEJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;mBACjBoG,4OAAAA,EAA6BpG,MAAMspB,UAAAA,CAAW9wB,IAAAA,EAAM;YAACiG,MAAM;QAAA,CAAU,EACnEsF,QACF;;IAAA,0CAAA;IAEF0D,SAAS;QACP;gBAAC,EAACzH,KAAAA,EAAAA;mBAAW;oBACXuiC,iLAAAA,EAAM;oBAAC76B,MAAM;oBAAqB4hB,YAAYtpB,MAAMspB,UAAAA;gBAAAA,CAAW;oBAC/DiZ,iLAAAA,EAAMviC,KAAK,CAAC;aACb;;KAAA;AAEL,CAAC,GAEYyiC,0BAA0B;IACrCJ;IACAG,6BAA6B;CAAA,ECjDlBE,2BAA2B;IACtCC,WAAWC,yMAAAA,EAAuB;QAChCC,SAAS;YACP;gBACE57B,KAAK;gBACLmJ,KAAK,CAAA;gBACLU,MAAM,CAAA;gBACNR,MAAM,CAAA;gBACNC,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;IACDuyB,aAASF,qMAAAA,EAAuB;QAC9BC,SAAS;YACP;gBACE57B,KAAK;gBACLmJ,KAAK,CAAA;gBACLU,MAAM,CAAA;gBACNR,MAAM,CAAA;gBACNC,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;IACDG,WAAOkyB,qMAAAA,EAAuB;QAC5BC,SAAS;YACP;gBACE57B,KAAK;gBACLsJ,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;IACDwyB,eAAWH,qMAAAA,EAAuB;QAChCC,SAAS;YACP;gBACE57B,KAAK;gBACLsJ,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;IACDvC,YAAY;QACVg1B,QAAQC,mLAAAA;QACRC,IAAIC,qLAAAA;mBACJC,wLAAAA;cACAnwB,mLAAAA;IAAAA;IAEFoZ,SAAS;cACP+L,mLAAAA;QACAF,yLAAAA;IAAAA;IAEFmL,SAAKT,qMAAAA,EAAuB;QAC1BC,SAAS;YACP;gBACE57B,KAAK;gBACLmJ,KAAK,CAAA;gBACLU,MAAM,CAAA;gBACNR,MAAM,CAAA;gBACNC,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;IACD+yB,cAAUV,qMAAAA,EAAuB;QAC/BC,SAAS;YACP;gBACE57B,KAAK;gBACLmJ,KAAK,CAAA;gBACLU,MAAM,CAAA;gBACNR,MAAM,CAAA;gBACNC,OAAO,CAAA;YAAA,CACR;SAAA;IAAA,CAEJ;AACH,GC1EMgzB,mCAA+Bn8B,0LAAAA,EAAe;IAClDnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAW5B,IANI,CAJgB0iC,yBAAyBC,SAAAA,CAAUt7B,KAAAA,CACrDrH,MAAMgb,WACR,KAQI,KAFuB5U,sOAAAA,EAA+BrC,QAAQ,GAGhE,OAAO,CAAA;QAGT,MAAMy/B,uBAAmBp9B,6OAAAA,EAA8BrC,QAAQ,GACzD0/B,YAAYr9B,0OAAAA,EAAuBrC,QAAQ;QAEjD,OAAOy/B,oBAAoB,CAACC;IAC9B;IACAh8B,SAAS;QACP;gBAAC,EAAC1D,QAAAA,EAAAA;mBAAc;oBACdw+B,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNnO,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAEvC+jB,WAAW;gBAAA,CACZ,CAAC;aACH;;KAAA;AAEL,CAAC,GAEKmnB,iCAA6Bt8B,0LAAAA,EAAe;IAChDnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAS5B,IANI,CAFc0iC,yBAAyBI,OAAAA,CAAQz7B,KAAAA,CAAMrH,MAAMgb,WAAW,KAQtE,KAFuB5U,sOAAAA,EAA+BrC,QAAQ,GAGhE,OAAO,CAAA;QAGT,MAAMy/B,uBAAmBp9B,6OAAAA,EAA8BrC,QAAQ,GACzD80B,oBAAgBzyB,0OAAAA,EAA2BrC,QAAQ;QAEzD,OAAOy/B,oBAAoB,CAAC3K;IAC9B;IACApxB,SAAS;QACP;gBAAC,EAAC1D,QAAAA,EAAAA;mBAAc;oBACdw+B,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNnO,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAEvC+jB,WAAW;gBAAA,CACZ,CAAC;aACH;;KAAA;AAEL,CAAC,GAEKonB,0BAAsBv8B,0LAAAA,EAAe;IACzCnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QACrB,MAAMy/B,uBAAmBp9B,6OAAAA,EAA8BrC,QAAQ;QAG/D,OAF2BqC,0OAAAA,EAA+BrC,QAAQ,KAErCy/B,qBAAqBloC,KAAAA;IACpD;IACAmM,SAAS;QACP;gBAAC,EAAC1D,QAAAA,EAAAA;mBAAc;oBACdw+B,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNnO,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAEvC+jB,WAAW;gBAAA,CACZ,CAAC;aACH;;KAAA;AAEL,CAAC,GAEKqnB,qCAAiCx8B,0LAAAA,EAAe;IACpDnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAK5B,IAJI+D,SAASxD,OAAAA,CAAQiJ,QAAAA,IAKnBzF,SAASxD,OAAAA,CAAQlE,SAAAA,IACjB,KAAC+J,sOAAAA,EAA+BrC,QAAQ,GAExC,OAAO,CAAA;QAGT,MAAMy/B,uBAAmBp9B,6OAAAA,EAA8B;YACrD,GAAGrC,QAAAA;YACHxD,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW2D,MAAMuC,QAAAA,CAASlG,SAAAA;YAAAA;QAC5B,CACD,GACKw8B,oBAAgBzyB,0OAAAA,EAA2B;YAC/C,GAAGrC,QAAAA;YACHxD,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW2D,MAAMuC,QAAAA,CAASlG,SAAAA;YAAAA;QAC5B,CACD;QAED,OACE2D,MAAMuC,QAAAA,CAASnE,QAAAA,IACf4B,MAAMuC,QAAAA,CAAShJ,KAAAA,KAAU,WACzBiqC,oBACA,CAAC3K;IAEL;IACApxB,SAAS;QACP;gBAAC,EAAC1D,QAAAA,EAAU/D,KAAAA,EAAAA;mBAAW;oBACrBuiC,iLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAIgE,MAAMuC,QAAAA,CAASlG,SAAAA;gBAAAA,CACpB;oBACDkmC,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNnO,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAEvC+jB,WAAW;oBACXjC,QAAQ;gBAAA,CACT,CAAC;aACH;;KAAA;AAEL,CAAC,GAEKupB,qCAAiCz8B,0LAAAA,EAAe;IACpDnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAK5B,IAJI+D,SAASxD,OAAAA,CAAQiJ,QAAAA,IAKnBzF,SAASxD,OAAAA,CAAQlE,SAAAA,IACjB,KAAC+J,sOAAAA,EAA+BrC,QAAQ,GAExC,OAAO,CAAA;QAGT,MAAMy/B,uBAAmBp9B,6OAAAA,EAA8B;YACrD,GAAGrC,QAAAA;YACHxD,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW2D,MAAMuC,QAAAA,CAASlG,SAAAA;YAAAA;QAC5B,CACD,GACKonC,gBAAYr9B,sOAAAA,EAAuB;YACvC,GAAGrC,QAAAA;YACHxD,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW2D,MAAMuC,QAAAA,CAASlG,SAAAA;YAAAA;QAC5B,CACD;QAED,OACE2D,MAAMuC,QAAAA,CAASnE,QAAAA,IACf4B,MAAMuC,QAAAA,CAAShJ,KAAAA,KAAU,SACzBiqC,oBACA,CAACC;IAEL;IACAh8B,SAAS;QACP;gBAAC,EAAC1D,QAAAA,EAAU/D,KAAAA,EAAAA;mBAAW;gBACrBuiC,qLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAIgE,MAAMuC,QAAAA,CAASlG,SAAAA;gBAAAA,CACpB;oBACDkmC,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNnO,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;oBAAAA;oBAEvC+jB,WAAW;oBACXjC,QAAQ;gBAAA,CACT,CAAC;aACH;;KAAA;AAEL,CAAC,GAEKwpB,yCAAyC18B,8LAAAA,EAAe;IAC5DnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QACrB,MAAMggC,qBAAiB39B,mOAAAA,EAA4BrC,QAAQ,GACrDigC,yBAAqB59B,sOAAAA,EAA+BrC,QAAQ,GAC5D80B,oBAAgBzyB,0OAAAA,EAA2BrC,QAAQ;QAEzD,OAAI,CAACggC,kBAAkB,CAACC,sBAAsB,CAACnL,gBACtC,CAAA,QAIPhD,+NAAAA,EAAiB9xB,SAASxD,OAAAA,EAASwjC,eAAeznC,IAAI,KACtD,KAACM,2KAAAA,EAAYmH,SAASxD,OAAAA,EAASs4B,cAAcv8B,IAAI,IAE1C;YAACynC;YAAgBlL;QAAAA,IAGnB,CAAA;IACT;IACApxB,SAAS;QACP,CAACmQ;gBAAG,EAACmsB,cAAAA,EAAgBlL,aAAAA,EAAAA;mBAAmB;oBACtC0J,iLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAI+nC,eAAevnC,IAAAA;gBAAAA,CACpB;oBACD+lC,iLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAI;wBACFuD,QAAQ;4BAAC/C,MAAMq8B,cAAcr8B,IAAAA;4BAAMiD,QAAQ;wBAAA;wBAC3ClD,OAAO;4BAACC,MAAMq8B,cAAcr8B,IAAAA;4BAAMiD,QAAQ;wBAAA;oBAAC;gBAC7C,CACD,CAAC;aACH;;KAAA;AAEL,CAAC,GAEKwkC,8CAA0C78B,0LAAAA,EAAe;IAC7DnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QACrB,MAAMggC,qBAAiB39B,mOAAAA,EAA4BrC,QAAQ,GACrDigC,yBAAqB59B,sOAAAA,EAA+BrC,QAAQ,GAC5D0/B,gBAAYr9B,sOAAAA,EAAuBrC,QAAQ;QAEjD,OAAI,CAACggC,kBAAkB,CAACC,sBAAsB,CAACP,YACtC,CAAA,QAIP5N,+NAAAA,EAAiB9xB,SAASxD,OAAAA,EAASwjC,eAAeznC,IAAI,KACtD,KAACM,2KAAAA,EAAYmH,SAASxD,OAAAA,EAASkjC,UAAUnnC,IAAI,IAEtC;YAACynC;YAAgBN;QAAAA,IAGnB,CAAA;IACT;IACAh8B,SAAS;QACP,CAACmQ;gBAAG,EAACmsB,cAAAA,EAAgBN,SAAAA,EAAAA;mBAAe;gBAClClB,qLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAI+nC,eAAevnC,IAAAA;gBAAAA,CACpB;oBACD+lC,iLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAI;wBACFuD,QAAQ;4BAAC/C,MAAMinC,UAAUjnC,IAAAA;4BAAMiD,QAAQ;wBAAA;wBACvClD,OAAO;4BAACC,MAAMinC,UAAUjnC,IAAAA;4BAAMiD,QAAQ;wBAAA;oBAAC;gBACzC,CACD,CAAC;aACH;;KAAA;AAEL,CAAC,GAEYykC,2BAA2B;IACtCX;IACAG;IACAC;IACAC;IACAC;IACAC;IACAG;AACF,GC1RaE,yBAAyB;IACpCC,oBAAgBh9B,0LAAAA,EAAe;QAC7BnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;mBACjB0iC,yBAAyB10B,UAAAA,CAAWg1B,MAAAA,CAAO37B,KAAAA,CAAMrH,MAAMgb,WAAW,KAClEjX,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAAWtP,IAAAA,CAChCuQ,CAAAA,YAAcA,UAAUzW,IAAAA,KAAS,QACpC;;QACFiP,SAAS;YAAC,IAAM;wBAAC86B,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAoBuH,WAAW;oBAAA,CAAS,CAAC;iBAAC;SAAA;IAAA,CACzE;IACDo1B,gBAAYj9B,0LAAAA,EAAe;QACzBnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;mBACjB0iC,yBAAyB10B,UAAAA,CAAWk1B,EAAAA,CAAG77B,KAAAA,CAAMrH,MAAMgb,WAAW,KAC9DjX,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAAWtP,IAAAA,CAChCuQ,CAAAA,YAAcA,UAAUzW,IAAAA,KAAS,IACpC;;QACFiP,SAAS;YAAC,IAAM;wBAAC86B,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAoBuH,WAAW;oBAAA,CAAK,CAAC;iBAAC;SAAA;IAAA,CACrE;IACDq1B,uBAAmBl9B,0LAAAA,EAAe;QAChCnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;mBACjB0iC,yBAAyB10B,UAAAA,CAAWo1B,SAAAA,CAAU/7B,KAAAA,CAAMrH,MAAMgb,WAAW,KACrEjX,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAAWtP,IAAAA,CAChCuQ,CAAAA,YAAcA,UAAUzW,IAAAA,KAAS,WACpC;;QACFiP,SAAS;YACP,IAAM;wBAAC86B,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAoBuH,WAAW;oBAAA,CAAY,CAAC;iBAAC;SAAA;IAAA,CAEpE;IACDs1B,kBAAcn9B,0LAAAA,EAAe;QAC3BnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;mBACjB0iC,yBAAyB10B,UAAAA,CAAWiF,IAAAA,CAAK5L,KAAAA,CAAMrH,MAAMgb,WAAW,KAChEjX,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAAWtP,IAAAA,CAChCuQ,CAAAA,YAAcA,UAAUzW,IAAAA,KAAS,MACpC;;QACFiP,SAAS;YAAC,IAAM;wBAAC86B,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAoBuH,WAAW;oBAAA,CAAO,CAAC;iBAAC;SAAA;IAAA,CACvE;AACH;AC3CO,SAASu1B,sBAAsBzoC,KAAAA,EAA6B;QAO/C2oC;IANlB,IAAI3oC,MAAMR,MAAAA,KAAW,GACnB,OAAO,IAAIkpC,QAAQ,GAAG,GAAG,GAAG,CAAC;IAG/B,MAAMC,WAAW3oC,MAAMmS,MAAAA,CAAQ5R,CAAAA,OAASA,gBAAgB7B,OAAO,GAEzDkqC,qCAAqB3oC,EAAAA,CAAG,CAAC,+DAAGsF,qBAAAA,CAAAA;IAElC,IAAI,CAACqjC,WACH,OAAO,IAAIF,QAAQ,GAAG,GAAG,GAAG,CAAC;IAG/B,IAAIr1B,OAAOu1B,UAAUv1B,IAAAA,EACjB5N,MAAMmjC,UAAUnjC,GAAAA,EAChB6N,QAAQs1B,UAAUt1B,KAAAA,EAClB1N,SAASgjC,UAAUhjC,MAAAA;IAEvB,IAAA,IAASijC,IAAI,GAAGA,IAAIF,SAASnpC,MAAAA,EAAQqpC,IAAK;QACxC,MAAMrQ,OAAOmQ,QAAAA,CAASE,CAAC,CAAA,CAAEtjC,qBAAAA,CAAAA;QACzB8N,OAAOtN,KAAKkD,GAAAA,CAAIoK,MAAMmlB,KAAKnlB,IAAI,GAC/B5N,MAAMM,KAAKkD,GAAAA,CAAIxD,KAAK+yB,KAAK/yB,GAAG,GAC5B6N,QAAQvN,KAAK+iC,GAAAA,CAAIx1B,OAAOklB,KAAKllB,KAAK,GAClC1N,SAASG,KAAK+iC,GAAAA,CAAIljC,QAAQ4yB,KAAK5yB,MAAM;IACvC;IAEA,OAAO,IAAI8iC,QAAQr1B,MAAM5N,KAAK6N,QAAQD,MAAMzN,SAASH,GAAG;AAC1D;ACrBO,MAAMsjC,mBAAmB;IAAA;;;;;GAAA,OAO9B19B,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAUghC,GAAAA,EAAK/kC,KAAAA,EAAAA,KAAW;YACjC,MAAMmG,gBAAgBD,iBAAiB;gBACrCnC;gBACArD,gBAAgBV,MAAMuC,QAAAA,CAASlG,SAAAA;YAAAA,CAChC,GACK2oC,4BAAwB5+B,iPAAAA,EAAkC;gBAC9D,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW8J;gBAAAA;YACb,CACD,GACK8+B,kBAAkB;gBACtBC,YAAYH,IAAIlD,aAAAA,CAAc;oBAC5B,GAAG99B,QAAAA;oBACHxD,SAAS;wBACP,GAAGwD,SAASxD,OAAAA;wBACZlE,WAAW8J;oBAAAA;gBACb,CACD;gBACDg/B,YAAYJ,IAAIjD,aAAAA,CAAc;oBAC5B,GAAG/9B,QAAAA;oBACHxD,SAAS;wBACP,GAAGwD,SAASxD,OAAAA;wBACZlE,WAAW8J;oBAAAA;gBACb,CACD;YAAA;YAGH,OAAO;gBACLA;gBACA8+B;gBACAD;YAAAA;QAEJ;QACAv9B,SAAS;YACP;oBACE,EAACs9B,GAAAA,EAAK/kC,KAAAA,EAAAA,UACN,EAACmG,aAAAA,EAAe8+B,eAAAA,EAAiBD,qBAAAA,EAAAA,KAC9B;gBACH,MAAMI,YAAY/iC,SAASgjC,aAAAA,CAAc,KAAK;gBAE9C,IAAIL,uBAAuB;oBAEzB,MAAMM,mBAAmBL,gBAAgBC,UAAAA,CAAW5rC,GAAAA,CAAKgD,CAAAA,OACvDA,KAAKipC,SAAAA,CAAU,CAAA,CAAI,CACrB;oBAEA,KAAA,MAAWhsC,SAAS+rC,iBACd/rC,iBAAiBisC,eAAAA,CACnBjsC,MAAMM,KAAAA,CAAM0I,QAAAA,GAAW,UAAA,GAEzB6iC,UAAUK,WAAAA,CAAYlsC,KAAK;oBAI7B,MAAMmsC,cAAcN,UAAUO,aAAAA,CAC5B,8BACF;oBAaA,IAZID,eACFN,UAAUQ,eAAAA,CAAgBF,WAAW,GAIvCN,UAAUS,YAAAA,CAAa,gBAAgB,EAAE,GAEzCT,UAAUvrC,KAAAA,CAAM0I,QAAAA,GAAW,YAC3B6iC,UAAUvrC,KAAAA,CAAMuV,IAAAA,GAAO,YACvBg2B,UAAUvrC,KAAAA,CAAMisC,SAAAA,GAAY,cAC5BzjC,SAAS0jC,IAAAA,CAAKN,WAAAA,CAAYL,SAAS,GAE/BM,aAAa;wBACf,MAAMM,kBAAkBN,YAAYpkC,qBAAAA,CAAAA,GAC9B6gC,IAAIniC,MAAMgb,WAAAA,CAAYxY,OAAAA,GAAUwjC,gBAAgB52B,IAAAA,EAChDgzB,IAAIpiC,MAAMgb,WAAAA,CAAYvY,OAAAA,GAAUujC,gBAAgBxkC,GAAAA;wBACtD4jC,OAAAA,UAAUvrC,KAAAA,CAAM8L,KAAAA,GAAQ,GAAwB,OAArBqgC,gBAAgBrgC,KAAK,EAAA,OAChDy/B,UAAUvrC,KAAAA,CAAMgI,MAAAA,GAAS,GAAyB,OAAtBmkC,gBAAgBnkC,MAAM,EAAA,OAE3C;4BACL0gC,qLAAAA,EAAM;gCACJ76B,MAAM;gCACN1L,IAAImK;4BAAAA,CACL;gCACDwB,kLAAAA,EAAO,MAAM;gCACXo9B,IAAIhD,YAAAA,CAAa;oCACf/hC;oCACAgiC,OAAO;wCACLzjC,SAAS6mC;wCACTjD;wCACAC;oCAAAA;gCACF,CACD;4BACH,CAAC;gCACDt6B,mLAAAA,EAAQ9H,KAAK,CAAC;yBAAA;oBAElB,OAAO;wBACL,MAAMimC,gBAAgBzB,sBACpBS,gBAAgBC,UAClB,GACM/C,IAAIniC,MAAMgb,WAAAA,CAAYxY,OAAAA,GAAUyjC,cAAc72B,IAAAA,EAC9CgzB,IAAIpiC,MAAMgb,WAAAA,CAAYvY,OAAAA,GAAUwjC,cAAczkC,GAAAA;wBACpD4jC,OAAAA,UAAUvrC,KAAAA,CAAM8L,KAAAA,GAAQ,GAAsB,OAAnBsgC,cAActgC,KAAK,EAAA,OAC9Cy/B,UAAUvrC,KAAAA,CAAMgI,MAAAA,GAAS,GAAuB,OAApBokC,cAAcpkC,MAAM,EAAA,OAEzC;gCACL0gC,iLAAAA,EAAM;gCACJ76B,MAAM;gCACN1L,IAAImK;4BAAAA,CACL;4BACDwB,sLAAAA,EAAO,MAAM;gCACXo9B,IAAIhD,YAAAA,CAAa;oCACf/hC;oCACAgiC,OAAO;wCAACzjC,SAAS6mC;wCAAWjD;wCAAGC;oCAAAA;gCAAC,CACjC;4BACH,CAAC;gCACDt6B,mLAAAA,EAAQ9H,KAAK,CAAC;yBAAA;oBAElB;gBACF,OAAO;oBACL,MAAMkmC,mBAAmBjB,gBAAgBE,UAAAA,CAAW7rC,GAAAA,CAAKgD,CAAAA,OACvDA,KAAKipC,SAAAA,CAAU,CAAA,CAAI,CACrB;oBAEA,KAAA,MAAWrrC,SAASgsC,iBAClBd,UAAUK,WAAAA,CAAYvrC,KAAK;oBAG7BkrC,UAAUvrC,KAAAA,CAAM0I,QAAAA,GAAW,YAC3B6iC,UAAUvrC,KAAAA,CAAMuV,IAAAA,GAAO,YACvBg2B,UAAUvrC,KAAAA,CAAMisC,SAAAA,GAAY,cAC5BzjC,SAAS0jC,IAAAA,CAAKN,WAAAA,CAAYL,SAAS;oBAEnC,MAAMe,kBAAkB3B,sBACtBS,gBAAgBE,UAClB,GACMhD,IAAIniC,MAAMgb,WAAAA,CAAYxY,OAAAA,GAAU2jC,gBAAgB/2B,IAAAA,EAChDgzB,IAAIpiC,MAAMgb,WAAAA,CAAYvY,OAAAA,GAAU0jC,gBAAgB3kC,GAAAA;oBACtD4jC,OAAAA,UAAUvrC,KAAAA,CAAM8L,KAAAA,GAAQ,GAAwB,OAArBwgC,gBAAgBxgC,KAAK,EAAA,OAChDy/B,UAAUvrC,KAAAA,CAAMgI,MAAAA,GAAS,GAAyB,OAAtBskC,gBAAgBtkC,MAAM,EAAA,OAE3C;4BACL0gC,iLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAImK;wBAAAA,CACL;4BACDwB,kLAAAA,EAAO,MAAM;4BACXo9B,IAAIhD,YAAAA,CAAa;gCACf/hC;gCACAgiC,OAAO;oCAACzjC,SAAS6mC;oCAAWjD;oCAAGC;gCAAAA;4BAAC,CACjC;wBACH,CAAC;4BACDt6B,mLAAAA,EAAQ9H,KAAK,CAAC;qBAAA;gBAElB;YACF,CAAC;SAAA;IAAA,CAEJ;IAAA;;;GAAA,GAMDoH,8LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAMuH,aAAavH,MAAMuH,UAAAA;YAWzB,OAV+BA,iBAC3BnB,gPAAAA,EAAiCpG,MAAMuC,QAAAA,CAASlG,SAAS,EAAE;gBACzD,GAAG0H,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAWkL,WAAWlL,SAAAA;gBAAAA;YACxB,CACD,IACD,CAAA;QAGN;QACAoL,SAAS,CAAA,CAAA;IAAA,CACV;IAAA;;;GAAA,OAMDL,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAMuH,aAAavH,MAAMuH,UAAAA,EACnB6+B,eAAepmC,MAAMuC,QAAAA,CAASlG,SAAAA;YAUpC,OAT6BkL,iBACzBnB,gPAAAA,EAAiCggC,YAAY,EAAE;gBAC7C,GAAGriC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAWkL,WAAWlL,SAAAA;gBAAAA;YACxB,CACD,IACD,CAAA;QAEN;QACAoL,SAAS,CAAA,CAAA;IAAA,CACV;IAAA;;;GAAA,OAKDL,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACrH,KAAAA,EAAAA;mBAAWA,MAAMuH,UAAAA,KAAejM,KAAAA;;QACzCmM,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNsT,aAAahb;oBAAAA,CACd,CAAC;iBACH;;SAAA;IAAA,CAEJ;IAAA;;GAAA,OAIDoH,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIgE,MAAMuC,QAAAA,CAASlG,SAAAA;oBAAAA,CACpB;wBACDkmC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNsT,aAAahb;oBAAAA,CACd,CAAC;iBACH;;SAAA;IAAA,CAEJ;IAAA;;;GAAA,OAMDoH,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,IACEA,MAAMgb,WAAAA,CAAYtT,IAAAA,KAAS,eAC3B1H,MAAMgb,WAAAA,CAAYzT,UAAAA,KAAejM,KAAAA,GAEjC,OAAO,CAAA;YAGT,MAAMiM,aAAavH,MAAMgb,WAAAA,CAAYzT,UAAAA,EAC/BpB,gBAAgBD,iBAAiB;gBACrCxF,gBAAgB6G,WAAWlL,SAAAA;gBAC3B0H;YAAAA,CACD,GACKqiC,eAAepmC,MAAMgb,WAAAA,CAAYzY,QAAAA,CAASlG,SAAAA,EAC1CgqC,uBAAuB9+B,iBACzBnB,gPAAAA,EAAiCggC,YAAY,EAAE;gBAC7C,GAAGriC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW8J;gBAAAA;YACb,CACD,IACD,CAAA,GAEEmgC,2BAAuBlgC,iPAAAA,EAAkC;gBAC7D,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW8J;gBAAAA;YACb,CACD,GAEKogC,gBAAgBngC,+OAAAA,EAA4B;gBAChD,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW8J;gBAAAA;YACb,CACD;YAED,OAAKkgC,uBAUE,CAAA,IATE;gBACLD;gBACAE;gBACAC;gBACAh/B;gBACAyT,aAAahb,MAAMgb,WAAAA;YAAAA;QAKzB;QACAvT,SAAS;YACP;oBACE,EAACzH,KAAAA,EAAAA,UACD,EACEsmC,oBAAAA,EACAC,aAAAA,EACAh/B,UAAAA,EACA6+B,YAAAA,EACAprB,WAAAA,EAAAA;uBAEC;wBACHunB,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIoqC;oBAAAA,CACL,GACD;uBAAIE,uBACAC,cAAcjtC,GAAAA,CAAKC,CAAAA,YACjBgpC,iLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAIzC,MAAMiD,IAAAA;wBAAAA,CACX,CACH,IACA;4BACE+lC,iLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAIuL,WAAWlL,SAAAA;wBAAAA,CAChB,CAAC;qBAAA;wBAERkmC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNyU,QAAQnc,MAAMkkB,IAAAA;wBACd3H,WAAW+pB,uBACPtrB,YAAYzY,QAAAA,CAAShJ,KAAAA,KAAU,UAC7B,WACAyhB,YAAYzY,QAAAA,CAAShJ,KAAAA,KAAU,QAC7B,UACA,SACJ;oBAAA,CACL,CAAC;iBACH;;SAAA;IAAA,CAEJ;CAAC,EC3VEitC,kCAA8Bp/B,0LAAAA,EAAe;IACjDnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QACrB,MAAMggC,qBAAiB39B,mOAAAA,EAA4BrC,QAAQ,GACrDigC,yBAAqB59B,sOAAAA,EAA+BrC,QAAQ;QAElE,IAAI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,IAAa,CAAC0nC,kBAAkB,CAACC,oBACrD,OAAO,CAAA;QAGT,MAAMyC,kBACJrgC,+OAAAA,EAA4B29B,cAAc,EAAEhgC,QAAQ,GAEhD2iC,gBAAgB3C,eAAeznC,IAAAA,CAAKyC,QAAAA,EACpC4nC,aAAa5C,eAAeznC,IAAAA,CAAK4O,KAAAA;QAEvC,OAAIu7B,kBACK;YAACC;YAAeC;QAAAA,IAGlB,CAAA;IACT;IACAl/B,SAAS;QACP;gBAAC,EAAC1D,QAAAA,EAAAA,UAAW,EAAC2iC,aAAAA,EAAeC,UAAAA,EAAAA;gBAehB5iC;mBAfgC;oBAC3Cw+B,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNnO,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;wBACrCyB,UAAU;4BACR;gCACET,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO6Q,IAAAA,CAAKxW,IAAAA;gCACpC8B,MAAM;gCACNC,OAAO,CAAA,CAAA;4BAAA,CACR;yBAAA;wBAEHR,UAAU,CAAA,CAAA;wBACVgF,UAAU2nC;wBACVx7B,OAAOy7B;wBACP9sC,KAAAA,+CAAgB0G,OAAAA,CAAQpC,MAAAA,CAAOxD,MAAAA,CAAO,CAAC,CAAA,sGAAGnC,IAAAA;oBAAAA;oBAE5C+jB,WAAW;gBAAA,CACZ,CAAC;aACH;;KAAA;AAEL,CAAC,GAEKqqB,oCAAgCx/B,0LAAAA,EAAe;IACnDnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;;QACrB,MAAMggC,qBAAiB39B,mOAAAA,EAA4BrC,QAAQ,GACrDigC,yBAAqB59B,sOAAAA,EAA+BrC,QAAQ;QAElE,IAAI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,IAAa,CAAC0nC,kBAAkB,CAACC,oBACrD,OAAO,CAAA;YAYPnb;QATF,MAAMA,gBAAYziB,8NAAAA,EAAuBrC,QAAQ,GAE3C8iC,kBAAkBhe,yFAAWvsB,IAAAA,CAAK/B,KAAAA,gFAAO2T,MAAAA,CAC5CC,CAAAA;;wEACU5N,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAAWtP,IAAAA,CAChCuQ,CAAAA,YAAcA,UAAUzW,IAAAA,KAAS2V,IACpC,qEAFApK,2CAEK,CAAA,CACT;YACM+iC,6IACOxqC,IAAAA,CAAK/B,KAAAA,kFAAO2T,MAAAA,CACpBC,CAAAA,OACC,CAACpK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAAWtP,IAAAA,CACjCuQ,CAAAA,YAAcA,UAAUzW,IAAAA,KAAS2V,IACpC,CACJ,wFAAK,CAAA,CAAA,EACDu4B,gBAAgB3C,eAAeznC,IAAAA,CAAKyC,QAAAA,EACpC4nC,aAAa5C,eAAeznC,IAAAA,CAAK4O,KAAAA;QAKvC,WAFE9E,6OAAAA,EAA8B29B,cAAc,EAAEhgC,QAAQ,IAG/C;YAAC+iC;YAAkBD;YAAiBH;YAAeC;QAAAA,IAGrD,CAAA;IACT;IACAl/B,SAAS;QACP;gBACE,EAAC1D,QAAAA,EAAAA,UACD,EAAC+iC,gBAAAA,EAAkBD,eAAAA,EAAiBH,aAAAA,EAAeC,UAAAA,EAAAA;gBAexC5iC;mBAdR;oBACHw+B,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNnO,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;wBACrCyB,UAAU;4BACR;gCACET,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO6Q,IAAAA,CAAKxW,IAAAA;gCACpC+B,OAAOusC,iBAAiBvrC,MAAAA,KAAW,IAAIsrC,kBAAkB,CAAA,CAAA;gCACzDvsC,MAAM;4BAAA,CACP;yBAAA;wBAEHyE,UAAU2nC;wBACVx7B,OAAOy7B;wBACP9sC,KAAAA,+CAAgB0G,OAAAA,CAAQpC,MAAAA,CAAOxD,MAAAA,CAAO,CAAC,CAAA,sGAAGnC,IAAAA;oBAAAA;oBAE5C+jB,WAAW;oBACXjC,QAAQ;gBAAA,CACT,CAAC;aACH;;KAAA;AAEL,CAAC,GAEKysB,6BAAyB3/B,0LAAAA,EAAe;IAC5CnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QAKrB,IAJI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,IAIlB,KAAC+J,qOAAAA,EAA8BrC,QAAQ,GACzC,OAAO,CAAA;QAGT,MAAM5C,iBAAaiF,uOAAAA,EAAwBrC,QAAQ,GAC7CtC,gBAAY2E,sOAAAA,EAAuBrC,QAAQ;QAEjD,IAAI,CAAC5C,cAAc,CAACM,WAClB,OAAO,CAAA;QAGT,MAAMulC,2BAAuBpmC,oNAAAA,EAAyB;YACpDL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAO4H;QAAAA,CACR,GACKpE,0BAAsB6D,wNAAAA,EAC1BmD,SAASxD,OAAAA,CAAQlE,SACnB,GACM4qC,wBAAoBrmC,+NAAAA,EAAuB;YAC/CL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOkI;QAAAA,CACR,GACKpE,wBAAoBuD,sNAAAA,EACxBmD,SAASxD,OAAAA,CAAQlE,SACnB;QAEA,WACEuE,qOAAAA,EAA6BomC,sBAAsBjqC,mBAAmB,SACtE6D,qOAAAA,EAA6BqmC,mBAAmB5pC,iBAAiB,IAE1D;YAAChB,WAAW0H,SAASxD,OAAAA,CAAQlE,SAAAA;QAAAA,IAG/B,CAAA;IACT;IACAoL,SAAS;QACP,CAACmQ;gBAAG,EAACvb,SAAAA,EAAAA;mBAAe;oBAClBkmC,iLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAIK;gBAAAA,CACL,CAAC;aACH;;KAAA;AAEL,CAAC,GAEK6qC,2BAAuB9/B,0LAAAA,EAAe;IAC1CnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QAKrB,IAJI,CAACA,SAASxD,OAAAA,CAAQlE,SAAAA,IAIlB,KAAC+J,qOAAAA,EAA8BrC,QAAQ,GACzC,OAAO,CAAA;QAGT,MAAM/E,qBAAiBoH,2OAAAA,EAA4BrC,QAAQ,GACrDyC,0BAAsBJ,gPAAAA,EAAiCrC,QAAQ,GAC/D0C,oBAAoBL,kPAAAA,EAA+BrC,QAAQ;QAEjE,IAAI,CAACyC,uBAAuB,CAACC,mBAC3B,OAAO,CAAA;QAGT,MAAM0gC,2BAAuBvmC,oNAAAA,EAAyB;YACpDL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOiN;QAAAA,CACR,GACKzJ,0BAAsB6D,wNAAAA,EAC1BmD,SAASxD,OAAAA,CAAQlE,SACnB,GACM64B,uBAAmBt0B,+NAAAA,EAAuB;YAC9CL,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOkN;QAAAA,CACR,GACKpJ,oBAAoBuD,0NAAAA,EACxBmD,SAASxD,OAAAA,CAAQlE,SACnB;QAEA,WACEuE,qOAAAA,EAA6B7D,qBAAqBoqC,oBAAoB,SACtEvmC,qOAAAA,EAA6BvD,mBAAmB63B,gBAAgB,IAEzD;YAACl2B;QAAAA,IAGH,CAAA;IACT;IACAyI,SAAS;QACP;gBAAC,EAAC1D,QAAAA,EAAAA,UAAW,EAAC/E,cAAAA,EAAAA;mBAAoB;oBAChCujC,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNnO,OAAO;wBACLC,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;wBACrCyB,UAAU;4BACR;gCACET,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO6Q,IAAAA,CAAKxW,IAAAA;gCACpC8B,MAAM;gCACNC,OAAO,CAAA,CAAA;4BAAA,CACR;yBAAA;oBAAA;oBAGLgiB,WAAW;oBACXjC,QAAQ;gBAAA,CACT,GACD;mBAAGtb,eAAe1F,GAAAA,CAAKC,CAAAA,YACrBgpC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIzC,MAAMiD,IAAAA;oBAAAA,CACX,CACH,CAAC;aACF;;KAAA;AAEL,CAAC,GAEK4qC,2BAAuBhgC,0LAAAA,EAAe;IAC1CnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QACrB,MAAMigC,yBAAqB59B,sOAAAA,EAA+BrC,QAAQ,GAC5DsjC,wBAAoBjhC,8OAAAA,EAA+BrC,QAAQ;QAEjE,OAAOigC,sBAAsBqD;IAC/B;IACA5/B,SAAS;QACP,IAAM;oBAAC86B,iLAAAA,EAAM;oBAAC76B,MAAM;oBAAgB8uB,UAAU;gBAAA,CAAE;oBAAG+L,iLAAAA,EAAM;oBAAC76B,MAAM;gBAAA,CAAQ,CAAC;aAAC;KAAA;AAE9E,CAAC,GAEY4/B,2BAA2B;IACtCd;IACAI;IACAG;IACAG;IACAE;AACF;AC1PO,SAASG,wBAAwB,KAMxC,EAAG;UALDhnC,OAAAA,EACAhH,KAAAA,EAIF;IASE,OARI,KAACqD,2KAAAA,EAAY2D,SAAShH,KAAK,KAI3B,CAACgH,QAAQlE,SAAAA,IAIT,KAAC+Q,mOAAAA,EAAqB7M,QAAQlE,SAAS,IAClC,CAAA,QAGYmI,+NAAAA,EAA8BjE,QAAQlE,SAAAA,CAAUE,KAAK,MAGvDhD,MAAMU,QAAAA,CAAS,CAAC,CAAA,CAAEjB,IAAAA,IACnCuH,QAAQlE,SAAAA,CAAUE,KAAAA,CAAMkD,MAAAA,KAAW;AAEvC;AChBA,MAAM+nC,iBAAiB,IAEjBC,2BAAuBrgC,0LAAAA,EAAe;IAC1CnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QACrB,MAAMggC,qBAAiB39B,mOAAAA,EAA4BrC,QAAQ;QAU3D,OARI,CAACggC,kBAIDA,eAAeznC,IAAAA,CAAK4O,KAAAA,KAAU,KAKhC,CAACq8B,wBAAwB;YACvBhnC,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOwqC,eAAeznC,IAAAA;QAAAA,CACvB,IAEM,CAAA,IAGF;YAACynC;QAAAA;IACV;IACAt8B,SAAS;QACP,CAACmQ;gBAAG,EAACmsB,cAAAA,EAAAA;mBAAoB;oBACvBxB,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNhQ,OAAO;wBAAC;wBAAY,OAAO;qBAAA;oBAC3BsE,IAAI+nC,eAAevnC,IAAAA;gBAAAA,CACpB,CAAC;aACH;;KAAA;AAEL,CAAC,GAEKkrC,8BAA0BtgC,0LAAAA,EAAe;IAC7CnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;YAWnBA;QAVF,MAAMigC,yBAAqB59B,sOAAAA,EAA+BrC,QAAQ,GAC5DggC,qBAAiB39B,mOAAAA,EAA4BrC,QAAQ,GACrD8kB,gBAAYziB,8NAAAA,EAAuBrC,QAAQ;QAEjD,OAAI,CAACigC,sBAAsB,CAACD,kBAAkB,CAAClb,YACtC,CAAA,IAIPkb,eAAeznC,IAAAA,CAAKrC,QAAAA,CAAS,CAAC,CAAA,CAAEjB,IAAAA,KAAS6vB,UAAUvsB,IAAAA,CAAKtD,IAAAA,6CAC/CuH,OAAAA,CAAQlE,SAAAA,4FAAWE,KAAAA,CAAMkD,MAAAA,MAAW,KAI7CskC,eAAeznC,IAAAA,CAAK4O,KAAAA,KAAU5P,KAAAA,KAC9ByoC,eAAeznC,IAAAA,CAAK4O,KAAAA,GAAQ,IAErB;YAAC64B;YAAgB74B,OAAO64B,eAAeznC,IAAAA,CAAK4O,KAAAA,GAAQ;QAAA,IAGtD,CAAA;IACT;IACAzD,SAAS;QACP,CAACmQ;gBAAG,EAACmsB,cAAAA,EAAgB74B,KAAAA,EAAAA;mBAAW;oBAC9Bq3B,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNhQ,OAAO;wBAACwT;oBAAAA;oBACRlP,IAAI+nC,eAAevnC,IAAAA;gBAAAA,CACpB,CAAC;aACH;;KAAA;AAEL,CAAC,GAOKmrC,gCAA4BvgC,0LAAAA,EAAe;IAC/CnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QACrB,MAAM6jC,qBAAiBxhC,2OAAAA,EAA4BrC,QAAQ,GACrD0/B,gBAAYr9B,sOAAAA,EAAuBrC,QAAQ;QAUjD,OARI,CAAC6jC,kBAAkB,CAACnE,aAIpB,KAAC7mC,2KAAAA,EAAYmH,SAASxD,OAAAA,EAASkjC,UAAUnnC,IAAI,KAI7C,KAACu5B,+NAAAA,EAAiB9xB,SAASxD,OAAAA,EAASqnC,eAAetrC,IAAI,IAClD,CAAA,IAGF;YAACsrC;YAAgBnE;QAAAA;IAC1B;IACAh8B,SAAS;QACP,CAACmQ;gBAAG,EAAC6rB,SAAAA,EAAAA;mBAAe;gBAClBlB,qLAAAA,EAAM;oBACJ76B,MAAM;oBACNnO,OAAOkqC,UAAUnnC,IAAAA;oBACjBigB,WAAW;oBACXjC,QAAQ;gBAAA,CACT;oBACDioB,iLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAIynC,UAAUjnC,IAAAA;gBAAAA,CACf,CAAC;aACH;;KAAA;AAEL,CAAC,GAOKqrC,mCAA+BzgC,0LAAAA,EAAe;IAClDnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QACrB,MAAMggC,qBAAiB39B,mOAAAA,EAA4BrC,QAAQ,GACrD80B,oBAAgBzyB,0OAAAA,EAA2BrC,QAAQ;QAmBzD,IAjBI,CAACggC,kBAAkB,CAAClL,iBAKtB,CAAC0O,wBAAwB;YACvBhnC,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOwqC,eAAeznC,IAAAA;QAAAA,CACvB,KAKC,KAAC4C,6MAAAA,EAAY6E,SAASxD,OAAAA,EAASs4B,cAAcv8B,IAAI,KAIjD,KAACu5B,+NAAAA,EAAiB9xB,SAASxD,OAAAA,EAASs4B,cAAcv8B,IAAI,GACxD,OAAO,CAAA;QAGT,MAAMwrC,4BAAwBC,+NAAAA,EAAiB;YAC7CxnC,SAASwD,SAASxD,OAAAA;YAClBhH,OAAOs/B;QAAAA,CACR;QAED,OAAO;YAACkL;YAAgB+D;QAAAA;IAC1B;IACArgC,SAAS;QACP,CAACmQ;gBAAG,EAACmsB,cAAAA,EAAgB+D,qBAAAA,EAAAA;mBAA2B;oBAC9CvF,iLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAI;wBACFuD,QAAQuoC;wBACRvrC,OAAOurC;oBAAAA;gBACT,CACD;oBACDvF,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNnO,OAAOwqC,eAAeznC,IAAAA;oBACtBigB,WAAW;oBACXjC,QAAQ;gBAAA,CACT;oBACDioB,iLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAI+nC,eAAevnC,IAAAA;gBAAAA,CACpB,CAAC;aACH;;KAAA;AAEL,CAAC,GAQKwrC,4BAAwB5gC,0LAAAA,EAAe;IAC3CnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAaTioC,oBAEFA;QAdjB,MAAMA,qBAAiB7hC,2OAAAA,EAA4B;YACjD,GAAGrC,QAAAA;YACHxD,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW2D,MAAMhE,EAAAA;YAAAA;QACnB,CACD;QAED,IAAIisC,eAAe1sC,MAAAA,GAAS,GAC1B,OAAO,CAAA;QAGT,MAAMs3B,kDAA4B72B,EAAAA,CAAG,CAAC,2EAAGM,IAAAA,EACnC4rC,eAAeD,eAAexrC,KAAAA,CAAM,GAAG,CAAA,CAAE,GACzCs2B,iDAA0B/2B,EAAAA,CAAG,CAAA,CAAE,6EAAGM,IAAAA;QAExC,IACE,KAAC4C,6MAAAA,EAAY6E,SAASxD,OAAAA,EAASsyB,UAAU,KACzC,KAAC3zB,6MAAAA,EAAY6E,SAASxD,OAAAA,EAASwyB,QAAQ,GAIvC,OAAO,CAAA;QAGT,MAAMoV,uBAAmB/hC,wOAAAA,EAAiC;YAExD7F,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW2D,MAAMhE,EAAAA;YAAAA;QACnB,CACD,GACKosC,iBAAiBhiC,kPAAAA,EAA+B;YAEpD7F,SAAS;gBACP,GAAGwD,SAASxD,OAAAA;gBACZlE,WAAW2D,MAAMhE,EAAAA;YAAAA;QACnB,CACD;QAED,IAAI,CAACmsC,oBAAoB,CAACC,gBACxB,OAAO,CAAA;QAGT,MAAMjB,2BAAuBkB,oNAAAA,EAAmB;YAC9C9nC,SAASwD,SAASxD,OAAAA;YAClBhH,OAAO;gBACL+C,MAAMu2B;gBACNr2B,MAAM;oBAAC;wBAACxD,MAAM65B,WAAW75B,IAAAA;oBAAAA,CAAK;iBAAA;YAAA;QAChC,CACD;QAED,IAAI,KAACgL,qOAAAA,EAAuBmkC,kBAAkBhB,oBAAoB,GAGhE,OAAO,CAAA;QAGT,MAAMmB,qBAAqBP,mOAAAA,EAAiB;YAC1CxnC,SAASwD,SAASxD,OAAAA;YAClBhH,OAAO;gBACL+C,MAAMu2B;gBACNr2B,MAAM;oBAAC;wBAACxD,MAAM65B,WAAW75B,IAAAA;oBAAAA,CAAK;iBAAA;YAAA;QAChC,CACD,GACKk8B,uBAAmB6S,+NAAAA,EAAiB;YACxCxnC,SAASwD,SAASxD,OAAAA;YAClBhH,OAAO;gBACL+C,MAAMy2B;gBACNv2B,MAAM;oBAAC;wBAACxD,MAAM+5B,SAAS/5B,IAAAA;oBAAAA,CAAK;iBAAA;YAAA;QAC9B,CACD,GACKuvC,qBAAiBC,uNAAAA,EAAe;YACpCjoC,SAAS;gBACPpC,QAAQ4F,SAASxD,OAAAA,CAAQpC,MAAAA;gBACzB9B,WAAW;oBACTkD,QAAQ6oC;oBACR7rC,OAAO24B;gBAAAA;YACT;YAEF37B,OAAOw5B;QAAAA,CACR;QAED,OAAO;YACLoU;YACAmB;YACAJ;YACAnV;YACAwV;QAAAA;IAEJ;IACA9gC,SAAS;QACP,CACEmQ;gBACA,EACEuvB,oBAAAA,EACAmB,kBAAAA,EACAJ,YAAAA,EACAnV,QAAAA,EACAwV,cAAAA,EAAAA;mBAEC;gBAAA,8CAAA;mBAEAL,aAAa5uC,GAAAA,CAAKC,CAAAA,YACnBgpC,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAgB1L,IAAIzC,MAAMiD,IAAAA;oBAAAA,CAAK,CAC9C;gBAAA,qCAAA;oBAEA+lC,iLAAAA,EAAM;oBAAC76B,MAAM;oBAAgB1L,IAAI;wBAAC;4BAAChD,MAAM+5B,SAAS/5B,IAAAA;wBAAAA,CAAK;qBAAA;gBAAA,CAAE;gBAAA,uEAAA;gBAAA,mEAAA;oBAGzDupC,iLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAI;wBACFuD,QAAQ+oC;wBACR/rC,OAAO+rC;oBAAAA;gBACT,CACD;gBAAA,4DAAA;oBAED/F,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNnO,OAAOgvC;oBACPhsB,WAAW;oBACXjC,QAAQ;gBAAA,CACT;gBAAA,+DAAA;oBAEDioB,iLAAAA,EAAM;oBACJ76B,MAAM;oBACN1L,IAAI;wBAACuD,QAAQ4nC;wBAAsB5qC,OAAO+rC;oBAAAA;gBAAkB,CAC7D;aACF;;KAAA;AAEL,CAAC,GAMKG,mBAAmBrhC,8LAAAA,EAAe;IACtCnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAAA,KAAc;QACrB,MAAMigC,yBAAqB59B,sOAAAA,EAA+BrC,QAAQ,GAC5D6jC,qBAAiBxhC,2OAAAA,EAA4BrC,QAAQ;QAE3D,OACE,CAACigC,sBACD,CAAC4D,kBACD,KAAC/R,+NAAAA,EAAiB9xB,SAASxD,OAAAA,EAASqnC,eAAetrC,IAAI,IAEhD,CAAA,IAGF;YAACsrC;QAAAA;IACV;IACAngC,SAAS;QACP,CAACmQ;gBAAG,EAACgwB,cAAAA,EAAAA;mBAAoB;oBACvBrF,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNhQ,OAAO;wBAAC;wBAAY,OAAO;qBAAA;oBAC3BsE,IAAI4rC,eAAeprC,IAAAA;gBAAAA,CACpB,CAAC;aACH;;KAAA;AAEL,CAAC,GAKKksC,sBAAkBthC,0LAAAA,EAAe;IACrCnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAG5B,IAAI,CAFU0iC,yBAAyBW,GAAAA,CAAIh8B,KAAAA,CAAMrH,MAAMgb,WAAW,GAGhE,OAAO,CAAA;QAGT,MAAMhc,qBAAiBoH,2OAAAA,EAA4BrC,QAAQ,GACrD4kC,qBAAqB3pC,eAAeqP,OAAAA,CAAS9U,CAAAA,YACjD2F,6MAAAA,EAAY6E,SAASxD,OAAAA,EAAShH,MAAM+C,IAAI,IACpC;gBACE;oBACEA,MAAM/C,MAAM+C,IAAAA;oBACZE,MAAMjD,MAAMiD,IAAAA;gBAAAA,CACb;aAAA,GAEH,CAAA,CACN;QAEA,OAAImsC,mBAAmBptC,MAAAA,KAAWyD,eAAezD,MAAAA,GACxC;YAACotC;QAAAA,IAGH,CAAA;IACT;IACAlhC,SAAS;QACP,CAACmQ;gBAAG,EAAC+wB,kBAAAA,EAAAA;mBACHA,mBAAmBrvC,GAAAA,CAAKsvC,CAAAA,wBACtBrG,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNhQ,OAAO;wBACLwT,OAAOpJ,KAAKkD,GAAAA,CACVwiC,gBACA1lC,KAAK+iC,GAAAA,CAAI,GAAG+D,kBAAkBtsC,IAAAA,CAAK4O,KAAAA,GAAQ,CAAC,CAC9C;oBAAA;oBAEFlP,IAAI4sC,kBAAkBpsC,IAAAA;gBAAAA,CACvB,CACH,CAAC;;KAAA;AAEP,CAAC,GAKKqsC,6BAAyBzhC,0LAAAA,EAAe;IAC5CnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAK5B,IAAI,CAJe0iC,yBAAyBY,QAAAA,CAASj8B,KAAAA,CACnDrH,MAAMgb,WACR,GAGE,OAAO,CAAA;QAGT,MAAMhc,qBAAiBoH,2OAAAA,EAA4BrC,QAAQ,GACrD4kC,qBAAqB3pC,eAAeqP,OAAAA,CAAS9U,CAAAA,YACjD2F,6MAAAA,EAAY6E,SAASxD,OAAAA,EAAShH,MAAM+C,IAAI,IACpC;gBACE;oBACEA,MAAM/C,MAAM+C,IAAAA;oBACZE,MAAMjD,MAAMiD,IAAAA;gBAAAA,CACb;aAAA,GAEH,CAAA,CACN;QAEA,OAAImsC,mBAAmBptC,MAAAA,KAAWyD,eAAezD,MAAAA,GACxC;YAACotC;QAAAA,IAGH,CAAA;IACT;IACAlhC,SAAS;QACP,CAACmQ;gBAAG,EAAC+wB,kBAAAA,EAAAA;mBACHA,mBAAmBrvC,GAAAA,CAAKsvC,CAAAA,wBACtBrG,iLAAAA,EAAM;oBACJ76B,MAAM;oBACNhQ,OAAO;wBACLwT,OAAOpJ,KAAKkD,GAAAA,CACVwiC,gBACA1lC,KAAK+iC,GAAAA,CAAI,GAAG+D,kBAAkBtsC,IAAAA,CAAK4O,KAAAA,GAAQ,CAAC,CAC9C;oBAAA;oBAEFlP,IAAI4sC,kBAAkBpsC,IAAAA;gBAAAA,CACvB,CACH,CAAC;;KAAA;AAEP,CAAC,GAMKssC,uBAAmB1hC,0LAAAA,EAAe;IACtCnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAC5B,MAAM4nC,qBAAiBxhC,2OAAAA,EAA4BrC,QAAQ;QAE3D,IAAI,CAAC6jC,gBACH,OAAO,CAAA;QAGT,MAAMmB,qBAAqB/oC,MAAMmc,MAAAA,CAAOngB,EAAAA,CAAG,CAAC,GACtCgtC,sBAAsBhpC,MAAMmc,MAAAA,CAAOngB,EAAAA,CAAG,CAAC,GACvCitC,wBAAoB/pC,6MAAAA,EAAY6E,SAASxD,OAAAA,EAASwoC,kBAAkB,IACtEA,qBACA7pC,iNAAAA,EAAY6E,SAASxD,OAAAA,EAASyoC,mBAAmB,IAC/CA,sBACA1tC,KAAAA;QAEN,IAAI,CAAC2tC,mBACH,OAAO,CAAA;QAGT,MAAMC,kBAAkBtB,eAAetrC,IAAAA,CAAK4O,KAAAA,GAAQ+9B,kBAAkB/9B,KAAAA;QAEtE,OAAIg+B,oBAAoB,IACf,CAAA,IAGF;YAACA;YAAiBD;QAAAA;IAC3B;IACAxhC,SAAS;QACP;gBAAC,EAAC1D,QAAAA,EAAU/D,KAAAA,EAAAA,UAAQ,EAACkpC,eAAAA,EAAiBD,iBAAAA,EAAAA,KAAuB;YAC3D,IAAIE,cAAc,CAAA,GACdC,sBAAsB,CAAA;YAE1B,OAAO;oBACL7G,iLAAAA,EAAM;oBACJ,GAAGviC,KAAAA;oBACHmc,QAAQnc,MAAMmc,MAAAA,CAAO7iB,GAAAA,CAAKC,CAAAA,QAAAA,CACpBA,MAAMP,IAAAA,KAASiwC,kBAAkBjwC,IAAAA,IAAAA,CACnCowC,sBAAsB,CAAA,CAAA,GAGnBD,cAKHC,uBACAD,mBACAjqC,6MAAAA,EAAY6E,SAASxD,OAAAA,EAAShH,KAAK,IAE5B;4BACL,GAAGA,KAAAA;4BACH2R,OAAOpJ,KAAKkD,GAAAA,CACVwiC,gBACA1lC,KAAK+iC,GAAAA,CAAI,GAAGtrC,MAAM2R,KAAAA,GAAQg+B,eAAe,CAC3C;wBAAA,IAAA,CAIAE,uBAAAA,CACFD,cAAc,CAAA,CAAA,GAGT5vC,KAAAA,IArBEA,KAAAA,CAsBV;gBAAA,CACF,CAAC;aAAA;QAEN,CAAC;KAAA;AAEL,CAAC,GAMK8vC,kBAAkBjiC,8LAAAA,EAAe;IACrCnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAC5B,MAAM4nC,qBAAiBxhC,2OAAAA,EAA4BrC,QAAQ;QAM3D,IAJI,CAAC6jC,sBAID/R,+NAAAA,EAAiB9xB,SAASxD,OAAAA,EAASqnC,eAAetrC,IAAI,GACxD,OAAO,CAAA;QAGT,MAAMysC,qBAAqB/oC,MAAMmc,MAAAA,CAAOngB,EAAAA,CAAG,CAAC,GACtCgtC,sBAAsBhpC,MAAMmc,MAAAA,CAAOngB,EAAAA,CAAG,CAAC,GACvCitC,wBAAoB/pC,6MAAAA,EAAY6E,SAASxD,OAAAA,EAASwoC,kBAAkB,IACtEA,yBACA7pC,6MAAAA,EAAY6E,SAASxD,OAAAA,EAASyoC,mBAAmB,IAC/CA,sBACA1tC,KAAAA;QAUN,OARI,CAAC2tC,qBAIDrB,eAAetrC,IAAAA,CAAK4O,KAAAA,KAAU+9B,kBAAkB/9B,KAAAA,IAIhD08B,eAAetrC,IAAAA,CAAKyC,QAAAA,KAAakqC,kBAAkBlqC,QAAAA,GAC9C,CAAA,IAGF;YAACA,UAAU6oC,eAAetrC,IAAAA,CAAKyC,QAAAA;YAAUkqC;QAAAA;IAClD;IACAxhC,SAAS;QACP;gBAAC,EAAC1D,QAAAA,EAAU/D,KAAAA,EAAAA,UAAQ,EAACjB,QAAAA,EAAUkqC,iBAAAA,EAAAA,KAAuB;YACpD,IAAIK,iBAAiB,CAAA,GACjBF,sBAAsB,CAAA;YAE1B,OAAO;oBACL7G,iLAAAA,EAAM;oBACJ,GAAGviC,KAAAA;oBACHmc,QAAQnc,MAAMmc,MAAAA,CAAO7iB,GAAAA,CAAKC,CAAAA,QAAAA,CACpBA,MAAMP,IAAAA,KAASiwC,kBAAkBjwC,IAAAA,IAAAA,CACnCowC,sBAAsB,CAAA,CAAA,GAGnBE,iBAKHF,uBACAE,sBACApqC,6MAAAA,EAAY6E,SAASxD,OAAAA,EAAShH,KAAK,IAE5B;4BACL,GAAGA,KAAAA;4BACHwF,UACExF,MAAM2R,KAAAA,KAAU+9B,kBAAkB/9B,KAAAA,GAC9BnM,WACAxF,MAAMwF,QAAAA;wBAAAA,IAAAA,CAIZqqC,uBAAAA,CACFE,iBAAiB,CAAA,CAAA,GAGZ/vC,KAAAA,IArBEA,KAAAA,CAsBV;gBAAA,CACF,CAAC;aAAA;QAEN,CAAC;KAAA;AAEL,CAAC,GAMKgwC,4BAAwBniC,0LAAAA,EAAe;IAC3CnP,IAAI;IACJoP,OAAOA;YAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;QAS5B,IARIA,MAAMuc,SAAAA,KAAc,UAIpBvc,MAAMzG,KAAAA,CAAMC,KAAAA,KAAUuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA,IAIpDwH,MAAMzG,KAAAA,CAAMwF,QAAAA,KAAazD,KAAAA,GAC3B,OAAO,CAAA;QAGT,MAAMssC,qBAAiBxhC,2OAAAA,EAA4BrC,QAAQ;QAM3D,OAJI,CAAC6jC,kBAID,KAAC/R,+NAAAA,EAAiB9xB,SAASxD,OAAAA,EAASqnC,eAAetrC,IAAI,IAClD,CAAA,IAGF;YACL4O,OAAO08B,eAAetrC,IAAAA,CAAK4O,KAAAA;YAC3BnM,UAAU6oC,eAAetrC,IAAAA,CAAKyC,QAAAA;QAAAA;IAElC;IACA0I,SAAS;QACP;gBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAACkL,KAAAA,EAAOnM,QAAAA,EAAAA;mBAAc;oBAC9BwjC,iLAAAA,EAAM;oBACJ,GAAGviC,KAAAA;oBACHzG,OAAO;wBACL,GAAGyG,MAAMzG,KAAAA;wBACT2R;wBACAnM;oBAAAA;gBACF,CACD,CAAC;aACH;;KAAA;AAEL,CAAC,GAEYyqC,oBAAoB;IAC/B/B;IACAC;IACAC;IACAE;IACAG;IACAS;IACAC;IACAG;IACAC;IACAO;IACAE;AACF,GC9pBaE,sBAAsB,CACjC;OAAGhH;IACH0B,uBAAuBC,cAAAA;IACvBD,uBAAuBE,UAAAA;IACvBF,uBAAuBG,iBAAAA;IACvBH,uBAAuBI,YAAAA,EACvB;OAAGO;IACHZ,yBAAyBN,8BAAAA;IACzBM,yBAAyBL,8BAAAA;IACzBK,yBAAyBX,4BAAAA;IACzBW,yBAAyBR,0BAAAA;IACzBQ,yBAAyBP,mBAAAA;IACzBO,yBAAyBJ,sCAAAA;IACzBI,yBAAyBD,uCAAAA;IACzBuF,kBAAkB/B,oBAAAA;IAClB+B,kBAAkB9B,uBAAAA;IAClB8B,kBAAkB7B,yBAAAA;IAClB6B,kBAAkB3B,4BAAAA;IAClB2B,kBAAkBxB,qBAAAA;IAClBwB,kBAAkBf,gBAAAA;IAClBe,kBAAkBd,eAAAA;IAClBc,kBAAkBX,sBAAAA;IAClBW,kBAAkBV,gBAAAA;IAClBU,kBAAkBH,eAAAA;IAClBG,kBAAkBD,qBAAAA;IAClBjC,yBAAyBd,2BAAAA;IACzBc,yBAAyBV,6BAAAA;IACzBU,yBAAyBP,sBAAAA;IACzBO,yBAAyBJ,oBAAAA;IACzBI,yBAAyBF,oBAAoB;CAAA,CAC7C9tC,GAAAA,CAAK6N,CAAAA,WAAAA,CAAc;QACnBA;QACAS,UAAUb;IACZ,CAAA,CAAE,GCpCW2iC,8BAA8B;IACzCtiC,8LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;gBAyBJzG;YAxBxB,MAAMgK,WAAWvD,MAAMhE,EAAAA,CAAG,CAAC,CAAA,CAAEhD,IAAAA,EACvB2wC,aAAa3pC,MAAMhE,EAAAA,CAAG,CAAC,CAAA,CAAEhD,IAAAA,EAEzBO,YAAQ6M,mOAAAA,EAA4B;gBACxC,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW;wBACTkD,QAAQ;4BACN/C,MAAM;gCAAC;oCAACxD,MAAMuK;gCAAAA,CAAS;6BAAA;4BACvB9D,QAAQ;wBAAA;wBAEVlD,OAAO;4BACLC,MAAM;gCAAC;oCAACxD,MAAMuK;gCAAAA,CAAS;6BAAA;4BACvB9D,QAAQ;wBAAA;oBACV;gBACF;YACF,CACD;YAED,IAAI,CAAClG,OACH,OAAO,CAAA;YAGT,MAAMqwC,gDAAwBttC,IAAAA,CAAKvC,QAAAA,8EAAUT,GAAAA,CAAKkV,CAAAA,UAC5CA,QAAQxV,IAAAA,KAAS2wC,aACZ;oBACL,GAAGn7B,OAAAA;oBACH,GAAGxO,MAAMtI,KAAAA;gBAAAA,IAIN8W,OACR;YAED,OAAO;gBAACjL;gBAAUqmC;YAAAA;QACpB;QACAniC,SAAS;YACP,CAACmQ;oBAAG,EAACrU,QAAAA,EAAUqmC,eAAAA,EAAAA;uBAAqB;wBAClCrH,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAI;4BAAC;gCAAChD,MAAMuK;4BAAAA,CAAS;yBAAA;wBACrB7L,OAAO;4BAACqC,UAAU6vC;wBAAAA;oBAAe,CAClC,CAAC;iBACH;;SAAA;IAEL,CAAC;QACDxiC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;uBACjB6pC,4OAAAA,EAAmB7pC,MAAMspB,UAAAA,CAAW9wB,IAAI,EAAEuL,QAAQ;;QACpD0D,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAqB4hB,YAAYtpB,MAAMspB,UAAAA;oBAAAA,CAAW,CAAC;iBACjE;;SAAA;IAEL,CAAC;QACDliB,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;mBACjB,CAAC6pC,gPAAAA,EAAmB7pC,MAAMspB,UAAAA,CAAW9wB,IAAI,EAAEuL,QAAQ;;QACrD0D,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAkB4hB,YAAYtpB,MAAMspB,UAAAA;oBAAAA,CAAW,CAAC;iBAC9D;;SAAA;IAEL,CAAC,CAAC;CAAA,ECtESwgB,6BAA6B;QACxC1iC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;uBAAW+pC,2OAAAA,EAAkB/pC,MAAMiP,SAAS,EAAElL,QAAQ;;QACzE0D,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAoBuH,WAAWjP,MAAMiP,SAAAA;oBAAAA,CAAU,CAAC;iBAC9D;;SAAA;IAEL,CAAC;QACD7H,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAM+xB,kBAAkB/xB,MAAMhE,EAAAA,OAC1BguC,8PAAAA,EAAwB;gBACtBzpC,SAASwD,SAASxD,OAAAA;gBAClB4xB,SAASnyB,MAAMhE,EAAAA;YAAAA,CAChB,IACD;YAEJ,OAAI+1B,kBACK,KAACgY,2OAAAA,EAAkB/pC,MAAMiP,SAAS,EAAE;gBACzC,GAAGlL,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW01B;gBAAAA;YACb,CACD,IAGI,KAACgY,2OAAAA,EAAkB/pC,MAAMiP,SAAS,EAAElL,QAAQ;QACrD;QACA0D,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBACJ,GAAGviC,KAAAA;wBACH0H,MAAM;oBAAA,CACP,CAAC;iBACH;;SAAA;IAEL,CAAC,CAAC;CAAA,ECvCSuiC,0BAA0B;QACrC7iC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA;mBACFA,SAASxD,OAAAA,CAAQlE,SAAAA,GAIf;gBAACA,WAAW0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAAAA,IAH3B,CAAA;;QAKXoL,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAAC3D,SAAAA,EAAAA;uBAAe;wBACxBkmC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNrD,WAAW;wBACX6uB,MAAMlzB,MAAMkzB,IAAAA;wBACZl3B,IAAIK;oBAAAA,CACL,CAAC;iBACH;;SAAA;IAEL,CAAC;QACD+K,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,IAAIA,MAAMqE,SAAAA,KAAc,YACtB,OAAO,CAAA;YAGT,MAAMw0B,oBAAgBzyB,0OAAAA,EAA2BrC,QAAQ,GACnDggC,qBAAiB39B,mOAAAA,EAA4BrC,QAAQ;YAM3D,IAJI,CAAC80B,iBAAiB,CAACkL,kBAInB,KAAC39B,6OAAAA,EAA8B29B,cAAc,EAAEhgC,QAAQ,GACzD,OAAO,CAAA;YAGT,MAAM+jC,4BAAwBlnC,+NAAAA,EAAuB;gBACnDL,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOs/B;YAAAA,CACR;YAED,WAAKj8B,2KAAAA,EAAYmH,SAASxD,OAAAA,EAASs4B,cAAcv8B,IAAI,IAI9C;gBAACwrC;gBAAuB/D;YAAAA,IAHtB,CAAA;QAIX;QACAt8B,SAAS;YACP,CAACmQ;oBAAG,EAACkwB,qBAAAA,EAAuB/D,cAAAA,EAAAA;uBAAoB;oBAC9CxB,qLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAI+nC,eAAevnC,IAAAA;oBAAAA,CACpB;wBACD+lC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAI;4BACFuD,QAAQuoC;4BACRvrC,OAAOurC;wBAAAA;oBACT,CACD;oBACDvF,qLAAAA,EAAM;wBACJ76B,MAAM;wBACNnO,OAAOwqC,eAAeznC,IAAAA;wBACtBigB,WAAW;wBACXjC,QAAQ;oBAAA,CACT,CAAC;iBACH;;SAAA;IAEL,CAAC;QACDlT,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA;mBACFA,SAASxD,OAAAA,CAAQlE,SAAAA,GAIf;gBAACA,WAAW0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAAAA,IAH3B,CAAA;;QAKXoL,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAAC3D,SAAAA,EAAAA;uBAAe;wBACxBkmC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNrD,WAAW;wBACX6uB,MAAMlzB,MAAMkzB,IAAAA;wBACZl3B,IAAIK;oBAAAA,CACL,CAAC;iBACH;;SAAA;IAEL,CAAC;IACD+K,8LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,IAAIA,MAAMqE,SAAAA,KAAc,WACtB,OAAO,CAAA;YAGT,MAAMo/B,gBAAYr9B,sOAAAA,EAAuB;gBACvC,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW2D,MAAMhE,EAAAA;gBAAAA;YACnB,CACD,GACK+nC,qBAAiB39B,mOAAAA,EAA4B;gBACjD,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW2D,MAAMhE,EAAAA;gBAAAA;YACnB,CACD;YAMD,IAJI,CAACynC,aAAa,CAACM,kBAIf,KAACnjC,+NAAAA,EAAuBmD,SAASxD,OAAAA,EAASwjC,eAAeznC,IAAI,GAC/D,OAAO,CAAA;YAGT,MAAM4tC,0BAAsBtpC,oNAAAA,EAAyB;gBACnDL,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOkqC;YAAAA,CACR;YAED,OAAO;gBAACM;gBAAgBmG;YAAAA;QAC1B;QACAziC,SAAS;YACP,CAACmQ;oBAAG,EAACmsB,cAAAA,EAAgBmG,mBAAAA,EAAAA;uBAAyB;wBAC5C3H,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAI+nC,eAAevnC,IAAAA;oBAAAA,CACpB;wBACD+lC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAI;4BACFuD,QAAQ2qC;4BACR3tC,OAAO2tC;wBAAAA;oBACT,CACD,CAAC;iBACH;;SAAA;IAEL,CAAC;QACD9iC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,IAAIA,MAAMqE,SAAAA,KAAc,WACtB,OAAO,CAAA;YAGT,MAAMo/B,gBAAYr9B,sOAAAA,EAAuBrC,QAAQ,GAC3CggC,qBAAiB39B,mOAAAA,EAA4BrC,QAAQ;YAU3D,OARI,CAAC0/B,aAAa,CAACM,kBAIf,KAAC39B,2OAAAA,EAA4B29B,cAAc,EAAEhgC,QAAQ,KAIrD,KAACnH,2KAAAA,EAAYmH,SAASxD,OAAAA,EAASkjC,UAAUnnC,IAAI,IACxC,CAAA,IAGF;gBAACmnC;YAAAA;QACV;QACAh8B,SAAS;YACP,CAACmQ;oBAAG,EAAC6rB,SAAAA,EAAAA;uBAAe;wBAClBlB,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIynC,UAAUjnC,IAAAA;oBAAAA,CACf;oBACD+lC,qLAAAA,EAAM;wBACJ76B,MAAM;wBACNnO,OAAOkqC,UAAUnnC,IAAAA;wBACjBigB,WAAW;wBACXjC,QAAQ;oBAAA,CACT,CAAC;iBACH;;SAAA;IAEL,CAAC;QACDlT,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAI;4BACFuD,QAAQ;gCACN/C,MAAMwD,MAAMhE,EAAAA;gCACZyD,QAAQ;4BAAA;4BAEVlD,OAAO;gCACLC,MAAMwD,MAAMhE,EAAAA;gCACZyD,QAAQ;4BAAA;wBACV;oBACF,CACD,CAAC;iBACH;;SAAA;IAEL,CAAC;QACD2H,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAMtC,iBAAa0I,+NAAAA,EAAwB;gBACzC,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW;wBACTkD,QAAQ;4BACN/C,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;wBAEVlD,OAAO;4BACLC,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;oBACV;gBACF;YACF,CACD;YAED,OAAK/B,iBAIDoH,sKAAAA,EAAOf,SAASxD,OAAAA,EAAS7C,WAAWpB,IAAI,IACnC;gBACLD,WAAW;oBACTkD,QAAQ;wBACN/C,MAAMwD,MAAMhE,EAAAA;wBACZyD,QAAQ;oBAAA;oBAEVlD,OAAO;wBACLC,MAAMwD,MAAMhE,EAAAA;wBACZyD,QAAQ/B,WAAWpB,IAAAA,CAAKhC,IAAAA,CAAKiB,MAAAA;oBAAAA;gBAC/B;YACF,IAIG;gBACLc,WAAW;oBACTkD,QAAQ;wBACN/C,MAAMwD,MAAMhE,EAAAA;wBACZyD,QAAQ;oBAAA;oBAEVlD,OAAO;wBACLC,MAAMwD,MAAMhE,EAAAA;wBACZyD,QAAQ;oBAAA;gBACV;YACF,IA5BO,CAAA;QA8BX;QACAgI,SAAS;YAAC,CAACmQ;oBAAG,EAACvb,SAAAA,EAAAA;uBAAe;wBAACkmC,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAU1L,IAAIK;oBAAAA,CAAU,CAAC;iBAAC;;SAAA;IACxE,CAAC;IACD+K,8LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAM3D,gBAAYuE,8PAAAA,EAA8B;gBAC9CL,SAASwD,SAASxD,OAAAA;gBAClB4xB,SAASnyB,MAAMhE,EAAAA;YAAAA,CAChB;YAED,IAAI,CAACK,WACH,OAAO,CAAA;YAGT,MAAM+1B,uBAAmBhsB,6OAAAA,EAA8B;gBACrD,GAAGrC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZxH,OAAOgL,SAASxD,OAAAA,CAAQxH,KAAAA;oBACxBsD;gBAAAA;YACF,CACD;YAED,OAAK+1B,mBAIE;gBACL/1B,WAAW+1B;YAAAA,IAJJ,CAAA;QAMX;QACA3qB,SAAS;YAAC,CAACmQ;oBAAG,EAACvb,SAAAA,EAAAA;uBAAe;wBAACkmC,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAU1L,IAAIK;oBAAAA,CAAU,CAAC;iBAAC;;SAAA;IACxE,CAAC,CAAC;CAAA,EC/RS8tC,+BAA+B;QAC1C/iC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACrH,KAAAA,EAAAA,KAAW;YAClB,MAAM8kB,eAAe9kB,MAAMgb,WAAAA,CAAYA,WAAAA,CAAYC,YAAAA,CAAamvB,OAAAA,CAC9D,6BACF;YAEA,IAAItlB,cACF,OAAO;gBACLpd,MAAM;gBACNic,UAAU;gBACVO,MAAMY;gBACN9J,aAAahb,MAAMgb,WAAAA;YAAAA;YAIvB,MAAMqvB,OACJrqC,MAAMgb,WAAAA,CAAYA,WAAAA,CAAYC,YAAAA,CAAamvB,OAAAA,CAAQ,kBAAkB;YAEvE,IAAIC,MACF,OAAO;gBACL3iC,MAAM;gBACNic,UAAU;gBACVO,MAAMmmB;gBACNrvB,aAAahb,MAAMgb,WAAAA;YAAAA;YAIvB,MAAMwJ,OACJxkB,MAAMgb,WAAAA,CAAYA,WAAAA,CAAYC,YAAAA,CAAamvB,OAAAA,CAAQ,WAAW;YAEhE,IAAI5lB,MACF,OAAO;gBACL9c,MAAM;gBACNic,UAAU;gBACVO,MAAMM;gBACNxJ,aAAahb,MAAMgb,WAAAA;YAAAA;YAIvB,MAAM1gB,OACJ0F,MAAMgb,WAAAA,CAAYA,WAAAA,CAAYC,YAAAA,CAAamvB,OAAAA,CAAQ,YAAY;YAEjE,OAAI9vC,OACK;gBACLoN,MAAM;gBACNic,UAAU;gBACVO,MAAM5pB;gBACN0gB,aAAahb,MAAMgb,WAAAA;YAAAA,IAIhB,CAAA;QACT;QACAvT,SAAS;YAAC,CAACmQ,GAAG0yB,mBAAqB;wBAAC/H,iLAAAA,EAAM+H,gBAAgB,CAAC;iBAAC;SAAA;IAAA,CAC7D;QACDljC,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNic,UAAU;wBACVI,QAAQ;wBACR/I,aAAahb,MAAMgb,WAAAA;oBAAAA,CACpB,CAAC;iBACH;;SAAA;IAAA,CAEJ;QACD5T,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAM8jB,YAAY/f,SAASxD,OAAAA,CAAQuM,UAAAA,CAAWrJ,IAAAA,CAC3CqgB,CAAAA,aAAcA,WAAUH,QAAAA,KAAa3jB,MAAM2jB,QAC9C;YAEA,OAAKG,YAIEA,UAAUE,WAAAA,CAAY;gBAC3BjgB;gBACA/D,OAAO;oBACL0H,MAAM;oBACNwc,MAAMlkB,MAAMkkB,IAAAA;gBAAAA;YACd,CACD,IATQ,CAAA;QAUX;QACAzc,SAAS;YACP,QAAU6iC;oBAAT,EAACtqC,KAAAA,EAAAA;uBAA6B;wBAC7BuiC,iLAAAA,EAAM;wBACJ,GAAG+H,gBAAAA;wBACHtvB,aAAahb,MAAMgb,WAAAA;oBAAAA,CACpB,CAAC;iBACH;;SAAA;IAAA,CAEJ;IAAA;;;;GAAA,GAMD5T,8LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAG5B,QAFuBoG,mOAAAA,EAA4BrC,QAAQ,KAIzD/D,MAAM2jB,QAAAA,KAAa,gBACnB3jB,MAAMgb,WAAAA,CAAYtT,IAAAA,KAAS,mBAC3B;gBACA,MAAMsuB,uBAAmB1L,6OAAAA,EAAoBvmB,QAAQ;gBAGrD,OAAO;oBACLkyB,uBAHwB7vB,8OAAAA,EAA+BrC,QAAQ;oBAI/DiyB;oBACAuU,UAAUvqC,MAAMkkB,IAAAA,CAAK7V,OAAAA,CAAS9U,CAAAA,YAC5BqD,2KAAAA,EAAYmH,SAASxD,OAAAA,EAAShH,KAAK,IAC/B;gCAACixC,kNAAAA,EAAiBjxC,KAAK,CAAC;yBAAA,GACxB,CAAA,CACN;gBAAA;YAEJ;YAEA,OAAO,CAAA;QACT;QACAkO,SAAS;YACP,CAACmQ;oBAAG,EAACqe,iBAAAA,EAAmBD,gBAAAA,EAAkBuU,QAAAA,EAAAA;uBACxCA,SAASl8B,OAAAA,CAAQ,CAACo8B,SAAStb,QACzBA,UAAUob,SAAShvC,MAAAA,GAAS,IACxB;4BACEgnC,iLAAAA,EAAM;4BACJ76B,MAAM;4BACNpN,MAAMmwC;4BACNz8B,YAAYgoB;4BACZlnB,aAAamnB,kBAAkB38B,GAAAA,CAC7B;oCAAC,EAACN,IAAAA,EAAMQ,KAAAA,EAAO,GAAGT,OAAAA;uCAAY;oCAC5BP,MAAMgB;oCACNT;gCAAAA,EAEJ;;wBAAA,CACD;4BACDwpC,iLAAAA,EAAM;4BAAC76B,MAAM;wBAAA,CAAe,CAAC;qBAAA,GAE/B;4BACE66B,iLAAAA,EAAM;4BACJ76B,MAAM;4BACNpN,MAAMmwC;4BACNz8B,YAAYgoB;4BACZlnB,aAAamnB,kBAAkB38B,GAAAA,CAC7B;oCAAC,EAACN,IAAAA,EAAMQ,KAAAA,EAAO,GAAGT,OAAAA;uCAAY;oCAC5BP,MAAMgB;oCACNT;gCAAAA,EAEJ;;wBAAA,CACD,CAAC;qBAEV,CAAC;;SAAA;IAAA,CAEN;QACDqO,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNyU,QAAQnc,MAAMkkB,IAAAA;wBACd3H,WAAW;oBAAA,CACZ,CAAC;iBACH;;SAAA;IAAA,CAEJ;QACDnV,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACrH,KAAAA,EAAAA,KAAW;YAClB,IAAIA,MAAM2jB,QAAAA,KAAa,+BAA+B;gBACpD,MAAM0mB,OACJrqC,MAAMgb,WAAAA,CAAYA,WAAAA,CAAYC,YAAAA,CAAamvB,OAAAA,CAAQ,kBAAkB;gBAEvE,IAAIC,MACF,OAAO;oBACL3iC,MAAM;oBACNic,UAAU;oBACVO,MAAMmmB;oBACNrvB,aAAahb,MAAMgb,WAAAA;gBAAAA;YAGzB;YAEA,IAAIhb,MAAM2jB,QAAAA,KAAa,oBAAoB;gBACzC,MAAMa,OACJxkB,MAAMgb,WAAAA,CAAYA,WAAAA,CAAYC,YAAAA,CAAamvB,OAAAA,CAAQ,WAAW;gBAEhE,IAAI5lB,MACF,OAAO;oBACL9c,MAAM;oBACNic,UAAU;oBACVO,MAAMM;oBACNxJ,aAAahb,MAAMgb,WAAAA;gBAAAA;YAGzB;YAEA,IAAIhb,MAAM2jB,QAAAA,KAAa,aAAa;gBAClC,MAAMrpB,OACJ0F,MAAMgb,WAAAA,CAAYA,WAAAA,CAAYC,YAAAA,CAAamvB,OAAAA,CAAQ,YAAY;gBAEjE,IAAI9vC,MACF,OAAO;oBACLoN,MAAM;oBACNic,UAAU;oBACVO,MAAM5pB;oBACN0gB,aAAahb,MAAMgb,WAAAA;gBAAAA;YAGzB;YAEA,OAAO,CAAA;QACT;QACAvT,SAAS;YAAC,CAACmQ,GAAG8yB,uBAAyB;oBAACnI,qLAAAA,EAAMmI,oBAAoB,CAAC;iBAAC;SAAA;IAAA,CACrE;QACDtjC,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;oBACX;wBACE0H,MAAM;wBACNC,QAAQA,MAAM;4BACZ5E,QAAQC,IAAAA,CACN,6BAAsBhD,MAAM2jB,QAAQ,EAAA,yBAAoC,OAAZ3jB,MAAM+jB,MAAM,EAAA,EAC1E;wBACF;oBAAA,CACD;iBACF;;SAAA;IAAA,CAEJ;CAAC,EC1OS4mB,0BAA0B;IACrCvjC,8LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACrH,KAAAA,EAAAA,KAAW;YAClB,MAAM4qC,YACJ5qC,MAAMmc,MAAAA,CAAO5gB,MAAAA,KAAW,IAAIyE,MAAMmc,MAAAA,CAAOngB,EAAAA,CAAG,CAAC,IAAIV,KAAAA;YAEnD,OAAKsvC,YAIE;gBAACA;YAAAA,IAHC,CAAA;QAIX;QACAnjC,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAAC4qC,SAAAA,EAAAA;oBAKC5qC;uBALc;oBACxBuiC,qLAAAA,EAAM;wBACJ76B,MAAM;wBACNnO,OAAOqxC;wBACPruB,WAAWvc,MAAMuc,SAAAA;wBACjBjC,+BAAcA,MAAAA,yDAAU;oBAAA,CACzB,CAAC;iBACH;;SAAA;IAEL,CAAC;QACDlT,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;gBAM1BA,kBAEAA;YAPF,IAAIA,MAAMuc,SAAAA,KAAc,UACtB,OAAO,CAAA;;YAGT,MAAMsuB,mEACE1uB,MAAAA,CAAOngB,EAAAA,CAAG,CAAC,uEAAGhD,IAAAA,yEAAQ+K,SAASxD,OAAAA,CAAQwM,YAAAA,CAAAA,GACzC+9B,oEACE3uB,MAAAA,CAAOngB,EAAAA,CAAG,CAAA,CAAE,yEAAGhD,IAAAA,2EAAQ+K,SAASxD,OAAAA,CAAQwM,YAAAA,CAAAA;YAEhD,OAAO;gBAAC89B;gBAAeC;YAAAA;QACzB;QACArjC,SAAS;YACP;oBAAC,EAAC1D,QAAAA,EAAU/D,KAAAA,EAAAA,UAAQ,EAAC6qC,aAAAA,EAAeC,YAAAA,EAAAA;uBAAkB,CACpD;uBAAG9qC,MAAMmc,MAAAA,CAAO7iB,GAAAA,CAAI,CAACC,OAAO41B,YAC1BoT,iLAAAA,EAAM;4BACJ76B,MAAM;4BACNnO;4BACAgjB,WAAW4S,UAAU,IAAI,WAAW;4BACpC7U,QAAQ6U,UAAUnvB,MAAMmc,MAAAA,CAAO5gB,MAAAA,GAAS,IAAI,QAAQ;wBAAA,CACrD,CACH,GACA;uBAAIyE,MAAMsa,MAAAA,KAAW,SACjB;4BACEioB,iLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAI+H,SAASxD,OAAAA,CAAQlE,SAAAA;wBAAAA,CACtB,CAAC;qBAAA,GAEJ2D,MAAMsa,MAAAA,KAAW,UACf;4BACEioB,iLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAI;gCAAC;oCAAChD,MAAM6xC;gCAAAA,CAAc;6BAAA;4BAC1BvwB,QAAQ;wBAAA,CACT,CAAC;qBAAA,GAEJ;4BACEioB,iLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAI;gCAAC;oCAAChD,MAAM8xC;gCAAAA,CAAa;6BAAA;4BACzBxwB,QAAQ;wBAAA,CACT,CAAC;qBACF;iBACT;;SAAA;IAEL,CAAC;QACDlT,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;;YAC5B,IAAIA,MAAMuc,SAAAA,KAAc,SACtB,OAAO,CAAA;;YAGT,MAAMsuB,gBACJ7qC,mDAAMmc,MAAAA,CAAOngB,EAAAA,CAAG,CAAC,uEAAGhD,IAAAA,yEAAQ+K,SAASxD,OAAAA,CAAQwM,YAAAA,CAAAA,GACzC+9B,0CACJ9qC,0BAAMmc,MAAAA,CAAOngB,EAAAA,CAAG,CAAA,CAAE,yEAAGhD,IAAAA,2EAAQ+K,SAASxD,OAAAA,CAAQwM,YAAAA,CAAAA;YAEhD,OAAO;gBAAC89B;gBAAeC;YAAAA;QACzB;QACArjC,SAAS;YACP;oBAAC,EAAC1D,QAAAA,EAAU/D,KAAAA,EAAAA,UAAQ,EAAC6qC,aAAAA,EAAeC,YAAAA,EAAAA;uBAAkB,CACpD;uBAAG9qC,MAAMmc,MAAAA,CAAO7iB,GAAAA,CAAI,CAACC,OAAO41B,YAC1BoT,iLAAAA,EAAM;4BACJ76B,MAAM;4BACNnO;4BACAgjB,WAAW;4BACXjC,QAAQ6U,UAAUnvB,MAAMmc,MAAAA,CAAO5gB,MAAAA,GAAS,IAAI,QAAQ;wBAAA,CACrD,CACH,GACA;uBAAIyE,MAAMsa,MAAAA,KAAW,SACjB;wBACEioB,qLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAI+H,SAASxD,OAAAA,CAAQlE,SAAAA;wBAAAA,CACtB,CAAC;qBAAA,GAEJ2D,MAAMsa,MAAAA,KAAW,UACf;4BACEioB,iLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAI;gCAAC;oCAAChD,MAAM6xC;gCAAAA,CAAc;6BAAA;4BAC1BvwB,QAAQ;wBAAA,CACT,CAAC;qBAAA,GAEJ;4BACEioB,iLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAI;gCAAC;oCAAChD,MAAM8xC;gCAAAA,CAAa;6BAAA;4BACzBxwB,QAAQ;wBAAA,CACT,CAAC;qBACF;iBACT;;SAAA;IAEL,CAAC;IACDlT,8LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;gBAgB1BA;YAfF,IAAIA,MAAMuc,SAAAA,KAAc,QACtB,OAAO,CAAA;YAGT,MAAMwnB,qBAAiBgH,mOAAAA,EAAkBhnC,QAAQ;YAMjD,IAJI,CAACggC,kBAID,CAAClO,mOAAAA,EAAiB9xB,SAASxD,OAAAA,EAASwjC,eAAeznC,IAAI,GACzD,OAAO,CAAA;uCAMP0D;YAHF,MAAM6qC,mEACE1uB,MAAAA,CAAOngB,EAAAA,CAAG,CAAC,uEAAGhD,IAAAA,yEAAQ+K,SAASxD,OAAAA,CAAQwM,YAAAA,CAAAA,GACzC+9B,oEACE3uB,MAAAA,CAAOngB,EAAAA,CAAG,CAAA,CAAE,yEAAGhD,IAAAA,2EAAQ+K,SAASxD,OAAAA,CAAQwM,YAAAA,CAAAA;YAEhD,OAAO;gBAACg3B;gBAAgB8G;gBAAeC;YAAAA;QACzC;QACArjC,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAAC6qC,aAAAA,EAAeC,YAAAA,EAAAA;uBAAkB,CAC1C;uBAAG9qC,MAAMmc,MAAAA,CAAO7iB,GAAAA,CAAI,CAACC,OAAO41B,YAC1BoT,iLAAAA,EAAM;4BACJ76B,MAAM;4BACNnO;4BACAgjB,WAAW4S,UAAU,IAAI,SAAS;4BAClC7U,QAAQ6U,UAAUnvB,MAAMmc,MAAAA,CAAO5gB,MAAAA,GAAS,IAAI,QAAQ;wBAAA,CACrD,CACH,GACA;uBAAIyE,MAAMsa,MAAAA,KAAW,UAAUta,MAAMsa,MAAAA,KAAW,UAC5C;4BACEioB,iLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAI;gCAAC;oCAAChD,MAAM6xC;gCAAAA,CAAc;6BAAA;4BAC1BvwB,QAAQ;wBAAA,CACT,CAAC;qBAAA,GAEJ;4BACEioB,iLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAI;gCAAC;oCAAChD,MAAM8xC;gCAAAA,CAAa;6BAAA;4BACzBxwB,QAAQ;wBAAA,CACT,CAAC;qBACF;iBACP;;SAAA;IAEL,CAAC;QACDlT,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;;YAC5B,IAAIA,MAAMuc,SAAAA,KAAc,QACtB,OAAO,CAAA;YAGT,MAAMwnB,qBAAiBgH,mOAAAA,EAAkBhnC,QAAQ;YAEjD,IAAI,CAACggC,kBAAkB,CAAChgC,SAASxD,OAAAA,CAAQlE,SAAAA,EACvC,OAAO,CAAA;YAGT,MAAM2uC,2BAAuB3C,oNAAAA,EAAmB;gBAC9C9nC,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOwqC;YAAAA,CACR,GACKkH,yBAAqBlD,+NAAAA,EAAiB;gBAC1CxnC,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOwqC;YAAAA,CACR,GACKmH,0BAAsB1C,uNAAAA,EAAe;gBACzCjoC,SAAS;oBACPpC,QAAQ4F,SAASxD,OAAAA,CAAQpC,MAAAA;oBACzB9B,WAAW;wBACTkD,QAAQwE,SAASxD,OAAAA,CAAQlE,SAAAA,CAAUE,KAAAA;wBACnCA,OAAO0uC;oBAAAA;gBACT;gBAEF1xC,OAAOwqC,eAAeznC,IAAAA;YAAAA,CACvB;;YAID,OAAO;gBACLuuC,yCAHA7qC,yBAAMmc,MAAAA,CAAOngB,EAAAA,CAAG,CAAC,uEAAGhD,IAAAA,yEAAQ+K,SAASxD,OAAAA,CAAQwM,YAAAA,CAAAA;gBAI7Ci+B;gBACAC;gBACAC;gBACA7uC,WAAW0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAAAA;QAEhC;QACAoL,SAAS;YACP;oBACE,EAACzH,KAAAA,EAAAA,UACD,EACEirC,kBAAAA,EACAC,mBAAAA,EACA7uC,SAAAA,EACAwuC,aAAAA,EACAG,oBAAAA,EAAAA;uBAEC,CACH;uBAAGhrC,MAAMmc,MAAAA,CAAO9N,OAAAA,CAAQ,CAAC9U,OAAO41B,QAC9BA,UAAU,IACN,CACE;+BAAInrB,yOAAAA,EAAuB3H,UAAUE,KAAAA,EAAO0uC,kBAAkB,IAC1D,CAAA,CAAA,GACA;oCACE1I,iLAAAA,EAAM;oCACJ76B,MAAM;oCACN1L,IAAI;wCACFuD,QAAQlD,UAAUE,KAAAA;wCAClBA,OAAO0uC;oCAAAA;gCACT,CACD,CAAC;6BAAA;4BAER1I,qLAAAA,EAAM;gCACJ76B,MAAM;gCACNnO;gCACAgjB,WAAW;gCACXjC,QAAQ;4BAAA,CACT,CAAC;yBAAA,GAEJ6U,UAAUnvB,MAAMmc,MAAAA,CAAO5gB,MAAAA,GAAS,IAC9B;gCACEgnC,iLAAAA,EAAM;gCACJ76B,MAAM;gCACNnO;gCACAgjB,WAAW;gCACXjC,QAAQ;4BAAA,CACT;4BACDioB,qLAAAA,EAAM;gCACJ76B,MAAM;gCACNnO,OAAO2xC;gCACP3uB,WAAW;gCACXjC,QAAQta,MAAMsa,MAAAA,KAAW,QAAQ,SAAS;4BAAA,CAC3C,CAAC;yBAAA,GAEJ;gCACEioB,iLAAAA,EAAM;gCACJ76B,MAAM;gCACNnO;gCACAgjB,WAAW;gCACXjC,QAAQ;4BAAA,CACT,CAAC;yBAEZ,GACA;uBAAIta,MAAMsa,MAAAA,KAAW,SACjB;wBACEioB,qLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAIK;wBAAAA,CACL,CAAC;qBAAA,GAEJ2D,MAAMsa,MAAAA,KAAW,UACf;4BACEtW,qOAAAA,EAAuB3H,UAAUE,KAAAA,EAAOyuC,oBAAoB,IACxDzI,qLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAI;gCAAC;oCAAChD,MAAM6xC;gCAAAA,CAAc;6BAAA;4BAC1BvwB,QAAQ;wBAAA,CACT,QACDioB,iLAAAA,EAAM;4BACJ76B,MAAM;4BACN1L,IAAI;gCACFuD,QAAQlD,UAAUE,KAAAA;gCAClBA,OAAOF,UAAUE,KAAAA;4BAAAA;wBACnB,CACD,CAAC;qBAAA,GAER,CAAA,CAAG;iBACV;;SAAA;IAEL,CAAC;QACD6K,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACrH,KAAAA,EAAAA;mBAAWA,MAAMuc,SAAAA,KAAc;;QACxC9U,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBACAA,MAAMmc,MAAAA,CAAO7iB,GAAAA,CAAI,CAACC,OAAO41B;wBAKbnvB;+BAJVuiC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNnO;wBACAgjB,WAAW4S,UAAU,IAAI,SAAS;wBAClC7U,+BAAcA,MAAAA,yDAAU;oBAAA,CACzB,CACH,CAAC;;;SAAA;IAEP,CAAC;QACDlT,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YAAC,IAAM;wBAAC86B,iLAAAA,EAAM;wBAAC76B,MAAM;oBAAA,CAAQ,CAAC;iBAAC;SAAA;IAC1C,CAAC;QACDN,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAAC1D,QAAAA,EAAU/D,KAAAA,EAAAA;uBAAW;wBACrBmrC,mLAAAA,EAAQ;wBACNzjC,MAAM;wBACNnO,OAAO;4BACLC,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;4BACrCyB,UAAU;gCACR;oCACET,OAAOwG,MAAMiG,YAAAA,CAAazN,IAAAA;oCAC1B,GAAGwH,MAAMiG,YAAAA,CAAalN,KAAAA;gCAAAA,CACvB;6BAAA;wBAAA;wBAGLwjB,WAAW;wBACXjC,QAAQ;oBAAA,CACT,CAAC;iBACH;;SAAA;IAEL,CAAC;QACDlT,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YAAC,IAAM;wBAAC86B,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAepN,MAAM;oBAAA,CAAK,CAAC;iBAAC;SAAA;IAC5D,CAAC;QACD8M,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;;;mBAQV;gBAACjG,qCANNiG,2BAAM8O,WAAAA,0EAAaxV,GAAAA,CAAKgwB,CAAAA,aAAAA,CAAgB;wBACtC9vB,OAAO8vB,WAAW9wB,IAAAA;wBAClBQ,MAAM+K,SAASxD,OAAAA,CAAQwM,YAAAA,CAAAA;wBACvB,GAAGuc,WAAWvwB,KAAAA;oBAAAA,CAAAA,CACd,4EAAK,CAAA,CAAA;YAAA;;QAIX0O,SAAS;YACP;oBAAC,EAAC1D,QAAAA,EAAU/D,KAAAA,EAAAA,UAAQ,EAACjG,QAAAA,EAAAA;oBAULiG;uBAVmB;wBACjCmrC,mLAAAA,EAAQ;wBACNzjC,MAAM;wBACNnO,OAAO;4BACLC,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA;4BACrCyB,UAAU;gCACR;oCACET,OAAOuK,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO6Q,IAAAA,CAAKxW,IAAAA;oCACpC8B,MAAM0F,MAAM1F,IAAAA;oCACZC,OAAO,CACL;sEAAUyT,UAAAA,iEAAc,CAAA,CAAA,EACxB;2CAAGjU,SAAST,GAAAA,CAAKkV,CAAAA,UAAYA,QAAQxV,IAAI,CAAC;qCAAA;gCAAA,CAE7C;6BAAA;4BAEHe;wBAAAA;wBAEFwiB,WAAW;wBACXjC,QAAQ;oBAAA,CACT,CAAC;iBACH;;SAAA;IAEL,CAAC,CAAC;CAAA,EChYS8wB,4BAA4B;IAAA;;;GAAA,OAKvChkC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;mBACjB0iC,yBAAyBhyB,KAAAA,CAAMrJ,KAAAA,CAAMrH,MAAMgb,WAAW,SACtD5U,sOAAAA,EAA+BrC,QAAQ,SACvCqC,8OAAAA,EAA+BrC,QAAQ;;QACzC0D,SAAS;YAAC,IAAM;wBAAC86B,iLAAAA,EAAM;wBAAC76B,MAAM;oBAAA,CAAe,CAAC;iBAAC;SAAA;IAAA,CAChD;IAAA;;;;GAAA,OAODN,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACrH,KAAAA,EAAAA;mBACP0iC,yBAAyBK,SAAAA,CAAU17B,KAAAA,CAAMrH,MAAMgb,WAAW;;QAC5DvT,SAAS;YAAC,IAAM;oBAAC86B,qLAAAA,EAAM;wBAAC76B,MAAM;oBAAA,CAAoB,CAAC;iBAAC;SAAA;IAAA,CACrD;IAAA;;GAAA,OAKDN,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACrH,KAAAA,EAAAA;mBACP0iC,yBAAyBrW,OAAAA,CAAQ+L,IAAAA,CAAK/wB,KAAAA,CAAMrH,MAAMgb,WAAW;;QAC/DvT,SAAS;YAAC,IAAM;wBAAC86B,iLAAAA,EAAM;wBAAC76B,MAAM;oBAAA,CAAe,CAAC;iBAAC;SAAA;IAAA,CAChD;IAAA;;GAAA,OAKDN,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACrH,KAAAA,EAAAA;mBACP0iC,yBAAyBrW,OAAAA,CAAQ6L,IAAAA,CAAK7wB,KAAAA,CAAMrH,MAAMgb,WAAW;;QAC/DvT,SAAS;YAAC,IAAM;wBAAC86B,iLAAAA,EAAM;wBAAC76B,MAAM;oBAAA,CAAe,CAAC;iBAAC;SAAA;IAAA,CAChD;CAAC,EC7CS2jC,4BAA4B;IACvCjkC,8LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;mBAEd+D,SAASxD,OAAAA,CAAQpC,MAAAA,CAAO4M,KAAAA,CAAMrM,IAAAA,CAC5BsM,CAAAA,OAASA,KAAKxS,IAAAA,KAASwH,MAAMjB,QAChC,IAOK;gBAACusC,wBAFmBC,+OAAAA,EAAsBxnC,QAAQ;YAAA,IAHhD,CAAA;;QAOX0D,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAACsrC,kBAAAA,EAAAA;uBACTA,mBAAmBhyC,GAAAA,CAAKC,CAAAA;;+BACtBgpC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIzC,MAAMiD,IAAAA;wBACV9E,OAAO;4BACLwT,4BAAO3R,MAAM+C,IAAAA,CAAK4O,KAAAA,iEAAS;4BAC3BnM,UAAUiB,MAAMjB,QAAAA;wBAAAA;oBAClB,CACD,CACH,CAAC;;;SAAA;IAEP,CAAC;QACDqI,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA;mBAGA;gBAACunC,oBAFmBC,mPAAAA,EAAsBxnC,QAAQ;YAAA;;QAI3D0D,SAAS;YACP,CAACmQ;oBAAG,EAAC0zB,kBAAAA,EAAAA;uBACHA,mBAAmBhyC,GAAAA,CAAKC,CAAAA,YACtBgpC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIzC,MAAMiD,IAAAA;wBACV9E,OAAO;4BAAC;4BAAS,UAAU;yBAAA;oBAAA,CAC5B,CACH,CAAC;;SAAA;IAEP,CAAC;QACD0P,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;uBAAWwrC,0OAAAA,EAAiBxrC,MAAMjB,QAAQ,EAAEgF,QAAQ;;QACvE0D,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAoB3I,UAAUiB,MAAMjB,QAAAA;oBAAAA,CAAS,CAAC;iBAC5D;;SAAA;IAEL,CAAC;QACDqI,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;mBAAW,KAACwrC,0OAAAA,EAAiBxrC,MAAMjB,QAAQ,EAAEgF,QAAQ;;QACxE0D,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBAACuiC,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAiB3I,UAAUiB,MAAMjB,QAAAA;oBAAAA,CAAS,CAAC;iBAAC;;SAAA;IAE3E,CAAC,CAAC;CAAA,EC/DS0sC,wBAAwB;QACnCrkC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAM64B,oBAAgB6S,0OAAAA,EAAiB;gBACrC,GAAG3nC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW;wBACTkD,QAAQ;4BACN/C,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;wBAEVlD,OAAO;4BACLC,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;oBACV;gBACF;YACF,CACD;YAED,OAAIo5B,gBACK;gBAACA;YAAAA,IAGH,CAAA;QACT;QACApxB,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAAC64B,aAAAA,EAAAA;uBAAmB;wBAC5B0J,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIgE,MAAMhE,EAAAA;wBACV66B,IAAIgC,cAAcr8B,IAAAA;oBAAAA,CACnB,CAAC;iBACH;;SAAA;IAEL,CAAC;QACD4K,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAMyjC,gBAAYkI,sOAAAA,EAAa;gBAC7B,GAAG5nC,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW;wBACTkD,QAAQ;4BACN/C,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;wBAEVlD,OAAO;4BACLC,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;oBACV;gBACF;YACF,CACD;YAED,OAAIgkC,YACK;gBAACA;YAAAA,IAGH,CAAA;QACT;QACAh8B,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAACyjC,SAAAA,EAAAA;uBAAe;wBACxBlB,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIgE,MAAMhE,EAAAA;wBACV66B,IAAI4M,UAAUjnC,IAAAA;oBAAAA,CACf,CAAC;iBACH;;SAAA;IAEL,CAAC,CAAC;CAAA,ECvESovC,0BAA0B;QACrCxkC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,IAAIA,MAAMsa,MAAAA,KAAW,OACnB,OAAO,CAAA;YAGT,MAAM/gB,YAAQ6C,+NAAAA,EAAc;gBAC1B,GAAG2H,QAAAA;gBACHxD,SAAS;oBACP,GAAGwD,SAASxD,OAAAA;oBACZlE,WAAW;wBACTkD,QAAQ;4BACN/C,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;wBAEVlD,OAAO;4BACLC,MAAMwD,MAAMhE,EAAAA;4BACZyD,QAAQ;wBAAA;oBACV;gBACF;YACF,CACD;YAED,OAAKlG,QASE;gBAACsyC,mBALc9D,+NAAAA,EAAiB;oBACrCxnC,SAASwD,SAASxD,OAAAA;oBAClBhH;gBAAAA,CACD;YAAA,IANQ,CAAA;QASX;QACAkO,SAAS;YACP,CAACmQ;oBAAG,EAACi0B,aAAAA,EAAAA;uBAAmB;wBACtBtJ,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAI;4BACFuD,QAAQssC;4BACRtvC,OAAOsvC;wBAAAA;oBACT,CACD,CAAC;iBACH;;SAAA;IAEL,CAAC;QACDzkC,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAI;4BACFuD,QAAQ;gCACN/C,MAAMwD,MAAMhE,EAAAA;gCACZyD,QAAQ;4BAAA;4BAEVlD,OAAO;gCACLC,MAAMwD,MAAMhE,EAAAA;gCACZyD,QAAQ;4BAAA;wBACV;oBACF,CACD,CAAC;iBACH;;SAAA;IAEL,CAAC;QACD2H,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA,KAAc;YACrB,MAAM80B,oBAAgB6S,0OAAAA,EAAiB3nC,QAAQ;YAE/C,OAAK80B,gBAIE;gBAACA;YAAAA,IAHC,CAAA;QAIX;QACApxB,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAAC64B,aAAAA,EAAAA;uBAAmB;oBAC5B0J,qLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAI68B,cAAcr8B,IAAAA;wBAClB8d,QAAQta,MAAMsa,MAAAA;oBAAAA,CACf,CAAC;iBACH;;SAAA;IAEL,CAAC;QACDlT,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA,KAAc;YACrB,MAAM0/B,gBAAYkI,sOAAAA,EAAa5nC,QAAQ;YAEvC,OAAK0/B,YAIE;gBAACA;YAAAA,IAHC,CAAA;QAIX;QACAh8B,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAACyjC,SAAAA,EAAAA;uBAAe;oBACxBlB,qLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIynC,UAAUjnC,IAAAA;wBACd8d,QAAQta,MAAMsa,MAAAA;oBAAAA,CACf,CAAC;iBACH;;SAAA;IAEL,CAAC,CAAC;CAAA,EC/GSwxB,6BAA6B;QACxC1kC,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNic,UAAU;wBACV3I,aAAahb,MAAMgb,WAAAA;oBAAAA,CACpB;wBACDunB,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNic,UAAU;wBACV3I,aAAahb,MAAMgb,WAAAA;oBAAAA,CACpB;wBACDunB,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNic,UAAU;wBACV3I,aAAahb,MAAMgb,WAAAA;oBAAAA,CACpB;wBACDunB,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNic,UAAU;wBACV3I,aAAahb,MAAMgb,WAAAA;oBAAAA,CACpB,CAAC;iBACH;;SAAA;IAEL,CAAC;QACD5T,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA,KAAW;YAC5B,MAAM8jB,YAAY/f,SAASxD,OAAAA,CAAQuM,UAAAA,CAAWrJ,IAAAA,CAC3CqgB,CAAAA,aAAcA,WAAUH,QAAAA,KAAa3jB,MAAM2jB,QAC9C;YAEA,OAAKG,YAIEA,UAAUF,SAAAA,CAAU;gBACzB7f;gBACA/D,OAAO;oBACL0H,MAAM;oBACNsT,aAAahb,MAAMgb,WAAAA,CAAYtT,IAAAA;gBAAAA;YACjC,CACD,IATQ,CAAA;QAUX;QACAD,SAAS;YACP,QAAUskC;oBAAT,EAAC/rC,KAAAA,EAAAA;uBAA2B;wBAC3BuiC,iLAAAA,EAAM;wBACJ,GAAGwJ,cAAAA;wBACH/wB,aAAahb,MAAMgb,WAAAA;oBAAAA,CACpB,CAAC;iBACH;;SAAA;IAEL,CAAC;IACD5T,8LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;oBACX;wBACE0H,MAAM;wBACNC,QAAQA,MAAM;4BACZ3H,MAAMgb,WAAAA,CAAYA,WAAAA,CAAYC,YAAAA,CAAa+wB,OAAAA,CACzChsC,MAAM2jB,QAAAA,EACN3jB,MAAMkkB,IACR;wBACF;oBAAA,CACD;iBACF;;SAAA;IAEL,CAAC;QACD9c,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;oBACX;wBACE0H,MAAM;wBACNC,QAAQA,MAAM;4BACZ5E,QAAQC,IAAAA,CACN,2BAAoBhD,MAAM2jB,QAAQ,EAAA,yBAAoC,OAAZ3jB,MAAM+jB,MAAM,EAAA,EACxE;wBACF;oBAAA,CACD;iBACF;;SAAA;IAEL,CAAC,CAAC;CAAA,ECjFSkoB,yBAAyB;IAAA;;GAAA,OAIpC7kC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA;uBACPqC,sOAAAA,EAA+BrC,QAAQ,SACvCqC,8OAAAA,EAA+BrC,QAAQ;;QACzC0D,SAAS,CAAA,CAAA;IAAA,CACV;IAAA;;GAAA,OAKDL,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA;uBACPqC,sOAAAA,EAA+BrC,QAAQ,SACvCqC,6OAAAA,EAA8BrC,QAAQ;;QACxC0D,SAAS,CAAA,CAAA;IAAA,CACV;QAEDL,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA,KAAc;YACrB,MAAM1H,YAAY0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAEnC,IAAI,CAACA,iBAAauE,mOAAAA,EAA2BvE,SAAS,GACpD,OAAO,CAAA;YAGT,MAAMmK,0BAAsBJ,gPAAAA,EAAiCrC,QAAQ,GAC/D0C,wBAAoBL,8OAAAA,EAA+BrC,QAAQ;YAEjE,OAAI,CAACyC,uBAAuB,CAACC,oBACpB,CAAA,IAIP,CAAC7J,+KAAAA,EAAYmH,SAASxD,OAAAA,EAASiG,oBAAoBlK,IAAI,SACvDM,2KAAAA,EAAYmH,SAASxD,OAAAA,EAASkG,kBAAkBnK,IAAI,IAE7C;gBAACD;YAAAA,IAGH,CAAA;QACT;QACAoL,SAAS;YAAC,CAACmQ;oBAAG,EAACvb,SAAAA,EAAAA;uBAAe;oBAACkmC,qLAAAA,EAAM;wBAAC76B,MAAM;wBAAU1L,IAAIK;oBAAAA,CAAU,CAAC;iBAAC;;SAAA;IAAA,CACvE;QAED+K,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA,KAAc;YACrB,MAAM1H,YAAY0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAEnC,IAAI,CAACA,iBAAauE,mOAAAA,EAA2BvE,SAAS,GACpD,OAAO,CAAA;YAGT,MAAMmK,0BAAsBJ,gPAAAA,EAAiCrC,QAAQ,GAC/D0C,wBAAoBL,8OAAAA,EAA+BrC,QAAQ;YAMjE,IAJI,CAACyC,uBAAuB,CAACC,qBAIzBD,oBAAoBlK,IAAAA,CAAKtD,IAAAA,KAASyN,kBAAkBnK,IAAAA,CAAKtD,IAAAA,EAC3D,OAAO,CAAA;YAGT,MAAMkzC,iBAAatrC,wNAAAA,EAA6BvE,SAAS,GACnDisC,yBAAqB1nC,+NAAAA,EAAuB;gBAChDL,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOiN;YAAAA,CACR,GACK2lC,eAAWvrC,sNAAAA,EAA2BvE,SAAS,GAC/Cu5B,qBAAqBh1B,wNAAAA,EAAyB;gBAClDL,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOkN;YAAAA,CACR,GAIK2lC,sBAFgBhmC,kOAAAA,EAA2BrC,QAAQ,EAEnBmK,MAAAA,CACnC3U,CAAAA,QACCA,MAAMP,IAAAA,KAASwN,oBAAoBlK,IAAAA,CAAKtD,IAAAA,IACxCO,MAAMP,IAAAA,KAASyN,kBAAkBnK,IAAAA,CAAKtD,IAC1C;YAEA,OAAO;gBACLkzC;gBACA5D;gBACA6D;gBACAvW;gBACAwW;YAAAA;QAEJ;QACA3kC,SAAS;YACP,CACEmQ;oBACA,EACEs0B,UAAAA,EACA5D,kBAAAA,EACA6D,QAAAA,EACAvW,kBAAAA,EACAwW,eAAAA,EAAAA;uBAEC;wBACH7J,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAI;4BAACuD,QAAQ2sC;4BAAY3vC,OAAO+rC;wBAAAA;oBAAkB,CACnD,GACD;uBAAG8D,gBAAgB9yC,GAAAA,CAAKC,CAAAA,YACtBgpC,iLAAAA,EAAM;4BAAC76B,MAAM;4BAAgB1L,IAAI;gCAAC;oCAAChD,MAAMO,MAAMP,IAAAA;gCAAAA,CAAK;6BAAA;wBAAA,CAAE,CACxD;wBACAupC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAI;4BAACuD,QAAQq2B;4BAAoBr5B,OAAO4vC;wBAAAA;oBAAQ,CACjD,CAAC;iBACH;;SAAA;IAAA,CAEJ;QAED/kC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA,KAAc;YACrB,MAAM1H,YAAY0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAEnC,OAAI,CAACA,iBAAauE,mOAAAA,EAA2BvE,SAAS,IAC7C,CAAA,IAGF;gBAACA;YAAAA;QACV;QACAoL,SAAS;YACP,CAACmQ;oBAAG,EAACvb,SAAAA,EAAAA;uBAAe;wBAClBkmC,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAU1L,IAAIK;oBAAAA,CAAU;wBACrCkmC,iLAAAA,EAAM;wBAAC76B,MAAM;oBAAA,CAAQ,CAAC;iBACvB;;SAAA;IAAA,CAEJ;QAEDN,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA,KAAc;YACrB,MAAM1H,YAAY0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAEnC,IAAI,CAACA,aAAa,KAACuE,mOAAAA,EAA2BvE,SAAS,GACrD,OAAO,CAAA;YAGT,MAAMU,0BAAsB6D,wNAAAA,EAA6BvE,SAAS,GAE5D0nC,qBAAiB39B,mOAAAA,EAA4BrC,QAAQ;YAE3D,IAAI,CAACggC,gBACH,OAAO,CAAA;YAGT,MAAM8H,oBAAgBjrC,+NAAAA,EAAuB;gBAC3CL,SAASwD,SAASxD,OAAAA;gBAClBhH,OAAOwqC;YAAAA,CACR,GAEKsI,wBAAwB;gBAC5B9sC,QAAQxC;gBACRR,OAAOsvC;YAAAA,GAGHS,eAAehoB,gNAAAA,EAAW;gBAC9B/qB,WAAOivC,uNAAAA,EAAe;oBACpBjoC,SAAS;wBACP,GAAGwD,SAASxD,OAAAA;wBACZlE,WAAWgwC;oBAAAA;oBAEb9yC,OAAOwqC,eAAeznC,IAAAA;gBAAAA,CACvB;gBACDiE,SAASwD,SAASxD,OAAAA;gBAClB8b,SAAS;oBACPC,gBAAgB,CAAA;gBAAA;YAClB,CACD;YAED,OAAKgwB,eAIE;gBACLA;gBACAD;YAAAA,IALO,CAAA;QAOX;QACA5kC,SAAS;YACP,CAACmQ;oBAAG,EAAC00B,YAAAA,EAAcD,qBAAAA,EAAAA;2BACjBzrC,mOAAAA,EAA2ByrC,qBAAqB,IAC5C;wBACE9J,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNnO,OAAO+yC;wBACP/vB,WAAW;wBACXjC,QAAQ;oBAAA,CACT,CAAC;iBAAA,GAEJ;wBACEioB,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAU1L,IAAIqwC;oBAAAA,CAAsB;wBACjD9J,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNnO,OAAO+yC;wBACP/vB,WAAW;wBACXjC,QAAQ;oBAAA,CACT,CAAC;iBACH;;SAAA;IAAA,CAEV;CAAC,EC1NSiyB,yBAAyB;QACpCnlC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA;mBAGA;gBAACunC,wBAFmBC,+OAAAA,EAAsBxnC,QAAQ;YAAA;;QAI3D0D,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAACsrC,kBAAAA,EAAAA;uBACTA,mBAAmBhyC,GAAAA,CAAKC,CAAAA,YACtBgpC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIzC,MAAMiD,IAAAA;wBACV9E,OAAO;4BACLmC,OAAOmG,MAAMnG,KAAAA;wBAAAA;oBACf,CACD,CACH,CAAC;;SAAA;IAEP,CAAC;QACDuN,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA;mBAGA;gBAACunC,wBAFmBC,+OAAAA,EAAsBxnC,QAAQ;YAAA;;QAI3D0D,SAAS;YACP,CAACmQ;oBAAG,EAAC0zB,kBAAAA,EAAAA;uBACHA,mBAAmBhyC,GAAAA,CAAKC,CAAAA,YACtBgpC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIzC,MAAMiD,IAAAA;wBACV9E,OAAO;4BAAC,OAAO;yBAAA;oBAAA,CAChB,CACH,CAAC;;SAAA;IAEP,CAAC;QACD0P,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;uBAAWwsC,uOAAAA,EAAcxsC,MAAMnG,KAAK,EAAEkK,QAAQ;;QACjE0D,SAAS;YAAC;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBAACuiC,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAgB7N,OAAOmG,MAAMnG,KAAAA;oBAAAA,CAAM,CAAC;iBAAC;;SAAA;IAC5E,CAAC;QACDuN,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAU/D,KAAAA,EAAAA;mBAAW,KAACwsC,uOAAAA,EAAcxsC,MAAMnG,KAAK,EAAEkK,QAAQ;;QAClE0D,SAAS;YAAC;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBAACuiC,iLAAAA,EAAM;wBAAC76B,MAAM;wBAAa7N,OAAOmG,MAAMnG,KAAAA;oBAAAA,CAAM,CAAC;iBAAC;;SAAA;IACzE,CAAC,CAAC;CAAA,ECpCS4yC,oBAAoB;QAC/BrlC,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA,KAAc;YACrB,MAAM8kB,gBAAYziB,8NAAAA,EAAuBrC,QAAQ,GAC3CigC,yBAAqB59B,sOAAAA,EAA+BrC,QAAQ;YAElE,OAAO8kB,aAAamb;QACtB;QACAv8B,SAAS,CAAA,CAAA;IACX,CAAC;QACDL,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;oBACXuiC,qLAAAA,EAAM;wBACJ76B,MAAM;wBACNsT,aAAahb;oBAAAA,CACd,CAAC;iBACH;;SAAA;IAEL,CAAC;QACDoH,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA,KAAc;YACrB,MAAM8kB,gBAAYziB,8NAAAA,EAAuBrC,QAAQ,GAC3CigC,yBAAqB59B,sOAAAA,EAA+BrC,QAAQ;YAElE,OAAO8kB,aAAamb;QACtB;QACAv8B,SAAS,CAAA,CAAA;IACX,CAAC;QACDL,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA;mBACAA,SAASxD,OAAAA,CAAQlE,SAAAA,GACpB;gBACEA,WAAW0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAAAA,IAE9B,CAAA;;QAENoL,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAAC3D,SAAAA,EAAAA;uBAAe;wBACxBkmC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNsT,aAAahb;oBAAAA,CACd;oBACDuiC,qLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIK;oBAAAA,CACL,CAAC;iBACH;;SAAA;IAEL,CAAC;QACD+K,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNsT,aAAahb;oBAAAA,CACd,CAAC;iBACH;;SAAA;IAEL,CAAC;QAEDoH,0LAAAA,EAAe;QACbnP,IAAI;QACJoP,OAAOA;gBAAC,EAACtD,QAAAA,EAAAA;mBACAA,SAASxD,OAAAA,CAAQlE,SAAAA,QACtB+J,qOAAAA,EAA8BrC,QAAQ,IACpC;gBAAC1H,WAAW0H,SAASxD,OAAAA,CAAQlE,SAAAA;YAAAA,IAC7B,CAAA;;QAENoL,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA,UAAQ,EAAC3D,SAAAA,EAAAA;uBAAe;oBACxBkmC,qLAAAA,EAAM;wBACJ76B,MAAM;wBACN1L,IAAIK;oBAAAA,CACL;wBACDkmC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNsT,aAAahb;oBAAAA,CACd,CAAC;iBACH;;SAAA;IAEL,CAAC;QACDoH,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNsT,aAAahb;oBAAAA,CACd,CAAC;iBACH;;SAAA;IAEL,CAAC;QACDoH,0LAAAA,EAAe;QACbnP,IAAI;QACJwP,SAAS;YACP;oBAAC,EAACzH,KAAAA,EAAAA;uBAAW;wBACXuiC,iLAAAA,EAAM;wBACJ76B,MAAM;wBACNsT,aAAahb;oBAAAA,CACd,CAAC;iBACH;;SAAA;IAEL,CAAC,GACD;OAAG0pC,6BACH;OAAGI,4BACH;OAAGG,yBACH;OAAGE,8BACH;OAAGQ,yBACH;OAAGS,2BACH;OAAGC,2BACH;OAAGI,uBACH;OAAGc,wBACH;OAAGX,yBACH;OAAGE,4BACH;OAAGG,sBAAsB;CAAA;ACqDpB,SAASS,yBACd1sC,KAAAA,EAKA;IACA,OACE,CAAC2sC,sBAAsB3sC,KAAK,KAC5B,CAAC4sC,sBAAsB5sC,KAAK,KAC5B,CAAC6sC,wBAAwB7sC,KAAK;AAElC;AAMA,MAAM8sC,6BAA6B;IACjC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,cAAc;CAAA;AA+MT,SAASD,wBACd7sC,KAAAA,EACgC;IAChC,OAAQ8sC,2BAAiD1+B,QAAAA,CAASpO,MAAM0H,IAAI;AAC9E;AAMA,MAAMqlC,2BAA2B;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,aAAa;CAAA;AAOR,SAASH,sBACd5sC,KAAAA,EAC8B;IAC9B,OAAQ+sC,yBAA+C3+B,QAAAA,CAASpO,MAAM0H,IAAI;AAC5E;AAuJO,SAASilC,sBACd3sC,KAAAA,EAC8B;IAC9B,OAAOA,MAAM0H,IAAAA,CAAKslC,UAAAA,CAAW,SAAS;AACxC;ACzmBA,MAAM10C,UAAQC,cAAc,iBAAiB;AAE7C,SAAS00C,cAAcjtC,KAAAA,EAAsB;IAC3C,OAAO4sC,sBAAsB5sC,KAAK,IAC9B,WACA6sC,wBAAwB7sC,KAAK,IAC3B,cACA2sC,sBAAsB3sC,KAAK,IACzB,WACA;AACV;AAEO,SAASktC,kBA4BhB,EAAG;QA5B0B,EAC3BzuC,IAAAA,EACA0uC,SAAAA,EACAC,uBAAAA,EACAptC,KAAAA,EACAnI,MAAAA,EACAkV,YAAAA,EACA5O,MAAAA,EACA8B,WAAAA,EACAiU,WAAAA,EACAY,QAAAA,EAkBF;IACMrW,SAAS,UAAU,CAACmuC,sBAAsB5sC,KAAK,KACjDsrB,eAAezzB,MAAM,GAGvBS,QAAM,IAAY20C,OAARxuC,IAAI,EAAA,KAAwB,qBAANuB,KAAK,CAAC,EAAA,MAAKka,KAAKC,SAAAA,CAAUna,OAAO,MAAM,CAAC,CAAC;IAEzE,MAAMqtC,iBAAiB,CACrB;WAAGD,yBACH;WAAGX,iBAAiB;KAAA,CACpBv+B,MAAAA,CAAQ/G,CAAAA,aAAa;QAErB,IAAIA,SAASlP,EAAAA,KAAO,KAClB,OAAO,CAAA;QAGT,MAAM,CAACq1C,iBAAiB,CAAA,GACtBnmC,SAASlP,EAAAA,CAAGmW,QAAAA,CAAS,GAAG,KAAKjH,SAASlP,EAAAA,CAAGmW,QAAAA,CAAS,GAAG,IACjDjH,SAASlP,EAAAA,CAAGua,KAAAA,CAAM,GAAG,IACrB;YAAClX,KAAAA,CAAS;SAAA,EACV,CAACiyC,cAAc,CAAA,GAAIvtC,MAAM0H,IAAAA,CAAK0G,QAAAA,CAAS,GAAG,IAC5CpO,MAAM0H,IAAAA,CAAK8K,KAAAA,CAAM,GAAG,IACpB;YAAClX,KAAAA,CAAS;SAAA;QAcd,OATEgyC,sBAAsBhyC,KAAAA,KACtBiyC,mBAAmBjyC,KAAAA,KACnBgyC,sBAAsBC,kBAQtBD,sBAAsBhyC,KAAAA,KACtBiyC,mBAAmBjyC,KAAAA,KACnBgyC,sBAAsBttC,MAAM0H,IAAAA,GAErB,CAAA,IAGFP,SAASlP,EAAAA,KAAO+H,MAAM0H,IAAAA;IAC/B,CAAC;IAED,IAAI2lC,eAAe9xC,MAAAA,KAAW,KAAKmxC,yBAAyB1sC,KAAK,GAAG;QAClEkU,wBAAAA,kCAAAA,YAAaC,cAAAA,IAET1V,SAAS,UACX8sB,cAAc1zB,MAAM,GAGtB2/B,gCAAgC3/B,QAAQ,MAAM;YAC5CS,QAAM,YAAgC,OAApB20C,cAAcjtC,KAAK,CAAC,EAAA,MAAKka,KAAKC,SAAAA,CAAUna,OAAO,MAAM,CAAC,CAAC,GAEzEq3B,iBAAiB;gBACf92B,SAAS;oBACPwM;oBACA5O;gBAAAA;gBAEFqW,WAAW;oBACT,GAAGxU,KAAAA;oBACHnI;gBAAAA;YACF,CACD;QACH,CAAC,GAEDA,OAAO4iB,QAAAA,CAAAA;QAEP;IACF;IAEA,MAAM+yB,gBAAgBvtC,YAAAA;IAEtB,IAAIwtC,uBAAuB,CAAA,GACvBC,6BAA6B,CAAA,GAC7BC,qBAAqB,CAAA;IAEzB,KAAA,MAAWC,iBAAiBP,eAAgB;QAC1CM;QAEA,IAAIE,YAAY,CAAA;QAEhB,IAAI;YACFA,YACED,cAAcvmC,KAAAA,KAAU/L,KAAAA,KACxBsyC,cAAcvmC,KAAAA,CAAM;gBAClBtD,UAAUypC;gBACVxtC;gBACA+kC,KAAKnD,gBAAgB9sB,UAAUjd,MAAM;YAAA,CACtC;QACL,EAAA,OAASwR,OAAO;YACdtG,QAAQsG,KAAAA,CACN,IAAIvO,MACF,yBAAuDuO,OAA9BrJ,MAAM0H,IAAI,EAAA,qBAAiC,CACtE,CACF,WAFiE4vB,OAAO;QAG1E;QAEA,IAAKuW,WAMLH;YAAAA,6BAA6B,CAAA;YAE7B,KAAA,MAAWI,aAAaF,cAAcnmC,OAAAA,CAAS;gBAC7C,MAAMsmC,kBAAkB9tC,YAAAA;gBAExB,IAAIwH,UAAiC,CAAA,CAAA;gBAErC,IAAI;oBACFA,UAAUqmC,UACR;wBACE/pC,UAAUgqC;wBACV/tC;wBACA+kC,KAAKnD,gBAAgB9sB,UAAUjd,MAAM;oBAAA,GAEvCg2C,SACF;gBACF,EAAA,OAASxkC,OAAO;oBACdtG,QAAQsG,KAAAA,CACN,IAAIvO,MACF,2BAAyDuO,OAA9BrJ,MAAM0H,IAAI,EAAA,qBAAiC,CACxE,CACF,WAFmE4vB,OAAO;gBAG5E;gBAEA,IAAI7vB,QAAQlM,MAAAA,KAAW,GACrB;gBAGFkyC,uBACEhmC,QAAQ/I,IAAAA,CACLsvC,CAAAA,SAAWA,OAAOtmC,IAAAA,KAAS,WAAWsmC,OAAOtmC,IAAAA,KAAS,SACzD,KAAK,CAACD,QAAQ/I,IAAAA,CAAMsvC,CAAAA,SAAWA,OAAOtmC,IAAAA,KAAS,SAAS;gBAE1D,IAAIumC,kBAAkB,CAAA;gBAElBxmC,QAAQ/I,IAAAA,CAAMsvC,CAAAA,SAAWA,OAAOtmC,IAAAA,KAAS,SAAS,KAAA,CAKpD4jB,eAAezzB,MAAM,GAErBo2C,kBAAkB,CAAA,CAAA;gBAGpB,KAAA,MAAWD,UAAUvmC,QAAS;oBAC5B,IAAIumC,OAAOtmC,IAAAA,KAAS,UAAU;wBAC5B,IAAI;4BACFsmC,OAAOrmC,MAAAA,CAAO;gCACZS,MAAM0M;4BAAAA,CACP;wBACH,EAAA,OAASzL,OAAO;4BACdtG,QAAQsG,KAAAA,CACN,IAAIvO,MACF,2CAAoCkF,MAAM0H,IAAI,EAAA,qBAAiC,CACjF,CACF,KAFsE2B,MAAMiuB,OAAO;wBAGrF;wBAEA;oBACF;oBAEA,IAAI0W,OAAOtmC,IAAAA,KAAS,WAAW;wBAC7B,MAAM0lC,2BAA0BC,eAAe5wC,KAAAA,CAC7CkxC,qBAAqB,CACvB;wBAEAT,aAAa;4BACXzuC,MAAMA,SAAS,YAAY,YAAY;4BACvC0uC;4BACAC,yBAAyBA;4BACzBptC,OAAOguC,OAAOhuC,KAAAA;4BACdnI;4BACAkV;4BACA5O;4BACA8B;4BACAiU;4BACAY;wBAAAA,CACD;wBAED;oBACF;oBAEA,IAAIk5B,OAAOtmC,IAAAA,KAAS,SAAS;wBAC3BwlC,aAAa;4BACXzuC,MAAMA,SAAS,YAAY,YAAY;4BACvC0uC;4BACAC,yBACE3uC,SAAS,YAAY2uC,0BAA0BD;4BACjDntC,OAAOguC,OAAOhuC,KAAAA;4BACdnI;4BACAkV;4BACA5O;4BACA8B;4BACAiU;4BACAY;wBAAAA,CACD;wBAED;oBACF;oBAEAo4B,aAAa;wBACXzuC,MAAM;wBACN0uC;wBACAC,yBAAyB,CAAA,CAAA;wBACzBptC,OAAOguC,OAAOhuC,KAAAA;wBACdnI;wBACAkV;wBACA5O;wBACA8B;wBACAiU,aAAa5Y,KAAAA;wBACbwZ;oBAAAA,CACD;gBACH;gBAEIm5B,mBACF1iB,cAAc1zB,MAAM;YAExB;YAEA;QAAA;IACF;IAEI,CAAC61C,8BAA8BhB,yBAAyB1sC,KAAK,IAAA,2DAC/DkU,YAAaC,cAAAA,CAAAA,GAET1V,SAAS,UACX8sB,cAAc1zB,MAAM,GAGtB2/B,gCAAgC3/B,QAAQ,MAAM;QAC5CS,QAAM,YAAgC,OAApB20C,cAAcjtC,KAAK,CAAC,EAAA,MAAKka,KAAKC,SAAAA,CAAUna,OAAO,MAAM,CAAC,CAAC,GAEzEq3B,iBAAiB;YACf92B,SAAS;gBAACwM;gBAAc5O;YAAAA;YACxBqW,WAAW;gBACT,GAAGxU,KAAAA;gBACHnI;YAAAA;QACF,CACD;IACH,CAAC,GAEDA,OAAO4iB,QAAAA,EAAAA,IACEgzB,mFACTv5B,YAAaC,cAAAA,CAAAA;AAEjB;ACvTO,SAAS+5B,eAId3f,KAAAA,EAA2B;IAC3B,IAAIA,MAAMhzB,MAAAA,KAAW,GACnB,OAAO,CAAA,CAAA;IAIT,MAAM4yC,oBAAoB5f,MAAMrgB,MAAAA,CAC7Buf,CAAAA,OACCA,KAAK7lB,QAAAA,KAAatM,KAAAA,CACtB,GACM8yC,uBAAuB7f,MAAMrgB,MAAAA,CAChCuf,CAAAA,OAASA,KAAK7lB,QAAAA,KAAatM,KAAAA,CAC9B;IAEA,IAAI6yC,kBAAkB5yC,MAAAA,KAAW,GAC/B,OAAOgzB;IAIT,MAAM8f,oBAAoB,IAAIroB,IAC5BmoB,kBAAkB70C,GAAAA,CAAKm0B,CAAAA,OAAS;YAACA,KAAK7lB,QAAAA,CAAShB,EAAAA;YAAI6mB,IAAI;SAAC,CAC1D,GAGM6gB,QAAQ,aAAA,GAAA,IAAItoB,OACZuoB,WAAAA,aAAAA,GAAAA,IAAevoB,IAAAA;IAGrB,SAASwoB,WAAW5nC,EAAAA,EAAY;QACzB0nC,MAAM9lB,GAAAA,CAAI5hB,EAAE,KAAA,CACf0nC,MAAMloB,GAAAA,CAAIxf,IAAI,aAAA,GAAA,IAAIwc,IAAAA,CAAK,GACvBmrB,SAASnoB,GAAAA,CAAIxf,IAAI,CAAC,CAAA;IAEtB;IAGA,KAAA,MAAW6mB,QAAQ0gB,kBAAmB;QACpC,MAAMvnC,KAAK6mB,KAAK7lB,QAAAA,CAAShB,EAAAA;QACzB4nC,WAAW5nC,EAAE;IACf;IAGA,SAAS6nC,QAAQC,MAAAA,EAAgBC,IAAAA,EAAc;;;QACzC,CAACL,MAAM9lB,GAAAA,CAAIkmB,MAAM,KAAK,CAACJ,MAAM9lB,GAAAA,CAAImmB,IAAI,KAAA,eACzCL,MAAM/pC,GAAAA,CAAImqC,MAAM,2DAAGj+B,GAAAA,CAAIk+B,IAAI,GAC3BJ,SAASnoB,GAAAA,CAAIuoB,MAAAA,kBAAOJ,SAAShqC,GAAAA,CAAIoqC,IAAI,0DAAK,CAAA,IAAK,CAAC,CAAA;IAClD;IAGA,KAAA,MAAWlhB,QAAQ0gB,kBAAmB;QACpC,MAAMvnC,KAAK6mB,KAAK7lB,QAAAA,CAAShB,EAAAA,EACnBgoC,UAAAA,aAAAA,GAAAA,IAAcxrB,IAAAA;QACpB,IAAIF,MAAMuK,KAAK7lB,QAAAA,CAASd,SAAAA;QAExB,MAAOoc,KAAK;YACV,MAAM2rB,QAAQ3rB,IAAItb,QAAAA,CAAShB,EAAAA;YAI3B,IAHA4nC,WAAWK,KAAK,GAGZD,QAAQpmB,GAAAA,CAAIqmB,KAAK,GACnB,MAAM,IAAI/zC,MAAM,4CAA4C;YAE9D8zC,QAAQn+B,GAAAA,CAAIo+B,KAAK,GAEb3rB,IAAIrb,UAAAA,KAAe,WAErB4mC,QAAQ7nC,IAAIioC,KAAK,IAGjBJ,QAAQI,OAAOjoC,EAAE,GAGnBsc,MAAMA,IAAItb,QAAAA,CAASd,SAAAA;QACrB;IACF;IAEA,MAAMgoC,QAAkB,CAAA,CAAA;IAGxB,KAAA,MAAW,CAACloC,IAAImoC,MAAM,CAAA,IAAKR,SACrBQ,WAAW,KACbD,MAAMlvC,IAAAA,CAAKgH,EAAE;IAIjB,MAAMmV,SAAc,CAAA,CAAA;IAGpB,MAAO+yB,MAAMvzC,MAAAA,GAAS,GAAG;QACvB,MAAMyzC,YAAYF,MAAMv+B,KAAAA,CAAAA,GAClB0+B,cAAcZ,kBAAkB9pC,GAAAA,CAAIyqC,SAAS;QAC/CC,eACFlzB,OAAOnc,IAAAA,CAAKqvC,WAAW;;QAIzB,KAAA,MAAWC,kCAAoB3qC,GAAAA,CAAIyqC,SAAS,uCAAnBV,aAAwB,CAAA,CAAA,CAAI;gBAChCC;YAAnB,MAAMY,YAAAA,2BAAsB5qC,GAAAA,CAAI2qC,UAAU,0DAAK,CAAA,IAAK;YACpDX,SAASnoB,GAAAA,CAAI8oB,YAAYC,SAAS,GAC9BA,cAAc,KAChBL,MAAMlvC,IAAAA,CAAKsvC,UAAU;QAEzB;IACF;IAGA,KAAA,MAAWzhB,QAAQ0gB,kBACZpyB,OAAO3N,QAAAA,CAASqf,IAAI,KACvB1R,OAAOnc,IAAAA,CAAK6tB,IAAI;IAKpB,OAAO,CAAC;WAAG1R,QAAQ;WAAGqyB,oBAAoB;KAAA;AAC5C;ACzFO,SAASgB,0BAYhB,EAAG;UAXDtiC,UAAAA,EACAjV,MAAAA,EACAkV,YAAAA,EACAvD,QAAAA,EACArL,MAAAA,EAOF,GAZqC;IAanC,MAAM9B,YAAYxE,OAAOwE,SAAAA,GACrB+C,sBAAsB;QACpBjB;QACAtG;QACAwH,OAAOxH,OAAOwE,SAAAA;IAAAA,CACf,IACD,MAEEkE,UAAU;QACduM;QACAC;QACAvD;QACArL;QACA9B;QACAtD,OAAOlB,OAAOkB,KAAAA;IAAAA;IAGhB,OAAO;QACLuL,eAAezM,OAAOyM,aAAAA;QACtB/D;QACAyM,gBAAgBnV,OAAOmV,cAAAA;IAAAA;AAE3B;AC3BA,MAAM1U,UAAQC,cAAc,gBAAgB;AAoGrC,SAAS82C,kCAMhB,EAAwB;UALtBrvC,KAAAA,EACAD,WAAAA,EAIF,GAN6C;IAO3C,OAAQC,MAAM0H,IAAAA,EAAAA;QACZ,KAAK;YACH,OAAO;gBACLA,MAAM;gBACN7P,QAAQkI;YAAAA;QAGZ,KAAK;YACH,OAAO;gBACL2H,MAAM;gBACN7P,QAAQkI;YAAAA;QAGZ,KAAK;;YACH,OAAO;gBACL2H,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACNnO,OAAO;wBACLC,OAAOwG,MAAMnB,WAAAA,CAAYrG,IAAAA;wBACzB,qCAAUqG,WAAAA,CAAY9F,KAAAA,cAAlBiH,iEAA2B,CAAA,CAAA;oBAAC;oBAElCuc,WAAWvc,MAAMuc,SAAAA;gBAAAA;gBAEnB1kB,QAAQkI;YAAAA;QAGZ;YACE,OAAO;gBACL2H,MAAM;gBACN2M,eAAerU;gBACfnI,QAAQkI;YAAAA;IACV;AAEN;AAKO,MAAMuvC,oBAAgBnvC,0LAAAA,EAAM;IACjCgV,OAAO;QACL5U,SAAS,CAAA;QAmBT6U,QAAQ,CAAA;QACRm6B,SAAS,CAAA;QACT16B,OAAO,CAAA;QASP26B,MAAM,CAAA;IAAC;IAET/nC,SAAS;QACP,+BAA2B4N,sNAAAA,EAAO;YAChC83B,WAAWA;oBAAC,EAAC5sC,OAAAA,EAASP,KAAAA,EAAAA;2BACpByvC,gMAAAA,EAAYzvC,OAAO,cAAc,GAE1B,aAAA,GAAA,IAAIojB,IAAI,CAAC;uBAAG7iB,QAAQ4sC,SAAAA;oBAAWntC,MAAMmI,cAAc;iBAAC;;YAE7DunC,iBAAiB,CAAA;QAAA,CAClB;QACD,oCAAgCr6B,sNAAAA,EAAO;YACrC83B,WAAWA;oBAAC,EAAC5sC,OAAAA,EAASP,KAAAA,EAAAA;2BACpByvC,gMAAAA,EAAYzvC,OAAO,iBAAiB,GAEpCO,QAAQ4sC,SAAAA,CAAU5mB,MAAAA,CAAOvmB,MAAMmI,cAAc,GAEtC,aAAA,GAAA,IAAIib,IAAI,CAAC;uBAAG7iB,QAAQ4sC,SAAS;iBAAC;;QAAA,CAExC;QACD,wBAAoBwC,+MAAAA,EAAK;gBAAC,EAAC3vC,KAAAA,EAAAA;uBACzByvC,gMAAAA,EAAYzvC,OAAO,gBAAgB,GAC5BA,MACR;;QACD,2BAAuB2vC,+MAAAA,EAAK;gBAAC,EAAC3vC,KAAAA,EAAAA;mBAC5ByvC,oMAAAA,EAAYzvC,OAAO,UAAU,GACtBA,MACR;;QACD,sBAAkB2vC,+MAAAA,EAAK;YAACjoC,MAAM;QAAA,CAAY;QAC1C,qBAAiBioC,+MAAAA,EAAK;YAACjoC,MAAM;QAAA,CAAW;QACxC,mBAAe2N,sNAAAA,EAAO;YACpBu6B,eAAeA;oBAAC,EAACrvC,OAAAA,EAASP,KAAAA,EAAAA;2BACxByvC,gMAAAA,EAAYzvC,OAAO;oBAAC;oBAAkB,UAAU;iBAAC,GAC1C,CAAC;uBAAGO,QAAQqvC,aAAAA;oBAAe5vC,KAAK;iBAAA;;QAAA,CAE1C;QACD,2BAAuB6vC,mOAAAA,EAAe;gBAAC,EAACtvC,OAAAA,EAASuvC,OAAAA,EAAAA,KAAa;YAC5D,KAAA,MAAW9vC,SAASO,QAAQqvC,aAAAA,CAC1BE,QAAQH,IAAAA,CAAK3vC,KAAK;QAEtB,CAAC;QACD,kBAAc2vC,+MAAAA,EAAK;YAACjoC,MAAM;QAAA,CAAQ;QAClC,4BAAwB2N,sNAAAA,EAAO;YAC7Bu6B,eAAe,CAAA,CAAA;QAAA,CAChB;QACD,8BAA0Bv6B,sNAAAA,EAAO;YAC/B06B,8BAA8BA;oBAAC,EAACxvC,OAAAA,EAASP,KAAAA,EAAAA;uBAChCA,MAAM0H,IAAAA,KAAS,YAClB,CAAC;uBAAGnH,QAAQwvC,4BAAAA;oBAA8B/vC,KAAK;iBAAA,GAC/CO,QAAQwvC,4BAAAA;;QAAAA,CAEf;QACD,qCAAiCF,mOAAAA,EAAe;gBAAC,EAACtvC,OAAAA,EAASuvC,OAAAA,EAAAA,KAAa;YACtE,KAAA,MAAW9vC,SAASO,QAAQwvC,4BAAAA,CAC1BD,QAAQH,IAAAA,CAAK3vC,KAAK;QAEtB,CAAC;QACD,sCAAkCqV,sNAAAA,EAAO;YACvC06B,8BAA8B,CAAA,CAAA;QAAA,CAC/B;QACD,eAAeC;gBAAC,EAAChwC,KAAAA,EAAAA,KAAW;YAC1ByvC,IAAAA,gMAAAA,EAAYzvC,OAAO,MAAM;YAEzB,IAAI;gBACF4e,uLAAAA,CAAYqxB,IAAAA,CAAKjwC,MAAMnI,MAAM;YAC/B,EAAA,OAASwR,OAAO;gBACdtG,QAAQsG,KAAAA,CAAM,IAAIvO,MAAM,0BAAuC,CAAE,CAAC,KAAhBuO,MAAMiuB,OAAO;YACjE;QACF;QACA,gBAAgB4Y;gBAAC,EAAC3vC,OAAAA,EAAAA,KAAa;YAC7B,IAAI,CAACA,QAAQR,WAAAA,EAAa;gBACxBgD,QAAQsG,KAAAA,CAAM,gCAAgC;gBAC9C;YACF;YAEA,IAAI;gBACF,MAAM4rB,mBAAmB10B,QAAQR,WAAAA,CAAY1D,SAAAA;gBAC7CuiB,uLAAAA,CAAYriB,KAAAA,CAAMgE,QAAQR,WAAW,GACjCk1B,oBACF5a,6JAAAA,CAAWC,MAAAA,CAAO/Z,QAAQR,WAAAA,EAAak1B,gBAAgB;YAE3D,EAAA,OAAS5rB,OAAO;gBACdtG,QAAQsG,KAAAA,CAAM,IAAIvO,MAAM,2BAAwC,CAAE,CAAC,KAAhBuO,MAAMiuB,OAAO;YAClE;QACF;QACA,yBAAyB6Y;gBAAC,EAAC5vC,OAAAA,EAASP,KAAAA,EAAOowC,IAAAA,EAAAA,KAAU;YACnDX,IAAAA,gMAAAA,EAAYzvC,OAAO;gBAAC,gBAAgB;aAAC;YAErC,IAAI;gBACF,MAAMmtC,YAAY,CAAC;uBAAG5sC,QAAQ4sC,SAAAA,CAAUpqB,MAAAA,EAAQ;iBAAA,CAAEzpB,GAAAA,CAC/CqN,CAAAA,SAAWA,OAAOQ,QACrB;gBAEA+lC,aAAa;oBACXzuC,MAAM;oBACN0uC;oBACAC,yBAAyBD;oBACzBntC,OAAOA,MAAMqU,aAAAA;oBACbxc,QAAQmI,MAAMnI,MAAAA;oBACdkV,cAAcxM,QAAQwM,YAAAA;oBACtB5O,QAAQoC,QAAQpC,MAAAA;oBAChB8B,aAAaA,IACXmvC,qBAAqB;4BACnBtiC,YAAY,CAAC;mCAAGvM,QAAQuM,UAAU;6BAAA;4BAClCjV,QAAQmI,MAAMnI,MAAAA;4BACdkV,cAAcxM,QAAQwM,YAAAA;4BACtBvD,UAAU4mC,KAAKnwC,WAAAA,CAAAA,EAAcC,OAAAA,CAAQ;gCAAC,aAAa;4BAAA,CAAY;4BAC/D/B,QAAQoC,QAAQpC,MAAAA;wBAAAA,CACjB;oBACH+V,aAAalU,MAAMkU,WAAAA;oBACnBY,UAAWu7B,CAAAA,kBAAkB;wBAC3B,IAAIA,cAAc3oC,IAAAA,KAAS,kBAAkB;4BAC3C0oC,KAAKhoC,IAAAA,CAAKioC,aAAa;4BACvB;wBACF;wBAEAD,KAAKhoC,IAAAA,CACHinC,6BAA6B;4BAC3BrvC,OAAOqwC;4BACPtwC,aAAaC,MAAMnI,MAAAA;wBAAAA,CACpB,CACH;oBACF;gBAAA,CACD;YACH,EAAA,OAASwR,OAAO;gBACdtG,QAAQsG,KAAAA,CACN,IAAIvO,MACF,YAAwDuO,OAA5CrJ,MAAMqU,aAAAA,CAAc3M,IAAI,EAAA,qBAAiC,CACvE,CACF,WAFkE4vB,OAAO;YAG3E;QACF;QACA,sBAAkBjiB,sNAAAA,EAAO;YACvB83B,WAAWA;oBAAC,EAAC5sC,OAAAA,EAAAA;uBACVA,QAAQmvC,eAAAA,GAELnvC,QAAQ4sC,SAAAA,GADR,IAAI/pB,IAAI8qB,eAAe,CAAC;uBAAG3tC,QAAQ4sC,SAAAA,CAAUpqB,MAAAA,CAAAA,CAAQ;iBAAC,CAAC;;YAE7D2sB,iBAAiB,CAAA;QAAA,CAClB;IAAA;IAEHh5B,QAAQ;QACN,iBAAiB45B;gBAAC,EAAC/vC,OAAAA,EAAAA;mBACZA,QAAQR,WAAAA,GAINQ,QAAQR,WAAAA,CAAYwa,UAAAA,CAAWhf,MAAAA,GAAS,IAHtC,CAAA;;IAAA;AAMf,CAAC,EAAE6b,aAAAA,CAAc;IACfxQ,IAAI;IACJrG,SAASA;YAAC,EAACsU,KAAAA,EAAAA;;eAAY;YACrBs4B,WAAW,IAAI/pB,IAAIqmB,mBAAmB;YACtCiG,iBAAiB,CAAA;YACjB5iC,YAAY,IAAIsW,yBAAIvO,MAAM/H,UAAAA,iEAAc,CAAA,CAAE;YAC1CZ,iBAAiB2I,MAAM3I,eAAAA;YACvBa,cAAc8H,MAAM9H,YAAAA;YACpB6iC,eAAe,CAAA,CAAA;YACfG,8BAA8B,CAAA,CAAA;YAC9B5xC,QAAQ0W,MAAM1W,MAAAA;YACd9B,WAAW;YACXk0C,0CAAuB/mC,QAAAA,cAANqL,+CAAkB,CAAA;YACnC8iB,WAAW9iB,MAAM8iB,SAAAA;YACjBgK,cAAc9sB,MAAM8sB,YAAAA;QAAAA;;IAEtB1pC,IAAI;QACF,gBAAgB;YAACwP,SAAS;QAAA;QAC1B,mBAAmB;YAACA,SAAS;QAAA;QAC7B,oBAAoB;YAClBA,aAAS4N,sNAAAA,EAAO;gBAACsiB,WAAWA;wBAAC,EAAC33B,KAAAA,EAAAA;2BAAWA,MAAM23B,SAAAA;;YAAAA,CAAU;QAAA;QAE3D,oBAAoB;YAClBlwB,SAAS;oBACP4N,sNAAAA,EAAO;oBAAChZ,WAAWA;4BAAC,EAAC2D,KAAAA,EAAAA;+BAAWA,MAAM3D,SAAAA;;gBAAAA,CAAU;oBAChDszC,+MAAAA,EAAK;wBAAC,EAAC3vC,KAAAA,EAAAA;2BAAY;wBAAC,GAAGA,KAAAA;wBAAO0H,MAAM;oBAAA,EAAa,CAAC;;aAAA;QAAA;QAGtD,kBAAkB;YAChBD,SAAS4N,0NAAAA,EAAO;gBAAC+vB,WAAWA;wBAAC,EAACplC,KAAAA,EAAAA;2BAAWA,MAAMgiC,KAAAA;;YAAAA,CAAM;QAAA;IACvD;IAEFt6B,MAAM;IACN8P,QAAQ;QACN,aAAa;YACXD,SAAS;YACTC,QAAQ;gBACN,aAAa;oBACXD,SAAS;oBACTtf,IAAI;wBACF,kBAAkB;4BAChBwP,SAAS;gCAAC;gCAAkB,uBAAuB;6BAAA;4BACnDJ,OAAOA;oCAAC,EAACrH,KAAAA,EAAAA;uCACPA,MAAMqU,aAAAA,CAAc3M,IAAAA,KAAS,oBAC7B1H,MAAMqU,aAAAA,CAAc3M,IAAAA,KAAS,iBAC7B1H,MAAMqU,aAAAA,CAAc3M,IAAAA,KAAS,eAC7B1H,MAAMqU,aAAAA,CAAc3M,IAAAA,KAAS,2BAC7B1H,MAAMqU,aAAAA,CAAc3M,IAAAA,KAAS,2BAC7B1H,MAAMqU,aAAAA,CAAc3M,IAAAA,KAAS;;wBAAA;oBACjC;oBAEF8P,QAAQ;wBACN,+BAA+B;4BAC7BG,OAAO;gCACL,MAAM;oCACJrf,QACE,0DACF;gCACF,CAAC;6BAAA;4BAEHk4C,MAAM;gCACJ,MAAM;oCACJl4C,QACE,yDACF;gCACF,CAAC;6BAAA;4BAEHL,IAAI;gCACF,sBAAsB;oCACpB;wCACEgJ,QAAQ;wCACRoG,OAAOA;gDAAC,EAAC9G,OAAAA,EAAAA;mDAAaA,QAAQgwC,eAAAA;;oCAAAA;oCAEhC;wCACEtvC,QAAQ;oCAAA,CACT;iCAAA;4BAAA;wBAEL;wBAEF,aAAa;4BACX0W,OAAO;gCACL,MAAM;oCACJrf,QAAM,wCAAwC;gCAChD,CAAC;6BAAA;4BAEHk4C,MAAM;gCACJ,MAAM;oCACJl4C,QAAM,uCAAuC;gCAC/C,CAAC;6BAAA;4BAEHL,IAAI;gCACF,mBAAmB;oCACjBoP,OAAOA;4CAAC,EAACrH,KAAAA,EAAAA;+CAAW,CAACA,MAAMwJ,QAAAA;;oCAC3BvI,QAAQ;oCACRwG,SAAS;wCAAC,eAAe;qCAAA;gCAAA;4BAC3B;wBACF;oBACF;gBACF;gBAEF,UAAY;oBACVxP,IAAI;wBACF,mBAAmB;4BACjBoP,OAAOA;oCAAC,EAACrH,KAAAA,EAAAA;uCAAWA,MAAMwJ,QAAAA;;4BAC1BvI,QAAQ;4BACRwG,SAAS;gCAAC,gBAAgB;6BAAA;wBAAA;wBAE5B,kBAAkB;4BAChBA,SAAS;gCAAC;gCAAkB,uBAAuB;6BAAA;wBAAA;wBAErD,MAAQ;4BACNA,SAAS;wBAAA;wBAEX,OAAS;4BACPxG,QAAQ;4BACRwG,SAAS;oCAAC4N,sNAAAA,EAAO;oCAACtV,aAAaA;4CAAC,EAACC,KAAAA,EAAAA;+CAAWA,MAAMnI,MAAAA;;gCAAAA,CAAO,CAAC;6BAAA;wBAAA;oBAC5D;oBAEF0f,SAAS;oBACTC,QAAQ;wBACN,MAAQ;4BACNG,OAAO;gCACL,MAAM;oCACJrf,QAAM,kCAAkC;gCAC1C,CAAC;6BAAA;4BAEHk4C,MAAM;gCACJ,MAAM;oCACJl4C,QAAM,gCAAgC;gCACxC,CAAC;6BAAA;4BAEHL,IAAI;gCACFw4C,WAAW;oCACThpC,SAAS;4CACP4N,sNAAAA,EAAO;4CACL6K,cAAcA;oDAAC,EAAClgB,KAAAA,EAAAA;uDAAY;oDAC1B8V,QAAQ9V,MAAM8V,MAAAA;gDAAAA;;wCAChB,CACD,CAAC;qCAAA;oCAEJ7U,QAAQ;gCAAA;4BACV;wBACF;wBAEF,UAAY;4BACVsW,SAAS;4BACTC,QAAQ;gCACN,oBAAoB;oCAClBG,OAAO;wCACL,MAAM;4CACJrf,QACE,wDACF;wCACF,CAAC;qCAAA;oCAEHk4C,MAAM;wCACJ,MAAM;4CACJl4C,QACE,uDACF;wCACF,CAAC;qCAAA;oCAEHmf,QAAQ;wCACN;4CACEpQ,OAAO;4CACPpG,QAAQ;wCAAA;wCAEV;4CACEA,QAAQ;4CACRwG,SAAS;gDAAC,cAAc;6CAAA;wCAAA,CACzB;qCAAA;gCAAA;gCAGL,MAAQ;oCACNkQ,OAAO;wCACL,MAAM;4CACJrf,QAAM,2CAA2C;wCACnD,CAAC;qCAAA;oCAEHk4C,MAAM;wCACJ,MAAM;4CACJl4C,QAAM,2CAA2C;wCACnD,CAAC;qCAAA;oCAEH6nC,OAAO;wCACL,IAAI;4CACFl/B,QAAQ;wCAAA;oCACV;gCACF;4BACF;wBACF;wBAEF,uBAAuB;4BACrB0W,OAAO;gCACL,MAAM;oCACJrf,QAAM,iDAAiD;gCACzD,CAAC;6BAAA;4BAEHk4C,MAAM;gCACJ,MAAM;oCACJl4C,QAAM,gDAAgD;gCACxD;gCACA;wCAAC,EAACiI,OAAAA,EAAAA,KAAa;oCACb,IAAIA,QAAQ6kC,SAAAA,EACV,IAAI;4CACF7kC;yCAAAA,gCAAAA,QAAQ6kC,SAAAA,CAAUsL,UAAAA,cAAlBnwC,oDAAAA,8BAA8BowC,WAAAA,CAC5BpwC,QAAQ6kC,SACV;oCACF,EAAA,OAAS/7B,OAAO;wCACdtG,QAAQsG,KAAAA,CACN,IAAIvO,MACF,0CAAuD,CACzD,CACF,KAF8CuO,MAAMiuB,OAAO;oCAG7D;gCAEJ;oCACAjiB,sNAAAA,EAAO;oCAAC+vB,WAAW9pC,KAAAA;gCAAAA,CAAU;oCAC7B+Z,sNAAAA,EAAO;oCAAC6K,cAAc5kB,KAAAA;gCAAAA,CAAU,CAAC;6BAAA;4BAEnCk0C,MAAM;gCAAC,qBAAqB;6BAAA;4BAC5Bv3C,IAAI;gCACF24C,SAAS;oCAAC3vC,QAAQ;gCAAA;gCAClB4vC,MAAM;oCAAC5vC,QAAQ;gCAAA;4BAAM;wBACvB;oBACF;gBACF;YACF;QACF;QAEF,OAAS;YACPsW,SAAS;YACTC,QAAQ;gBACN,cAAc;oBACZG,OAAO;wBACL,MAAM;4BACJrf,QAAM,0BAA0B;wBAClC,CAAC;qBAAA;oBAEHk4C,MAAM;wBACJ,MAAM;4BACJl4C,QAAM,yBAAyB;wBACjC;wBACA;wBACA;wBACA,gCAAgC;qBAAA;oBAElCL,IAAI;wBACF,kBAAkB;4BAChBwP,SAAS;wBAAA;wBAEX,UAAY;4BACVA,SAAS;wBAAA;wBAEX,sBAAsB;4BACpBxG,QAAQ;wBAAA;wBAEV,SAAW;4BACTwG,SAAS;gCAAC,wBAAwB;6BAAA;wBAAA;oBACpC;gBACF;gBAEF,UAAU;oBACRC,MAAM;oBACN8P,QAAQ;wBACN,cAAc;4BACZD,SAAS;4BACTC,QAAQ;gCACN,MAAQ;oCACNG,OAAO;wCACL,MAAM;4CACJrf,QAAM,wCAAwC;wCAChD,CAAC;qCAAA;oCAEHk4C,MAAM;wCACJ,MAAM;4CACJl4C,QAAM,uCAAuC;wCAC/C,CAAC;qCAAA;oCAEHL,IAAI;wCACF,SAAW;4CACTwP,SAAS;oDAACkoC,+MAAAA,EAAK;wDAAC,EAAC3vC,KAAAA,EAAAA;2DAAWA,KAAK,CAAC;;6CAAA;wCAAA;wCAEpC,iBAAiB;4CACfiB,QAAQ;wCAAA;oCACV;gCACF;gCAEF,iBAAiB;oCACf0W,OAAO;wCACL,MAAM;4CACJrf,QAAM,iDAAiD;wCACzD,CAAC;qCAAA;oCAEHk4C,MAAM;wCACJ,MAAM;4CACJl4C,QAAM,gDAAgD;wCACxD;wCACA;wCACA,gCAAgC;qCAAA;oCAElCL,IAAI;wCACF,SAAW;4CACTwP,SAAS;gDAAC,wBAAwB;6CAAA;wCAAA;wCAEpC,sBAAsB;4CACpBxG,QAAQ;wCAAA;oCACV;gCACF;4BACF;wBACF;wBAEF,SAAW;4BACTsW,SAAS;4BACTC,QAAQ;gCACNs5B,UAAU;oCACRv5B,SAAS;oCACTC,QAAQ;wCACNu5B,MAAM;4CACJp5B,OAAO;gDACL,MAAM;oDACJrf,QAAM,+CAA+C;gDACvD,CAAC;6CAAA;4CAEHk4C,MAAM;gDACJ,MAAM;oDACJl4C,QAAM,8CAA8C;gDACtD,CAAC;6CAAA;4CAEHL,IAAI;gDACF,aAAe;oDACbgJ,QAAQ;gDAAA;gDAEV,kBAAkB;oDAChBwG,SAAS;oDACTxG,QAAQ;gDAAA;gDAEV,UAAY;oDACVwG,SAAS;oDACTxG,QAAQ;gDAAA;4CACV;wCACF;wCAEF+vC,aAAa;4CACXr5B,OAAO;gDACL,MAAM;oDACJrf,QACE,sDACF;gDACF,CAAC;6CAAA;4CAEHk4C,MAAM;gDACJ,MAAM;oDACJl4C,QACE,qDACF;gDACF,CAAC;6CAAA;4CAEHL,IAAI;gDACF,oBAAoB;oDAClBgJ,QAAQ;gDAAA;gDAEV,kBAAkB;oDAChBwG,SAAS;gDAAA;gDAEX,UAAY;oDACVA,SAAS;gDAAA;4CACX;wCACF;oCACF;gCACF;gCAEFwpC,OAAO;oCACLt5B,OAAO;wCACL,MAAM;4CACJrf,QAAM,sCAAsC;wCAC9C;wCACA;wCACA,sBAAsB;qCAAA;oCAExBk4C,MAAM;wCACJ,MAAM;4CACJl4C,QAAM,qCAAqC;wCAC7C,CAAC;qCAAA;oCAEHL,IAAI;wCACF,kBAAkB;4CAChBwP,SAAS;wCAAA;wCAEX,UAAY;4CACVA,SAAS;wCAAA;oCACX;gCACF;4BACF;wBACF;oBACF;gBACF;YACF;QACF;IACF;AAEJ,CAAC,GC1uBKnP,UAAQC,cAAc,kBAAkB,GAOjC24C,sBAAkB/wC,0LAAAA,EAAM;IACnCgV,OAAO;QACL5U,SAAS,CAAA;QAWT6U,QAAQ,CAAA;QAoBRP,OAAO,CAAA;QAKP06B,SAAS,CAAA;IAAC;IAWZ9nC,SAAS;QACP,mBAAmB4N,0NAAAA,EAAO;YACxB7L,UAAUA;oBAAC,EAACjJ,OAAAA,EAASP,KAAAA,EAAAA;uBACnBA,MAAM0H,IAAAA,KAAS,oBAAoB1H,MAAMwJ,QAAAA,GAAWjJ,QAAQiJ,QAAAA;;QAAAA,CAC/D;QACD,cAAcmmC,mNAAAA,EAAK;gBAAC,EAAC3vC,KAAAA,EAAAA;uBACnByvC,gMAAAA,EAAYzvC,OAAO,OAAO,GACnB;gBAAC0H,MAAM;gBAAkBwjB,OAAOlrB,MAAMkrB,KAAAA;YAAAA,EAC9C;;QACD,kCAA8BykB,+MAAAA,EAAK;YAACjoC,MAAM;QAAA,CAAwB;QAClE,kBAAkBmoC,uOAAAA,EAAe;gBAAC,EAACtvC,OAAAA,EAASuvC,OAAAA,EAAAA,KAAa;YACvD,KAAA,MAAWqB,QAAQ5wC,QAAQ6wC,gBAAAA,CACzBtB,QAAQH,IAAAA,CAAK;gBACXjoC,MAAM;gBACNykB,SAASglB,KAAKhlB,OAAAA;gBACdpoB,UAAUotC,KAAKp4C,KAAAA;YAAAA,CAChB;QAEL,CAAC;QACD,+BAA2Bsc,sNAAAA,EAAO;YAChC+7B,kBAAkB,CAAA,CAAA;QAAA,CACnB;QACD,sBAAkB/7B,sNAAAA,EAAO;YACvB+7B,kBAAkBA;oBAAC,EAAC7wC,OAAAA,EAASP,KAAAA,EAAAA,KAAW;gBAGtC,QAFAyvC,gMAAAA,EAAYzvC,OAAO,OAAO,GAEtBO,QAAQ6wC,gBAAAA,CAAiB71C,MAAAA,KAAW,GACtC,OAAO;oBACL;wBACE6iC,aAAap+B,MAAMo+B,WAAAA;wBACnBrlC,OAAOiH,MAAMjH,KAAAA;wBACbozB,SAAS;4BAACnsB,MAAMkrB,KAAK;yBAAA;oBAAA,CACtB;iBAAA;gBAIL,MAAMmmB,WAAW9wC,QAAQ6wC,gBAAAA,CAAiBp1C,EAAAA,CAAG,CAAA,CAAE;gBAE/C,OAAIq1C,YAAYA,SAASjT,WAAAA,KAAgBp+B,MAAMo+B,WAAAA,GACtC79B,QAAQ6wC,gBAAAA,CAAiB30C,KAAAA,CAAM,GAAG,CAAA,CAAE,EAAEsI,MAAAA,CAAO;oBAClDhM,OAAOiH,MAAMjH,KAAAA;oBACbqlC,aAAaiT,SAASjT,WAAAA;oBACtBjS,SAAS,CAAC;2BAAGklB,SAASllB,OAAAA;wBAASnsB,MAAMkrB,KAAK;qBAAA;gBAAA,CAC3C,IAGI3qB,QAAQ6wC,gBAAAA,CAAiBrsC,MAAAA,CAAO;oBACrChM,OAAOiH,MAAMjH,KAAAA;oBACbqlC,aAAap+B,MAAMo+B,WAAAA;oBACnBjS,SAAS;wBAACnsB,MAAMkrB,KAAK;qBAAA;gBAAA,CACtB;YACH;QAAA,CACD;QACD,kCAA8B7V,sNAAAA,EAAO;YACnCi8B,oBAAoB,CAAA,CAAA;QAAA,CACrB;QACD,mBAAej8B,sNAAAA,EAAO;YACpBi8B,oBAAoBA;oBAAC,EAAC/wC,OAAAA,EAASP,KAAAA,EAAAA;uBAC7BA,MAAM0H,IAAAA,KAAS,UACX,CAAC;uBAAGnH,QAAQ+wC,kBAAAA;oBAAoBtxC,KAAK;iBAAA,GACrCO,QAAQ+wC,kBAAAA;;QAAAA,CACf;QACD,iCAA6BzB,mOAAAA,EAAe;gBAAC,EAACtvC,OAAAA,EAASuvC,OAAAA,EAAAA,KAAa;YAClE,KAAA,MAAW9vC,SAASO,QAAQ+wC,kBAAAA,CAC1BxB,QAAQH,IAAAA,CAAK3vC,KAAK;QAEtB,CAAC;IAAA;IAEHwW,QAAQ;QACN,qBAAiBC,qMAAAA,EAIf;gBAAC,EAAC5B,KAAAA,EAAOC,QAAAA,EAAAA,KAAc;YACvB,MAAMC,gBAAgBF,MAAM9U,WAAAA,CAAYiV,KAAAA;YAExCH,OAAAA,MAAM9U,WAAAA,CAAYiV,KAAAA,GAASC,CAAAA,OAAO;gBAC5BA,GAAGvN,IAAAA,KAAS,iBAAiBuN,GAAGvN,IAAAA,KAAS,gBAC3CoN,SAAS;oBAACpN,MAAM;gBAAA,CAAS,IAEzBoN,SAAS;oBAACpN,MAAM;gBAAA,CAAa,GAE/BqN,cAAcE,EAAE;YAClB,GAEO,MAAM;gBACXJ,MAAM9U,WAAAA,CAAYiV,KAAAA,GAAQD;YAC5B;QACF,CAAC;QACD,yBAAqB0B,qMAAAA,EAAa;gBAAC,EAAC3B,QAAAA,EAAAA,KAAc;YAChD,MAAMy8B,WAAWC,YACf,MAAM;gBACJ18B,SAAS;oBAACpN,MAAM;gBAAA,CAAe;YACjC,yCACkC,0BAAM,GAC1C;YAEA,OAAO,MAAM;gBACXkqC,cAAcL,QAAQ;YACxB;QACF,CAAC;IAAA;IAEH76B,QAAQ;QACN,gBAAgBm7B;gBAAC,EAACtxC,OAAAA,EAAAA;mBAAaA,QAAQiJ,QAAAA;;QACvC,wBAAwBsoC;gBAAC,EAACvxC,OAAAA,EAAAA;mBACxBzE,yJAAAA,CAAOi2C,aAAAA,CAAcxxC,QAAQR,WAAW;;IAAA;IAE5CiyC,QAAQ;QACN,iBAAiB;IAAA;AAErB,CAAC,EAAE56B,aAAAA,CAAc;IACfxQ,IAAI;IACJrG,SAASA;YAAC,EAACsU,KAAAA,EAAAA;eAAY;YACrBu8B,kBAAkB,CAAA,CAAA;YAClBE,oBAAoB,CAAA,CAAA;YACpB9nC,UAAUqL,MAAMrL,QAAAA;YAChBrL,QAAQ0W,MAAM1W,MAAAA;YACd4B,aAAa8U,MAAM9U,WAAAA;QAAAA;;IAErB9H,IAAI;QACF,mBAAmB;YACjBwP,SAAS;gBAAC,iBAAiB;aAAA;QAAA;IAC7B;IAEFC,MAAM;IACN8P,QAAQ;QACNy6B,QAAQ;YACN16B,SAAS;YACTF,QAAQ;gBACNC,KAAK;gBACLzC,OAAOA;wBAAC,EAACtU,OAAAA,EAAAA;2BAAc;wBAACR,aAAaQ,QAAQR,WAAAA;oBAAAA;;YAAW;YAE1DyX,QAAQ;gBACNu5B,MAAM;oBACJp5B,OAAO;wBACL,MAAM;4BACJrf,QAAM,qBAAqB;wBAC7B,CAAC;qBAAA;oBAEHk4C,MAAM;wBACJ,MAAM;4BACJl4C,QAAM,oBAAoB,GAC1BA,QAAM,uBAAuB;wBAC/B,CAAC;qBAAA;oBAEHL,IAAI;wBACFg6C,QAAQ;4BACNhxC,QAAQ;wBAAA;oBACV;gBACF;gBAEFgxC,QAAQ;oBACN9R,OAAO;wBACL,iBAAiB;4BACfl/B,QAAQ;4BACRwG,SAAS;oCACP86B,mNAAAA,EAAM;oCAAC76B,MAAM;gCAAA,CAAe;gCAC5B,MAAM;oCACJpP,QAAM,sBAAsB;gCAC9B,CAAC;6BAAA;wBAAA;oBAEL;oBAEFL,IAAI;wBACF,cAAc;4BACZgJ,QAAQ;4BACRwG,SAAS;oCAAC86B,mNAAAA,EAAM;oCAAC76B,MAAM;gCAAA,CAAe,CAAC;6BAAA;wBAAA;wBAEzC,QAAU;4BACRzG,QAAQ;4BACRixC,SAAS,CAAA;wBAAA;oBACX;gBACF;YACF;QACF;QAEFC,WAAW;YACT56B,SAAS;YACTC,QAAQ;gBACN,MAAQ;oBACNG,OAAO;wBACL,MAAM;4BACJrf,QAAM,wBAAwB;wBAChC,CAAC;qBAAA;oBAEHk4C,MAAM;wBACJ,MAAM;4BACJl4C,QAAM,uBAAuB;wBAC/B,CAAC;qBAAA;oBAEHL,IAAI;wBACFizB,OAAO;4BACL;gCACE7jB,OAAO;gCACPI,SAAS;oCAAC;oCAAe,gBAAgB;iCAAA;gCACzCxG,QAAQ;4BAAA;4BAEV;gCACEwG,SAAS;oCAAC;oCAAc,gBAAgB;iCAAA;gCACxCxG,QAAQ;4BAAA,CACT;yBAAA;oBAAA;gBAEL;gBAEF,yBAAyB;oBACvB0W,OAAO;wBACL,MAAM;4BACJrf,QAAM,yCAAyC;wBACjD;wBACA,4BAA4B;qBAAA;oBAE9Bk4C,MAAM;wBACJ,MAAM;4BACJl4C,QAAM,wCAAwC;wBAChD,CAAC;qBAAA;oBAEH+e,QAAQ;wBACNC,KAAK;oBAAA;oBAEPrf,IAAI;wBACF,gBAAgB;4BACdoP,WAAOqQ,+MAAAA,EAAI;gCAAC06B,mNAAAA,EAAI,cAAc;gCAAG,sBAAsB;6BAAC;4BACxDnxC,QAAQ;4BACRwG,SAAS;gCACP;gCACA;gCACA;gCACA,yBAAyB;6BAAA;wBAAA;wBAG7B,OAAS;4BACP;gCACEJ,OAAO;gCACPI,SAAS;oCAAC;oCAAe,gBAAgB;iCAAA;4BAAA;4BAE3C;gCACEA,SAAS;oCAAC;oCAAc,gBAAgB;iCAAA;4BAAA,CACzC;yBAAA;oBAAA;gBAEL;YACF;QACF;IACF;AAEJ,CAAC,GChRKnP,UAAQC,cAAc,cAAc;AAEnC,SAAS85C,kBACdx6C,MAAAA,EACAiI,WAAAA,EACA;IACA,MAAMqV,QAAQrV,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;IAmmBhD,OAjmBiC;QAC/B5B,OAAOA,MAAY;YACjBuD,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN7P;YAAAA,CACD;QACH;QACAo4C,MAAMA,MAAY;YAChBnwC,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN7P;YAAAA,CACD;QACH;QACAy6C,YAAankC,CAAAA,SAAuB;YAClCrO,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACNuH,WAAWd;gBAAAA;gBAEbtW;YAAAA,CACD;QACH;QACA06C,YAAaxzC,CAAAA,aAA2B;YACtCe,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACN3I;gBAAAA;gBAEFlH;YAAAA,CACD;QACH;QACA26C,kBAAmB34C,CAAAA,UAAwB;YACzCiG,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACN7N;gBAAAA;gBAEFhC;YAAAA,CACD;QACH;QACA46C,cAAetkC,CAAAA,SAA0B;YACvC,MAAMpK,WAAW2I,kBAAkB;gBACjCD,qBAAqB3M,YAAYG,WAAAA,CAAAA;gBACjC0M,qBAAqB9U;YAAAA,CACtB;YAID,WAFyByyB,6OAAAA,EAAoBvmB,QAAQ,EAE7BqK,QAAAA,CAASD,IAAI;QACvC;QACA5T,OAAOA,MAAgB;YACrB,MAAMwJ,WAAW2I,kBAAkB;gBACjCD,qBAAqB3M,YAAYG,WAAAA,CAAAA;gBACjC0M,qBAAqB9U;YAAAA,CACtB,GAEKo+B,wBAAoBC,mPAAAA,EAA0BnyB,QAAQ,GACtDiyB,mBAAmB1L,iPAAAA,EAAoBvmB,QAAQ;YAErD,OAAO,CAAC;mBAAGkyB,mBAAmB;mBAAGD,gBAAgB;aAAA;QACnD;QACAoC,MAAMA,MAAY;YAChBt4B,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;gBAAA;gBAER7P;YAAAA,CACD;QACH;QACAqgC,MAAMA,MAAY;YAChBp4B,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;gBAAA;gBAER7P;YAAAA,CACD;QACH;QACAyiB,QAASje,CAAAA,cAAqC;YAC5C,MAAMq2C,iBAAiBzvC,aAAa;gBAClC1C,SAAS;oBACPpC,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;oBAC1CpF,OAAOlB,OAAOkB,KAAAA;oBACdsD;gBAAAA;gBAEFiI,eAAezM,OAAOyM,aAAAA;YAAAA,CACvB;YAEGouC,iBACFr4B,6JAAAA,CAAWC,MAAAA,CAAOziB,QAAQ66C,cAAc,IAExCr4B,6JAAAA,CAAWoI,QAAAA,CAAS5qB,MAAM,GAG5BA,OAAO4iB,QAAAA,CAAAA;QACT;QACA9d,YAAYA,MAAqC;YAC/C,IAAI9E,OAAOwE,SAAAA,EAAW;gBACpB,MAAM9C,QAAQoE,uJAAAA,CAAKg1C,UAAAA,CACjB96C,QACAA,OAAOwE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CACxC;gBACA,IAAIlD,OACF,OAAOqB,eACL;oBAACrB,KAAK;iBAAA,EACN4b,MAAM5b,KAAAA,CAAMf,IAAAA,EACZ4M,qBAAqBb,GAAAA,CAAI1M,MAAM,CACjC,CAAA,CAAE,CAAC,CAAA;YAEP;QAEF;QACA6F,YAAYA,MAAqC;YAC/C,IAAI7F,OAAOwE,SAAAA,EAAW;gBACpB,MAAM9C,QAAQoE,uJAAAA,CAAKg1C,UAAAA,CACjB96C,QACAA,OAAOwE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CACxC;gBACA,IAAIlD,SAAS1B,OAAO+E,WAAAA,CAAYrD,KAAK,GAMnC,OALgBqB,eACd;oBAACrB,KAAK;iBAAA,EACN4b,MAAM5b,KAAAA,CAAMf,IAAAA,EACZ4M,qBAAqBb,GAAAA,CAAI1M,MAAM,CACjC,CAAA,CAAE,CAAC,CAAA,CACYoC,QAAAA,CAASpC,OAAOwE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAC,CAAA;YAE1D;QAEF;QACAo2C,aAAaA,CACXlrC,MACA3O,UACS;gBAeFqG,wBAiEFA;;YA/EL,IAAIsI,KAAKlP,IAAAA,KAAS2c,MAAMnG,IAAAA,CAAKxW,IAAAA,EAC3BsH,OAAAA,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACNzB,cAAc;wBACZzN,MAAMkP,KAAKlP,IAAAA;wBACXO;oBAAAA;gBACF;gBAEFlB;YAAAA,CACD,GAEMA,OAAOwE,SAAAA,wFACa;gBACrB8B,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;gBAC1CtG;gBACAwH,OAAOxH,OAAOwE,SAAAA;YAAAA,CACf,mFAAGE,KAAAA,CAAMC,IAAAA,iGAAQ,CAAA,CAAA,GAClB,CAAA,CAAA;YAGN,IAAI,CAAC3E,OAAOwE,SAAAA,EACV,MAAM,IAAIvB,MAAM,6BAA6B;YAE/C,MAAM,CAAC6B,UAAU,CAAA,GAAIvD,MAAMyC,IAAAA,CACzBC,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;gBACnBmE,IAAInE,OAAOwE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC;gBAC1CR,OAAQC,CAAAA,IAAMA,EAAE1C,KAAAA,KAAU2b,MAAM5b,KAAAA,CAAMf,IAAAA;YAAAA,CACvC,CACH,CAAA,CAAE,CAAC,CAAA,IAAK;gBAAC8C,KAAAA,CAAS;aAAA;YAClB,IAAI,CAACqB,YACH,MAAM,IAAI7B,MAAM,uBAAuB;YAEzC,IACE4M,KAAKlP,IAAAA,KAAS2c,MAAMnG,IAAAA,CAAKxW,IAAAA,IACzB,CAAC2c,MAAMjL,aAAAA,CAAcxL,IAAAA,CAAMxD,CAAAA,IAAMA,EAAE1C,IAAAA,KAASkP,KAAKlP,IAAI,GAErD,MAAM,IAAIsC,MACR,yDACF;YAkBF,MAAMZ,QAhBQhB,aACZ;gBACE;oBACEF,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;oBACxCvT,OAAO2b,MAAM5b,KAAAA,CAAMf,IAAAA;oBACnByB,UAAU;wBACR;4BACEjB,MAAM8G,YAAYG,WAAAA,GAAcM,OAAAA,CAAQwM,YAAAA,CAAAA;4BACxCvT,OAAOkO,KAAKlP,IAAAA;4BACZ,GAAIO,SAAgB,CAAA,CAAA;wBAAC,CACtB;qBAAA;gBAAA,CAEJ;aAAA,EAEH;gBAACI,aAAa2G,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;YAAAA,CAClD,CAAA,CAAE,CAAC,CAAA,CACiBlE,QAAAA,CAAS,CAAC,CAAA,EACxB44C,iBAAiBh7C,OAAOwE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,GACvD0iC,cAAajlC,MAAMV,KAAAA,KAAU2b,MAAMnG,IAAAA,CAAKxW,IAAAA,EACxCs6C,YAAYn1C,uJAAAA,CAAK4G,GAAAA,CAAI1M,QAAQg7C,cAAc;;YAIjD,OAAI1T,eAAc2T,UAAUt5C,KAAAA,KAAU2b,MAAMnG,IAAAA,CAAKxW,IAAAA,IAAAA,CAC/CF,QACE,wEACF,GACAT,OAAO0+B,IAAAA,CAAK;gBAACC,UAAU;gBAAGtD,MAAM;YAAA,CAAY,CAAA,GAG9C7Y,6JAAAA,CAAWmP,WAAAA,CAAY3xB,QAAQqC,OAAO;gBACpCogB,QAAQ,CAAA;gBACRte,IAAInE,OAAOwE,SAAAA;YAAAA,CACZ,GACDxE,OAAO4iB,QAAAA,IAEA5iB,OAAOwE,SAAAA,0FACa;gBACrB8B,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;gBAC1CtG;gBACAwH,OAAOxH,OAAOwE,SAAAA;YAAAA,CACf,qFAAGE,KAAAA,CAAMC,IAAAA,mGAAQ,CAAA,CAAA,GAClB,CAAA,CAAA;QACN;QACAm4B,aAAaA,CACXjtB,MACA3O;;gBAgBKqG;mBAdLU,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACNnO,OAAO;wBACLC,OAAOkO,KAAKlP,IAAAA;wBACZ,GAAIO,SAAgB,CAAA,CAAA;oBAAC;oBAEvBwjB,WAAW;gBAAA;gBAEb1kB;YAAAA,CACD,GAEMA,OAAOwE,SAAAA,wFACa;gBACrB8B,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;gBAC1CtG;gBACAwH,OAAOxH,OAAOwE,SAAAA;YAAAA,CACf,mFAAGE,KAAAA,CAAMC,IAAAA,iGAAQ,CAAA,CAAA,GAClB,CAAA,CAAA;;QAENu2C,eAAgBl5C,CAAAA,UAA2B;YACzC,IAAI;gBACF,OAAOsF,cAAc;oBAACtH;oBAAQgC;gBAAAA,CAAM;YACtC,EAAA,UAAQ;gBAEN,OAAO,CAAA;YACT;QACF;QACAm5C,cAAej0C,CAAAA,aAA8B;YAC3C,IAAI;gBACF,OAAOD,iBAAiB;oBAACjH;oBAAQkH;gBAAAA,CAAS;YAC5C,EAAA,UAAQ;gBAEN,OAAO,CAAA;YACT;QACF;QACA2/B,QAASngC,CAAAA,UACA,CAAC;gBAAC4W,MAAM5b,KAAAA,CAAMf,IAAAA;gBAAM2c,MAAMnG,IAAAA,CAAKxW,IAAI;aAAA,CAAE4V,QAAAA,CAAS7P,QAAQ/E,KAAK;QAEpEy5C,YACEz2C,CAAAA,SAIG;YACH,MAAM02C,YAAYjwC,aAAa;gBAC7B1C,SAAS;oBACPpC,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;oBAC1CpF,OAAOlB,OAAOkB,KAAAA;oBACdsD,WAAW;wBAACE,OAAO;4BAACC;4BAAMiD,QAAQ;wBAAA;wBAAIF,QAAQ;4BAAC/C;4BAAMiD,QAAQ;wBAAA;oBAAC;gBAAC;gBAEjE6E,eAAezM,OAAOyM,aAAAA;YAAAA,CACvB;YAED,IAAI4uC,WAAW;gBACb,MAAM,CAAC35C,OAAOqC,SAAS,CAAA,GAAIE,yJAAAA,CAAOQ,IAAAA,CAChCzE,QACAq7C,UAAU32C,KAAAA,CAAMC,IAAAA,CAAKC,KAAAA,CAAM,GAAG,CAAC,CACjC;gBACA,IAAIlD,SAASqC,aAAa,OAAOrC,MAAMP,IAAAA,IAAS,UAAU;oBACxD,IAAIwD,KAAKjB,MAAAA,KAAW,KAAK23C,UAAU32C,KAAAA,CAAMC,IAAAA,CAAKjB,MAAAA,KAAW,GACvD,OAAO;wBACLX,eAAe;4BAACrB,KAAK;yBAAA,EAAG4b,MAAM5b,KAAAA,CAAMf,IAAI,CAAA,CAAE,CAAC,CAAA;wBAC3C;4BAAC;gCAACQ,MAAMO,MAAMP,IAAAA;4BAAAA,CAAK;yBAAC;qBAAA;oBAGxB,MAAMm6C,UAAUv4C,eACd;wBAACrB,KAAK;qBAAA,EACN4b,MAAM5b,KAAAA,CAAMf,IAAAA,EACZ4M,qBAAqBb,GAAAA,CAAI1M,MAAM,CACjC,CAAA,CAAE,CAAC,CAAA;oBACH,IAAIA,OAAO+E,WAAAA,CAAYu2C,OAAO,GAAG;wBAC/B,MAAMC,UAAUD,QAAQl5C,QAAAA,CAASi5C,UAAU32C,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAC,CAAA;wBACxD,IAAI42C,SACF,OAAO;4BACLA;4BACA;gCAAC;oCAACp6C,MAAMO,MAAMP,IAAAA;gCAAAA;gCAAO;gCAAY;oCAACA,MAAMo6C,QAAQp6C,IAAAA;gCAAAA,CAAK;6BAAC;yBAAA;oBAG5D;gBACF;YACF;YACA,OAAO;gBAACsC,KAAAA;gBAAWA,KAAAA,CAAS;aAAA;QAC9B;QACA+3C,aACE90C,CAAAA,YACwB;YACxB,IAAIjC;YACJ,IAAI;gBACF,MAAM,CAACmxB,IAAI,CAAA,GAAIr0B,MAAMyC,IAAAA,CACnBC,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;oBACnBmE,IAAI,CAAA,CAAA;oBACJC,OAAQC,CAAAA,IAAMA,EAAElD,IAAAA,KAASuF,QAAQvF,IAAAA;gBAAAA,CAClC,KAAK,CAAA,CACR,CAAA,CAAE,CAAC,CAAA,IAAK;oBAACsC,KAAAA,CAAS;iBAAA;gBAClBgB,OAAOsiB,uLAAAA,CAAYvd,SAAAA,CAAUxJ,QAAQ41B,IAAI;YAC3C,EAAA,UAAQ,CACN;YAEF,OAAOnxB;QACT;QACA25B,mBAAmBA,MAA4B;YAC7C,IAAI,CAACp+B,OAAOwE,SAAAA,IAAaxE,OAAOwE,SAAAA,CAAUE,KAAAA,CAAMC,IAAAA,CAAKjB,MAAAA,GAAS,GAC5D,OAAO,CAAA,CAAA;YAET,IAAI;gBACF,MAAM06B,oBAA0C,CAAA,CAAA,EAC1Cqd,QAAQx3C,yJAAAA,CAAOC,KAAAA,CAAMlE,QAAQ;oBACjCmE,IAAInE,OAAOwE,SAAAA;oBACXJ,OAAQK,CAAAA,OACNd,uJAAAA,CAAKC,MAAAA,CAAOa,IAAI,KAChBA,KAAK/B,KAAAA,KAAUe,KAAAA,KACflC,MAAMC,OAAAA,CAAQiD,KAAK/B,KAAK,KACxB+B,KAAK/B,KAAAA,CAAMgB,MAAAA,GAAS;gBAAA,CACvB;gBACD,KAAA,MAAW,CAACyT,MAAMxS,IAAI,CAAA,IAAK82C,MAAO;wBAG9B/5C;oBAFF,MAAM,CAACA,KAAK,CAAA,GAAIuC,yJAAAA,CAAOQ,IAAAA,CAAKzE,QAAQ2E,MAAM;wBAAC0sB,OAAO;oBAAA,CAAE;oBAChDrxB,OAAO+E,WAAAA,CAAYrD,KAAK,+BACpBQ,QAAAA,oEAAUia,OAAAA,CAASqU,CAAAA,QAAQ;wBAE7B7sB,uJAAAA,CAAKC,MAAAA,CAAOuT,IAAI,KAChBA,KAAKzU,KAAAA,IACLnB,MAAMC,OAAAA,CAAQ2V,KAAKzU,KAAK,KACxByU,KAAKzU,KAAAA,CAAM6T,QAAAA,CAASia,IAAIrvB,IAAI,KAE5Bi9B,kBAAkBr2B,IAAAA,CAAKyoB,GAAG;oBAE9B,CAAC;gBAEL;gBACA,OAAO4N;YACT,EAAA,UAAQ;gBACN,OAAO,CAAA,CAAA;YACT;QACF;QACAsd,oBACEC,CAAAA,mBACY;YACZ,MAAMzvC,WAAW2I,kBAAkB;gBACjCD,qBAAqB3M,YAAYG,WAAAA,CAAAA;gBACjC0M,qBAAqB9U;YAAAA,CACtB;YAED,WAAOgyC,4OAAAA,EAAmB2J,cAAc,EAAEzvC,QAAQ;QACpD;QACA0vC,eAAeA,CAAC/rC,MAAM3O,UAAU;gBAiCIm7C;YAhClC,MAAMR,iBAAiBhnC,kBAAkB;gBACvCD,qBAAqB3M,YAAYG,WAAAA,CAAAA;gBACjC0M,qBAAqB9U;YAAAA,CACtB,GACK87C,0BAAsBC,kOAAAA,EAAiBF,cAAc,GACrDG,sBAAkBn3C,8NAAAA,EAAag3C,cAAc,GAC7CI,iBAAiBH,oBAAoBtlC,OAAAA,CAAS9U,CAAAA;;2BAC9CqD,2KAAAA,EAAY82C,eAAenzC,OAAAA,EAAShH,KAAK,6BAC9BQ,QAAAA,2CAANR,kBAAkB,CAAA,CAAA,GAGpB,EACR;;YAEDuG,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACN4hB,YAAY;wBAAC9wB,MAAMkP,KAAKlP,IAAAA;wBAAMO,4CAAOA,QAAS,CAAA;oBAAC;gBAAC;gBAElDlB;YAAAA,CACD;YAED,MAAMk8C,gBAAgBrnC,kBAAkB;gBACtCD,qBAAqB3M,YAAYG,WAAAA,CAAAA;gBACjC0M,qBAAqB9U;YAAAA,CACtB,GAEKm8C,yBAAqBJ,kOAAAA,EAAiBG,aAAa,GACnDE,sBAAkB73C,+NAAAA,EAAc23C,aAAa,GAC7CG,qBAAiBx3C,8NAAAA,EAAaq3C,aAAa,GAE3CI,yIAA4C73C,IAAAA,CAAK/B,KAAAA,0FAAO2T,MAAAA,CAC3DC,CAAAA;;uBACC,mHAAkB7R,IAAAA,CAAK/B,KAAAA,gEAAtBs5C,4BAA6BzlC,QAAAA,CAASD,IAAI,MAC3C,CAAC4lC,cAAcxzC,OAAAA,CAAQpC,MAAAA,CAAO6P,UAAAA,CAC3B1U,GAAAA,CAAK2V,CAAAA,YAAcA,UAAUzW,IAAI,EACjC4V,QAAAA,CAASD,IAAI,CACpB;gBAaMpU,WAZgBi6C,mBAAmB3lC,OAAAA,CAAS9U,CAAAA;;;2BAC5CqD,2KAAAA,EAAYm3C,cAAcxzC,OAAAA,EAAShH,KAAK,oDAElCQ,QAAAA,cAANR,sDAAgBD,GAAAA,CAAKkV,CAAAA,WAAAA,CAAa;wBAChCA,SAAAA;wBACAhS,MAAM;4BAAC;gCAACxD,MAAMO,MAAMP,IAAAA;4BAAAA;4BAAO;4BAAY;gCAACA,MAAMwV,SAAQxV,IAAAA;4BAAAA,CAAK;yBAAA;oBAAA,CAAA,CAC3D,sEAAK,CAAA,CAAA,GAIJ,CAAA,CACR;eAC8BkV,MAAAA,CAC5BM,CAAAA,WACC,CAACslC,eAAep1C,IAAAA,CACb01C,CAAAA,gBAAkBA,cAAcp7C,IAAAA,KAASwV,SAAQA,OAAAA,CAAQxV,IAC5D,CACJ,GACM2tB,2EAAWutB,eAAgB13C,IAAAA,EAC3BgS,UAAUzU,SAAS0J,IAAAA,CAAM+K,CAAAA,iGAC7B2lC,0BAA2Bz1C,IAAAA,CACxByP,CAAAA,OAASA,SAASK,SAAQA,OAAAA,CAAQxV,IACrC,CACF;YAEA,IAAIi7C,mBAAmBttB,YAAYnY,SACjC,OAAO;gBACL6lC,aAAa7lC,QAAQhS,IAAAA;gBACrB83C,cAAcv6C,SAAST,GAAAA,CAAKkV,CAAAA,WAAYA,SAAQhS,IAAI;gBACpDmqB;YAAAA;QAGN;QACAJ,QAAQA,CACNlqB,WACAggB,YACS;YACT,IAAIhgB,WAAW;gBACb,MAAMgD,QAAQ4D,aAAa;oBACzB1C,SAAS;wBACPpC,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;wBAC1CpF,OAAOlB,OAAOkB,KAAAA;wBACdsD;oBAAAA;oBAEFiI,eAAezM,OAAOyM,aAAAA;gBAAAA,CACvB;gBAGD,IAAI,CAAA,CADFjF,SAASA,MAAME,MAAAA,CAAO/C,IAAAA,CAAKjB,MAAAA,GAAS,KAAK8D,MAAM9C,KAAAA,CAAMC,IAAAA,CAAKjB,MAAAA,GAAS,CAAA,GAEnE,MAAM,IAAIT,MAAM,eAAe;gBAEjC,IAAIuE,OAAO;oBACT,IAAI,oDAACgd,QAAS5d,IAAAA,KAAQ4d,2DAAS5d,IAAAA,MAAS,YAAY;wBAClDnG,QAAM,+BAA+B,GACrC+hB,6JAAAA,CAAWkM,MAAAA,CAAO1uB,QAAQ;4BACxBmE,IAAIqD;4BACJsrB,SAAS,CAAA;4BACTzC,OAAO,CAAA;wBAAA,CACR,GACDrwB,OAAO4iB,QAAAA,CAAAA;wBACP;oBACF;oBAgCA,uDA/BI4B,QAAS5d,IAAAA,MAAS,YAAA,CACpBnG,QAAM,sCAAsC,GAC5C+hB,6JAAAA,CAAW4Y,WAAAA,CAAYp7B,QAAQ;wBAC7BmE,IAAIqD;wBACJ6oB,OAAO,CAAA;wBACPjsB,OAAQK,CAAAA,OAEJzE,OAAO+E,WAAAA,CAAYN,IAAI,KACtB,CAACzE,OAAO+E,WAAAA,CAAYN,IAAI,KAAKi4C,0JAAAA,CAAa75C,SAAAA,CAAU4B,IAAI;oBAAA,CAG9D,CAAA,sDAEC+f,QAAS5d,IAAAA,MAAS,cAAA,CACpBnG,QAAM,wCAAwC,GAC9C+hB,6JAAAA,CAAW4Y,WAAAA,CAAYp7B,QAAQ;wBAC7BmE,IAAIqD;wBACJ6oB,OAAO,CAAA;wBACPjsB,OAAQK,CAAAA,OAEJA,KAAK9C,KAAAA,KAAU2b,MAAMnG,IAAAA,CAAKxW,IAAAA,IAAAA,gBAAAA;4BACzB,CAACX,OAAO+E,WAAAA,CAAYN,IAAI,KAAKi4C,0JAAAA,CAAa75C,SAAAA,CAAU4B,IAAI;oBAAA,CAG9D,CAAA,GAOCzE,OAAOoC,QAAAA,CAASsB,MAAAA,KAAW,GAAG;wBAChC,MAAMmmC,mBAAmBjb,uBACvB3mB,YAAYG,WAAAA,CAAAA,EAAcM,OAC5B;wBACA1I,OAAOoC,QAAAA,GAAW;4BAACynC,gBAAgB;yBAAA,EACnC7pC,OAAOkB,KAAAA,GAAQ;4BAAC2oC,gBAAgB;yBAAA,EAEhCzb,eACE;4BACE9nB,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;4BAC1CpF,OAAOlB,OAAOkB,KAAAA;wBAAAA,GAEhB;4BACEuL,eAAezM,OAAOyM,aAAAA;4BACtBoG,cAAc7S,OAAO6S,YAAAA;wBAAAA,CAEzB;oBACF;oBAEA7S,OAAO4iB,QAAAA,CAAAA;gBACT;YACF;QACF;QACA+5B,kBACE9sC,CAAAA,SACS;YACT5H,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACN2M,eAAe;oBACb3M,MAAM;oBACN4hB,YAAY;wBAAC9wB,MAAMkP,KAAKlP,IAAAA;oBAAAA;gBAAI;gBAE9BX;YAAAA,CACD;QACH;QACAkqB,cAAcA,MAA8B;YAC1C,IAAI0yB,UAA2B;YAC/B,IAAI58C,OAAOwE,SAAAA,EAAW;gBACpB,MAAMq4C,WAAWrvC,6BAA6Bd,GAAAA,CAAI1M,OAAOwE,SAAS;gBAClE,IAAIq4C,UACF,OAAOA;gBAETD,UAAUr1C,sBAAsB;oBAC9BjB,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;oBAC1CtG;oBACAwH,OAAOxH,OAAOwE,SAAAA;gBAAAA,CACf,GACDgJ,6BAA6B+gB,GAAAA,CAAIvuB,OAAOwE,SAAAA,EAAWo4C,OAAO;YAC5D;YACA,OAAOA;QACT;QACAE,UAAUA,IACD/5C,eACL/C,OAAOoC,QAAAA,EACPkb,MAAM5b,KAAAA,CAAMf,IAAAA,EACZ4M,qBAAqBb,GAAAA,CAAI1M,MAAM,CACjC;QAEF+8C,sBAAsBA,IACb,CAAC,CAAC/8C,OAAOwE,SAAAA,IAAaW,wJAAAA,CAAM8L,WAAAA,CAAYjR,OAAOwE,SAAS;QAEjEw4C,qBAAqBA,IACZ,CAAC,CAACh9C,OAAOwE,SAAAA,IAAaW,wJAAAA,CAAM+sB,UAAAA,CAAWlyB,OAAOwE,SAAS;QAEhE07B,aAAaA,MAAM;YACjBlgC,OAAOkgC,WAAAA,CAAAA,GACPlgC,OAAO4iB,QAAAA,CAAAA;QACT;QACAq6B,aAAaA,IACJl6C,eAAe/C,OAAOi9C,WAAAA,IAAe3/B,MAAM5b,KAAAA,CAAMf,IAAI;QAE9Du8C,yBAAyBA,CACvBC,YACAC,eACG;YAEH,MAAMC,SAASjyC,aAAa;gBAC1B1C,SAAS;oBACPpC,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;oBAC1CpF,OAAOlB,OAAOkB,KAAAA;oBACdsD,WAAW24C;gBAAAA;gBAEb1wC,eAAezM,OAAOyM,aAAAA;YAAAA,CACvB,GACK6wC,SAASlyC,aAAa;gBAC1B1C,SAAS;oBACPpC,QAAQ2B,YAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;oBAC1CpF,OAAOlB,OAAOkB,KAAAA;oBACdsD,WAAW44C;gBAAAA;gBAEb3wC,eAAezM,OAAOyM,aAAAA;YAAAA,CACvB;YAQD,OALsBtH,wJAAAA,CAAM2Y,OAAAA,CAAQu/B,MAAM,KAAKl4C,wJAAAA,CAAM2Y,OAAAA,CAAQw/B,MAAM,KAG5Bn4C,wJAAAA,CAAMoR,QAAAA,CAAS8mC,QAAQC,MAAM;QAGtE;IAAA;AAIJ;AC3jBO,MAAMC,mBAAej1C,0LAAAA,EAAM;IAChCgV,OAAO;QACL5U,SAAS,CAAA;QAIT6U,QAAQ,CAAA;QACRm6B,SAAS,CAAA;IAAC;AAEd,CAAC,EAAEn4B,aAAAA,CAAc;IACfxQ,IAAI;IACJrG,SAAS;QACP80C,eAAe;QACfC,qBAAqB,CAAA;IAAA;IAEvBr9C,IAAI;QACF,SAAW;YACTwP,SAAS;oBACP4N,sNAAAA,EAAO;oBACLigC,qBAAqB,CAAA;gBAAA,CACtB;gBACD3F,mNAAAA,EAAK;wBAAC,EAAC3vC,KAAAA,EAAAA;2BAAWA,KAAK,CAAC;;aAAA;QAAA;QAG5B,WAAa;YACX;gBACEqH,OAAOA;wBAAC,EAAC9G,OAAAA,EAAAA;2BAAaA,QAAQ+0C,mBAAAA;;gBAC9B7tC,SAAS;wBACP4N,sNAAAA,EAAO;wBACLggC,eAAeA;gCAAC,EAACr1C,KAAAA,EAAAA;mCAAWA,MAAM3D,SAAAA;;oBAAAA,CACnC;wBACDszC,+MAAAA,EAAK;4BAAC,EAAC3vC,KAAAA,EAAAA;+BAAWA,KAAK;;oBACvBqV,0NAAAA,EAAO;wBACLigC,qBAAqB,CAAA;oBAAA,CACtB,CAAC;iBAAA;YAAA;YAGN;gBACEjuC,OAAOA;wBAAC,EAAC9G,OAAAA,EAASP,KAAAA,EAAAA;2BAAWO,QAAQ80C,aAAAA,KAAkBr1C,MAAM3D,SAAAA;;gBAC7DoL,SAAS;wBACP4N,sNAAAA,EAAO;wBACLggC,eAAeA;gCAAC,EAACr1C,KAAAA,EAAAA;mCAAWA,MAAM3D,SAAAA;;oBAAAA,CACnC;wBACDszC,+MAAAA,EAAK;4BAAC,EAAC3vC,KAAAA,EAAAA;+BAAWA,KAAK;;wBACvBqV,sNAAAA,EAAO;wBACLigC,qBAAqB,CAAA;oBAAA,CACtB,CAAC;iBAAA;YAAA,CAEL;SAAA;QAEH,KAAK;YACH7tC,SAAS;oBACPkoC,+MAAAA,EAAK;wBAAC,EAAC3vC,KAAAA,EAAAA;2BAAWA,KAAK;;oBACvBqV,sNAAAA,EAAO;oBACLigC,qBAAqB,CAAA;gBAAA,CACtB,CAAC;aAAA;QAAA;IAEN;AAEJ,CAAC;AC1IM,SAASC,cACdx8C,KAAAA,EACAoc,KAAAA,EACApI,YAAAA,EACY;IACZ,IAAIyoC,aAA4C,MAC5CC,QAAQ,CAAA;IACZ,MAAMC,kBAAkB;QACtBvgC,MAAMnG,IAAAA,CAAKxW,IAAAA,EACX;WAAG2c,MAAMjL,aAAAA,CAAc5Q,GAAAA,CAAK4B,CAAAA,IAAMA,EAAE1C,IAAI,CAAC;KAAA,EAErCm9C,kBAAkB;QACtBxgC,MAAM5b,KAAAA,CAAMf,IAAAA,EACZ;WAAG2c,MAAMvW,YAAAA,CAAatF,GAAAA,CAAK4B,CAAAA,IAAMA,EAAE1C,IAAI,CAAC;KAAA;IAI1C,OAAIO,UAAUuC,KAAAA,IACL;QAACm6C,OAAO,CAAA;QAAMD,YAAY;QAAMz8C;IAAAA,IAGrC,CAACK,MAAMC,OAAAA,CAAQN,KAAK,KAAKA,MAAMwC,MAAAA,KAAW,IACrC;QACLk6C,OAAO,CAAA;QACPD,YAAY;YACVrpB,SAAS;gBAACwQ,0KAAAA,EAAM,CAAA,CAAE,CAAC;aAAA;YACnBiZ,aACE;YACF5H,QAAQ;YACRvgB,MAAM10B;YAEN88C,MAAM;gBACJD,aACE;gBACF5H,QAAQ;YAAA;QACV;QAEFj1C;IAAAA,IAAAA,CAIFA,MAAM2F,IAAAA,CAAK,CAACgF,KAAwByrB,UAA2B;QAE7D,IAAI,KAAC2mB,qJAAAA,EAAcpyC,GAAG,GACpB8xC,OAAAA,aAAa;YACXrpB,SAAS;oBAACwQ,sKAAAA,EAAM;oBAACxN,KAAK;iBAAC,CAAC;aAAA;YACxBymB,aAAa,gCAA2C,OAAXnwB,OAAO/hB,GAAG,CAAC;YACxDsqC,QAAQ;YACRvgB,MAAM/pB;YAENmyC,MAAM;gBACJD,aACE;gBACF5H,QAAQ;gBACRjrB,QAAQ;oBAACoM;gBAAAA;YAAK;QAChB,GAEK,CAAA;QAGT,IAAI,CAACzrB,IAAI1K,IAAAA,IAAQ,OAAO0K,IAAI1K,IAAAA,IAAS,UACnCw8C,OAAAA,aAAa;YACXrpB,SAAS;oBAAC/F,oKAAAA,EAAI;oBAAC,GAAG1iB,GAAAA;oBAAK1K,MAAM+T,aAAAA;gBAAa,GAAI;oBAACoiB,KAAK;iBAAC,CAAC;aAAA;YACtDymB,aAAa,kBAAuB,OAALzmB,KAAK,EAAA;YACpC6e,QAAQ;YACRvgB,MAAM/pB;YAENmyC,MAAM;gBACJD,aACE;gBACF5H,QAAQ;gBACRjrB,QAAQ;oBAACoM;gBAAAA;YAAK;QAChB,GAEK,CAAA;QAGT,IAAI,CAACzrB,IAAIlK,KAAAA,IAAS,CAACm8C,gBAAgBvnC,QAAAA,CAAS1K,IAAIlK,KAAK,GAAG;YAEtD,IAAIkK,IAAIlK,KAAAA,KAAU,SAAS;gBACzB,MAAMu8C,uBAAuB5gC,MAAM5b,KAAAA,CAAMf,IAAAA;gBACzCg9C,OAAAA,aAAa;oBACXrpB,SAAS;4BACP/F,oKAAAA,EAAI;4BAAC,GAAG1iB,GAAAA;4BAAKlK,OAAOu8C;wBAAAA,GAAuB;4BAAC;gCAAC/8C,MAAM0K,IAAI1K,IAAAA;4BAAAA,CAAK;yBAAC,CAAC;qBAAA;oBAEhE48C,aAAa,oBAAwDlyC,OAApCA,IAAI1K,IAAI,EAAA,wCAAgCQ,KAAK,EAAA,wDAA2E,OAApBu8C,oBAAoB,EAAA;oBACzJ/H,QAAQ,aAAiC,OAApB+H,oBAAoB,EAAA;oBACzCtoB,MAAM/pB;oBAENmyC,MAAM;wBACJD,aACE;wBACF5H,QACE;wBACFjrB,QAAQ;4BAAC9b,KAAKvD,IAAI1K,IAAAA;4BAAMg9C,kBAAkBD;wBAAAA;oBAAoB;gBAChE,GAEK,CAAA;YACT;YAGA,OACE,CAACryC,IAAIlK,KAAAA,QACLoD,2KAAAA,EAAY;gBAACuB,QAAQgX;YAAAA,GAAQ;gBAAC,GAAGzR,GAAAA;gBAAKlK,OAAO2b,MAAM5b,KAAAA,CAAMf,IAAAA;YAAAA,CAAK,IAAA,CAE9Dg9C,aAAa;gBACXrpB,SAAS;wBACP/F,oKAAAA,EAAI;wBAAC,GAAG1iB,GAAAA;wBAAKlK,OAAO2b,MAAM5b,KAAAA,CAAMf,IAAAA;oBAAAA,GAAO;wBAAC;4BAACQ,MAAM0K,IAAI1K,IAAAA;wBAAAA,CAAK;qBAAC,CAAC;iBAAA;gBAE5D48C,aAAa,2BAAoBlyC,IAAI1K,IAAI,EAAA,+EAA8F,OAAhBmc,MAAM5b,KAAAA,CAAMf,IAAI,EAAA;gBACvIw1C,QAAQ,aAA6B,OAAhB74B,MAAM5b,KAAAA,CAAMf,IAAI,EAAA;gBACrCi1B,MAAM/pB;gBAENmyC,MAAM;oBACJD,aACE;oBACF5H,QACE;oBACFjrB,QAAQ;wBAAC9b,KAAKvD,IAAI1K,IAAAA;wBAAMg9C,kBAAkB7gC,MAAM5b,KAAAA,CAAMf,IAAAA;oBAAAA;gBAAI;YAC5D,GAEK,CAAA,CAAA,IAGJkL,IAAIlK,KAAAA,GAAAA,CAiBTg8C,aAAa;gBACXrpB,SAAS;wBAACwQ,sKAAAA,EAAM;wBAAC;4BAAC3jC,MAAM0K,IAAI1K,IAAAA;wBAAAA,CAAK;qBAAC,CAAC;iBAAA;gBACnC48C,aAAa,oBAAoDlyC,OAAhCA,IAAI1K,IAAI,EAAA,yBAAiC,WAALQ,KAAK,EAAA;gBAC1Ew0C,QAAQ;gBACRvgB,MAAM/pB;gBAENmyC,MAAM;oBACJD,aACE;oBACF5H,QAAQ;oBACRjrB,QAAQ;wBAAC9b,KAAKvD,IAAI1K,IAAAA;wBAAMi9C,UAAUvyC,IAAIlK,KAAAA;oBAAAA;gBAAK;YAC7C,GAEK,CAAA,CAAA,IAAA,CA7BLg8C,aAAa;gBACXrpB,SAAS;wBAACwQ,sKAAAA,EAAM;wBAAC;4BAAC3jC,MAAM0K,IAAI1K,IAAAA;wBAAAA,CAAK;qBAAC,CAAC;iBAAA;gBACnC48C,aAAa,oBAA4B,OAARlyC,IAAI1K,IAAI,EAAA;gBACzCg1C,QAAQ;gBACRvgB,MAAM/pB;gBAENmyC,MAAM;oBACJD,aACE;oBACF5H,QAAQ;oBACRjrB,QAAQ;wBAAC9b,KAAKvD,IAAI1K,IAAAA;oBAAAA;gBAAI;YACxB,GAEK,CAAA,CAAA;QAiBX;QAGA,IAAI0K,IAAIlK,KAAAA,KAAU2b,MAAM5b,KAAAA,CAAMf,IAAAA,EAAM;YAClC,MAAMkB,YAAYgK;YAElB,IAAIhK,UAAUO,QAAAA,IAAY,CAACb,MAAMC,OAAAA,CAAQK,UAAUO,QAAQ,GACzDu7C,OAAAA,aAAa;gBACXrpB,SAAS;oBAAC/F,wKAAAA,EAAI;wBAACnsB,UAAU,CAAA,CAAA;oBAAA,GAAK;wBAAC;4BAACjB,MAAMU,UAAUV,IAAAA;wBAAAA,CAAK;qBAAC,CAAC;iBAAA;gBACvD48C,aAAa,yBAAuC,OAAdl8C,UAAUV,IAAI,EAAA;gBACpDg1C,QAAQ;gBACRvgB,MAAM/zB;gBAENm8C,MAAM;oBACJD,aACE;oBACF5H,QACE;oBACFjrB,QAAQ;wBAAC9b,KAAKvN,UAAUV,IAAAA;oBAAAA;gBAAI;YAC9B,GAEK,CAAA;YAGT,IACEU,UAAUO,QAAAA,KAAaqB,KAAAA,KACtBlC,MAAMC,OAAAA,CAAQK,UAAUO,QAAQ,KAAKP,UAAUO,QAAAA,CAASsB,MAAAA,KAAW,GACpE;gBACA,MAAM26C,UAAU;oBACd18C,OAAO2b,MAAMnG,IAAAA,CAAKxW,IAAAA;oBAClBQ,MAAM+T,aAAAA;oBACNzS,MAAM;oBACNC,OAAO,CAAA,CAAA;gBAAA;gBAETi7C,OAAAA,aAAa;oBACXW,aAAa,CAAA;oBACbhqB,SAAS;wBACPmQ,iLAAAA,EAAa,CAAA,CAAA,EAAI;4BAAC;gCAACtjC,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO,UAAU;yBAAC;4BAC/CgjB,uKAAAA,EAAO;4BAACk6B,OAAO;yBAAA,EAAG,SAAS;4BAAC;gCAACl9C,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO;4BAAY,CAAC;yBAAC,CAAC;qBAAA;oBAE/D48C,aAAa,sCAA8C,OAARlyC,IAAI1K,IAAI,EAAA;oBAC3Dg1C,QAAQ;oBACRvgB,MAAM/pB;oBAENmyC,MAAM;wBACJD,aACE;wBACF5H,QACE;wBACFjrB,QAAQ;4BAAC9b,KAAKvD,IAAI1K,IAAAA;wBAAAA;oBAAI;gBACxB,GAEK,CAAA;YACT;YAEA,MAAMo9C,mBAAenoC,4IAAAA,EACnB0f,mJAAAA,EACEj0B,UAAUO,QAAAA,CACPiU,MAAAA,CAAQvK,CAAAA,MAAQA,IAAInK,KAAAA,KAAU2b,MAAMnG,IAAAA,CAAKxW,IAAI,EAC7Cc,GAAAA,CAAKqK,CAAAA,MAAQA,IAAIpJ,KAAAA,IAAS,CAAA,CAAE,CACjC,CACF;YAGA,IAAInB,MAAMC,OAAAA,CAAQqK,IAAI3J,QAAQ,KAAK2J,IAAI3J,QAAAA,CAASwB,MAAAA,GAAS,GAAG;gBAC1D,MAAM86C,qBAA2BpoC,4IAAAA,EAC/BvK,IAAI3J,QAAAA,CACDT,GAAAA,CAAK+uB,CAAAA,MAAQA,IAAIrvB,IAAI,EACrBkV,MAAAA,CAAQjH,CAAAA,MAAQ,CAACmvC,aAAahoC,QAAAA,CAASnH,GAAG,CAAC,CAChD;gBACA,IAAIovC,eAAe96C,MAAAA,GAAS,GAC1Bi6C,OAAAA,aAAa;oBACXW,aAAa,CAAA;oBACbhqB,SAASkqB,eAAe/8C,GAAAA,CAAKqwC,CAAAA,iBAC3BhN,sKAAAA,EAAM;4BAAC;gCAAC3jC,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO;4BAAY;gCAACA,MAAM2wC;4BAAAA,CAAW;yBAAC,CAC1D;oBACAiM,aAAa,2DAEZ,OAFuES,eAAe36C,IAAAA,CACrF,IACF,CAAC,EAAA;oBACDsyC,QAAQ;oBACRvgB,MAAM/pB;oBACNmyC,MAAM;wBACJD,aACE;wBACF5H,QACE;wBACFjrB,QAAQ;4BACN9b,KAAKvD,IAAI1K,IAAAA;4BACTq9C,gBAAgBA,eAAe/8C,GAAAA,CAAKg9C,CAAAA,IAAMA,EAAEC,QAAAA,EAAU;wBAAA;oBACxD;gBACF,GAEK,CAAA;YAEX;YAMA,MAAMC,gBAHkBJ,aAAaloC,MAAAA,CAClCC,CAAAA,OAAS,CAACgH,MAAMnH,UAAAA,CAAW1U,GAAAA,CAAKqV,CAAAA,MAAQA,IAAInW,IAAI,EAAE4V,QAAAA,CAASD,IAAI,CAClE,EACsCD,MAAAA,CACnCC,CAAAA,OACCzU,UAAUK,QAAAA,KAAauB,KAAAA,KACvB,CAAC5B,UAAUK,QAAAA,CAAS0J,IAAAA,CAAM4kB,CAAAA,MAAQA,IAAIrvB,IAAAA,KAASmV,IAAI,CACvD;YACA,IAAIqoC,cAAcj7C,MAAAA,GAAS,GAAG;gBAC5B,MAAMk7C,eAAe/8C,UAAUO,QAAAA,CAASiU,MAAAA,CACrCvK,CAAAA,MACCA,IAAInK,KAAAA,KAAU2b,MAAMnG,IAAAA,CAAKxW,IAAAA,IACzBY,MAAMC,OAAAA,CAAQsK,IAAIpJ,KAAK,KACvBoJ,IAAIpJ,KAAAA,CAAMmE,IAAAA,CAAMyP,CAAAA,OAASqoC,cAAcpoC,QAAAA,CAASD,IAAI,CAAC,CACzD;gBACA,IAAIsoC,cAAc;oBAChB,MAAMC,WAAWF,cAAc96C,IAAAA,CAAK,IAAI;oBACxC85C,OAAAA,aAAa;wBACXW,aAAa,CAAA;wBACbhqB,SAASsqB,aAAan9C,GAAAA,CAAKY,CAAAA,YAClBksB,oKAAAA,EAAAA,CACJlsB,MAAMK,KAAAA,IAAS,CAAA,CAAA,EAAI2T,MAAAA,CACjByoC,CAAAA,OAAS,CAACH,cAAcpoC,QAAAA,CAASuoC,IAAI,CACxC,GACA;gCAAC;oCAAC39C,MAAM0K,IAAI1K,IAAAA;gCAAAA;gCAAO;gCAAY;oCAACA,MAAMkB,MAAMlB,IAAAA;gCAAAA;gCAAO,OAAO;6BAC5D,CACD;wBACD48C,aAAa,2BAAoBlyC,IAAI1K,IAAI,EAAA,sBAA6B,OAAR09C,QAAQ,EAAA;wBACtE1I,QAAQ;wBACRvgB,MAAM/pB;wBAENmyC,MAAM;4BACJD,aACE;4BACF5H,QACE;4BACFjrB,QAAQ;gCACN9b,KAAKvD,IAAI1K,IAAAA;gCACTw9C,eAAeA,cAAcl9C,GAAAA,CAAKg9C,CAAAA,IAAMA,EAAEC,QAAAA,EAAU;4BAAA;wBACtD;oBACF,GAEK,CAAA;gBACT;YACF;YAIE78C,UAAUO,QAAAA,CAASyE,IAAAA,CAAK,CAACxE,OAAO08C,WAAmB;gBACjD,IAAI,KAACd,qJAAAA,EAAc57C,KAAK,GACtBs7C,OAAAA,aAAa;oBACXrpB,SAAS;4BAACwQ,sKAAAA,EAAM;4BAAC;gCAAC3jC,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO;4BAAY49C,MAAM;yBAAC,CAAC;qBAAA;oBACvDhB,aAAa,0BAAmBgB,MAAM,EAAA,yBAAgC,OAARlzC,IAAI1K,IAAI,EAAA;oBACtEg1C,QAAQ;oBACRvgB,MAAM/pB;oBAENmyC,MAAM;wBACJD,aACE;wBACF5H,QACE;wBACFjrB,QAAQ;4BAAC9b,KAAKvD,IAAI1K,IAAAA;4BAAMm2B,OAAOynB;wBAAAA;oBAAM;gBACvC,GAEK,CAAA;gBAGT,IAAI,CAAC18C,MAAMlB,IAAAA,IAAQ,OAAOkB,MAAMlB,IAAAA,IAAS,UAAU;oBACjD,MAAM69C,WAAW;wBAAC,GAAG38C,KAAAA;wBAAOlB,MAAM+T,aAAAA;oBAAa;oBAC/CyoC,OAAAA,aAAa;wBACXW,aAAa,CAAA;wBACbhqB,SAAS;gCACP/F,oKAAAA,EAAIywB,UAAU;gCAAC;oCAAC79C,MAAM0K,IAAI1K,IAAAA;gCAAAA;gCAAO;gCAAY49C,MAAM;6BAAC,CAAC;yBAAA;wBAEvDhB,aAAa,yBAAkBgB,MAAM,EAAA,iDAAwD,OAARlzC,IAAI1K,IAAI,EAAA;wBAC7Fg1C,QAAQ;wBACRvgB,MAAM/pB;wBAENmyC,MAAM;4BACJD,aACE;4BACF5H,QACE;4BACFjrB,QAAQ;gCAAC9b,KAAKvD,IAAI1K,IAAAA;gCAAMm2B,OAAOynB;4BAAAA;wBAAM;oBACvC,GAEK,CAAA;gBACT;gBAGA,OAAK18C,MAAMV,KAAAA,GAoBNk8C,gBAAgBtnC,QAAAA,CAASlU,MAAMV,KAAK,IA0BvCU,MAAMV,KAAAA,KAAU2b,MAAMnG,IAAAA,CAAKxW,IAAAA,IAC3B,OAAO0B,MAAMI,IAAAA,IAAS,WAAA,CAEtBk7C,aAAa;oBACXrpB,SAAS;4BACP/F,oKAAAA,EAAI;4BAAC,GAAGlsB,KAAAA;4BAAOI,MAAM;wBAAA,GAAK;4BACxB;gCAACtB,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BACX;4BACA;gCAACA,MAAMkB,MAAMlB,IAAAA;4BAAAA,CAAK;yBACnB,CAAC;qBAAA;oBAEJ48C,aAAa,2BAAoB17C,MAAMlB,IAAI,EAAA,yBAAgC,OAAR0K,IAAI1K,IAAI,EAAA;oBAC3Eg1C,QAAQ;oBACRvgB,MAAM/pB;oBAENmyC,MAAM;wBACJD,aACE;wBACF5H,QACE;wBACFjrB,QAAQ;4BAAC9b,KAAKvD,IAAI1K,IAAAA;4BAAMwK,UAAUtJ,MAAMlB,IAAAA;wBAAAA;oBAAI;gBAC9C,GAEK,CAAA,CAAA,IAEF,CAAA,IAAA,CAlDLw8C,aAAa;oBACXrpB,SAAS;4BACPwQ,sKAAAA,EAAM;4BAAC;gCAAC3jC,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO;4BAAY;gCAACA,MAAMkB,MAAMlB,IAAAA;4BAAAA,CAAK;yBAAC,CAAC;qBAAA;oBAE3D48C,aAAa,2BAAoB17C,MAAMlB,IAAI,EAAA,gCAAwB0K,IAAI1K,IAAI,EAAA,oCAA8C,OAAXkB,MAAMV,KAAK,EAAA;oBACzHw0C,QAAQ;oBACRvgB,MAAM/pB;oBAENmyC,MAAM;wBACJD,aACE;wBACF5H,QACE;wBACFjrB,QAAQ;4BACN9b,KAAKvD,IAAI1K,IAAAA;4BACTwK,UAAUtJ,MAAMlB,IAAAA;4BAChB89C,WAAW58C,MAAMV,KAAAA;wBAAAA;oBACnB;gBACF,GAEK,CAAA,CAAA,IAAA,CAxCPg8C,aAAa;oBACXrpB,SAAS;4BACPwQ,sKAAAA,EAAM;4BAAC;gCAAC3jC,MAAM0K,IAAI1K,IAAAA;4BAAAA;4BAAO;4BAAY;gCAACA,MAAMkB,MAAMlB,IAAAA;4BAAAA,CAAK;yBAAC,CAAC;qBAAA;oBAE3D48C,aAAa,oBAAsDlyC,OAAlCxJ,MAAMlB,IAAI,EAAA,yBAAgC,WAAJA,IAAI,EAAA;oBAC3Eg1C,QAAQ;oBACRvgB,MAAM/pB;oBAENmyC,MAAM;wBACJD,aACE;wBACF5H,QACE;wBACFjrB,QAAQ;4BAAC9b,KAAKvD,IAAI1K,IAAAA;4BAAMwK,UAAUtJ,MAAMlB,IAAAA;wBAAAA;oBAAI;gBAC9C,GAEK,CAAA,CAAA;YAuDX,CAAC,KAAA,CAEDy8C,QAAQ,CAAA,CAAA;QAEZ;QACA,OAAO,CAAA;IACT,CAAC,KAAA,CAEDA,QAAQ,CAAA,CAAA,GAEH;QAACA;QAAOD;QAAYz8C;IAAAA,CAAAA;AAC7B;AClZA,MAAMT,UAAQC,cAAc,cAAc,GAqBpCw+C,oBAcFA;QAAC,EAACjiC,QAAAA,EAAUD,KAAAA,EAAK,KAAM;IACzBmiC,YAAY;QACVz2C,SAASsU,MAAMtU,OAAAA;QACfuU;QACA/U,aAAa8U,MAAM9U,WAAAA;QACnBhH,OAAO8b,MAAM9b,KAAAA;QACbk+C,cAAcpiC,MAAMoiC,YAAAA;IAAAA,CACrB;AACH,GAEMC,iBAAiBzgC,yMAAAA,EAAasgC,iBAAiB,GAgBxCI,kBAAch3C,0LAAAA,EAAM;IAC/BgV,OAAO;QACL5U,SAAS,CAAA;QAWTsU,OAAO,CAAA;QAOPO,QAAQ,CAAA;QAgBRm6B,SAAS,CAAA;IAAC;IASZ9nC,SAAS;QACP,mCAA+B4N,sNAAAA,EAAO;YACpC+hC,oBAAoB,CAAA;QAAA,CACrB;QACD,uBAAmB/hC,sNAAAA,EAAO;YACxB7L,UAAUA;oBAAC,EAACxJ,KAAAA,EAAAA;2BACVyvC,gMAAAA,EAAYzvC,OAAO,iBAAiB,GAC7BA,MAAMwJ,QAAAA;;QAAAA,CAEhB;QACD,4BAAwB6L,sNAAAA,EAAO;YAC7BgiC,cAAcA;oBAAC,EAACr3C,KAAAA,EAAAA;2BACdyvC,gMAAAA,EAAYzvC,OAAO,cAAc,GAC1BA,MAAMjH,KAAAA;;QAAAA,CAEhB;QACD,2BAAuBsc,sNAAAA,EAAO;YAC5BgiC,cAAc/7C,KAAAA;QAAAA,CACf;QACD,yBAAyB+Z,0NAAAA,EAAO;YAC9B8oB,eAAeA;oBAAC,EAACn+B,KAAAA,EAAAA;2BACfyvC,gMAAAA,EAAYzvC,OAAO,cAAc,GAC1BA,MAAMjH,KAAAA;;QAAAA,CAEhB;QACD,+BAA2B42C,+MAAAA,EAAK;YAC9BjoC,MAAM;QAAA,CACP;QACD,0BAAsBioC,+MAAAA,EAAK;YACzBjoC,MAAM;QAAA,CACP;IAAA;IAEHgP,QAAQ;QACN,wBAAwB4gC;gBAAC,EAAC/2C,OAAAA,EAAAA;mBAAaA,QAAQ62C,kBAAAA;;QAC/C,WAAWG;gBAAC,EAACh3C,OAAAA,EAAAA,KAAa;;YACxB,MAAMi3C,2BAA2Bj3C,QAAQi3C,wBAAAA,EACnCC,uDAAgCl3C,QAAQR,WAAW,gDAAtCqnB,sBAA2C,CAAA,GACxDswB,SAASF,4BAA4BC;YAE3Cn/C,OAAAA,QAAM,UAAU;gBAACo/C;gBAAQF;gBAA0BC;YAAAA,CAAW,GAEvDC;QACT;QACA,kBAAkBC;gBAAC,EAAC33C,KAAAA,EAAAA;mBACXA,MAAM0H,IAAAA,KAAS,kBAAkB1H,MAAMjH,KAAAA,KAAUuC,KAAAA;;QAE1D,kBAAkBs8C;gBAAC,EAAC53C,KAAAA,EAAAA;mBAEhBA,MAAM0H,IAAAA,KAAS,kBACftO,MAAMC,OAAAA,CAAQ2G,MAAMjH,KAAK,KACzBiH,MAAMjH,KAAAA,CAAMwC,MAAAA,KAAW;;QAG3B,gBAAgBs8C;gBAAC,EAACt3C,OAAAA,EAASP,KAAAA,EAAAA;mBAEvBA,MAAM0H,IAAAA,KAAS,kBAAkBnH,QAAQ49B,aAAAA,KAAkBn+B,MAAMjH,KAAAA;;QAGrE,+BAA+B++C;gBAAC,EAACv3C,OAAAA,EAASP,KAAAA,EAAAA;mBACxCyvC,oMAAAA,EAAYzvC,OAAO,cAAc,GAC1BO,QAAQ82C,YAAAA,KAAiBr3C,MAAMjH,KAAAA;;QAExC,uCAAuCg/C;gBAAC,EAACx3C,OAAAA,EAAAA;uBAChCtH,+IAAAA,EAAQsH,QAAQ82C,YAAAA,EAAc92C,QAAQ49B,aAAa;;IAAA;IAG9D3nB,QAAQ;QACN,cAAc0gC;IAAAA;AAElB,CAAC,EAAE9/B,aAAAA,CAAc;IACfxQ,IAAI;IACJrG,SAASA;YAAC,EAACsU,KAAAA,EAAAA;eAAY;YACrB8sB,cAAc9sB,MAAM8sB,YAAAA;YACpByV,oBAAoB,CAAA;YACpBI,0BAA0B,CAAA;YAC1BzqC,cAAc8H,MAAM9H,YAAAA;YACpB5O,QAAQ0W,MAAM1W,MAAAA;YACdqL,UAAUqL,MAAMrL,QAAAA;YAChBzJ,aAAa8U,MAAM9U,WAAAA;YACnBs3C,cAAc/7C,KAAAA;YACd6iC,eAAe7iC,KAAAA;QAAAA;;IAEjBqc,OAAO;YACL4qB,mNAAAA,EAAM;gBAAC,EAAChiC,OAAAA,EAAAA;mBACC;gBAACmH,MAAM;gBAAgB3O,OAAOwH,QAAQohC,YAAAA;YAAAA,EAC9C,CAAC;;KAAA;IAEJ1pC,IAAI;QACF,yBAAyB;YACvBwP,aAAS4N,sNAAAA,EAAO;gBACdmiC,0BAA0B,CAAA;YAAA,CAC3B;QAAA;QAEH,UAAY;YACV/vC,aAAS4N,sNAAAA,EAAO;gBACdmiC,0BAA0B,CAAA;YAAA,CAC3B;QAAA;QAEH,mBAAmB;YACjB/vC,SAAS;gBAAC,iBAAiB;aAAA;QAAA;IAC7B;IAEF8P,SAAS;IACTC,QAAQ;QACNu5B,MAAM;YACJp5B,OAAO;gBACL,MAAM;oBACJrf,QAAM,sBAAsB;gBAC9B,CAAC;aAAA;YAEHk4C,MAAM;gBACJ,MAAM;oBACJl4C,QAAM,qBAAqB;gBAC7B,CAAC;aAAA;YAEHL,IAAI;gBACF,gBAAgB;oBACd;wBACEoP,WAAOqQ,+MAAAA,EAAI;4BAAC;gCAAkB06B,+MAAAA,EAAI,sBAAsB,CAAC;yBAAC;wBAC1D3qC,SAAS;4BAAC;4BAA+B,yBAAyB;yBAAA;oBAAA;oBAEpE;wBACEJ,WAAOqQ,+MAAAA,EAAI;4BAAC;gCAAkB06B,+MAAAA,EAAI,sBAAsB,CAAC;yBAAC;wBAC1D3qC,SAAS;4BACP;gCACAkoC,+MAAAA,EAAK;gCAACjoC,MAAM;gCAAiB3O,OAAO,CAAA,CAAA;4BAAA,CAAG;4BACvC,yBAAyB;yBAAA;oBAAA;oBAG7B;wBACEsO,OAAOqQ,mNAAAA,EAAI;4BAAC;4BAAW,cAAc;yBAAC;wBACtCzW,QAAQ;wBACRwG,SAAS;4BAAC,sBAAsB;yBAAA;oBAAA;oBAElC;wBACEJ,OAAO;wBACPpG,QAAQ;wBACRwG,SAAS;4BAAC,sBAAsB;yBAAA;oBAAA;oBAElC;wBACEJ,WAAO+qC,+MAAAA,EAAI,sBAAsB;wBACjC3qC,SAAS;4BACP,MAAM;gCACJnP,QAAM,qDAAgD;4BACxD;4BACA;4BACA,yBAAyB;yBAAA;oBAAA;oBAG7B;wBACEmP,SAAS;4BACP,MAAM;gCACJnP,QAAM,+CAA+C;4BACvD,CAAC;yBAAA;oBAAA,CAEJ;iBAAA;YAAA;QAEL;QAEF0/C,MAAM;YACJrgC,OAAO;gBACL,MAAM;oBACJrf,QAAM,sBAAsB;gBAC9B,CAAC;aAAA;YAEHk4C,MAAM;gBACJ,MAAM;oBACJl4C,QAAM,qBAAqB;gBAC7B,CAAC;aAAA;YAEH6nC,OAAO;gBACL,KAAM;oBACJ;wBACE94B,OAAO;wBACPpG,QAAQ;wBACRixC,SAAS,CAAA;wBACTzqC,SAAS;4BACP,MAAM;gCACJnP,QAAM,wBAAwB;4BAChC,CAAC;yBAAA;oBAAA;oBAGL;wBACE2I,QAAQ;oBAAA,CACT;iBAAA;YAAA;YAGLhJ,IAAI;gBACF,gBAAgB;oBACd;wBACEoP,OAAO;wBACPI,SAAS;4BAAC,sBAAsB;yBAAA;oBAAA,CACjC;iBAAA;YAAA;QAEL;QAEFwwC,SAAS;YACPtgC,OAAO;gBACL,MAAM;oBACJrf,QAAM,yBAAyB;gBACjC;gBACA,oBAAoB;aAAA;YAEtBk4C,MAAM;gBACJ,MAAM;oBACJl4C,QAAM,wBAAwB;gBAChC;gBACA,yBAAyB;aAAA;YAE3B+e,QAAQ;gBACNC,KAAK;gBACL1Q,IAAI;gBACJiO,OAAOA;wBAAC,EAACtU,OAAAA,EAAAA;2BACA;wBACLA,SAAS;4BACPwM,cAAcxM,QAAQwM,YAAAA;4BACtBoxB,eAAe59B,QAAQ49B,aAAAA;4BACvB30B,UAAUjJ,QAAQiJ,QAAAA;4BAClBrL,QAAQoC,QAAQpC,MAAAA;wBAAAA;wBAElB4B,aAAaQ,QAAQR,WAAAA;wBACrBk3C,cAAc,CAAC12C,QAAQ62C,kBAAAA;wBACvBr+C,OAAOwH,QAAQ82C,YAAAA;oBAAAA;;YACjB;YAGJp/C,IAAI;gBACF,gBAAgB;oBACdoP,OAAO;oBACPI,SAAS;wBAAC,sBAAsB;qBAAA;gBAAA;gBAElC,OAAS;oBACPA,SAAS;4BAACkoC,+MAAAA,EAAK;gCAAC,EAAC3vC,KAAAA,EAAAA;mCAAWA,KAAK,CAAC;;qBAAA;gBAAA;gBAEpC,iBAAiB;oBACfyH,SAAS;4BAACkoC,+MAAAA,EAAK;gCAAC,EAAC3vC,KAAAA,EAAAA;mCAAWA,KAAK,CAAC;;qBAAA;gBAAA;gBAEpC,iBAAiB;oBACfyH,SAAS;4BAACkoC,+MAAAA,EAAK;gCAAC,EAAC3vC,KAAAA,EAAAA;mCAAWA,KAAK,CAAC;;qBAAA;gBAAA;gBAEpC,gBAAgB;oBACd;wBACEqH,OAAO;wBACPI,SAAS;4BAAC;4BAAyB,6BAA6B;yBAAA;wBAChExG,QAAQ;wBACRixC,SAAS,CAAA;oBAAA;oBAEX;wBACEjxC,QAAQ;wBACRwG,SAAS;4BACP;4BACA;4BACA,6BAA6B;yBAAA;oBAAA,CAEhC;iBAAA;YAAA;QAEL;IACF;AAEJ,CAAC;AAED,eAAeuvC,iBAiBf,EAAG;UAhBDz2C,OAAAA,EACAuU,QAAAA,EACA/U,WAAAA,EACAk3C,YAAAA,EACAl+C,KAAAA,EAYF,GAjB2B;IAkBzB,IAAIm/C,cAAc,CAAA,GACdC,YAAY,CAAA,GACZC,UAAU,CAAA;IAEd,MAAMC,eAAe,CAAC,CAACt4C,YAAY1D,SAAAA;IA0CnC,IAAA,CAvCI,CAACtD,SAASA,MAAMwC,MAAAA,KAAW,CAAA,KAAA,CAC7BjD,QAAM,gBAAgB,GACtBwD,yJAAAA,CAAOuuB,kBAAAA,CAAmBtqB,aAAa,MAAM;QAC3CiuB,cAAcjuB,aAAa,MAAM;YAC/BmnB,kBAAkBnnB,aAAa,MAAM;gBACnCw9B,gBAAgBx9B,aAAa,MAAM;oBACjC,IAAIm4C,aACF;oBAGEG,gBACFh+B,6JAAAA,CAAWoI,QAAAA,CAAS1iB,WAAW;oBAGjC,MAAMu4C,iBAAiBv4C,YAAY9F,QAAAA,CAASsB,MAAAA;oBAE5CwE,YAAY9F,QAAAA,CAAS+Z,OAAAA,CAAQ,CAAC4D,GAAGuX,UAAU;wBACzC9U,6JAAAA,CAAW4Y,WAAAA,CAAYlzB,aAAa;4BAClC/D,IAAI;gCAACs8C,iBAAiB,IAAInpB,KAAK;6BAAA;wBAAA,CAChC;oBACH,CAAC,GAED9U,6JAAAA,CAAWmP,WAAAA,CACTzpB,aACAA,YAAY+6B,kBAAAA,CAAmB;wBAAC9sB,YAAY,CAAA,CAAA;oBAAA,CAAG,GAC/C;wBAAChS,IAAI;4BAAC,CAAC;yBAAA;oBAAA,CACT,GAGIq8C,gBACFh+B,6JAAAA,CAAWC,MAAAA,CAAOva,aAAa;wBAAC;wBAAG,CAAC;qBAAC;gBAEzC,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC,GACDo4C,YAAY,CAAA,CAAA,GAGVp/C,SAASA,MAAMwC,MAAAA,GAAS,GAAG;QAC7B,MAAMg9C,sBAAsBr/C,aAAaH,OAAO;YAC9CI,aAAaoH,QAAQpC,MAAAA;QAAAA,CACtB;QAEG84C,eACF,MAAM,IAAIt7B,QAAeC,CAAAA,YAAY;YACnC9f,yJAAAA,CAAOuuB,kBAAAA,CAAmBtqB,aAAa,MAAM;gBAC3CmnB,kBAAkBnnB,aAAa,MAAM;oBACnCw9B,gBAAgBx9B,aAAa,MAAM;wBACjC,IAAIm4C,aAAa;4BACft8B,QAAAA;4BACA;wBACF;wBAEAu8B,YAAYK,kBAAkB;4BAC5Bz4C;4BACAw4C;wBAAAA,CACD,GAAA,CAEqB,YAAY;4BAChC,WAAA,MAAiB,CACfE,cACAC,iBAAiB,CAAA,IACdC,kBAAkB;gCACrBC,YAAYL;4BAAAA,CACb,EAAG;gCACF,MAAM,EAACM,YAAAA,EAAcC,UAAAA,EAAAA,GAAcC,UAAU;oCAC3Cx4C;oCACAuU;oCACAvb,OAAOk/C;oCACPtpB,OAAOupB;oCACP34C;oCACAhH;gCAAAA,CACD;gCAKD,IAHAo/C,YAAYU,gBAAgBV,WAC5BC,UAAUA,WAAWU,YAEjB,CAACV,SACH;4BAEJ;4BAEAx8B,QAAAA;wBACF,CAAA,EAAA;oBAGF,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC,IAED9f,yJAAAA,CAAOuuB,kBAAAA,CAAmBtqB,aAAa,MAAM;YAC3CmnB,kBAAkBnnB,aAAa,MAAM;gBACnCw9B,gBAAgBx9B,aAAa,MAAM;oBACjC,IAAIm4C,aACF;oBAGFC,YAAYK,kBAAkB;wBAC5Bz4C;wBACAw4C;oBAAAA,CACD;oBAED,IAAIppB,QAAQ;oBAEZ,KAAA,MAAWspB,gBAAgBF,oBAAqB;wBAC9C,MAAM,EAACM,YAAAA,EAAcC,UAAAA,EAAAA,GAAcC,UAAU;4BAC3Cx4C;4BACAuU;4BACAvb,OAAOk/C;4BACPtpB;4BACApvB;4BACAhH;wBAAAA,CACD;wBAKD,IAHAo/C,YAAYU,gBAAgBV,WAC5BC,UAAUA,WAAWU,YAEjB,CAACA,YACH;wBAGF3pB;oBACF;gBACF,CAAC;YACH,CAAC;QACH,CAAC;IAEL;IAEA,IAAI,CAACipB,SAAS;QACZ9/C,QAAM,0BAA0B,GAChC4/C,cAAc,CAAA,GACdpjC,SAAS;YAACpN,MAAM;YAAgB3O;QAAAA,CAAM;QACtC;IACF;IAEA,IAAIo/C,WAAW;QACb7/C,QAAM,sCAAsC;QAC5C,IAAI;YACFyH,YAAY0a,QAAAA,CAAAA;QACd,EAAA,OAASwT,KAAK;YACZlrB,QAAQsG,KAAAA,CAAM4kB,GAAG,GACjBnZ,SAAS;gBACPpN,MAAM;gBACN8tC,YAAY;gBACZz8C;YAAAA,CACD,GACDm/C,cAAc,CAAA,GACdpjC,SAAS;gBAACpN,MAAM;gBAAgB3O;YAAAA,CAAM;YACtC;QACF;QACIs/C,gBAAgB,CAACt4C,YAAY1D,SAAAA,IAAAA,CAC/Bge,6JAAAA,CAAWC,MAAAA,CAAOva,aAAa;YAC7BR,QAAQ;gBAAC/C,MAAM;oBAAC;oBAAG,CAAC;iBAAA;gBAAGiD,QAAQ;YAAA;YAC/BlD,OAAO;gBAACC,MAAM;oBAAC;oBAAG,CAAC;iBAAA;gBAAGiD,QAAQ;YAAA;QAAC,CAChC,GACDM,YAAY0a,QAAAA,CAAAA,CAAAA,GAEd3F,SAAS;YAACpN,MAAM;YAAiB3O;QAAAA,CAAM;IACzC,OACET,QAAM,0DAA0D;IAGlE4/C,cAAc,CAAA,GACdpjC,SAAS;QAACpN,MAAM;QAAgB3O;IAAAA,CAAM;AACxC;AAEA,SAASy/C,uBAMT,EAAG;UALDz4C,WAAAA,EACAw4C,mBAAAA,EAIF,GAN2B;IAOzB,IAAIJ,YAAY,CAAA;IAChB,MAAMG,iBAAiBv4C,YAAY9F,QAAAA,CAASsB,MAAAA;IAG5C,IAAIg9C,oBAAoBh9C,MAAAA,GAAS+8C,gBAAgB;QAC/C,IAAA,IAAS1T,IAAI0T,iBAAiB,GAAG1T,IAAI2T,oBAAoBh9C,MAAAA,GAAS,GAAGqpC,IACnEvqB,6JAAAA,CAAW4Y,WAAAA,CAAYlzB,aAAa;YAClC/D,IAAI;gBAAC4oC,CAAC;aAAA;QAAA,CACP;QAEHuT,YAAY,CAAA;IACd;IACA,OAAOA;AACT;AAEA,gBAAgBQ,uBAIhB;QAJkC,EAChCC,UAAAA,EAGF,EAAG;IACD,IAAIzpB,QAAQ;IACZ,WAAA,MAAiB51B,SAASq/C,WACpBzpB,QAAQ,OAAO,KACjB,MAAM,IAAIxT,QAAeC,CAAAA,UAAYo9B,WAAWp9B,SAAS,CAAC,CAAC,GAE7D,MAAM;QAACriB;QAAO41B,KAAK;KAAA,EACnBA;AAEJ;AAEA,SAAS4pB,eAmBT,EAAG;UAlBDx4C,OAAAA,EACAuU,QAAAA,EACAvb,KAAAA,EACA41B,KAAAA,EACApvB,WAAAA,EACAhH,KAAAA,EAaF,GAnBmB;IAoBjB,IAAI8/C,eAAe,CAAA,GACfC,aAAa,CAAA;IACjB,MAAML,eAAel/C,OACfm/C,oBAAoBvpB,OACpBsN,WAAW18B,YAAY9F,QAAAA,CAASy+C,iBAAiB,CAAA,EACjDO,aAAaxc,YAAY,KAACxjC,+IAAAA,EAAQw/C,cAAchc,QAAQ;IAE9D3gC,OAAAA,yJAAAA,CAAOuuB,kBAAAA,CAAmBtqB,aAAa,MAAM;QAC3CmnB,kBAAkBnnB,aAAa,MAAM;YACnCw9B,gBAAgBx9B,aAAa,MAAM;gBACjC,IAAIk5C,cAAcH,YAAY;wBAU1BK,wBACAA,yBAUyFA,yBAOnEA;oBA3BxB,MAAMD,kBAAkB;wBAACngD,KAAAA,CAAM2/C,iBAAiB,CAAC;qBAAA,EAC3CS,aAAa5D,cACjB2D,iBACA34C,QAAQpC,MAAAA,EACRoC,QAAQwM,YACV;oBAGE,CAACosC,WAAW1D,KAAAA,0CACDD,UAAAA,kFAAYW,WAAAA,4CACZX,UAAAA,oFAAYrpB,OAAAA,CAAQ5wB,MAAAA,IAAS,KAItC,CAACgF,QAAQiJ,QAAAA,IACTjJ,QAAQ49B,aAAAA,IACR59B,QAAQ49B,aAAAA,KAAkBplC,SAAAA,CAG1BgK,QAAQC,IAAAA,CACN,GAAwDk2C,OAArDC,WAAW3D,UAAAA,CAAWxH,MAAM,EAAA,gDAAyBkL,CAAgB,CAAC,CAAA,CAAElgD,IAAI,EAAA,OAAwC,CACzH,4CADkGw8C,UAAAA,oFAAYI,WAAW,IAEzHuD,WAAW3D,UAAAA,CAAWrpB,OAAAA,CAAQnY,OAAAA,CAASkX,CAAAA,UAAU;wBAC/CpW,SAAS;4BAACpN,MAAM;4BAASwjB;wBAAAA,CAAM;oBACjC,CAAC,CAAA,GAGDiuB,WAAW1D,KAAAA,2CAAoBD,UAAAA,oFAAYW,WAAAA,IAAAA,CACzC1Z,SAASzjC,IAAAA,KAASy/C,aAAaz/C,IAAAA,GAAAA,CAC7BV,QAAMI,OAAAA,IAASJ,QAAM,kBAAkBmkC,UAAUgc,YAAY,GACjEW,aACEr5C,aACA04C,cACAhc,UACAic,iBACF,CAAA,IAAA,CAEIpgD,QAAMI,OAAAA,IACRJ,QAAM,mBAAmBmkC,UAAUgc,YAAY,GACjDY,cAAct5C,aAAa04C,cAAcC,iBAAiB,CAAA,GAE5DG,eAAe,CAAA,CAAA,IAAA,CAEf/jC,SAAS;wBACPpN,MAAM;wBACN8tC,YAAY2D,WAAW3D,UAAAA;wBACvBz8C;oBAAAA,CACD,GACD+/C,aAAa,CAAA,CAAA;gBAEjB;gBAEA,IAAI,CAACrc,YAAYqc,YAAY;wBAYHK;oBAXxB,MAAMD,kBAAkB;wBAACngD,KAAAA,CAAM2/C,iBAAiB,CAAC;qBAAA,EAC3CS,aAAa5D,cACjB2D,iBACA34C,QAAQpC,MAAAA,EACRoC,QAAQwM,YACV;oBACIzU,QAAMI,OAAAA,IACRJ,QACE,8DACAmgD,YACF,GACEU,WAAW1D,KAAAA,2CAAoBD,UAAAA,oFAAYW,WAAAA,IAC7C97B,6JAAAA,CAAWmP,WAAAA,CAAYzpB,aAAa04C,cAAc;wBAChDz8C,IAAI;4BAAC08C,iBAAiB;yBAAA;oBAAA,CACvB,IAAA,CAEDpgD,QAAM,WAAW6gD,UAAU,GAC3BrkC,SAAS;wBACPpN,MAAM;wBACN8tC,YAAY2D,WAAW3D,UAAAA;wBACvBz8C;oBAAAA,CACD,GACD+/C,aAAa,CAAA,CAAA;gBAEjB;YACF,CAAC;QACH,CAAC;IACH,CAAC,GAEM;QAACD;QAAcC;IAAAA;AACxB;AAMA,SAASO,cACPt5C,WAAAA,EACA04C,YAAAA,EACAC,iBAAAA,EACA;IAGA,MAAMzjB,mBAAmBl1B,YAAY1D,SAAAA,EAC/Bi9C,wBACJrkB,oBAAoBA,iBAAiB14B,KAAAA,CAAMC,IAAAA,CAAK,CAAC,CAAA,KAAMk8C;IACrDY,yBACFj/B,6JAAAA,CAAWoI,QAAAA,CAAS1iB,WAAW,GAEjCsa,6JAAAA,CAAW4Y,WAAAA,CAAYlzB,aAAa;QAAC/D,IAAI;YAAC08C,iBAAiB;SAAA;IAAA,CAAE,GAC7Dr+B,6JAAAA,CAAWmP,WAAAA,CAAYzpB,aAAa04C,cAAc;QAACz8C,IAAI;YAAC08C,iBAAiB;SAAA;IAAA,CAAE,GAC3E34C,YAAY0a,QAAAA,IACR6+B,yBACFj/B,6JAAAA,CAAWC,MAAAA,CAAOva,aAAak1B,gBAAgB;AAEnD;AAMA,SAASmkB,aACPr5C,WAAAA,EACA04C,YAAAA,EACAhc,QAAAA,EACAic,iBAAAA,EACA;IAMA,IAJAr+B,6JAAAA,CAAW8N,QAAAA,CAASpoB,aAAa04C,cAA+B;QAC9Dz8C,IAAI;YAAC08C,iBAAiB;SAAA;IAAA,CACvB,GAGC34C,YAAYnD,WAAAA,CAAY67C,YAAY,KACpC14C,YAAYnD,WAAAA,CAAY6/B,QAAQ,GAChC;QACA,MAAM8c,yBAAyB9c,SAASxiC,QAAAA,CAASsB,MAAAA;QAC7Ck9C,aAAax+C,QAAAA,CAASsB,MAAAA,GAASg+C,0BAEjCngD,MAAMyC,IAAAA,CACJzC,MAAMmgD,yBAAyBd,aAAax+C,QAAAA,CAASsB,MAAM,CAC7D,EAAEyY,OAAAA,CAAQ,CAAC4D,GAAGuX,UAAU;YACtB,MAAM1xB,aAAa87C,yBAAyB,IAAIpqB;YAC5C1xB,aAAa,KAAA,CACfnF,QAAM,gBAAgB,GACtB+hB,6JAAAA,CAAW4Y,WAAAA,CAAYlzB,aAAa;gBAClC/D,IAAI;oBAAC08C;oBAAmBj7C,UAAU;iBAAA;YAAA,CACnC,CAAA;QAEL,CAAC,GAEHg7C,aAAax+C,QAAAA,CAAS+Z,OAAAA,CACpB,CAACwlC,mBAAmBC,2BAA2B;YAC7C,MAAMC,gBAAgBjd,SAASxiC,QAAAA,CAASw/C,sBAAsB,CAAA,EACxDE,iBAAiB,KAAC1gD,+IAAAA,EAAQugD,mBAAmBE,aAAa,GAC1DE,gBAAgB,CAAC3gD,mJAAAA,EACrBugD,kBAAkBl/C,IAAAA,gEAClBo/C,cAAep/C,IACjB,GACMkC,OAAO;gBAACk8C;gBAAmBe,sBAAsB;aAAA;YACvD,IAAIE,gBAEF,IAAIH,kBAAkBxgD,IAAAA,oEAAS0gD,cAAe1gD,IAAAA,GAAM;gBAClDV,QAAM,0BAA0BkhD,mBAAmBE,aAAa,GAChEr/B,6JAAAA,CAAW8N,QAAAA,CACTpoB,aACAy5C,mBACA;oBACEx9C,IAAIQ;gBAAAA,CAER;gBACA,MAAM2iC,cACJ3jC,uJAAAA,CAAKC,MAAAA,CAAO+9C,iBAAiB,KAC7BA,kBAAkBhgD,KAAAA,KAAU,UAC5BgC,uJAAAA,CAAKC,MAAAA,CAAOi+C,aAAa,KACzBA,cAAclgD,KAAAA,KAAU;gBACtB2lC,eAAcya,gBAAAA,CACZF,cAAcp/C,IAAAA,CAAKiB,MAAAA,GAAS,SAC9Bm4B,6JAAAA,EAAW3zB,aAAa;oBACtB/D,IAAI;wBACFO,OAAO;4BAACC;4BAAMiD,QAAQ;wBAAA;wBACtBF,QAAQ;4BAAC/C;4BAAMiD,QAAQi6C,cAAcp/C,IAAAA,CAAKiB,MAAAA;wBAAAA;oBAAM;gBAClD,CACD,GAEH8e,6JAAAA,CAAW8b,UAAAA,CAAWp2B,aAAay5C,kBAAkBl/C,IAAAA,EAAM;oBACzD0B,IAAIQ;gBAAAA,CACL,GACDuD,YAAY0a,QAAAA,CAAAA,CAAAA,IACF0kB,eAAAA,CAEV7mC,QAAM,wCAAwCkhD,iBAAiB,GAC/Dn/B,6JAAAA,CAAW8N,QAAAA,CACTpoB,aACA;oBAAC/G,MAAML;gBAAAA,GACP;oBACEqD,IAAI,CAAC;2BAAGQ;wBAAM,CAAC;qBAAA;oBACf0rB,OAAO,CAAA;gBAAA,CAEX,CAAA;YAGJ,MAAWwxB,CAAAA,gBAAAA,CACTphD,QAAM,mBAAmBkhD,iBAAiB,GAC1Cn/B,6JAAAA,CAAW4Y,WAAAA,CAAYlzB,aAAa;gBAClC/D,IAAI;oBAAC08C;oBAAmBe,sBAAsB;iBAAA;YAAA,CAC/C,GACDp/B,6JAAAA,CAAWmP,WAAAA,CAAYzpB,aAAay5C,mBAA2B;gBAC7Dx9C,IAAI;oBAAC08C;oBAAmBe,sBAAsB;iBAAA;YAAA,CAC/C,GACD15C,YAAY0a,QAAAA,CAAAA,CAAAA,IAEFi/B,iBAAAA,CACVphD,QAAM,uBAAuBkhD,iBAAiB,GAC9Cn/B,6JAAAA,CAAWmP,WAAAA,CAAYzpB,aAAay5C,mBAA2B;gBAC7Dx9C,IAAI;oBAAC08C;oBAAmBe,sBAAsB;iBAAA;YAAA,CAC/C,GACD15C,YAAY0a,QAAAA,EAAAA;QAGlB,CACF;IACF;AACF;AC11BA,MAAMniB,UAAQC,cAAc,OAAO;AAU5B,SAASshD,qBAAqBlzC,MAAAA,EASnC;IACArO,QAAM,8BAA8B;IAEpC,MAAM2zB,gBAAyC,CAAA,CAAA,EACzCnsB,kBAAcg6C,+NAAAA,EAAYxK,eAAe;QAC7Cz6B,OAAOklC,2BAA2BpzC,MAAM;IAAA,CACzC,GACK4S,iBAAaugC,+NAAAA,EAAY1E,YAAY,GACrCr1C,cAAcwhC,kBAAkB;QACpCzhC;QACAyZ;QACA0S;IAAAA,CACD,GACK+tB,WAAW3H,kBAAkBtyC,YAAY8M,QAAAA,EAAU/M,WAAW,GAC9D,EAACm6C,aAAAA,EAAeC,SAAAA,EAAAA,GAAaC,aAAa;QAC9Cr6C;QACAyZ;QACAxZ,aAAaA,YAAY8M,QAAAA;QACzBof;IAAAA,CACD,GAEKp0B,SAAS;QACbktC,KAAKnD,gBACF5hC,CAAAA,QAAUF,YAAYsI,IAAAA,CAAKpI,KAAK,GACjCD,YAAY8M,QACd;QACA5M,aAAaA,IACXyM,kBAAkB;gBAChBD,qBAAqB3M,YAAYG,WAAAA,CAAAA;gBACjC0M,qBAAqB5M,YAAY8M,QAAAA;YAAAA,CAClC;QACHutC,kBAAmBjyC,CAAAA,mBAAmB;YACpC,MAAMP,WAAWlB,qBAAqB;gBACpClO,MAAM;gBACNsO,WAAW;oBACTc,UAAUb;oBACVc,YAAY;gBAAA;YACd,CACD,GACKwyC,6BAA6B;gBACjC,GAAGlyC,cAAAA;gBACHP;YAAAA;YAGF9H,OAAAA,YAAYsI,IAAAA,CAAK;gBACfV,MAAM;gBACNS,gBAAgBkyC;YAAAA,CACjB,GAEM,MAAM;gBACXv6C,YAAYsI,IAAAA,CAAK;oBACfV,MAAM;oBACNS,gBAAgBkyC;gBAAAA,CACjB;YACH;QACF;QACAjyC,MAAOpI,CAAAA,UAAU;YACf,OAAQA,MAAM0H,IAAAA,EAAAA;gBACZ,KAAK;oBACHwyC,UAAU9xC,IAAAA,CAAKpI,KAAK;oBACpB;gBAEF,KAAK;gBACL,KAAK;gBACL,KAAK;oBACHF,YAAYsI,IAAAA,CAAKpI,KAAK;oBACtB;gBAEF;oBACEF,YAAYsI,IAAAA,CACVinC,6BAA6B;wBAC3BrvC;wBACAD,aAAaA,YAAY8M,QAAAA;oBAAAA,CAC1B,CACH;YAAA;QAEN;QACA5U,IAAIA,CAAC+H,OAAOs6C,WACW/gC,WAAWthB,EAAAA,CAAG+H,OAAQA,CAAAA,WAAU;gBACnD,OAAQA,OAAM0H,IAAAA,EAAAA;oBACZ,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;oBACL,KAAK;wBACH4yC,SAASt6C,MAAK;wBACd;gBAAA;YAEN,CAAC;QAIH4M,WAAW;YACTotC;YACAl6C;YACAC;QAAAA;IACF;IAGF,OAAO;QACLyW,QAAQ;YACN1W;YACAm6C;YACA1gC;YACA2gC;QAAAA;QAEFriD;QACAo0B;IAAAA;AAEJ;AAEA,SAAS8tB,2BAA2BpzC,MAAAA,EAAsB;IACxD,MAAM,EAACsC,YAAAA,EAAc9K,MAAAA,EAAAA,GAAUo8C,+BAA+B5zC,MAAM;;IAEpE,OAAO;QACLmG,YAAY4Y,qBAAqBzc,YAAY;QAC7CiD,iBAAiBA,IAAMjD;QACvB8D,6CAAqBA,YAAAA,gDAAPpG,uBAAuBE,qNAAAA;QACrC8wB,WAAWhxB,OAAOgxB,SAAAA;QAClBnuB,UAAU7C,OAAO6C,QAAAA;QACjBrL;QACAwjC,cAAch7B,OAAOg7B,YAAAA;IAAAA;AAEzB;AAEA,SAAS4Y,+BAA+B5zC,MAAAA,EAAsB;IAC5D,MAAMsC,eAAetC,OAAO6zC,gBAAAA,OACxBC,gOAAAA,EACE9zC,OAAO6zC,gBACT,QACAE,6MAAAA,EACE/zC,OAAOxI,MAAAA,CAAOuiC,cAAAA,CAAe,UAAU,IACnC/5B,OAAOxI,MAAAA,GACPwnB,YAAYhf,OAAOxI,MAAM,CAC/B,GACEA,SAASwI,OAAO6zC,gBAAAA,OAClBG,6KAAAA,EAAch0C,OAAO6zC,gBAAgB,QACrCI,+MAAAA,EAAsC3xC,YAAY;IAEtD,OAAO;QACLA;QACA9K;IAAAA;AAEJ;AAEA,SAASg8C,aAAaxzC,MAAAA,EAQpB;IACArO,QAAM,qBAAqB;IAE3B,MAAM2hD,oBAAgBH,+NAAAA,EAAY5I,iBAAiB;QACjDr8B,OAAO;YACLrL,UAAU7C,OAAO7G,WAAAA,CACdG,WAAAA,CAAAA,EACAC,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY;YACrC/B,QAAQwI,OAAO7G,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;YACjD4B,aAAa4G,OAAO5G,WAAAA;QAAAA;IACtB,CACD,GAEKm6C,gBAAYJ,+NAAAA,EAAY3C,aAAa;QACzCtiC,OAAO;YACL8sB,cAAch7B,OAAO7G,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQohC,YAAAA;YACvD50B,cAAcpG,OAAO7G,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQwM,YAAAA;YACvDvD,UAAU7C,OAAO7G,WAAAA,CACdG,WAAAA,CAAAA,EACAC,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY;YACrC/B,QAAQwI,OAAO7G,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA;YACjD4B,aAAa4G,OAAO5G,WAAAA;QAAAA;IACtB,CACD;IAED4G,OAAAA,OAAOslB,aAAAA,CAAcrsB,IAAAA,CAAK,MAAM;QAC9B,MAAM1H,eAAe+hD,cAAchiD,EAAAA,CAAG,KAAM+H,CAAAA,UAAU;YAChDA,MAAM0H,IAAAA,KAAS,2BACjBwyC,UAAU9xC,IAAAA,CAAK;gBAACV,MAAM;YAAA,CAAwB,GAE5C1H,MAAM0H,IAAAA,KAAS,cAAA,CACjBwyC,UAAU9xC,IAAAA,CAAK;gBAACV,MAAM;YAAA,CAAW,GACjCf,OAAO7G,WAAAA,CAAYsI,IAAAA,CAAK;gBACtBV,MAAM;gBACNykB,SAASnsB,MAAMmsB,OAAAA;gBACfpoB,UAAU/D,MAAM+D,QAAAA;gBAChBhL,OAAOiH,MAAM+D,QAAAA;YAAAA,CACd,CAAA,GAEC/D,MAAM0H,IAAAA,KAAS,WACjBf,OAAO4S,UAAAA,CAAWnR,IAAAA,CAAKpI,KAAK;QAEhC,CAAC;QAED,OAAO,MAAM;YACX9H,aAAaC,WAAAA,CAAAA;QACf;IACF,CAAC,GAEDwO,OAAOslB,aAAAA,CAAcrsB,IAAAA,CAAK,MAAM;QAC9B,MAAM1H,eAAegiD,UAAUjiD,EAAAA,CAAG,KAAM+H,CAAAA,UAAU;YAChD,OAAQA,MAAM0H,IAAAA,EAAAA;gBACZ,KAAK;oBACHf,OAAO4S,UAAAA,CAAWnR,IAAAA,CAAKpI,KAAK;oBAC5B;gBACF,KAAK;oBACH2G,OAAO4S,UAAAA,CAAWnR,IAAAA,CAAKpI,KAAK;oBAC5B;gBACF,KAAK;oBACH2G,OAAO7G,WAAAA,CAAYsI,IAAAA,CAAK;wBACtB,GAAGpI,KAAAA;wBACH0H,MAAM;wBACN3O,OAAO6B,eACL+L,OAAO5G,WAAAA,CAAY9F,QAAAA,EACnB0M,OAAO7G,WAAAA,CAAYG,WAAAA,CAAAA,EAAcM,OAAAA,CAAQpC,MAAAA,CAAO5E,KAAAA,CAAMf,IAAAA,EACtD4M,qBAAqBb,GAAAA,CAAIoC,OAAO5G,WAAW,CAC7C;oBAAA,CACD;oBACD;gBAEF;oBACE4G,OAAO7G,WAAAA,CAAYsI,IAAAA,CAAKpI,KAAK;YAAA;QAEnC,CAAC;QAED,OAAO,MAAM;YACX9H,aAAaC,WAAAA,CAAAA;QACf;IACF,CAAC,GAEDwO,OAAOslB,aAAAA,CAAcrsB,IAAAA,CAAK,MAAM;QAC9B,MAAM1H,eAAeyO,OAAO7G,WAAAA,CAAY+6C,SAAAA,CAAW92C,CAAAA,aAAa;YAC1DA,SAAS7D,OAAAA,CAAQ;gBAAC,aAAa;YAAA,CAAY,IAAA,CAC7C+5C,cAAc7xC,IAAAA,CAAK;gBAACV,MAAM;gBAAmB8B,UAAU,CAAA;YAAA,CAAK,GAC5D0wC,UAAU9xC,IAAAA,CAAK;gBAACV,MAAM;gBAAmB8B,UAAU,CAAA;YAAA,CAAK,CAAA,IAAA,CAExDywC,cAAc7xC,IAAAA,CAAK;gBAACV,MAAM;gBAAmB8B,UAAU,CAAA;YAAA,CAAM,GAC7D0wC,UAAU9xC,IAAAA,CAAK;gBAACV,MAAM;gBAAmB8B,UAAU,CAAA;YAAA,CAAM,CAAA;QAE7D,CAAC;QAED,OAAO,MAAM;YACXtR,aAAaC,WAAAA,CAAAA;QACf;IACF,CAAC,GAEDwO,OAAOslB,aAAAA,CAAcrsB,IAAAA,CAAK,MAAM;QAC9B,MAAM1H,eAAeyO,OAAO7G,WAAAA,CAAY7H,EAAAA,CAAG,KAAM+H,CAAAA,UAAU;YACzD,OAAQA,MAAM0H,IAAAA,EAAAA;gBACZ,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;gBACL,KAAK;oBACHf,OAAO4S,UAAAA,CAAWnR,IAAAA,CAAKpI,KAAK;oBAC5B;gBACF,KAAK;oBACHi6C,cAAc7xC,IAAAA,CAAK;wBAAC,GAAGpI,KAAAA;wBAAO0H,MAAM;oBAAA,CAAQ;oBAC5C;YAAA;QAEN,CAAC;QAED,OAAO,MAAM;YACXxP,aAAaC,WAAAA,CAAAA;QACf;IACF,CAAC,GAEM;QACL8hD;QACAC;IAAAA;AAEJ;ACpUO,SAASY,cACd96C,KAAAA,EAC0B;IAC1B,OAAQA,MAAM0H,IAAAA,EAAAA;QACZ,KAAK;YACH,OAAO;gBAACA,MAAM;gBAAQ1H,OAAOA,MAAMA,KAAAA;YAAAA;QAErC,KAAK;YACH,OAAOA;QACT,KAAK;YACH,OAAO;gBAAC0H,MAAM;gBAAWqzC,WAAW,CAAA;YAAA;QAEtC,KAAK;YACH,OAAO;gBAACrzC,MAAM;gBAAWqzC,WAAW,CAAA;YAAA;QAEtC,KAAK;YACH,OAAO;gBAACrzC,MAAM;gBAAS1H,OAAOA,MAAMA,KAAAA;YAAAA;QAEtC,KAAK;YACH,OAAO;gBAAC0H,MAAM;gBAAS3O,OAAOiH,MAAMjH,KAAAA;YAAAA;QAEtC,KAAK;YACH,OAAO;gBACL2O,MAAM;gBACN8tC,YAAYx1C,MAAMw1C,UAAAA;gBAClBz8C,OAAOiH,MAAMjH,KAAAA;YAAAA;QAGjB,KAAK;YACH,OAAOiH;QAET,KAAK;YACH,OAAOA;QAET,KAAK;YACH,OAAOA;QAET,KAAK;YACH,OAAOA;IAAAA;AAGb;ACNA,MAAM1H,QAAQC,cAAc,8BAA8B;AAyEnD,iCAAiC0iD,0KAAAA,CAEtC;IA6DAO,oBAA0B;QACxB,IAAI,CAAC,IAAA,CAAKhlC,MAAAA,EACR;QAGF,KAAA,MAAWte,gBAAgB,IAAA,CAAK+zB,aAAAA,CAC9B,IAAA,CAAKmvB,aAAAA,CAAcx7C,IAAAA,CAAK1H,cAAc;QAGxC,MAAMujD,yBAAyB,IAAA,CAAKjlC,MAAAA,CAAO+C,UAAAA,CAAWthB,EAAAA,CAAG,KAAM+H,CAAAA,UAAU;YACvE,MAAM07C,SAASZ,cAAc96C,KAAK;YAE7B07C,UAAAA,CAIA,IAAA,CAAKhkD,KAAAA,CAAMG,MAAAA,IACd,IAAA,CAAKH,KAAAA,CAAM+iB,QAAAA,CAASihC,MAAM,GAG5B,IAAA,CAAKR,OAAAA,CAAQ9lB,IAAAA,CAAKsmB,MAAM,CAAA;QAC1B,CAAC;QAED,IAAA,CAAKN,aAAAA,CAAcx7C,IAAAA,CAAK67C,uBAAuBtjD,WAAW,GAE1D,IAAA,CAAKqe,MAAAA,CAAO1W,WAAAA,CAAY7C,KAAAA,CAAAA,GACxB,IAAA,CAAKuZ,MAAAA,CAAOyjC,aAAAA,CAAch9C,KAAAA,CAAAA,GAC1B,IAAA,CAAKuZ,MAAAA,CAAO+C,UAAAA,CAAWtc,KAAAA,IACvB,IAAA,CAAKuZ,MAAAA,CAAO0jC,SAAAA,CAAUj9C,KAAAA,CAAAA;IACxB;IAEA0+C,mBAAmBC,SAAAA,EAAoC;;QAGnD,CAAC,IAAA,CAAKlkD,KAAAA,CAAMG,MAAAA,IACZ,CAAC+jD,UAAU/jD,MAAAA,IACX,IAAA,CAAKH,KAAAA,CAAMyR,UAAAA,KAAeyyC,UAAUzyC,UAAAA,IAEpCpG,QAAQC,IAAAA,CAAK,6CAA6C,GAGxD,CAAC,IAAA,CAAKtL,KAAAA,CAAMG,MAAAA,IAAU,CAAC+jD,UAAU/jD,MAAAA,IAAAA,CAC/B,IAAA,CAAKH,KAAAA,CAAM8R,QAAAA,KAAaoyC,UAAUpyC,QAAAA,IACpC,IAAA,CAAK3R,MAAAA,CAAO+U,SAAAA,CAAU9M,WAAAA,CAAYsI,IAAAA,CAAK;YACrCV,MAAM;YACN8B,sCAAU,CAAK9R,KAAAA,CAAM8R,QAAAA,gDAAX,uBAAuB,CAAA;QAAA,CAClC,GAGC,IAAA,CAAK9R,KAAAA,CAAMigC,SAAAA,KAAcikB,UAAUjkB,SAAAA,IACrC,IAAA,CAAK9/B,MAAAA,CAAO+U,SAAAA,CAAU9M,WAAAA,CAAYsI,IAAAA,CAAK;YACrCV,MAAM;YACNiwB,WACE,IAAA,CAAKjgC,KAAAA,CAAMigC,SAAAA,KAAcr8B,KAAAA,IACrBA,KAAAA,IACAggD,OAAOC,QAAAA,CAAS,IAAA,CAAK7jD,KAAAA,CAAMigC,SAAAA,CAAU4e,QAAAA,CAAAA,GAAY,EAAE;QAAA,CAC1D,GAGC,IAAA,CAAK7+C,KAAAA,CAAMqB,KAAAA,KAAU6iD,UAAU7iD,KAAAA,IACjC,IAAA,CAAKlB,MAAAA,CAAOuQ,IAAAA,CAAK;YACfV,MAAM;YACN3O,OAAO,IAAA,CAAKrB,KAAAA,CAAMqB,KAAAA;QAAAA,CACnB,GAID,IAAA,CAAKrB,KAAAA,CAAMmkD,SAAAA,KAAcD,UAAUC,SAAAA,IACnC,IAAA,CAAKnkD,KAAAA,CAAMmkD,SAAAA,IAAAA,CAEX,IAAA,CAAKnkD,KAAAA,CAAMmkD,SAAAA,CAAUj7B,OAAAA,GAAU,IAAA,CAAA;IAGrC;IAEAk7B,uBAA6B;QAC3B,KAAA,MAAW3jD,eAAe,IAAA,CAAKijD,aAAAA,CAC7BjjD,YAAAA;QAGE,IAAA,CAAKqe,MAAAA,IAAAA,CACPwM,UAAU,IAAA,CAAKxM,MAAAA,CAAO1W,WAAW,GACjCkjB,UAAU,IAAA,CAAKxM,MAAAA,CAAOyjC,aAAa,GACnCj3B,UAAU,IAAA,CAAKxM,MAAAA,CAAO+C,UAAU,GAChCyJ,UAAU,IAAA,CAAKxM,MAAAA,CAAO0jC,SAAS,CAAA;IAEnC;IASA8B,SAAS;;QACP,MAAMC,gBAAiB,IAAA,CAAKvkD,KAAAA,CAAMG,MAAAA,GAE9ByD,KAAAA,wCADC,CAAK5D,KAAAA,CAAMwkD,gBAAAA,wDAAX,+BAA+B,IAAA,CAAKxkD,KAAAA,CAAMykD,QAAAA;QAG/C,OACE,aAAA,GAAA,IAAA,8KAAA,EAAA,kLAAA,EAAA;YACGF,UAAAA;gBAAAA,gBACC,aAAA,GAAA,IAAA,6KAAA,EAAC,qCAAA;oBACC,aAAa,IAAA,CAAKpkD,MAAAA,CAAO+U,SAAAA,CAAU9M,WAAAA;oBACnC,UAAUm8C;gBAAAA,CAAc,IAExB;gBAAA,aAAA,GAAA,IAAA,6KAAA,EACH,mBAAmB,QAAA,EAAnB;oBAA4B,OAAO,IAAA,CAAKpkD,MAAAA,CAAO+U,SAAAA,CAAU9M,WAAAA;oBACxD,UAAA,aAAA,GAAA,IAAA,6KAAA,EAAC,kBAAkB,QAAA,EAAlB;wBAA2B,OAAO,IAAA,CAAK0W,MAAAA,CAAQ+C,UAAAA;wBAC9C,UAAA,aAAA,GAAA,IAAA,6KAAA,EAAC,iLAAA,EAAA;4BACC,QAAQ,IAAA,CAAK1hB,MAAAA,CAAO+U,SAAAA,CAAU7M,WAAAA,CAAY8M,QAAAA;4BAC1C,cAAc,IAAA,CAAKhV,MAAAA,CAAO+U,SAAAA,CAAU7M,WAAAA,CAAY4hC,YAAAA;4BAEhD,UAAA,aAAA,GAAA,IAAA,6KAAA,EAAC,0BAA0B,QAAA,EAA1B;gCAAmC,OAAO,IAAA;gCACxC,UAAA,IAAA,CAAKjqC,KAAAA,CAAMuC,QAAAA;4BAAAA,CACd;wBAAA,CACF;oBAAA,CACF;gBAAA,CACF;aAAA;QAAA,CACF;IAEJ;IA1JAohD,YAAY3jD,KAAAA,CAAgC;QAG1C,IAFA,KAAA,CAAMA,KAAK,GA7Be;;GAAA,kLAIrBwjD,WAAyB,IAAIC,yKAAAA,CAAAA,IAAAA;;GAAAA,GAAAA;;GAAAA,GAAAA;;GAAAA,kLAqB5BlvB,iBAAyC,CAAA,CAAA,kLACzCmvB,iBAAmC,CAAA,CAAA,kLA0HpCW,eAAe/B,CAAAA,aAA0B;YAC9C,IAAA,CAAKniD,MAAAA,CAAO+U,SAAAA,CAAUotC,QAAAA,GAAW;gBAC/B,GAAG,IAAA,CAAKniD,MAAAA,CAAO+U,SAAAA,CAAUotC,QAAAA;gBACzB,GAAGA,QAAAA;YAAAA;QAEP,IA1HMtiD,MAAMG,MAAAA,EACR,IAAA,CAAKA,MAAAA,GAASH,MAAMG,MAAAA,EACpB,IAAA,CAAKsB,WAAAA,GAAc,IAAA,CAAKtB,MAAAA,CAAO+U,SAAAA,CAAU9M,WAAAA,CACtCG,WAAAA,CAAAA,EACAM,OAAAA,CAAQ2L,eAAAA,CAAAA;aACN;YACL,MAAM,EAACsK,MAAAA,EAAQ3e,MAAAA,EAAQo0B,aAAAA,EAAAA,GAAiB4tB,qBAAqB;gBAC3DlY,cAAcjqC,MAAMqB,KAAAA;gBACpBgU,cAAcrV,MAAMqV,YAAAA;gBACpB4qB,WACEjgC,MAAMigC,SAAAA,KAAcr8B,KAAAA,IAChBA,KAAAA,IACAggD,OAAOC,QAAAA,CAAS7jD,MAAMigC,SAAAA,CAAU4e,QAAAA,CAAAA,GAAY,EAAE;gBACpD/sC,UAAU9R,MAAM8R,QAAAA;gBAChBrL,QAAQzG,MAAMyR,UAAAA;YAAAA,CACf;YAED,IAAA,CAAK8iB,aAAAA,GAAgBA,eACrB,IAAA,CAAKzV,MAAAA,GAASA,QAEd,IAAA,CAAK3e,MAAAA,GAASA,QACd,IAAA,CAAKsB,WAAAA,GAAcqd,OAAO1W,WAAAA,CACvBG,WAAAA,CAAAA,EACAM,OAAAA,CAAQ2L,eAAAA,CAAAA;QACb;QAEA,IAAA,CAAK8tC,QAAAA,GAAW,IAAA,CAAKniD,MAAAA,CAAO+U,SAAAA,CAAUotC,QAAAA;IACxC;AAylBF;AAnpBE,6LAAct4B,eAAc;AAsL5B;;;;;;;;;GAAA,GAYA,6LAAOuU,qBACLp+B,CAAAA,SAEOA,UAAUA,OAAOmiD,QAAAA,GAAWniD,OAAOmiD,QAAAA,CAAS/jB,iBAAAA,CAAAA,IAAsB,CAAA,CAAA;AAAA;;;;;;;;;GAAA,GAa3E,6LAAOsd,sBAAqBA,CAC1B17C,QACA27C,iBAEO37C,UAAUA,OAAOmiD,QAAAA,GACpBniD,OAAOmiD,QAAAA,CAASzG,kBAAAA,CAAmBC,cAAc,IACjD,CAAA;AAAA;;;;;;;;;;;;;;GAAA,GAkBN,6LAAOC,iBAAgBA,CACrB57C,QACA6P,MACA3O;;+BAEAlB,OAAOmiD,QAAAA,sEAAUvG,aAAAA,CAAc/rC,MAAM3O,KAAK;;AAAA;;;;;;;;;;GAAA,GAa5C,6LAAOk3C,QAAQp4C,CAAAA,WAAqC;;IAClDS,MAAM,cAAc,8BACb0hD,QAAAA,qDAAPniD,iBAAiBo4C,IAAAA,CAAAA;AACnB;AAEA,6LAAO1pB,UAASA,CACd1uB,QACAwE,WACAggB;;sCACU29B,QAAAA,cAAPniD,wDAAiB0uB,MAAAA,CAAOlqB,WAAWggB,OAAO;;AAE/C,6LAAOg3B,eAAcA,CACnBx7C,QACA0G;;sCAEcy7C,QAAAA,qDAAPniD,iBAAiBw7C,WAAAA,CAAY90C,OAAO;;AAG7C,6LAAO00C,cAAaA,CAACp7C,QAA4B2E;;uCACjCw9C,QAAAA,cAAPniD,wDAAiBo7C,UAAAA,CAAWz2C,IAAI,MAAK,CAAA,CAAA;;AAAA;;;;;;;;;;GAAA,GAc9C,6LAAOD,SAAS1E,CAAAA,WAAqC;;IACnDS,MAAM,uBAAuB,8BACtB0hD,QAAAA,qDAAPniD,iBAAiB0E,KAAAA,CAAAA;AACnB;AAAA;;;;;;;;;GAAA,GAYA,6LAAOI,cAAc9E,CAAAA;QACZA;sCAAOmiD,QAAAA,sEAAUr9C,UAAAA,CAAAA;;AAAAA;;;;;;;;;GAAAA,GAa1B,6LAAOe,cACL7F,CAAAA;;sCAEcmiD,QAAAA,qDAAPniD,iBAAiB6F,UAAAA,CAAAA;;AAAAA;;;;;;;;;GAAAA,GAa1B,6LAAOqkB,gBAAgBlqB,CAAAA,SACdA,OAAOmiD,QAAAA,GAAWniD,OAAOmiD,QAAAA,CAASj4B,YAAAA,KAAiB;AAAA;;;;;;;;;GAAA,GAa5D,yKA3VWi5B,oBA2VJrG,YAAY98C,CAAAA;;sCACHmiD,QAAAA,qDAAPniD,iBAAiB88C,QAAAA,CAAAA;;AAAAA;;;;;;;;;GAAAA,GAa1B,6LAAO5B,iBAAgBA,CAACl7C,QAA4BukD;;sCACpCpC,QAAAA,qDAAPniD,iBAAiBk7C,aAAAA,CAAcqJ,UAAU;;AAAA;;;;;;;;;GAAA,GAalD,6LAAOpJ,gBAAeA,CAACn7C,QAA4BwkD;QAC1CxkD;sCAAOmiD,QAAAA,sEAAUhH,YAAAA,CAAaqJ,SAAS;;AAAA;;;;;;;;;GAAA,GAahD,6LAAOzH,wBAAwB/8C,CAAAA;;+BAC7BA,OAAOmiD,QAAAA,sEAAUpF,oBAAAA,CAAAA;;AAAAA;;;;;;;;;GAAAA,GAYnB,6LAAOC,uBAAuBh9C,CAAAA;;+BAC5BA,OAAOmiD,QAAAA,sEAAUnF,mBAAAA,CAAAA;;AAAAA;;;;;;;;;GAAAA,GAYnB,6LAAOpC,gBAAeA,CAAC56C,QAA4BsW;;+BACjDtW,OAAOmiD,QAAAA,sEAAUvH,YAAAA,CAAatkC,IAAI;;AAAA;;;;;;;;;;;;;;;;;;;;GAAA,GAuBpC,6LAAOykC,eAAcA,CACnB/6C,QACA6P,MACA3O;;WAEAT,MAAM,sBAAsB,IACrBT,0BAAOmiD,QAAAA,sEAAUpH,WAAAA,CAAYlrC,MAAM3O,KAAK;;AAAA;;;;;;;;;;;;;;;GAAA,GAmBjD,6LAAO47B,eAAcA,CACnB98B,QACA6P,MACA3O;;+BAEOlB,OAAOmiD,QAAAA,sEAAUrlB,WAAAA,CAAYjtB,MAAM3O,KAAK;;AAAA;;;;;;;;;;GAAA,GAcjD,6LAAOg/B,eAAelgC,CAAAA;;YACbA,0BAAOmiD,QAAAA,sEAAUjiB,WAAAA,CAAAA;;AAG1B,6LAAO2G,UAASA,CACd7mC,QACA0G;;sCAEcy7C,QAAAA,qDAAPniD,iBAAiB6mC,MAAAA,CAAOngC,OAAO;;AAGxC,6LAAO+9C,gBAAeA,CAAC79B,SAA6BjiB,SAAwB;IAC1E,IAAI,CAACA,QAAQ,CAACpD,MAAMC,OAAAA,CAAQmD,IAAI,EAAG,CAAA,OAAO,CAAA;IAC1C,MAAM+/C,wBAAwB//C,KAAKjB,MAAAA,GAAS,KAAKiB,IAAAA,CAAK,CAAC,CAAA,KAAM;IAE7D,OAD8BA,KAAKjB,MAAAA,GAAS,KAAKiB,IAAAA,CAAK,CAAC,CAAA,KAAM,cAC7B+/C;AAClC;AAEA,6LAAOhiD,SAAS1C,CAAAA;;sCACAmiD,QAAAA,qDAAPniD,iBAAiB0C,KAAAA,CAAAA;;AAAAA;;;;;;;;;;;GAAAA,GAe1B,6LAAO+f,UAASA,CACdziB,QACAwE,cACG;;IACH/D,MAAM,0BAA0B+D,SAAS,8BAClC29C,QAAAA,qDAAPniD,iBAAiByiB,MAAAA,CAAOje,SAAS;AACnC;AAAA;;;;;;;;;;;;;GAAA,GAgBA,6LAAOm4C,oBAAmBA,CACxB38C,QACA6P;;sCACUsyC,QAAAA,cAAPniD,wDAAiB28C,gBAAAA,CAAiB9sC,IAAI;;AAAA;;;;;;;;;;;GAAA,GAc3C,6LAAO8qC,oBAAmBA,CACxB36C,QACAukD;;WAEA9jD,MAAM,8BAA8B,8BACtB0hD,QAAAA,qDAAPniD,iBAAiB26C,gBAAAA,CAAiB4J,UAAU;;AAAA;;;;;;;;;;;GAAA,GAerD,6LAAO7J,cAAaA,CAAC16C,QAA4BwkD;;+BACxCxkD,OAAOmiD,QAAAA,sEAAUzH,UAAAA,CAAW8J,SAAS;;AAAA;;;;;;;;;;;GAAA,GAe9C,6LAAO/J,cAAaA,CAACz6C,QAA4BsW,SAAuB;;IACtE7V,MAAM,sBAAsB6V,IAAI,8BACzB6rC,QAAAA,qDAAPniD,iBAAiBy6C,UAAAA,CAAWnkC,IAAI;AAClC;AAAA;;;;;;;;;GAAA,GAYA,6LAAO2mC,eACLj9C,CAAAA;;sCAEcmiD,QAAAA,qDAAPniD,iBAAiBi9C,WAAAA,CAAAA;;AAAAA;;;;;;;;;;GAAAA,GAc1B,6LAAO1c,QAAQvgC,CAAAA,WAAqC;;IAClDS,MAAM,cAAc,IACpBT,0BAAOmiD,QAAAA,sEAAU5hB,IAAAA,CAAAA;AACnB;AAAA;;;;;;;;;;GAAA,GAaA,6LAAOF,QAAQrgC,CAAAA,WAAqC;;IAClDS,MAAM,cAAc,IACpBT,0BAAOmiD,QAAAA,sEAAU9hB,IAAAA,CAAAA;AACnB;AAAA;;;;;;;;;GAAA,GAYA,6LAAO6c,2BAA0BA,CAC/Bl9C,QACAm9C,YACAC;;sCAEc+E,QAAAA,qDAAPniD,iBAAiBk9C,uBAAAA,CAAwBC,YAAYC,UAAU;;AAI1E,SAAAuH,oCAAA9kD,KAAAA,EAAA;IAAA,MAAAC,QAAAC,qKAAAA,EAAA,CAAA;IAAA,IAAAG,IAAAC;IAAA,OAAAL,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAoI,WAAAA,IAAAnI,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAykD,QAAAA,GAAAA,CAIYpkD,KAAAA,MAAA;QACR,MAAAG,eAAqBR,MAAKykD,QAAAA,CAAAtB,SAAAA,CAAA9jC,CAAAA,YAAA;YACxBrf,MAAKoI,WAAAA,CAAAsI,IAAAA,CAAA;gBAAAV,MACG;gBAAS,GACZqP,OAAAA;YAAAA,CACJ;QAAC,CACH;QAAC,OAAA,MAAA;YAGA7e,aAAYC,WAAAA,CAAAA;QAAc;IAAA,GAE3BH,KAAAA;QAACN,MAAKoI,WAAAA;QAAcpI,MAAKykD,QAAA;KAAA,EAAUxkD,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAoI,WAAAA,EAAAnI,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAykD,QAAAA,EAAAxkD,CAAAA,CAAAA,EAAAA,GAAAI,IAAAJ,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,CAAAD,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAAAK,KAAAL,CAAAA,CAAA,CAAA,CAAA,OAXtCS,0KAAAA,EAAUL,IAWPC,EAAmC,GAAC;AAAA;AC5uBlC,SAAAykD,eAAA/kD,KAAAA,EAAA;IAAA,MAAAC,QAAAC,qKAAAA,EAAA,EAAA;IAAA,IAAAG;IAAAJ,CAAAA,CAAA,CAAA,CAAA,KAAAD,MAAAglD,aAAAA,GAAAA,CACmD3kD,KAAAA,MAAA;QACtD,MAAA4kD,iBAAuB9C,qBAAqBniD,MAAKglD,aAAc,GAC/DjpC,qBAAAA,IAAAunC,mBAAA;YAAAnjD,QACU8kD,eAAc9kD,MAAAA;QAAAA,CAAA;QACgB,OAAA;YAAA8kD;YAAAlpC;QAAAA;IAAA,GAGzC9b,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAglD,aAAAA,EAAA/kD,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IAPD,MAAA,CAAAK,EAAA,CAAA,OAA+CyQ,yKAAAA,EAAS1Q,EAOvD,GAPM,EAAA4kD,gBAAAC,gBAAAA,EAAAnpC,oBAAAopC,oBAAAA,EAAAA,GAAA7kD;IAAoC,IAAAiQ;IAAAtQ,CAAAA,CAAA,CAAA,CAAA,KAAAilD,iBAAApmC,MAAAA,CAAA1W,WAAAA,IAAAnI,CAAAA,CAAA,CAAA,CAAA,KAAAilD,iBAAApmC,MAAAA,CAAAyjC,aAAAA,IAAAtiD,CAAAA,CAAAA,EAAAA,KAAAilD,iBAAApmC,MAAAA,CAAA+C,UAAAA,IAAA5hB,CAAAA,CAAAA,EAAAA,KAAAilD,iBAAApmC,MAAAA,CAAA0jC,SAAAA,IAAAviD,CAAAA,CAAAA,EAAAA,KAAAilD,iBAAA3wB,aAAAA,IAAAt0B,CAAAA,CAAAA,EAAAA,KAAAklD,uBAAAA,CASjC50C,KAAAA,MAAA;QACR,MAAAmzC,gBAAA,CAAA,CAAA;QAA2C,KAAA,MAEtCljD,gBAAsBykD,iBAAc1wB,aAAAA,CACvCmvB,cAAax7C,IAAAA,CAAM1H,cAAc;QAGnC,MAAAujD,yBAA+BkB,iBAAcnmC,MAAAA,CAAA+C,UAAAA,CAAAthB,EAAAA,CAC3C,KAAG+H,CAAAA,UAAA;YAED,MAAA07C,SAAeZ,cAAc96C,KAAK;YAE9B07C,UACFjoC,qBAAkBynC,OAAAA,CAAA9lB,IAAAA,CAAcsmB,MAAM;QAAC,CAG7C;QACAN,OAAAA,cAAax7C,IAAAA,CAAM67C,uBAAsBtjD,WAAY,GAErDwkD,iBAAcnmC,MAAAA,CAAA1W,WAAAA,CAAA7C,KAAAA,CAAAA,GACd0/C,iBAAcnmC,MAAAA,CAAAyjC,aAAAA,CAAAh9C,KAAAA,IACd0/C,iBAAcnmC,MAAAA,CAAA+C,UAAAA,CAAAtc,KAAAA,IACd0/C,iBAAcnmC,MAAAA,CAAA0jC,SAAAA,CAAAj9C,KAAAA,CAAAA,GAAyB,MAAA;YAAA,KAAA,MAGhC9E,eAAqBijD,cACxBjjD,YAAAA;YAGF6qB,UAAU25B,iBAAcnmC,MAAAA,CAAA1W,WAAmB,GAC3CkjB,UAAU25B,iBAAcnmC,MAAAA,CAAAyjC,aAAqB,GAC7Cj3B,UAAU25B,iBAAcnmC,MAAAA,CAAA+C,UAAkB,GAC1CyJ,UAAU25B,iBAAcnmC,MAAAA,CAAA0jC,SAAiB;QAAC;IAAA,GAE7CviD,CAAAA,CAAA,CAAA,CAAA,GAAAilD,iBAAApmC,MAAAA,CAAA1W,WAAAA,EAAAnI,CAAAA,CAAA,CAAA,CAAA,GAAAilD,iBAAApmC,MAAAA,CAAAyjC,aAAAA,EAAAtiD,CAAAA,CAAA,CAAA,CAAA,GAAAilD,iBAAApmC,MAAAA,CAAA+C,UAAAA,EAAA5hB,CAAAA,CAAA,CAAA,CAAA,GAAAilD,iBAAApmC,MAAAA,CAAA0jC,SAAAA,EAAAviD,CAAAA,CAAA,CAAA,CAAA,GAAAilD,iBAAA3wB,aAAAA,EAAAt0B,CAAAA,CAAAA,EAAAA,GAAAklD,sBAAAllD,CAAAA,CAAAA,EAAAA,GAAAsQ,EAAAA,IAAAA,KAAAtQ,CAAAA,CAAA,CAAA,CAAA;IAAA,IAAAuR;IAAAvR,CAAAA,CAAA,CAAA,CAAA,KAAAilD,oBAAAjlD,CAAAA,CAAAA,GAAAA,KAAAklD,uBAAAA,CAAE3zC,KAAA;QAACyzC;QAAgBlpC,oBAAkB;KAAA,EAAC9b,CAAAA,CAAAA,EAAAA,GAAAilD,kBAAAjlD,CAAAA,CAAAA,GAAAA,GAAAklD,sBAAAllD,CAAAA,CAAAA,GAAAA,GAAAuR,EAAAA,IAAAA,KAAAvR,CAAAA,CAAA,EAAA,CAAA,MAlCvCS,0KAAAA,EAAU6P,IAkCPiB,EAAoC;IAAC,IAAAI;IAAA3R,CAAAA,CAAAA,GAAAA,KAAAklD,wBAAAllD,CAAAA,CAAA,EAAA,CAAA,KAAAD,MAAAuC,QAAAA,GAAAA,CAY9BqP,KAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,0BAAA,QAAA,EAAA;QAA2CmK,OAAAA;QACxC/b,UAAAA,MAAKuC,QAAAA;IAAAA,CACR,GAAqCtC,CAAAA,CAAAA,GAAAA,GAAAklD,sBAAAllD,CAAAA,CAAA,EAAA,CAAA,GAAAD,MAAAuC,QAAAA,EAAAtC,CAAAA,CAAAA,GAAAA,GAAA2R,EAAAA,IAAAA,KAAA3R,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA4R;IAAA5R,CAAAA,CAAA,EAAA,CAAA,KAAAilD,iBAAA/kD,MAAAA,CAAA+U,SAAAA,CAAA7M,WAAAA,CAAA4hC,YAAAA,IAAAhqC,CAAAA,CAAAA,GAAAA,KAAAilD,iBAAA/kD,MAAAA,CAAA+U,SAAAA,CAAA7M,WAAAA,CAAA8M,QAAAA,IAAAlV,CAAAA,CAAA,EAAA,CAAA,KAAA2R,KAAAA,CARvCC,KAAAA,aAAAA,GAAAA,IAAAA,6KAAAA,EAAC,iLAAA,EAAA;QACS,QAAAozC,iBAAc9kD,MAAAA,CAAA+U,SAAAA,CAAA7M,WAAAA,CAAA8M,QAAAA;QAEpB,cAAA8vC,iBAAc9kD,MAAAA,CAAA+U,SAAAA,CAAA7M,WAAAA,CAAA4hC,YAAAA;QAGhBr4B,UAAAA;IAAAA,CAGF,GAAQ3R,CAAAA,CAAA,EAAA,CAAA,GAAAilD,iBAAA/kD,MAAAA,CAAA+U,SAAAA,CAAA7M,WAAAA,CAAA4hC,YAAAA,EAAAhqC,CAAAA,CAAA,EAAA,CAAA,GAAAilD,iBAAA/kD,MAAAA,CAAA+U,SAAAA,CAAA7M,WAAAA,CAAA8M,QAAAA,EAAAlV,CAAAA,CAAAA,GAAAA,GAAA2R,IAAA3R,CAAAA,CAAAA,GAAAA,GAAA4R,EAAAA,IAAAA,KAAA5R,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAA8R;IAAA9R,CAAAA,CAAA,EAAA,CAAA,KAAAilD,iBAAApmC,MAAAA,CAAA+C,UAAAA,IAAA5hB,CAAAA,CAAA,EAAA,CAAA,KAAA4R,KAAAA,CAVVE,KAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,kBAAA,QAAA,EAAA;QAAmC,OAAAkzC,iBAAcnmC,MAAAA,CAAA+C,UAAAA;QAC/ChQ,UAAAA;IAAAA,CAUF,GAA6B5R,CAAAA,CAAA,EAAA,CAAA,GAAAilD,iBAAApmC,MAAAA,CAAA+C,UAAAA,EAAA5hB,CAAAA,CAAAA,GAAAA,GAAA4R,IAAA5R,CAAAA,CAAAA,GAAAA,GAAA8R,EAAAA,IAAAA,KAAA9R,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAgS;IAAAhS,CAAAA,CAAA,EAAA,CAAA,KAAAilD,iBAAApmC,MAAAA,CAAA1W,WAAAA,IAAAnI,CAAAA,CAAA,EAAA,CAAA,KAAA8R,KAAAA,CAZ/BE,KAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,mBAAA,QAAA,EAAA;QAAoC,OAAAgzC,iBAAcnmC,MAAAA,CAAA1W,WAAAA;QAChD2J,UAAAA;IAAAA,CAYF,GAA8B9R,CAAAA,CAAA,EAAA,CAAA,GAAAilD,iBAAApmC,MAAAA,CAAA1W,WAAAA,EAAAnI,CAAAA,CAAAA,GAAAA,GAAA8R,IAAA9R,CAAAA,CAAAA,GAAAA,GAAAgS,EAAAA,IAAAA,KAAAhS,CAAAA,CAAA,EAAA,CAAA;IAAA,IAAAiS;IAAA,OAAAjS,CAAAA,CAAAA,GAAAA,KAAAilD,iBAAA/kD,MAAAA,IAAAF,CAAAA,CAAAA,GAAAA,KAAAgS,KAAAA,CAdhCC,KAAA,aAAA,GAAA,IAAA,6KAAA,EAAA,qMAAA,CAAA,QAAA,EAAA;QAA+B,OAAA+yC,iBAAc9kD,MAAAA;QAC3C8R,UAAAA;IAAAA,CAcF,GAAyBhS,CAAAA,CAAA,EAAA,CAAA,GAAAilD,iBAAA/kD,MAAAA,EAAAF,CAAAA,CAAAA,GAAAA,GAAAgS,IAAAhS,CAAAA,CAAAA,GAAAA,GAAAiS,EAAAA,IAAAA,KAAAjS,CAAAA,CAAA,EAAA,CAAA,EAfzBiS;AAeyB;AC/FtB,MAAMkzC,iCAAiCA,MAAA;IAAA,MAAAnlD,IAAAC,yKAAAA,EAAA,CAAA,GAC5CkI,kBAAoBkI,2KAAAA,EAAA1C,kBAA6B,GACjD,CAAAjJ,WAAAs3B,aAAA,CAAA,OAAkClrB,yKAAAA,EAAAA,IAA8B;IAAC,IAAA1Q,IAAAC;IAAA,OAAAL,CAAAA,CAAAA,EAAAA,KAAAmI,cAAAA,CAEvD/H,KAAAA,MAAA;QACR,MAAAG,eAAqB4H,YAAW7H,EAAAA,CAAI,aAAW+H,CAAAA,UAAA;YAE7C+8C,IAAAA,gLAAAA,EAAA,MAAA;gBACEppB,cAAa3zB,MAAK3D,SAAU;YAAC,CAC9B;QAAC,CACH;QAAC,OAAA,MAAA;YAGAnE,aAAYC,WAAAA,CAAAA;QAAc;IAAA,GAE3BH,KAAAA;QAAC8H,WAAW;KAAA,EAACnI,CAAAA,CAAAA,EAAAA,GAAAmI,aAAAnI,CAAAA,CAAAA,EAAAA,GAAAI,IAAAJ,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,CAAAD,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAAAK,KAAAL,CAAAA,CAAA,CAAA,CAAA,OAXhBS,0KAAAA,EAAUL,IAWPC,EAAa,GAETqE;AAAS","debugId":null}},
    {"offset": {"line": 15884, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/selectors/selector.get-text-before.ts"],"sourcesContent":["import type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectionStartPoint} from '../utils'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {getFocusBlock} from './selector.get-focus-block'\nimport {getSelectionText} from './selector.get-selection-text'\n\n/**\n * @public\n */\nexport const getBlockTextBefore: EditorSelector<string> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return ''\n  }\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const block = getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startPoint,\n        focus: startPoint,\n      },\n    },\n  })\n\n  if (!block) {\n    return ''\n  }\n\n  const startOfBlock = getBlockStartPoint({\n    context: snapshot.context,\n    block,\n  })\n\n  return getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startOfBlock,\n        focus: startPoint,\n      },\n    },\n  })\n}\n"],"names":["getBlockTextBefore","snapshot","context","selection","startPoint","getSelectionStartPoint","block","getFocusBlock","anchor","focus","startOfBlock","getBlockStartPoint","getSelectionText"],"mappings":";;;;;;;;AASO,MAAMA,qBAA8CC,CAAAA,aAAa;IACtE,IAAI,CAACA,SAASC,OAAAA,CAAQC,SAAAA,EACpB,OAAO;IAGT,MAAMC,iBAAaC,wNAAAA,EAAuBJ,SAASC,OAAAA,CAAQC,SAAS,GAC9DG,YAAQC,+NAAAA,EAAc;QAC1B,GAAGN,QAAAA;QACHC,SAAS;YACP,GAAGD,SAASC,OAAAA;YACZC,WAAW;gBACTK,QAAQJ;gBACRK,OAAOL;YAAAA;QACT;IACF,CACD;IAED,IAAI,CAACE,OACH,OAAO;IAGT,MAAMI,mBAAeC,oNAAAA,EAAmB;QACtCT,SAASD,SAASC,OAAAA;QAClBI;IAAAA,CACD;IAED,WAAOM,kOAAAA,EAAiB;QACtB,GAAGX,QAAAA;QACHC,SAAS;YACP,GAAGD,SAASC,OAAAA;YACZC,WAAW;gBACTK,QAAQE;gBACRD,OAAOL;YAAAA;QACT;IACF,CACD;AACH","debugId":null}},
    {"offset": {"line": 15926, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/utils/util.merge-text-blocks.ts"],"sourcesContent":["import {isTextBlock} from '@portabletext/schema'\nimport type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {parseBlock} from '../internal-utils/parse-blocks'\n\n/**\n * @beta\n */\nexport function mergeTextBlocks({\n  context,\n  targetBlock,\n  incomingBlock,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  targetBlock: PortableTextTextBlock\n  incomingBlock: PortableTextTextBlock\n}) {\n  const parsedIncomingBlock = parseBlock({\n    context,\n    block: incomingBlock,\n    options: {validateFields: false},\n  })\n\n  if (!parsedIncomingBlock || !isTextBlock(context, parsedIncomingBlock)) {\n    return targetBlock\n  }\n\n  return {\n    ...targetBlock,\n    children: [...targetBlock.children, ...parsedIncomingBlock.children],\n    markDefs: [\n      ...(targetBlock.markDefs ?? []),\n      ...(parsedIncomingBlock.markDefs ?? []),\n    ],\n  }\n}\n"],"names":["mergeTextBlocks","context","targetBlock","incomingBlock","parsedIncomingBlock","parseBlock","block","options","validateFields","isTextBlock","children","markDefs"],"mappings":";;;;;;;;AAQO,SAASA,qBAQhB;UAPEC,OAAAA,EACAC,WAAAA,EACAC,aAAAA,EAKF,EAAG,CAR6B;IAS9B,MAAMC,0BAAsBC,4MAAAA,EAAW;QACrCJ;QACAK,OAAOH;QACPI,SAAS;YAACC,gBAAgB,CAAA;QAAA;IAAK,CAChC;;IAED,OAAI,CAACJ,uBAAuB,KAACK,2KAAAA,EAAYR,SAASG,mBAAmB,IAC5DF,cAGF;QACL,GAAGA,WAAAA;QACHQ,UAAU,CAAC;eAAGR,YAAYQ,QAAAA,EAAU;eAAGN,oBAAoBM,QAAQ;SAAA;QACnEC,UAAU,CACR;oDAAgBA,QAAAA,iDAAZT,wBAAwB,CAAA,CAAA,EAC5B;oEAAwBS,QAAAA,yDAApBP,gCAAgC,CAAA,CAAG;SAAA;IAAA;AAG7C","debugId":null}},
    {"offset": {"line": 15962, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/@portabletext/editor/lib/plugins/index.js","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/plugins/plugin.behavior.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/internal-utils/get-text-to-emphasize.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.decorator-pair.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/plugins/plugin.decorator-shortcut.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/plugins/plugin.editor-ref.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/plugins/plugin.event-listener.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/behaviors/behavior.markdown.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/plugins/plugin.markdown.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/EcommerceApp/ecommerce-build/node_modules/%40portabletext/editor/src/plugins/plugin.one-line.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {Behavior} from '../behaviors'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @beta\n */\nexport function BehaviorPlugin(props: {behaviors: Array<Behavior>}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const unregisterBehaviors = props.behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      unregisterBehaviors.forEach((unregister) => {\n        unregister()\n      })\n    }\n  }, [editor, props.behaviors])\n\n  return null\n}\n","export function createPairRegex(char: string, amount: number) {\n  // Negative lookbehind: Ensures that the matched sequence is not preceded by the same character\n  const prePrefix = `(?<!\\\\${char})`\n\n  // Repeats the character `amount` times\n  const prefix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the opening pair (**, *, etc.) is not followed by a space\n  const postPrefix = `(?!\\\\s)`\n\n  // Captures the content inside the pair\n  const content = `([^${char}\\\\n]+?)`\n\n  // Negative lookbehind: Ensures that the content is not followed by a space\n  const preSuffix = `(?<!\\\\s)`\n\n  // Repeats the character `amount` times\n  const suffix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the matched sequence is not followed by the same character\n  const postSuffix = `(?!\\\\${char})`\n\n  return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`\n}\n\nconst italicRegex = new RegExp(\n  `(${createPairRegex('*', 1)}|${createPairRegex('_', 1)})$`,\n)\n\nconst boldRegex = new RegExp(\n  `(${createPairRegex('*', 2)}|${createPairRegex('_', 2)})$`,\n)\n\nexport function getTextToItalic(text: string) {\n  return text.match(italicRegex)?.at(0)\n}\n\nexport function getTextToBold(text: string) {\n  return text.match(boldRegex)?.at(0)\n}\n","import type {EditorSchema} from '../editor/editor-schema'\nimport {createPairRegex} from '../internal-utils/get-text-to-emphasize'\nimport * as selectors from '../selectors'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\nimport {effect, execute} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createDecoratorPairBehavior(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n  onDecorate: (offset: BlockOffset) => void\n}) {\n  if (config.pair.amount < 1) {\n    console.warn(\n      `The amount of characters in the pair should be greater than 0`,\n    )\n  }\n\n  const pairRegex = createPairRegex(config.pair.char, config.pair.amount)\n  const regEx = new RegExp(`(${pairRegex})$`)\n\n  return defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      if (config.pair.amount < 1) {\n        return false\n      }\n\n      const decorator = config.decorator({schema: snapshot.context.schema})\n\n      if (decorator === undefined) {\n        return false\n      }\n\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionStartPoint = selectors.getSelectionStartPoint(snapshot)\n      const selectionStartOffset = selectionStartPoint\n        ? utils.spanSelectionPointToBlockOffset({\n            context: {\n              schema: snapshot.context.schema,\n              value: snapshot.context.value,\n            },\n            selectionPoint: selectionStartPoint,\n          })\n        : undefined\n\n      if (!focusTextBlock || !selectionStartOffset) {\n        return false\n      }\n\n      const textBefore = selectors.getBlockTextBefore(snapshot)\n      const newText = `${textBefore}${event.text}`\n      const textToDecorate = newText.match(regEx)?.at(0)\n\n      if (textToDecorate === undefined) {\n        return false\n      }\n\n      const prefixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n          offset: newText.length - textToDecorate.length,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length + \"*\".length * 2 = 6\n          offset:\n            newText.length -\n            textToDecorate.length +\n            config.pair.char.length * config.pair.amount,\n        },\n      }\n\n      const suffixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n          offset:\n            selectionStartOffset.offset +\n            event.text.length -\n            config.pair.char.length * config.pair.amount,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n          offset: selectionStartOffset.offset + event.text.length,\n        },\n      }\n\n      // If the prefix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {\n        const prefixSelection = utils.blockOffsetsToSelection({\n          context: snapshot.context,\n          offsets: prefixOffsets,\n        })\n        const inlineObjectBeforePrefixFocus = selectors.getPreviousInlineObject(\n          {\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: prefixSelection\n                ? {\n                    anchor: prefixSelection.focus,\n                    focus: prefixSelection.focus,\n                  }\n                : null,\n            },\n          },\n        )\n        const inlineObjectBeforePrefixFocusOffset =\n          inlineObjectBeforePrefixFocus\n            ? utils.childSelectionPointToBlockOffset({\n                context: {\n                  schema: snapshot.context.schema,\n                  value: snapshot.context.value,\n                },\n                selectionPoint: {\n                  path: inlineObjectBeforePrefixFocus.path,\n                  offset: 0,\n                },\n              })\n            : undefined\n\n        if (\n          inlineObjectBeforePrefixFocusOffset &&\n          inlineObjectBeforePrefixFocusOffset.offset >\n            prefixOffsets.anchor.offset &&\n          inlineObjectBeforePrefixFocusOffset.offset <\n            prefixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      // If the suffix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {\n        const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n        const previousInlineObjectOffset = previousInlineObject\n          ? utils.childSelectionPointToBlockOffset({\n              context: {\n                schema: snapshot.context.schema,\n                value: snapshot.context.value,\n              },\n              selectionPoint: {\n                path: previousInlineObject.path,\n                offset: 0,\n              },\n            })\n          : undefined\n\n        if (\n          previousInlineObjectOffset &&\n          previousInlineObjectOffset.offset > suffixOffsets.anchor.offset &&\n          previousInlineObjectOffset.offset < suffixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      return {\n        prefixOffsets,\n        suffixOffsets,\n        decorator,\n      }\n    },\n    actions: [\n      // Insert the text as usual in its own undo step\n      ({event}) => [execute(event)],\n      (_, {prefixOffsets, suffixOffsets, decorator}) => [\n        // Decorate the text between the prefix and suffix\n        execute({\n          type: 'decorator.add',\n          decorator,\n          at: {\n            anchor: prefixOffsets.focus,\n            focus: suffixOffsets.anchor,\n          },\n        }),\n        // Delete the suffix\n        execute({\n          type: 'delete.text',\n          at: suffixOffsets,\n        }),\n        // Delete the prefix\n        execute({\n          type: 'delete.text',\n          at: prefixOffsets,\n        }),\n        // Toggle the decorator off so the next inserted text isn't emphasized\n        execute({\n          type: 'decorator.remove',\n          decorator,\n        }),\n        effect(() => {\n          config.onDecorate({\n            ...suffixOffsets.anchor,\n            offset:\n              suffixOffsets.anchor.offset -\n              (prefixOffsets.focus.offset - prefixOffsets.anchor.offset),\n          })\n        }),\n      ],\n    ],\n  })\n}\n","import {useActorRef} from '@xstate/react'\nimport {isEqual} from 'lodash'\nimport {\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {createDecoratorPairBehavior} from '../behaviors/behavior.decorator-pair'\nimport {effect, execute, forward} from '../behaviors/behavior.types.action'\nimport {defineBehavior} from '../behaviors/behavior.types.behavior'\nimport type {Editor} from '../editor'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {useEditor} from '../editor/use-editor'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\n\n/**\n * @beta\n * @deprecated Install the plugin from `@portabletext/plugin-character-pair-decorator`\n */\nexport function DecoratorShortcutPlugin(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n}) {\n  const editor = useEditor()\n\n  useActorRef(decoratorPairMachine, {\n    input: {\n      editor,\n      decorator: config.decorator,\n      pair: config.pair,\n    },\n  })\n\n  return null\n}\n\ntype MarkdownEmphasisEvent =\n  | {\n      type: 'emphasis.add'\n      blockOffset: BlockOffset\n    }\n  | {\n      type: 'selection'\n      blockOffsets?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: 'delete.backward'\n    }\n\nconst emphasisListener: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {\n    decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n    editor: Editor\n    pair: {char: string; amount: number}\n  }\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: createDecoratorPairBehavior({\n      decorator: input.decorator,\n      pair: input.pair,\n      onDecorate: (offset) => {\n        sendBack({type: 'emphasis.add', blockOffset: offset})\n      },\n    }),\n  })\n\n  return unregister\n}\n\nconst selectionListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'select',\n      guard: ({snapshot, event}) => {\n        if (!event.at) {\n          return {blockOffsets: undefined}\n        }\n\n        const anchor = utils.spanSelectionPointToBlockOffset({\n          context: snapshot.context,\n          selectionPoint: event.at.anchor,\n        })\n        const focus = utils.spanSelectionPointToBlockOffset({\n          context: snapshot.context,\n          selectionPoint: event.at.focus,\n        })\n\n        if (!anchor || !focus) {\n          return {blockOffsets: undefined}\n        }\n\n        return {\n          blockOffsets: {\n            anchor,\n            focus,\n          },\n        }\n      },\n      actions: [\n        ({event}, {blockOffsets}) => [\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({type: 'selection', blockOffsets})\n            },\n          },\n          forward(event),\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst deleteBackwardListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'delete.backward',\n      actions: [\n        () => [\n          execute({\n            type: 'history.undo',\n          }),\n          effect(() => {\n            sendBack({type: 'delete.backward'})\n          }),\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst decoratorPairMachine = setup({\n  types: {\n    context: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      offsetAfterEmphasis?: BlockOffset\n      pair: {char: string; amount: number}\n    },\n    input: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      pair: {char: string; amount: number}\n    },\n    events: {} as MarkdownEmphasisEvent,\n  },\n  actors: {\n    'emphasis listener': fromCallback(emphasisListener),\n    'delete.backward listener': fromCallback(deleteBackwardListenerCallback),\n    'selection listener': fromCallback(selectionListenerCallback),\n  },\n}).createMachine({\n  id: 'decorator pair',\n  context: ({input}) => ({\n    decorator: input.decorator,\n    editor: input.editor,\n    pair: input.pair,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      invoke: [\n        {\n          src: 'emphasis listener',\n          input: ({context}) => ({\n            decorator: context.decorator,\n            editor: context.editor,\n            pair: context.pair,\n          }),\n        },\n      ],\n      on: {\n        'emphasis.add': {\n          target: 'emphasis added',\n          actions: assign({\n            offsetAfterEmphasis: ({event}) => event.blockOffset,\n          }),\n        },\n      },\n    },\n    'emphasis added': {\n      exit: [\n        assign({\n          offsetAfterEmphasis: undefined,\n        }),\n      ],\n      invoke: [\n        {\n          src: 'selection listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n        {\n          src: 'delete.backward listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n      ],\n      on: {\n        'selection': {\n          target: 'idle',\n          guard: ({context, event}) => {\n            const selectionChanged = !isEqual(\n              {\n                anchor: context.offsetAfterEmphasis,\n                focus: context.offsetAfterEmphasis,\n              },\n              event.blockOffsets,\n            )\n\n            return selectionChanged\n          },\n        },\n        'delete.backward': {\n          target: 'idle',\n        },\n      },\n    },\n  },\n})\n","import React from 'react'\nimport type {Editor} from '../editor'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @beta\n */\nexport const EditorRefPlugin = React.forwardRef<Editor | null>((_, ref) => {\n  const editor = useEditor()\n\n  const portableTextEditorRef = React.useRef(editor)\n\n  React.useImperativeHandle(ref, () => portableTextEditorRef.current, [])\n\n  return null\n})\nEditorRefPlugin.displayName = 'EditorRefPlugin'\n","import {useEffect} from 'react'\nimport type {EditorEmittedEvent} from '../editor/relay-machine'\nimport {useEditor} from '../editor/use-editor'\n\n/**\n * @public\n * Listen for events emitted by the editor. Must be used inside `EditorProvider`. Events available include:\n *  - 'blurred'\n *  - 'done loading'\n *  - 'editable'\n *  - 'error'\n *  - 'focused'\n *  - 'invalid value'\n *  - 'loading'\n *  - 'mutation'\n *  - 'patch'\n *  - 'read only'\n *  - 'ready'\n *  - 'selection'\n *  - 'value changed'\n *\n * @example\n * Listen and log events.\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n *\n * function MyComponent() {\n *  return (\n *  <EditorProvider>\n *   <EventListenerPlugin\n *    on={(event) => {\n *     console.log(event)\n *    }\n *   } />\n *   { ... }\n * </EditorProvider>\n *  )\n * }\n * ```\n * @example\n * Handle events when there is a mutation.\n * ```tsx\n * <EventListenerPlugin\n *  on={(event) => {\n *    if (event.type === 'mutation') {\n *      console.log('Value changed:', event.snapshot)\n *    }\n *  }}\n * />\n * ```\n * @group Components\n */\nexport function EventListenerPlugin(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const subscription = editor.on('*', props.on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor, props.on])\n\n  return null\n}\n","import {isTextBlock} from '@portabletext/schema'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport * as selectors from '../selectors'\nimport {spanSelectionPointToBlockOffset} from '../utils/util.block-offset'\nimport {getTextBlockText} from '../utils/util.get-text-block-text'\nimport {execute} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport type MarkdownBehaviorsConfig = {\n  horizontalRuleObject?: (context: {\n    schema: EditorSchema\n  }) => {name: string; value?: {[prop: string]: unknown}} | undefined\n  defaultStyle?: (context: {schema: EditorSchema}) => string | undefined\n  headingStyle?: (context: {\n    schema: EditorSchema\n    level: number\n  }) => string | undefined\n  blockquoteStyle?: (context: {schema: EditorSchema}) => string | undefined\n  unorderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n  orderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n}\n\nexport function createMarkdownBehaviors(config: MarkdownBehaviorsConfig) {\n  const automaticBlockquoteOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const caretAtTheEndOfQuote = blockOffset.offset === 1\n      const looksLikeMarkdownQuote = /^>/.test(blockText)\n      const blockquoteStyle = config.blockquoteStyle?.(snapshot.context)\n\n      if (\n        caretAtTheEndOfQuote &&\n        looksLikeMarkdownQuote &&\n        blockquoteStyle !== undefined\n      ) {\n        return {focusTextBlock, style: blockquoteStyle}\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        execute({\n          type: 'insert.text',\n          text: ' ',\n        }),\n      ],\n      (_, {focusTextBlock, style}) => [\n        execute({\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: 2,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n  const automaticHr = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const hrCharacter =\n        event.text === '-'\n          ? '-'\n          : event.text === '*'\n            ? '*'\n            : event.text === '_'\n              ? '_'\n              : undefined\n\n      if (hrCharacter === undefined) {\n        return false\n      }\n\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      if (!hrObject || !focusBlock || !selectionCollapsed) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const textBefore = selectors.getBlockTextBefore(snapshot)\n      const hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0,\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3,\n        },\n      }\n\n      if (\n        !previousInlineObject &&\n        textBefore === `${hrCharacter}${hrCharacter}`\n      ) {\n        return {hrObject, focusBlock, hrCharacter, hrBlockOffsets}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {hrCharacter}) => [\n        execute({\n          type: 'insert.text',\n          text: hrCharacter,\n        }),\n      ],\n      (_, {hrObject, hrBlockOffsets}) => [\n        execute({\n          type: 'insert.block',\n          placement: 'before',\n          block: {\n            _type: hrObject.name,\n            ...(hrObject.value ?? {}),\n          },\n        }),\n        execute({\n          type: 'delete.text',\n          at: hrBlockOffsets,\n        }),\n      ],\n    ],\n  })\n  const automaticHrOnPaste = defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot, event}) => {\n      const text = event.originEvent.dataTransfer.getData('text/plain')\n      const hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/\n      const hrCharacters = text.match(hrRegExp)?.[0]\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = selectors.getFocusBlock(snapshot)\n\n      if (!hrCharacters || !hrObject || !focusBlock) {\n        return false\n      }\n\n      return {hrCharacters, hrObject, focusBlock}\n    },\n    actions: [\n      (_, {hrCharacters}) => [\n        execute({\n          type: 'insert.text',\n          text: hrCharacters,\n        }),\n      ],\n      ({snapshot}, {hrObject, focusBlock}) =>\n        isTextBlock(snapshot.context, focusBlock.node)\n          ? [\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: snapshot.context.schema.block.name,\n                  children: focusBlock.node.children,\n                },\n                placement: 'after',\n              }),\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              }),\n              execute({\n                type: 'delete.block',\n                at: focusBlock.path,\n              }),\n            ]\n          : [\n              execute({\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              }),\n            ],\n    ],\n  })\n  const automaticHeadingOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (!blockOffset) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const markdownHeadingSearch = /^#+/.exec(blockText)\n      const level = markdownHeadingSearch\n        ? markdownHeadingSearch[0].length\n        : undefined\n      const caretAtTheEndOfHeading = blockOffset.offset === level\n\n      if (previousInlineObject || !caretAtTheEndOfHeading) {\n        return false\n      }\n\n      const style =\n        level !== undefined\n          ? config.headingStyle?.({schema: snapshot.context.schema, level})\n          : undefined\n\n      if (level !== undefined && style !== undefined) {\n        return {\n          focusTextBlock,\n          style: style,\n          level,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [execute(event)],\n      (_, {focusTextBlock, style, level}) => [\n        execute({\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: level + 1,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n  const clearStyleOnBackspace = defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const atTheBeginningOfBLock =\n        focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n        snapshot.context.selection?.focus.offset === 0\n\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n\n      if (\n        atTheBeginningOfBLock &&\n        defaultStyle &&\n        focusTextBlock.node.style !== defaultStyle\n      ) {\n        return {defaultStyle, focusTextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {defaultStyle, focusTextBlock}) => [\n        execute({\n          type: 'block.set',\n          props: {style: defaultStyle},\n          at: focusTextBlock.path,\n        }),\n      ],\n    ],\n  })\n  const automaticListOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n      const looksLikeUnorderedList = /^(-|\\*)/.test(blockText)\n      const unorderedListStyle = config.unorderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfUnorderedList = blockOffset.offset === 1\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfUnorderedList &&\n        looksLikeUnorderedList &&\n        unorderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle,\n        }\n      }\n\n      const looksLikeOrderedList = /^1\\./.test(blockText)\n      const orderedListStyle = config.orderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfOrderedList = blockOffset.offset === 2\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfOrderedList &&\n        looksLikeOrderedList &&\n        orderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: orderedListStyle,\n          listItemLength: 2,\n          style: defaultStyle,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [execute(event)],\n      (_, {focusTextBlock, style, listItem, listItemLength}) => [\n        execute({\n          type: 'block.set',\n          props: {\n            listItem,\n            level: 1,\n            style,\n          },\n          at: focusTextBlock.path,\n        }),\n        execute({\n          type: 'delete.text',\n          at: {\n            anchor: {\n              path: focusTextBlock.path,\n              offset: 0,\n            },\n            focus: {\n              path: focusTextBlock.path,\n              offset: listItemLength + 1,\n            },\n          },\n        }),\n      ],\n    ],\n  })\n\n  const markdownBehaviors = [\n    automaticBlockquoteOnSpace,\n    automaticHeadingOnSpace,\n    automaticHr,\n    automaticHrOnPaste,\n    clearStyleOnBackspace,\n    automaticListOnSpace,\n  ]\n\n  return markdownBehaviors\n}\n","import {useEffect} from 'react'\nimport {\n  createMarkdownBehaviors,\n  type MarkdownBehaviorsConfig,\n} from '../behaviors/behavior.markdown'\nimport type {EditorSchema} from '../editor/editor-schema'\nimport {useEditor} from '../editor/use-editor'\nimport {DecoratorShortcutPlugin} from './plugin.decorator-shortcut'\n\n/**\n * @beta\n */\nexport type MarkdownPluginConfig = MarkdownBehaviorsConfig & {\n  boldDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  codeDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  italicDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  strikeThroughDecorator?: ({\n    schema,\n  }: {\n    schema: EditorSchema\n  }) => string | undefined\n}\n\n/**\n * @beta\n * Add markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {MarkdownPlugin} from '@portabletext/editor/plugins'\n *\n * function App() {\n *   return (\n *    <EditorProvider>\n *      <MarkdownPlugin\n *        config={{\n *          boldDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strong')?.value,\n *          codeDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'code')?.value,\n *          italicDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'em')?.value,\n *          strikeThroughDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strike-through')?.value,\n *          horizontalRuleObject: ({schema}) => {\n *            const name = schema.blockObjects.find(\n *              (object) => object.name === 'break',\n *            )?.name\n *            return name ? {name} : undefined\n *          },\n *          defaultStyle: ({schema}) => schema.styles[0].value,\n *          headingStyle: ({schema, level}) =>\n *            schema.styles.find((style) => style.value === `h${level}`)\n *              ?.value,\n *          blockquoteStyle: ({schema}) =>\n *            schema.styles.find((style) => style.value === 'blockquote')\n *              ?.value,\n *          unorderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'bullet')?.value,\n *          orderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'number')?.value,\n *        }}\n *      />\n *      {...}\n *    </EditorProvider>\n *  )\n * }\n * ```\n *\n * @deprecated Install the plugin from `@portabletext/plugin-markdown-shortcuts`\n */\nexport function MarkdownPlugin(props: {config: MarkdownPluginConfig}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const behaviors = createMarkdownBehaviors(props.config)\n\n    const unregisterBehaviors = behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors) {\n        unregisterBehavior()\n      }\n    }\n  }, [editor, props.config])\n\n  return (\n    <>\n      {props.config.boldDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '*', amount: 2}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '_', amount: 2}}\n          />\n        </>\n      ) : null}\n      {props.config.codeDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.codeDecorator}\n          pair={{char: '`', amount: 1}}\n        />\n      ) : null}\n      {props.config.italicDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '*', amount: 1}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '_', amount: 1}}\n          />\n        </>\n      ) : null}\n      {props.config.strikeThroughDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.strikeThroughDecorator}\n          pair={{char: '~', amount: 2}}\n        />\n      ) : null}\n    </>\n  )\n}\n","import {defineBehavior, execute, raise} from '../behaviors'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {BehaviorPlugin} from './plugin.behavior'\n\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    guard: ({snapshot}) =>\n      snapshot.context.selection && selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false,\n    actions: [(_, {selection}) => [execute({type: 'delete', at: selection})]],\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    actions: [],\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({event}) =>\n      event.placement === 'before' || event.placement === 'after',\n    actions: [],\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        !focusTextBlock ||\n        !utils.isTextBlock(snapshot.context, event.block)\n      ) {\n        return false\n      }\n\n      return true\n    },\n    actions: [\n      ({event}) => [\n        execute({\n          type: 'insert.block',\n          block: event.block,\n          placement: 'auto',\n          select: 'end',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    actions: [],\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      const textBlocks = event.blocks.filter((block) =>\n        utils.isTextBlock(snapshot.context, block),\n      )\n\n      if (textBlocks.length === 0) {\n        return false\n      }\n\n      return textBlocks.reduce((targetBlock, incomingBlock) => {\n        return utils.mergeTextBlocks({\n          context: snapshot.context,\n          targetBlock,\n          incomingBlock,\n        })\n      })\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [raise({type: 'insert.block', block, placement: 'auto'})],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.blocks` in case the Behavior above\n   * ends up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    actions: [],\n  }),\n]\n\n/**\n * @beta\n * Restrict the editor to one line. The plugin takes care of blocking\n * `insert.break` events and smart handling of other `insert.*` events.\n *\n * Place it with as high priority as possible to make sure other plugins don't\n * overwrite `insert.*` events before this plugin gets a chance to do so.\n *\n * @deprecated Install the plugin from `@portabletext/plugin-one-line`\n */\nexport function OneLinePlugin() {\n  return <BehaviorPlugin behaviors={oneLineBehaviors} />\n}\n"],"names":["BehaviorPlugin","props","$","_c","editor","useEditor","t0","t1","behaviors","unregisterBehaviors","map","behavior","registerBehavior","forEach","_temp","useEffect","unregister","createPairRegex","char","amount","prePrefix","prefix","repeat","Math","max","postPrefix","content","preSuffix","suffix","postSuffix","createDecoratorPairBehavior","config","pair","console","warn","pairRegex","regEx","RegExp","defineBehavior","on","guard","snapshot","event","decorator","schema","context","undefined","focusTextBlock","selectors","selectionStartPoint","selectionStartOffset","utils","value","selectionPoint","newText","text","textToDecorate","match","at","prefixOffsets","anchor","path","offset","length","focus","suffixOffsets","prefixSelection","offsets","inlineObjectBeforePrefixFocus","selection","inlineObjectBeforePrefixFocusOffset","previousInlineObject","previousInlineObjectOffset","actions","execute","_","type","effect","onDecorate","DecoratorShortcutPlugin","input","useActorRef","decoratorPairMachine","emphasisListener","sendBack","blockOffset","selectionListenerCallback","blockOffsets","forward","deleteBackwardListenerCallback","setup","types","events","actors","fromCallback","createMachine","id","initial","states","invoke","src","target","assign","offsetAfterEmphasis","exit","isEqual","EditorRefPlugin","React","forwardRef","ref","portableTextEditorRef","useRef","Symbol","for","current","useImperativeHandle","displayName","EventListenerPlugin","subscription","unsubscribe","createMarkdownBehaviors","automaticBlockquoteOnSpace","selectionCollapsed","focusSpan","spanSelectionPointToBlockOffset","_key","node","blockText","getTextBlockText","caretAtTheEndOfQuote","looksLikeMarkdownQuote","test","blockquoteStyle","style","automaticHr","hrCharacter","hrObject","horizontalRuleObject","focusBlock","textBefore","hrBlockOffsets","placement","block","_type","name","automaticHrOnPaste","originEvent","dataTransfer","getData","hrRegExp","hrCharacters","isTextBlock","children","automaticHeadingOnSpace","markdownHeadingSearch","exec","level","caretAtTheEndOfHeading","headingStyle","clearStyleOnBackspace","atTheBeginningOfBLock","defaultStyle","automaticListOnSpace","looksLikeUnorderedList","unorderedListStyle","caretAtTheEndOfUnorderedList","listItem","listItemLength","looksLikeOrderedList","orderedListStyle","caretAtTheEndOfOrderedList","MarkdownPlugin","unregisterBehavior","t2","boldDecorator","t3","codeDecorator","t4","italicDecorator","t5","strikeThroughDecorator","t6","oneLineBehaviors","select","textBlocks","blocks","filter","reduce","targetBlock","incomingBlock","raise","OneLinePlugin"],"mappings":"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","debugId":null}}]
}