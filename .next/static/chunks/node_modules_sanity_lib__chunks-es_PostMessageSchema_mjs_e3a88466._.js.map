{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/sanity/lib/_chunks-es/PostMessageSchema.mjs","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/Katyusha-ecommerce/ecommerce-build/node_modules/sanity/src/presentation/overlays/schema/helpers.ts","file:///Users/tamra/Desktop/KatyushaWeb/Websites/Katyusha-ecommerce/ecommerce-build/node_modules/sanity/src/presentation/overlays/schema/SchemaIcon.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/Katyusha-ecommerce/ecommerce-build/node_modules/sanity/src/presentation/overlays/schema/extract.tsx","file:///Users/tamra/Desktop/KatyushaWeb/Websites/Katyusha-ecommerce/ecommerce-build/node_modules/sanity/src/presentation/overlays/schema/PostMessageSchema.tsx"],"sourcesContent":["import {\n  type ArraySchemaType,\n  type NumberSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type ReferenceSchemaType,\n  type Rule,\n  type Schema as SchemaDef,\n  type SchemaType as SanitySchemaType,\n  type StringSchemaType,\n} from '@sanity/types'\nimport {type SchemaType} from 'groq-js'\n\nexport function isFieldRequired(field: ObjectField): boolean {\n  const {validation} = field.type\n  if (!validation) {\n    return false\n  }\n  const rules = Array.isArray(validation) ? validation : [validation]\n  for (const rule of rules) {\n    let required = false\n\n    // hack to check if a field is required. We create a proxy that returns itself when a method is called,\n    // if the method is \"required\" we set a flag\n    const proxy = new Proxy(\n      {},\n      {\n        get: (target, methodName) => () => {\n          if (methodName === 'required') {\n            required = true\n          }\n          return proxy\n        },\n      },\n    ) as Rule\n\n    if (typeof rule === 'function') {\n      rule(proxy)\n      if (required) {\n        return true\n      }\n    }\n\n    if (typeof rule === 'object' && rule !== null && '_required' in rule) {\n      if (rule._required === 'required') {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\nfunction isType(\n  typeDef: SanitySchemaType | ObjectField | ObjectFieldType,\n  typeName: string,\n): boolean {\n  let type: SchemaType | ObjectField | ObjectFieldType | undefined = typeDef\n  while (type) {\n    if (type.name === typeName || (type.type && type.type.name === typeName)) {\n      return true\n    }\n\n    type = type.type\n  }\n  return false\n}\n\nexport function isObjectType(typeDef: SanitySchemaType): typeDef is ObjectSchemaType {\n  return isType(typeDef, 'object') || typeDef.jsonType === 'object' || 'fields' in typeDef\n}\nexport function isArrayType(typeDef: SanitySchemaType): typeDef is ArraySchemaType {\n  return isType(typeDef, 'array')\n}\nexport function isReferenceType(typeDef: SanitySchemaType): typeDef is ReferenceSchemaType {\n  return isType(typeDef, 'reference')\n}\n// @todo\nexport function isCrossDatasetReferenceType(typeDef: SanitySchemaType): boolean {\n  return isType(typeDef, 'crossDatasetReference')\n}\nexport function isStringType(typeDef: SanitySchemaType): typeDef is StringSchemaType {\n  return isType(typeDef, 'string')\n}\nexport function isNumberType(typeDef: SanitySchemaType): typeDef is NumberSchemaType {\n  return isType(typeDef, 'number')\n}\n\n// Traverse the type tree and return the \"last\" type, ie deepest type in the tree\nexport function lastType(typeDef: SanitySchemaType): SanitySchemaType | undefined {\n  let type: SchemaType | ObjectField | ObjectFieldType | undefined = typeDef\n  while (type) {\n    if (!type.type) {\n      return type\n    }\n    type = type.type\n  }\n\n  return undefined\n}\n\n// Traverse the type tree and gather all the fields\nexport function gatherFields(type: SanitySchemaType | ObjectSchemaType): ObjectField[] {\n  if ('fields' in type) {\n    return type.type ? gatherFields(type.type).concat(type.fields) : type.fields\n  }\n\n  return []\n}\n\n// Sorts the types by their dependencies by using a topological sort depth-first algorithm.\nexport function sortByDependencies(compiledSchema: SchemaDef): string[] {\n  const seen = new Set<SanitySchemaType>()\n\n  // Walks the dependencies of a schema type and adds them to the dependencies set\n  function walkDependencies(\n    schemaType: SanitySchemaType,\n    dependencies: Set<SanitySchemaType>,\n  ): void {\n    if (seen.has(schemaType)) {\n      return\n    }\n    seen.add(schemaType)\n\n    if ('fields' in schemaType) {\n      for (const field of gatherFields(schemaType)) {\n        const last = lastType(field.type)\n        if (last!.name === 'document') {\n          dependencies.add(last!)\n          continue\n        }\n\n        let schemaTypeName: string | undefined\n        if (schemaType.type!.type) {\n          schemaTypeName = field.type.type!.name\n        } else if ('jsonType' in schemaType.type!) {\n          schemaTypeName = field.type.jsonType\n        }\n\n        if (schemaTypeName === 'object' || schemaTypeName === 'block') {\n          if (isReferenceType(field.type)) {\n            field.type.to.forEach((ref) => dependencies.add(ref.type!))\n          } else {\n            dependencies.add(field.type)\n          }\n        }\n        walkDependencies(field.type, dependencies)\n      }\n    } else if ('of' in schemaType) {\n      for (const item of schemaType.of) {\n        walkDependencies(item, dependencies)\n      }\n    }\n  }\n  const dependencyMap = new Map<SanitySchemaType, Set<SanitySchemaType>>()\n  compiledSchema.getTypeNames().forEach((typeName) => {\n    const schemaType = compiledSchema.get(typeName)\n    if (schemaType === undefined || schemaType.type === null) {\n      return\n    }\n    const dependencies = new Set<SanitySchemaType>()\n\n    walkDependencies(schemaType, dependencies)\n    dependencyMap.set(schemaType, dependencies)\n    seen.clear() // Clear the seen set for the next type\n  })\n\n  // Sorts the types by their dependencies\n  const typeNames: string[] = []\n  // holds a temporary mark for types that are currently being visited, to detect cyclic dependencies\n  const currentlyVisiting = new Set<SanitySchemaType>()\n\n  // holds a permanent mark for types that have been already visited\n  const visited = new Set<SanitySchemaType>()\n\n  // visit implements a depth-first search\n  function visit(type: SanitySchemaType) {\n    if (visited.has(type)) {\n      return\n    }\n    // If we find a type that is already in the temporary mark, we have a cyclic dependency.\n    if (currentlyVisiting.has(type)) {\n      return\n    }\n    // mark this as a temporary mark, meaning it's being visited\n    currentlyVisiting.add(type)\n    const deps = dependencyMap.get(type)\n    if (deps !== undefined) {\n      deps.forEach((dep) => visit(dep))\n    }\n    currentlyVisiting.delete(type)\n    visited.add(type)\n\n    if (!typeNames.includes(type.name)) {\n      typeNames.unshift(type.name)\n    }\n  }\n  // Visit all types in the dependency map\n  for (const [type] of dependencyMap) {\n    visit(type)\n  }\n\n  return typeNames\n}\n","import {type SchemaType as SanitySchemaType} from '@sanity/types'\nimport {type ThemeContextValue, ThemeProvider} from '@sanity/ui'\nimport {type FunctionComponent, isValidElement} from 'react'\nimport {ServerStyleSheet, StyleSheetManager} from 'styled-components'\n\nexport const SchemaIcon: FunctionComponent<{\n  schemaType: SanitySchemaType\n  theme: ThemeContextValue\n}> = function SchemaIcon({schemaType, theme: themeContext}) {\n  const {theme, scheme, tone} = themeContext\n  const sheet = new ServerStyleSheet()\n  const Icon = schemaType.icon\n\n  return Icon ? (\n    <StyleSheetManager sheet={sheet.instance}>\n      <ThemeProvider theme={theme} scheme={scheme} tone={tone}>\n        {isValidElement(Icon) ? Icon : <Icon />}\n      </ThemeProvider>\n    </StyleSheetManager>\n  ) : null\n}\n","import {\n  type InsertMenuOptions,\n  type SchemaArrayNode,\n  type SchemaBooleanNode,\n  type SchemaInlineNode,\n  type SchemaNode,\n  type SchemaNullNode,\n  type SchemaNumberNode,\n  type SchemaObjectField,\n  type SchemaObjectNode,\n  type SchemaStringNode,\n  type SchemaType,\n  type SchemaUnionNode,\n  type SchemaUnionNodeOptions,\n  type SchemaUnionOption,\n  type SchemaUnknownNode,\n} from '@sanity/presentation-comlink'\nimport {\n  type ArraySchemaType,\n  type NumberSchemaType,\n  type ObjectSchemaType,\n  type ReferenceSchemaType,\n  type SchemaType as SanitySchemaType,\n  type StringSchemaType,\n} from '@sanity/types'\nimport {type ThemeContextValue} from '@sanity/ui'\nimport {renderToString} from 'react-dom/server'\nimport {type Workspace} from 'sanity'\n\nimport {\n  gatherFields,\n  isArrayType,\n  isCrossDatasetReferenceType,\n  isFieldRequired,\n  isNumberType,\n  isObjectType,\n  isReferenceType,\n  isStringType,\n  lastType,\n  sortByDependencies,\n} from './helpers'\nimport {SchemaIcon} from './SchemaIcon'\n\nconst documentDefaultFields = (typeName: string): Record<string, SchemaObjectField> => ({\n  _id: {\n    type: 'objectField',\n    name: '_id',\n    value: {\n      type: 'string',\n    },\n  },\n  _type: {\n    type: 'objectField',\n    name: '_type',\n    value: {\n      type: 'string',\n      value: typeName,\n    },\n  },\n  _createdAt: {\n    type: 'objectField',\n    name: '_createdAt',\n    value: {\n      type: 'string',\n    },\n  },\n  _updatedAt: {\n    type: 'objectField',\n    name: '_updatedAt',\n    value: {\n      type: 'string',\n    },\n  },\n  _rev: {\n    type: 'objectField',\n    name: '_rev',\n    value: {\n      type: 'string',\n    },\n  },\n})\n\nfunction createStringNodeDefintion(\n  stringSchemaType: StringSchemaType,\n): SchemaStringNode | SchemaUnionNode<SchemaStringNode> {\n  const listOptions = stringSchemaType.options?.list\n  if (listOptions && Array.isArray(listOptions)) {\n    return {\n      type: 'union',\n      of: listOptions.map((v) => ({\n        type: 'string',\n        value: typeof v === 'string' ? v : v.value,\n      })),\n    }\n  }\n  return {\n    type: 'string',\n  }\n}\n\nfunction createNumberNodeDefintion(\n  numberSchemaType: NumberSchemaType,\n): SchemaNumberNode | SchemaUnionNode<SchemaNumberNode> {\n  const listOptions = numberSchemaType.options?.list\n  if (listOptions && Array.isArray(listOptions)) {\n    return {\n      type: 'union',\n      of: listOptions.map((v) => ({\n        type: 'number',\n        value: typeof v === 'number' ? v : v.value,\n      })),\n    }\n  }\n  return {\n    type: 'number',\n  }\n}\n\nfunction createReferenceNode(name: string, inArray: boolean = false): SchemaObjectNode {\n  const fields: Record<string, SchemaObjectField> = {\n    _ref: {\n      type: 'objectField',\n      name: '_ref',\n      value: {\n        type: 'string',\n      },\n    },\n    _type: {\n      type: 'objectField',\n      name: '_type',\n      value: {\n        type: 'string',\n        value: 'reference',\n      },\n    },\n    _weak: {\n      type: 'objectField',\n      name: '_weak',\n      value: {\n        type: 'boolean',\n      },\n      optional: true,\n    },\n  }\n\n  if (inArray) {\n    fields._key = {\n      type: 'objectField',\n      name: '_key',\n      value: {\n        type: 'string',\n      },\n    } satisfies SchemaObjectField\n  }\n\n  return {\n    type: 'object',\n    fields,\n    dereferencesTo: name,\n  } satisfies SchemaObjectNode\n}\n\nfunction createReferenceNodeDefintion(\n  reference: ReferenceSchemaType,\n): SchemaObjectNode | SchemaUnionNode<SchemaObjectNode> {\n  const references = gatherReferenceNames(reference)\n  if (references.length === 1) {\n    return createReferenceNode(references[0])\n  }\n\n  return {\n    type: 'union',\n    of: references.map((name) => ({\n      type: 'unionOption',\n      name,\n      value: createReferenceNode(name),\n    })),\n  }\n}\n\n// Traverse the reference type tree and gather all the reference names\nfunction gatherReferenceNames(type: ReferenceSchemaType): string[] {\n  const allReferences = gatherReferenceTypes(type)\n  // Remove duplicates\n  return [...new Set(allReferences.map((ref) => ref.name))]\n}\n\nfunction gatherReferenceTypes(type: ReferenceSchemaType): ObjectSchemaType[] {\n  const refTo = 'to' in type ? type.to : []\n  if ('type' in type && isReferenceType(type.type!)) {\n    return [...gatherReferenceTypes(type.type), ...refTo]\n  }\n\n  return refTo\n}\n\nconst typesMap = new Map<string, Omit<SchemaStringNode, 'name'> | Omit<SchemaBooleanNode, 'name'>>([\n  ['text', {type: 'string'}],\n  ['url', {type: 'string'}],\n  ['datetime', {type: 'string'}],\n  ['date', {type: 'string'}],\n  ['boolean', {type: 'boolean'}],\n  ['email', {type: 'string'}],\n])\n\nexport function extractSchema(workspace: Workspace, theme: ThemeContextValue): SchemaType[] {\n  const inlineFields = new Set<SanitySchemaType>()\n  const {schema: schemaDef, basePath} = workspace\n\n  const sortedSchemaTypeNames = sortByDependencies(schemaDef)\n  return sortedSchemaTypeNames\n    .map((typeName) => {\n      const schemaType = schemaDef.get(typeName)\n      if (schemaType === undefined) {\n        return undefined\n      }\n      const base = convertBaseType(schemaType)\n\n      if (base === null) {\n        return undefined\n      }\n\n      if (base.type === 'type') {\n        inlineFields.add(schemaType)\n      }\n\n      return base\n    })\n    .filter((type: SchemaType | undefined): type is SchemaType => type !== undefined)\n\n  function extractIcon(schemaType: SanitySchemaType): string | undefined {\n    if (!schemaType.icon) return undefined\n    return renderToString(<SchemaIcon schemaType={schemaType} theme={theme} />)\n  }\n\n  function convertBaseType(schemaType: SanitySchemaType): SchemaType | null {\n    let typeName: string | undefined\n    if (schemaType.type) {\n      typeName = schemaType.type.name\n    } else if ('jsonType' in schemaType) {\n      typeName = schemaType.jsonType\n    }\n\n    if (typeName === 'document') {\n      const object = createObject(schemaType)\n      if (object.type === 'unknown') {\n        return null\n      }\n\n      return {\n        type: 'document',\n        name: schemaType.name,\n        title: typeof schemaType.title === 'string' ? schemaType.title : undefined,\n        icon: extractIcon(schemaType),\n        fields: {\n          ...documentDefaultFields(schemaType.name),\n          ...object.fields,\n        },\n      }\n    }\n\n    const value = convertSchemaType(schemaType)\n    if (value.type === 'unknown') {\n      return null\n    }\n\n    if (value.type === 'object') {\n      return {\n        name: schemaType.name,\n        type: 'type',\n        value: {\n          type: 'object',\n          fields: {\n            _type: {\n              type: 'objectField',\n              name: '_type',\n              value: {\n                type: 'string',\n                value: schemaType.name,\n              },\n            },\n            ...value.fields,\n          },\n        },\n      }\n    }\n\n    return {\n      name: schemaType.name,\n      title: typeof schemaType.title === 'string' ? schemaType.title : undefined,\n      type: 'type',\n      value,\n    }\n  }\n\n  function createObject(\n    schemaType: ObjectSchemaType | SanitySchemaType,\n  ): SchemaObjectNode | SchemaUnknownNode {\n    const fields: Record<string, SchemaObjectField> = {}\n\n    for (const field of gatherFields(schemaType)) {\n      const value = convertSchemaType(field.type)\n      if (value === null) {\n        continue\n      }\n\n      fields[field.name] = {\n        type: 'objectField',\n        name: field.name,\n        title: typeof field.type.title === 'string' ? field.type.title : undefined,\n        value,\n        optional: isFieldRequired(field) === false,\n      }\n    }\n\n    return {\n      type: 'object',\n      fields,\n    }\n  }\n\n  function convertSchemaType(schemaType: SanitySchemaType): SchemaNode {\n    if (lastType(schemaType)?.name === 'document') {\n      return createReferenceNode(schemaType.name)\n    }\n\n    if (inlineFields.has(schemaType.type!)) {\n      return {type: 'inline', name: schemaType.type!.name} satisfies SchemaInlineNode\n    }\n\n    if (schemaType.type?.type?.name === 'object') {\n      return {type: 'inline', name: schemaType.type.name} satisfies SchemaInlineNode\n    }\n\n    if (isStringType(schemaType)) {\n      return createStringNodeDefintion(schemaType)\n    }\n\n    if (isNumberType(schemaType)) {\n      return createNumberNodeDefintion(schemaType)\n    }\n\n    const mapped = typesMap.get(schemaType.type?.name || '')\n    if (mapped) {\n      return mapped\n    }\n\n    if (schemaType.type && typesMap.has(schemaType.type.name)) {\n      return typesMap.get(schemaType.type.name)!\n    }\n\n    // Cross dataset references are not supported\n    if (isCrossDatasetReferenceType(schemaType)) {\n      return {type: 'unknown'} satisfies SchemaUnknownNode // we don't support cross-dataset references at the moment\n    }\n\n    if (isReferenceType(schemaType)) {\n      return createReferenceNodeDefintion(schemaType)\n    }\n\n    if (isArrayType(schemaType)) {\n      return createArray(schemaType)\n    }\n\n    if (isObjectType(schemaType)) {\n      return createObject(schemaType)\n    }\n\n    throw new Error(`Type \"${schemaType.name}\" not found`)\n  }\n\n  function createUnionNodeOptions(\n    schemaType: ArraySchemaType,\n    of: SchemaUnionOption<SchemaNode>[],\n  ): SchemaUnionNodeOptions | undefined {\n    const {options} = schemaType\n    if (!options) return undefined\n    const opts = {\n      ...options,\n    }\n    if (options.insertMenu) {\n      opts.insertMenu = {\n        ...options.insertMenu,\n        views: (options.insertMenu as InsertMenuOptions).views?.map((view) =>\n          view.name === 'grid'\n            ? {\n                name: 'grid',\n                previewImageUrls: view.previewImageUrl\n                  ? of.reduce(\n                      (acc, {name}) => {\n                        const url = view.previewImageUrl?.(name)\n                        if (!url) return acc\n                        // If the URL is relative, make it absolute\n                        try {\n                          // oxlint-disable-next-line no-new\n                          new URL(url)\n                          acc[name] = url\n                        } catch {\n                          acc[name] = new URL(\n                            url,\n                            `${window.location.origin}${basePath ? `${basePath}/` : ''}`,\n                          ).toString()\n                        }\n                        return acc\n                      },\n                      {} as Record<string, string | undefined>,\n                    )\n                  : undefined,\n              }\n            : view,\n        ),\n      }\n    }\n    return opts\n  }\n\n  function createArray(\n    arraySchemaType: ArraySchemaType,\n  ): SchemaArrayNode | SchemaUnionNode | SchemaNullNode {\n    const of: SchemaUnionOption[] = []\n    for (const item of arraySchemaType.of) {\n      let field = convertSchemaType(item)\n      const option = {\n        type: 'unionOption',\n        icon: extractIcon(item),\n        name: item.name,\n        title: typeof item.title === 'string' ? item.title : undefined,\n        value: field,\n      } satisfies SchemaUnionOption\n      if (field.type === 'inline') {\n        field = {\n          type: 'object',\n          fields: {\n            _key: createKeyField(),\n          },\n          rest: field,\n        } satisfies SchemaObjectNode\n      } else if (field.type === 'object') {\n        field.rest = {\n          type: 'object',\n          fields: {\n            _key: createKeyField(),\n          },\n        }\n      }\n      option.value = field\n      of.push(option)\n    }\n\n    if (of.length === 0) {\n      return {type: 'null'}\n    }\n\n    if (of.length > 1) {\n      return {\n        type: 'union',\n        of,\n        options: createUnionNodeOptions(arraySchemaType, of),\n      }\n    }\n\n    const {name, title, value} = of[0]\n    return {\n      type: 'array',\n      of: {\n        type: 'arrayItem',\n        name,\n        title: typeof title === 'string' ? title : undefined,\n        value,\n      },\n    }\n  }\n}\n\nfunction createKeyField(): SchemaObjectField<SchemaStringNode> {\n  return {\n    type: 'objectField',\n    name: '_key',\n    value: {\n      type: 'string',\n    },\n  }\n}\n","/* eslint-disable max-nested-callbacks */\nimport {type ClientPerspective} from '@sanity/client'\nimport {type UnresolvedPath} from '@sanity/presentation-comlink'\nimport {useRootTheme} from '@sanity/ui'\nimport {memo, useEffect} from 'react'\nimport {\n  getPublishedId,\n  isReleasePerspective,\n  RELEASES_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useWorkspace,\n} from 'sanity'\n\nimport {API_VERSION} from '../../constants'\nimport {type VisualEditingConnection} from '../../types'\nimport {extractSchema} from './extract'\n\nexport interface PostMessageSchemaProps {\n  comlink: VisualEditingConnection\n  perspective: ClientPerspective\n}\n\nfunction getDocumentPathArray(paths: UnresolvedPath[]) {\n  const documentPathMap = paths.reduce(\n    (acc, {id, path}) => {\n      if (acc[id]) {\n        acc[id].add(path)\n      } else {\n        acc[id] = new Set<string>([path])\n      }\n      return acc\n    },\n    {} as Record<string, Set<string>>,\n  )\n\n  return Object.entries(documentPathMap)\n}\n\n/**\n * Experimental approach for sending a representation of the workspace schema\n * over postMessage so it can be used to enrich the Visual Editing experience\n */\nfunction PostMessageSchema(props: PostMessageSchemaProps): React.JSX.Element | null {\n  const {comlink, perspective} = props\n\n  const workspace = useWorkspace()\n  const theme = useRootTheme()\n\n  // Send a representation of the schema to the visual editing context\n  useEffect(() => {\n    try {\n      const schema = extractSchema(workspace, theme)\n      /**\n       * @deprecated switch to explict schema fetching (using\n       * 'visual-editing/schema') at next major\n       */\n      comlink.post('presentation/schema', {schema})\n\n      return comlink.on('visual-editing/schema', () => ({schema}))\n    } catch {\n      return undefined\n    }\n  }, [comlink, theme, workspace])\n\n  const client = useClient(\n    isReleasePerspective(perspective) ? RELEASES_STUDIO_CLIENT_OPTIONS : {apiVersion: API_VERSION},\n  )\n\n  // Resolve union types from an array of unresolved paths\n  useEffect(() => {\n    return comlink.on('visual-editing/schema-union-types', async (data) => {\n      const documentPathArray = getDocumentPathArray(data.paths)\n      const unionTypes = await Promise.all(\n        documentPathArray.map(async ([id, paths]) => {\n          const arr = Array.from(paths)\n          const projection = arr.map((path, i) => `\"${i}\": ${path}[0]._type`).join(',')\n          const query = `*[_id == $id][0]{${projection}}`\n          // Should implement max 25 concurrent queries here\n          const result = await client.fetch(\n            query,\n            {id: getPublishedId(id)},\n            {\n              tag: 'presentation-schema',\n              perspective,\n            },\n          )\n          const mapped = arr.map((path, i) => ({path: path, type: result[i]}))\n          return {id, paths: mapped}\n        }),\n      )\n\n      const newState = new Map()\n      unionTypes.forEach((action) => {\n        newState.set(action.id, new Map(action.paths.map(({path, type}) => [path, type])))\n      })\n      return {types: newState}\n    })\n  }, [comlink, client, perspective])\n\n  return null\n}\n\nexport default memo(PostMessageSchema)\n"],"names":["isFieldRequired","field","validation","type","rules","Array","isArray","rule","required","proxy","Proxy","get","target","methodName","_required","isType","typeDef","typeName","name","isObjectType","jsonType","isArrayType","isReferenceType","isCrossDatasetReferenceType","isStringType","isNumberType","lastType","gatherFields","concat","fields","sortByDependencies","compiledSchema","seen","Set","walkDependencies","schemaType","dependencies","has","add","last","schemaTypeName","to","forEach","ref","item","of","dependencyMap","Map","getTypeNames","undefined","set","clear","typeNames","currentlyVisiting","visited","visit","deps","dep","delete","includes","unshift","SchemaIcon","t0","$","_c","theme","themeContext","scheme","tone","t1","Symbol","for","ServerStyleSheet","sheet","Icon","icon","t2","instance","isValidElement","documentDefaultFields","_id","value","_type","_createdAt","_updatedAt","_rev","createStringNodeDefintion","stringSchemaType","listOptions","options","list","map","v","createNumberNodeDefintion","numberSchemaType","createReferenceNode","inArray","_ref","_weak","optional","_key","dereferencesTo","createReferenceNodeDefintion","reference","references","gatherReferenceNames","length","allReferences","gatherReferenceTypes","refTo","typesMap","extractSchema","workspace","inlineFields","schema","schemaDef","basePath","base","convertBaseType","filter","extractIcon","renderToString","object","createObject","title","convertSchemaType","mapped","createArray","Error","createUnionNodeOptions","opts","insertMenu","views","view","previewImageUrls","previewImageUrl","reduce","acc","url","URL","window","location","origin","toString","arraySchemaType","option","createKeyField","rest","push","getDocumentPathArray","paths","documentPathMap","id","path","Object","entries","PostMessageSchema","props","comlink","perspective","useWorkspace","useRootTheme","post","on","useEffect","isReleasePerspective","RELEASES_STUDIO_CLIENT_OPTIONS","apiVersion","API_VERSION","client","useClient","t3","t4","data","documentPathArray","unionTypes","Promise","all","t5","arr","from","query","_temp","join","result","fetch","getPublishedId","tag","path_0","i_0","i","newState","action","_temp2","types","path_1","memo"],"mappings":"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","debugId":null}}]
}