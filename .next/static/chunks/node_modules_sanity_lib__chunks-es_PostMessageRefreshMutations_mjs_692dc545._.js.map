{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/sanity/lib/_chunks-es/PostMessageRefreshMutations.mjs","sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/Katyusha-ecommerce/ecommerce-build/node_modules/sanity/src/presentation/editor/PostMessageRefreshMutations.tsx"],"sourcesContent":["import {memo, startTransition, useEffect, useMemo, useState} from 'react'\nimport {getPublishedId, type SanityDocument, useEditState, usePerspective} from 'sanity'\n\nimport {type ConnectionStatus, type VisualEditingConnection} from '../types'\n\nexport interface PostMessageRefreshMutationsProps {\n  id: string\n  type: string\n  comlink: VisualEditingConnection\n  previewKitConnection: ConnectionStatus\n  loadersConnection: ConnectionStatus\n}\n\nfunction PostMessageRefreshMutations(props: PostMessageRefreshMutationsProps): React.ReactNode {\n  const {comlink, type, previewKitConnection, loadersConnection} = props\n  const id = useMemo(() => getPublishedId(props.id), [props.id])\n  const {selectedReleaseId} = usePerspective()\n  const {draft, published, ready, version} = useEditState(id, type, 'low', selectedReleaseId)\n  const livePreviewEnabled =\n    previewKitConnection === 'connected' || loadersConnection === 'connected'\n\n  if ((ready && draft) || published) {\n    return (\n      <PostMessageRefreshMutationsInner\n        key={id}\n        comlink={comlink}\n        draft={draft}\n        livePreviewEnabled={livePreviewEnabled}\n        published={published}\n        version={version}\n      />\n    )\n  }\n\n  return null\n}\n\ninterface PostMessageRefreshMutationsInnerProps\n  extends Pick<PostMessageRefreshMutationsProps, 'comlink'> {\n  livePreviewEnabled: boolean\n  draft: SanityDocument | null\n  published: SanityDocument | null\n  version: SanityDocument | null\n}\nfunction PostMessageRefreshMutationsInner(props: PostMessageRefreshMutationsInnerProps) {\n  const {comlink, draft, published, livePreviewEnabled, version} = props\n  const [prevDraft, setPrevDraft] = useState(draft)\n  const [prevPublished, setPrevPublished] = useState(published)\n  const [prevVersion, setPrevVersion] = useState(version)\n\n  useEffect(() => {\n    if (prevVersion?._rev !== version?._rev) {\n      startTransition(() => setPrevVersion(version))\n      if (version) {\n        comlink?.post('presentation/refresh', {\n          source: 'mutation',\n          livePreviewEnabled,\n          document: parseDocument(version),\n        })\n      }\n    }\n    if (prevDraft?._rev !== draft?._rev) {\n      startTransition(() => setPrevDraft(draft))\n      if (draft) {\n        comlink?.post('presentation/refresh', {\n          source: 'mutation',\n          livePreviewEnabled,\n          document: parseDocument(draft),\n        })\n      }\n    }\n    if (prevPublished?._rev !== published?._rev) {\n      startTransition(() => setPrevPublished(published))\n      if (published) {\n        comlink?.post('presentation/refresh', {\n          source: 'mutation',\n          livePreviewEnabled,\n          document: parseDocument(published),\n        })\n      }\n    }\n  }, [\n    comlink,\n    draft,\n    livePreviewEnabled,\n    prevDraft?._rev,\n    prevPublished?._rev,\n    published,\n    prevVersion?._rev,\n    version,\n  ])\n\n  return null\n}\n\nfunction parseDocument(document: SanityDocument & {slug?: {current?: string | null}}): {\n  _id: string\n  _type: string\n  _rev: string\n  slug?: {current?: string | null}\n} {\n  const {_id, _type, _rev, slug} = document\n  return {_id, _type, _rev, slug}\n}\n\nexport default memo(PostMessageRefreshMutations)\n"],"names":["PostMessageRefreshMutations","props","$","_c","comlink","type","previewKitConnection","loadersConnection","t0","id","getPublishedId","selectedReleaseId","usePerspective","draft","published","ready","version","useEditState","livePreviewEnabled","t1","PostMessageRefreshMutationsInner","prevDraft","setPrevDraft","useState","prevPublished","setPrevPublished","prevVersion","setPrevVersion","_rev","startTransition","post","source","document","parseDocument","t2","t3","t4","useEffect","_id","_type","slug","memo"],"mappings":"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","debugId":null}}]
}