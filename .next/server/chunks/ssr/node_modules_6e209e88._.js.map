{"version":3,"sources":["turbopack:///[project]/node_modules/next/src/server/lib/clone-response.ts","turbopack:///[project]/node_modules/next/src/server/lib/dedupe-fetch.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/types.ts","turbopack:///[project]/node_modules/next/src/lib/batcher.ts","turbopack:///[project]/node_modules/next/src/server/request-meta.ts","turbopack:///[project]/node_modules/next/src/server/base-http/helpers.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/adapters/next-request.ts","turbopack:///[project]/node_modules/next/src/server/client-component-renderer-logger.ts","turbopack:///[project]/node_modules/next/src/server/pipe-readable.ts","turbopack:///[project]/node_modules/next/src/server/render-result.ts","turbopack:///[project]/node_modules/next/src/server/route-kind.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/utils.ts","turbopack:///[project]/node_modules/next/src/server/response-cache/index.ts","turbopack:///[project]/node_modules/next/src/server/lib/patch-fetch.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/unstable-cache.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/sorted-routes.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/is-dynamic.ts","turbopack:///[project]/node_modules/next/src/shared/lib/router/utils/index.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/revalidate.ts","turbopack:///[project]/node_modules/next/src/server/web/spec-extension/unstable-no-store.ts","turbopack:///[project]/node_modules/next/src/server/use-cache/cache-life.ts","turbopack:///[project]/node_modules/next/src/server/use-cache/cache-tag.ts","turbopack:///[project]/node_modules/next/cache.js","turbopack:///[project]/node_modules/@clerk/nextjs/dist/esm/app-router/server-actions.js","turbopack:///[project]/node_modules/@sanity/next-loader/src/server-actions/index.ts"],"sourcesContent":["const noop = () => {}\n\nlet registry: FinalizationRegistry<WeakRef<ReadableStream>> | undefined\n\nif (globalThis.FinalizationRegistry) {\n  registry = new FinalizationRegistry((weakRef: WeakRef<ReadableStream>) => {\n    const stream = weakRef.deref()\n    if (stream && !stream.locked) {\n      stream.cancel('Response object has been garbage collected').then(noop)\n    }\n  })\n}\n\n/**\n * Clones a response by teeing the body so we can return two independent\n * ReadableStreams from it. This avoids the bug in the undici library around\n * response cloning.\n *\n * After cloning, the original response's body will be consumed and closed.\n *\n * @see https://github.com/vercel/next.js/pull/73274\n *\n * @param original - The original response to clone.\n * @returns A tuple containing two independent clones of the original response.\n */\nexport function cloneResponse(original: Response): [Response, Response] {\n  // If the response has no body, then we can just return the original response\n  // twice because it's immutable.\n  if (!original.body) {\n    return [original, original]\n  }\n\n  const [body1, body2] = original.body.tee()\n\n  const cloned1 = new Response(body1, {\n    status: original.status,\n    statusText: original.statusText,\n    headers: original.headers,\n  })\n\n  Object.defineProperty(cloned1, 'url', {\n    value: original.url,\n    // How the original response.url behaves\n    configurable: true,\n    enumerable: true,\n    writable: false,\n  })\n\n  // The Fetch Standard allows users to skip consuming the response body by\n  // relying on garbage collection to release connection resources.\n  // https://github.com/nodejs/undici?tab=readme-ov-file#garbage-collection\n  //\n  // To cancel the stream you then need to cancel both resulting branches.\n  // Teeing a stream will generally lock it for the duration, preventing other\n  // readers from locking it.\n  // https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/tee\n\n  // cloned2 is stored in a react cache and cloned for subsequent requests.\n  // It is the original request, and is is garbage collected by a\n  // FinalizationRegistry in Undici, but since we're tee-ing the stream\n  // ourselves, we need to cancel clone1's stream (the response returned from\n  // our dedupe fetch) when clone1 is reclaimed, otherwise we leak memory.\n  if (registry && cloned1.body) {\n    registry.register(cloned1, new WeakRef(cloned1.body))\n  }\n\n  const cloned2 = new Response(body2, {\n    status: original.status,\n    statusText: original.statusText,\n    headers: original.headers,\n  })\n\n  Object.defineProperty(cloned2, 'url', {\n    value: original.url,\n    // How the original response.url behaves\n    configurable: true,\n    enumerable: true,\n    writable: false,\n  })\n\n  return [cloned1, cloned2]\n}\n","/**\n * Based on https://github.com/facebook/react/blob/d4e78c42a94be027b4dc7ed2659a5fddfbf9bd4e/packages/react/src/ReactFetch.js\n */\nimport * as React from 'react'\nimport { cloneResponse } from './clone-response'\nimport { InvariantError } from '../../shared/lib/invariant-error'\n\nconst simpleCacheKey = '[\"GET\",[],null,\"follow\",null,null,null,null]' // generateCacheKey(new Request('https://blank'));\n\nfunction generateCacheKey(request: Request): string {\n  // We pick the fields that goes into the key used to dedupe requests.\n  // We don't include the `cache` field, because we end up using whatever\n  // caching resulted from the first request.\n  // Notably we currently don't consider non-standard (or future) options.\n  // This might not be safe. TODO: warn for non-standard extensions differing.\n  // IF YOU CHANGE THIS UPDATE THE simpleCacheKey ABOVE.\n  return JSON.stringify([\n    request.method,\n    Array.from(request.headers.entries()),\n    request.mode,\n    request.redirect,\n    request.credentials,\n    request.referrer,\n    request.referrerPolicy,\n    request.integrity,\n  ])\n}\n\ntype CacheEntry = [\n  key: string,\n  promise: Promise<Response>,\n  response: Response | null,\n]\n\nexport function createDedupeFetch(originalFetch: typeof fetch) {\n  const getCacheEntries = React.cache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- url is the cache key\n    (url: string): CacheEntry[] => []\n  )\n\n  return function dedupeFetch(\n    resource: URL | RequestInfo,\n    options?: RequestInit\n  ): Promise<Response> {\n    if (options && options.signal) {\n      // If we're passed a signal, then we assume that\n      // someone else controls the lifetime of this object and opts out of\n      // caching. It's effectively the opt-out mechanism.\n      // Ideally we should be able to check this on the Request but\n      // it always gets initialized with its own signal so we don't\n      // know if it's supposed to override - unless we also override the\n      // Request constructor.\n      return originalFetch(resource, options)\n    }\n    // Normalize the Request\n    let url: string\n    let cacheKey: string\n    if (typeof resource === 'string' && !options) {\n      // Fast path.\n      cacheKey = simpleCacheKey\n      url = resource\n    } else {\n      // Normalize the request.\n      // if resource is not a string or a URL (its an instance of Request)\n      // then do not instantiate a new Request but instead\n      // reuse the request as to not disturb the body in the event it's a ReadableStream.\n      const request =\n        typeof resource === 'string' || resource instanceof URL\n          ? new Request(resource, options)\n          : resource\n      if (\n        (request.method !== 'GET' && request.method !== 'HEAD') ||\n        request.keepalive\n      ) {\n        // We currently don't dedupe requests that might have side-effects. Those\n        // have to be explicitly cached. We assume that the request doesn't have a\n        // body if it's GET or HEAD.\n        // keepalive gets treated the same as if you passed a custom cache signal.\n        return originalFetch(resource, options)\n      }\n      cacheKey = generateCacheKey(request)\n      url = request.url\n    }\n\n    const cacheEntries = getCacheEntries(url)\n    for (let i = 0, j = cacheEntries.length; i < j; i += 1) {\n      const [key, promise] = cacheEntries[i]\n      if (key === cacheKey) {\n        return promise.then(() => {\n          const response = cacheEntries[i][2]\n          if (!response) throw new InvariantError('No cached response')\n\n          // We're cloning the response using this utility because there exists\n          // a bug in the undici library around response cloning. See the\n          // following pull request for more details:\n          // https://github.com/vercel/next.js/pull/73274\n          const [cloned1, cloned2] = cloneResponse(response)\n          cacheEntries[i][2] = cloned2\n          return cloned1\n        })\n      }\n    }\n\n    // We pass the original arguments here in case normalizing the Request\n    // doesn't include all the options in this environment.\n    const promise = originalFetch(resource, options)\n    const entry: CacheEntry = [cacheKey, promise, null]\n    cacheEntries.push(entry)\n\n    return promise.then((response) => {\n      // We're cloning the response using this utility because there exists\n      // a bug in the undici library around response cloning. See the\n      // following pull request for more details:\n      // https://github.com/vercel/next.js/pull/73274\n      const [cloned1, cloned2] = cloneResponse(response)\n      entry[2] = cloned2\n      return cloned1\n    })\n  }\n}\n","import type { OutgoingHttpHeaders } from 'http'\nimport type RenderResult from '../render-result'\nimport type { CacheControl, Revalidate } from '../lib/cache-control'\nimport type { RouteKind } from '../route-kind'\n\nexport interface ResponseCacheBase {\n  get(\n    key: string | null,\n    responseGenerator: ResponseGenerator,\n    context: {\n      isOnDemandRevalidate?: boolean\n      isPrefetch?: boolean\n      incrementalCache: IncrementalCache\n      /**\n       * This is a hint to the cache to help it determine what kind of route\n       * this is so it knows where to look up the cache entry from. If not\n       * provided it will test the filesystem to check.\n       */\n      routeKind: RouteKind\n\n      /**\n       * True if this is a fallback request.\n       */\n      isFallback?: boolean\n\n      /**\n       * True if the route is enabled for PPR.\n       */\n      isRoutePPREnabled?: boolean\n    }\n  ): Promise<ResponseCacheEntry | null>\n}\n\n// The server components HMR cache might store other data as well in the future,\n// at which point this should be refactored to a discriminated union type.\nexport interface ServerComponentsHmrCache {\n  get(key: string): CachedFetchData | undefined\n  set(key: string, data: CachedFetchData): void\n}\n\nexport type CachedFetchData = {\n  headers: Record<string, string>\n  body: string\n  url: string\n  status?: number\n}\n\nexport const enum CachedRouteKind {\n  APP_PAGE = 'APP_PAGE',\n  APP_ROUTE = 'APP_ROUTE',\n  PAGES = 'PAGES',\n  FETCH = 'FETCH',\n  REDIRECT = 'REDIRECT',\n  IMAGE = 'IMAGE',\n}\n\nexport interface CachedFetchValue {\n  kind: CachedRouteKind.FETCH\n  data: CachedFetchData\n  // tags are only present with file-system-cache\n  // fetch cache stores tags outside of cache entry\n  tags?: string[]\n  revalidate: number\n}\n\nexport interface CachedRedirectValue {\n  kind: CachedRouteKind.REDIRECT\n  props: Object\n}\n\nexport interface CachedAppPageValue {\n  kind: CachedRouteKind.APP_PAGE\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  html: RenderResult\n  rscData: Buffer | undefined\n  status: number | undefined\n  postponed: string | undefined\n  headers: OutgoingHttpHeaders | undefined\n  segmentData: Map<string, Buffer> | undefined\n}\n\nexport interface CachedPageValue {\n  kind: CachedRouteKind.PAGES\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  html: RenderResult\n  pageData: Object\n  status: number | undefined\n  headers: OutgoingHttpHeaders | undefined\n}\n\nexport interface CachedRouteValue {\n  kind: CachedRouteKind.APP_ROUTE\n  // this needs to be a RenderResult so since renderResponse\n  // expects that type instead of a string\n  body: Buffer\n  status: number\n  headers: OutgoingHttpHeaders\n}\n\nexport interface CachedImageValue {\n  kind: CachedRouteKind.IMAGE\n  etag: string\n  upstreamEtag: string\n  buffer: Buffer\n  extension: string\n  isMiss?: boolean\n  isStale?: boolean\n}\n\nexport interface IncrementalCachedAppPageValue {\n  kind: CachedRouteKind.APP_PAGE\n  // this needs to be a string since the cache expects to store\n  // the string value\n  html: string\n  rscData: Buffer | undefined\n  headers: OutgoingHttpHeaders | undefined\n  postponed: string | undefined\n  status: number | undefined\n  segmentData: Map<string, Buffer> | undefined\n}\n\nexport interface IncrementalCachedPageValue {\n  kind: CachedRouteKind.PAGES\n  // this needs to be a string since the cache expects to store\n  // the string value\n  html: string\n  pageData: Object\n  headers: OutgoingHttpHeaders | undefined\n  status: number | undefined\n}\n\nexport interface IncrementalResponseCacheEntry {\n  cacheControl?: CacheControl\n  /**\n   * timestamp in milliseconds to revalidate after\n   */\n  revalidateAfter?: Revalidate\n  /**\n   * `-1` here dictates a blocking revalidate should be used\n   */\n  isStale?: boolean | -1\n  isMiss?: boolean\n  value: Exclude<IncrementalCacheValue, CachedFetchValue> | null\n}\n\nexport interface IncrementalFetchCacheEntry {\n  /**\n   * `-1` here dictates a blocking revalidate should be used\n   */\n  isStale?: boolean | -1\n  value: CachedFetchValue\n}\n\nexport type IncrementalCacheEntry =\n  | IncrementalResponseCacheEntry\n  | IncrementalFetchCacheEntry\n\nexport type IncrementalCacheValue =\n  | CachedRedirectValue\n  | IncrementalCachedPageValue\n  | IncrementalCachedAppPageValue\n  | CachedImageValue\n  | CachedFetchValue\n  | CachedRouteValue\n\nexport type ResponseCacheValue =\n  | CachedRedirectValue\n  | CachedPageValue\n  | CachedAppPageValue\n  | CachedImageValue\n  | CachedRouteValue\n\nexport type ResponseCacheEntry = {\n  cacheControl?: CacheControl\n  value: ResponseCacheValue | null\n  isStale?: boolean | -1\n  isMiss?: boolean\n}\n\n/**\n * @param hasResolved whether the responseGenerator has resolved it's promise\n * @param previousCacheEntry the previous cache entry if it exists or the current\n */\nexport type ResponseGenerator = (state: {\n  hasResolved: boolean\n  previousCacheEntry?: IncrementalResponseCacheEntry | null\n  isRevalidating?: boolean\n  span?: any\n}) => Promise<ResponseCacheEntry | null>\n\nexport const enum IncrementalCacheKind {\n  APP_PAGE = 'APP_PAGE',\n  APP_ROUTE = 'APP_ROUTE',\n  PAGES = 'PAGES',\n  FETCH = 'FETCH',\n  IMAGE = 'IMAGE',\n}\n\nexport interface GetIncrementalFetchCacheContext {\n  kind: IncrementalCacheKind.FETCH\n  revalidate?: Revalidate\n  fetchUrl?: string\n  fetchIdx?: number\n  tags?: string[]\n  softTags?: string[]\n}\n\nexport interface GetIncrementalResponseCacheContext {\n  kind: Exclude<IncrementalCacheKind, IncrementalCacheKind.FETCH>\n\n  /**\n   * True if the route is enabled for PPR.\n   */\n  isRoutePPREnabled?: boolean\n\n  /**\n   * True if this is a fallback request.\n   */\n  isFallback: boolean\n}\n\nexport interface SetIncrementalFetchCacheContext {\n  fetchCache: true\n  fetchUrl?: string\n  fetchIdx?: number\n  tags?: string[]\n  isImplicitBuildTimeCache?: boolean\n}\n\nexport interface SetIncrementalResponseCacheContext {\n  fetchCache?: false\n  cacheControl?: CacheControl\n\n  /**\n   * True if the route is enabled for PPR.\n   */\n  isRoutePPREnabled?: boolean\n\n  /**\n   * True if this is a fallback request.\n   */\n  isFallback?: boolean\n}\n\nexport interface IncrementalResponseCache {\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalResponseCacheContext\n  ): Promise<IncrementalResponseCacheEntry | null>\n  set(\n    key: string,\n    data: Exclude<IncrementalCacheValue, CachedFetchValue> | null,\n    ctx: SetIncrementalResponseCacheContext\n  ): Promise<void>\n}\n\nexport interface IncrementalCache extends IncrementalResponseCache {\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalFetchCacheContext\n  ): Promise<IncrementalFetchCacheEntry | null>\n  get(\n    cacheKey: string,\n    ctx: GetIncrementalResponseCacheContext\n  ): Promise<IncrementalResponseCacheEntry | null>\n  set(\n    key: string,\n    data: CachedFetchValue | null,\n    ctx: SetIncrementalFetchCacheContext\n  ): Promise<void>\n  set(\n    key: string,\n    data: Exclude<IncrementalCacheValue, CachedFetchValue> | null,\n    ctx: SetIncrementalResponseCacheContext\n  ): Promise<void>\n}\n","import type { SchedulerFn } from './scheduler'\n\nimport { DetachedPromise } from './detached-promise'\n\ntype CacheKeyFn<K, C extends string | number | null> = (\n  key: K\n) => PromiseLike<C> | C\n\ntype BatcherOptions<K, C extends string | number | null> = {\n  cacheKeyFn?: CacheKeyFn<K, C>\n  schedulerFn?: SchedulerFn<void>\n}\n\ntype WorkFn<V, C> = (\n  key: C,\n  resolve: (value: V | PromiseLike<V>) => void\n) => Promise<V>\n\n/**\n * A wrapper for a function that will only allow one call to the function to\n * execute at a time.\n */\nexport class Batcher<K, V, C extends string | number | null> {\n  private readonly pending = new Map<C, Promise<V>>()\n\n  protected constructor(\n    private readonly cacheKeyFn?: CacheKeyFn<K, C>,\n    /**\n     * A function that will be called to schedule the wrapped function to be\n     * executed. This defaults to a function that will execute the function\n     * immediately.\n     */\n    private readonly schedulerFn: SchedulerFn<void> = (fn) => fn()\n  ) {}\n\n  /**\n   * Creates a new instance of PendingWrapper. If the key extends a string or\n   * number, the key will be used as the cache key. If the key is an object, a\n   * cache key function must be provided.\n   */\n  public static create<K extends string | number | null, V>(\n    options?: BatcherOptions<K, K>\n  ): Batcher<K, V, K>\n  public static create<K, V, C extends string | number | null>(\n    options: BatcherOptions<K, C> &\n      Required<Pick<BatcherOptions<K, C>, 'cacheKeyFn'>>\n  ): Batcher<K, V, C>\n  public static create<K, V, C extends string | number | null>(\n    options?: BatcherOptions<K, C>\n  ): Batcher<K, V, C> {\n    return new Batcher<K, V, C>(options?.cacheKeyFn, options?.schedulerFn)\n  }\n\n  /**\n   * Wraps a function in a promise that will be resolved or rejected only once\n   * for a given key. This will allow multiple calls to the function to be\n   * made, but only one will be executed at a time. The result of the first\n   * call will be returned to all callers.\n   *\n   * @param key the key to use for the cache\n   * @param fn the function to wrap\n   * @returns a promise that resolves to the result of the function\n   */\n  public async batch(key: K, fn: WorkFn<V, C>): Promise<V> {\n    const cacheKey = (this.cacheKeyFn ? await this.cacheKeyFn(key) : key) as C\n    if (cacheKey === null) {\n      return fn(cacheKey, Promise.resolve)\n    }\n\n    const pending = this.pending.get(cacheKey)\n    if (pending) return pending\n\n    const { promise, resolve, reject } = new DetachedPromise<V>()\n    this.pending.set(cacheKey, promise)\n\n    this.schedulerFn(async () => {\n      try {\n        const result = await fn(cacheKey, resolve)\n\n        // Resolving a promise multiple times is a no-op, so we can safely\n        // resolve all pending promises with the same result.\n        resolve(result)\n      } catch (err) {\n        reject(err)\n      } finally {\n        this.pending.delete(cacheKey)\n      }\n    })\n\n    return promise\n  }\n}\n","/* eslint-disable no-redeclare */\nimport type { IncomingMessage } from 'http'\nimport type { ParsedUrlQuery } from 'querystring'\nimport type { UrlWithParsedQuery } from 'url'\nimport type { BaseNextRequest } from './base-http'\nimport type { CloneableBody } from './body-streams'\nimport type { RouteMatch } from './route-matches/route-match'\nimport type { NEXT_RSC_UNION_QUERY } from '../client/components/app-router-headers'\nimport type { ServerComponentsHmrCache } from './response-cache'\nimport type { PagesDevOverlayBridgeType } from '../next-devtools/userspace/pages/pages-dev-overlay-setup'\n\n// FIXME: (wyattjoh) this is a temporary solution to allow us to pass data between bundled modules\nexport const NEXT_REQUEST_META = Symbol.for('NextInternalRequestMeta')\n\nexport type NextIncomingMessage = (BaseNextRequest | IncomingMessage) & {\n  [NEXT_REQUEST_META]?: RequestMeta\n}\n\nexport interface RequestMeta {\n  /**\n   * The query that was used to make the request.\n   */\n  initQuery?: ParsedUrlQuery\n\n  /**\n   * The URL that was used to make the request.\n   */\n  initURL?: string\n\n  /**\n   * The protocol that was used to make the request.\n   */\n  initProtocol?: string\n\n  /**\n   * The body that was read from the request. This is used to allow the body to\n   * be read multiple times.\n   */\n  clonableBody?: CloneableBody\n\n  /**\n   * True when the request matched a locale domain that was configured in the\n   * next.config.js file.\n   */\n  isLocaleDomain?: boolean\n\n  /**\n   * True when the request had locale information stripped from the pathname\n   * part of the URL.\n   */\n  didStripLocale?: boolean\n\n  /**\n   * If the request had it's URL rewritten, this is the URL it was rewritten to.\n   */\n  rewroteURL?: string\n\n  /**\n   * The cookies that were added by middleware and were added to the response.\n   */\n  middlewareCookie?: string[]\n\n  /**\n   * The match on the request for a given route.\n   */\n  match?: RouteMatch\n\n  /**\n   * The incremental cache to use for the request.\n   */\n  incrementalCache?: any\n\n  /**\n   * The server components HMR cache, only for dev.\n   */\n  serverComponentsHmrCache?: ServerComponentsHmrCache\n\n  /**\n   * Equals the segment path that was used for the prefetch RSC request.\n   */\n  segmentPrefetchRSCRequest?: string\n\n  /**\n   * True when the request is for the prefetch flight data.\n   */\n  isPrefetchRSCRequest?: true\n\n  /**\n   * True when the request is for the flight data.\n   */\n  isRSCRequest?: true\n\n  /**\n   * A search param set by the Next.js client when performing RSC requests.\n   * Because some CDNs do not vary their cache entries on our custom headers,\n   * this search param represents a hash of the header values. For any cached\n   * RSC request, we should verify that the hash matches before responding.\n   * Otherwise this can lead to cache poisoning.\n   * TODO: Consider not using custom request headers at all, and instead encode\n   * everything into the search param.\n   */\n  cacheBustingSearchParam?: string\n\n  /**\n   * True when the request is for the `/_next/data` route using the pages\n   * router.\n   */\n  isNextDataReq?: true\n\n  /**\n   * Postponed state to use for resumption. If present it's assumed that the\n   * request is for a page that has postponed (there are no guarantees that the\n   * page actually has postponed though as it would incur an additional cache\n   * lookup).\n   */\n  postponed?: string\n\n  /**\n   * If provided, this will be called when a response cache entry was generated\n   * or looked up in the cache.\n   */\n  onCacheEntry?: (\n    cacheEntry: any,\n    requestMeta: any\n  ) => Promise<boolean | void> | boolean | void\n\n  /**\n   * The previous revalidate before rendering 404 page for notFound: true\n   */\n  notFoundRevalidate?: number | false\n\n  /**\n   * In development, the original source page that returned a 404.\n   */\n  developmentNotFoundSourcePage?: string\n\n  /**\n   * The path we routed to and should be invoked\n   */\n  invokePath?: string\n\n  /**\n   * The specific page output we should be matching\n   */\n  invokeOutput?: string\n\n  /**\n   * The status we are invoking the request with from routing\n   */\n  invokeStatus?: number\n\n  /**\n   * The routing error we are invoking with\n   */\n  invokeError?: Error\n\n  /**\n   * The query parsed for the invocation\n   */\n  invokeQuery?: Record<string, undefined | string | string[]>\n\n  /**\n   * Whether the request is a middleware invocation\n   */\n  middlewareInvoke?: boolean\n\n  /**\n   * Whether the request should render the fallback shell or not.\n   */\n  renderFallbackShell?: boolean\n\n  /**\n   * Whether the request is for the custom error page.\n   */\n  customErrorRender?: true\n\n  /**\n   * Whether to bubble up the NoFallbackError to the caller when a 404 is\n   * returned.\n   */\n  bubbleNoFallback?: true\n\n  /**\n   * True when the request had locale information inferred from the default\n   * locale.\n   */\n  localeInferredFromDefault?: true\n\n  /**\n   * The locale that was inferred or explicitly set for the request.\n   */\n  locale?: string\n\n  /**\n   * The default locale that was inferred or explicitly set for the request.\n   */\n  defaultLocale?: string\n\n  /**\n   * The relative project dir the server is running in from project root\n   */\n  relativeProjectDir?: string\n\n  /**\n   * The dist directory the server is currently using\n   */\n  distDir?: string\n\n  /**\n   * The query after resolving routes\n   */\n  query?: ParsedUrlQuery\n\n  /**\n   * The params after resolving routes\n   */\n  params?: ParsedUrlQuery\n\n  /**\n   * The AMP validator to use in development\n   */\n  ampValidator?: (html: string, pathname: string) => Promise<void>\n\n  /**\n   * ErrorOverlay component to use in development for pages router\n   */\n  PagesErrorDebug?: PagesDevOverlayBridgeType\n\n  /**\n   * Whether server is in minimal mode (this will be replaced with more\n   * specific flags in future)\n   */\n  minimalMode?: boolean\n\n  /**\n   * DEV only: The fallback params that should be used when validating prerenders during dev\n   */\n  devValidatingFallbackParams?: Map<string, string>\n}\n\n/**\n * Gets the request metadata. If no key is provided, the entire metadata object\n * is returned.\n *\n * @param req the request to get the metadata from\n * @param key the key to get from the metadata (optional)\n * @returns the value for the key or the entire metadata object\n */\nexport function getRequestMeta(\n  req: NextIncomingMessage,\n  key?: undefined\n): RequestMeta\nexport function getRequestMeta<K extends keyof RequestMeta>(\n  req: NextIncomingMessage,\n  key: K\n): RequestMeta[K]\nexport function getRequestMeta<K extends keyof RequestMeta>(\n  req: NextIncomingMessage,\n  key?: K\n): RequestMeta | RequestMeta[K] {\n  const meta = req[NEXT_REQUEST_META] || {}\n  return typeof key === 'string' ? meta[key] : meta\n}\n\n/**\n * Sets the request metadata.\n *\n * @param req the request to set the metadata on\n * @param meta the metadata to set\n * @returns the mutated request metadata\n */\nexport function setRequestMeta(req: NextIncomingMessage, meta: RequestMeta) {\n  req[NEXT_REQUEST_META] = meta\n  return meta\n}\n\n/**\n * Adds a value to the request metadata.\n *\n * @param request the request to mutate\n * @param key the key to set\n * @param value the value to set\n * @returns the mutated request metadata\n */\nexport function addRequestMeta<K extends keyof RequestMeta>(\n  request: NextIncomingMessage,\n  key: K,\n  value: RequestMeta[K]\n) {\n  const meta = getRequestMeta(request)\n  meta[key] = value\n  return setRequestMeta(request, meta)\n}\n\n/**\n * Removes a key from the request metadata.\n *\n * @param request the request to mutate\n * @param key the key to remove\n * @returns the mutated request metadata\n */\nexport function removeRequestMeta<K extends keyof RequestMeta>(\n  request: NextIncomingMessage,\n  key: K\n) {\n  const meta = getRequestMeta(request)\n  delete meta[key]\n  return setRequestMeta(request, meta)\n}\n\ntype NextQueryMetadata = {\n  /**\n   * The `_rsc` query parameter used for cache busting to ensure that the RSC\n   * requests do not get cached by the browser explicitly.\n   */\n  [NEXT_RSC_UNION_QUERY]?: string\n}\n\nexport type NextParsedUrlQuery = ParsedUrlQuery &\n  NextQueryMetadata & {\n    amp?: '1'\n  }\n\nexport interface NextUrlWithParsedQuery extends UrlWithParsedQuery {\n  query: NextParsedUrlQuery\n}\n","import type { BaseNextRequest, BaseNextResponse } from './'\nimport type { NodeNextRequest, NodeNextResponse } from './node'\nimport type { WebNextRequest, WebNextResponse } from './web'\n\n/**\n * This file provides some helpers that should be used in conjunction with\n * explicit environment checks. When combined with the environment checks, it\n * will ensure that the correct typings are used as well as enable code\n * elimination.\n */\n\n/**\n * Type guard to determine if a request is a WebNextRequest. This does not\n * actually check the type of the request, but rather the runtime environment.\n * It's expected that when the runtime environment is the edge runtime, that any\n * base request is a WebNextRequest.\n */\nexport const isWebNextRequest = (req: BaseNextRequest): req is WebNextRequest =>\n  process.env.NEXT_RUNTIME === 'edge'\n\n/**\n * Type guard to determine if a response is a WebNextResponse. This does not\n * actually check the type of the response, but rather the runtime environment.\n * It's expected that when the runtime environment is the edge runtime, that any\n * base response is a WebNextResponse.\n */\nexport const isWebNextResponse = (\n  res: BaseNextResponse\n): res is WebNextResponse => process.env.NEXT_RUNTIME === 'edge'\n\n/**\n * Type guard to determine if a request is a NodeNextRequest. This does not\n * actually check the type of the request, but rather the runtime environment.\n * It's expected that when the runtime environment is the node runtime, that any\n * base request is a NodeNextRequest.\n */\nexport const isNodeNextRequest = (\n  req: BaseNextRequest\n): req is NodeNextRequest => process.env.NEXT_RUNTIME !== 'edge'\n\n/**\n * Type guard to determine if a response is a NodeNextResponse. This does not\n * actually check the type of the response, but rather the runtime environment.\n * It's expected that when the runtime environment is the node runtime, that any\n * base response is a NodeNextResponse.\n */\nexport const isNodeNextResponse = (\n  res: BaseNextResponse\n): res is NodeNextResponse => process.env.NEXT_RUNTIME !== 'edge'\n","import type { BaseNextRequest } from '../../../base-http'\nimport type { NodeNextRequest } from '../../../base-http/node'\nimport type { WebNextRequest } from '../../../base-http/web'\nimport type { Writable } from 'node:stream'\n\nimport { getRequestMeta } from '../../../request-meta'\nimport { fromNodeOutgoingHttpHeaders } from '../../utils'\nimport { NextRequest } from '../request'\nimport { isNodeNextRequest, isWebNextRequest } from '../../../base-http/helpers'\n\nexport const ResponseAbortedName = 'ResponseAborted'\nexport class ResponseAborted extends Error {\n  public readonly name = ResponseAbortedName\n}\n\n/**\n * Creates an AbortController tied to the closing of a ServerResponse (or other\n * appropriate Writable).\n *\n * If the `close` event is fired before the `finish` event, then we'll send the\n * `abort` signal.\n */\nexport function createAbortController(response: Writable): AbortController {\n  const controller = new AbortController()\n\n  // If `finish` fires first, then `res.end()` has been called and the close is\n  // just us finishing the stream on our side. If `close` fires first, then we\n  // know the client disconnected before we finished.\n  response.once('close', () => {\n    if (response.writableFinished) return\n\n    controller.abort(new ResponseAborted())\n  })\n\n  return controller\n}\n\n/**\n * Creates an AbortSignal tied to the closing of a ServerResponse (or other\n * appropriate Writable).\n *\n * This cannot be done with the request (IncomingMessage or Readable) because\n * the `abort` event will not fire if to data has been fully read (because that\n * will \"close\" the readable stream and nothing fires after that).\n */\nexport function signalFromNodeResponse(response: Writable): AbortSignal {\n  const { errored, destroyed } = response\n  if (errored || destroyed) {\n    return AbortSignal.abort(errored ?? new ResponseAborted())\n  }\n\n  const { signal } = createAbortController(response)\n  return signal\n}\n\nexport class NextRequestAdapter {\n  public static fromBaseNextRequest(\n    request: BaseNextRequest,\n    signal: AbortSignal\n  ): NextRequest {\n    if (\n      // The type check here ensures that `req` is correctly typed, and the\n      // environment variable check provides dead code elimination.\n      process.env.NEXT_RUNTIME === 'edge' &&\n      isWebNextRequest(request)\n    ) {\n      return NextRequestAdapter.fromWebNextRequest(request)\n    } else if (\n      // The type check here ensures that `req` is correctly typed, and the\n      // environment variable check provides dead code elimination.\n      process.env.NEXT_RUNTIME !== 'edge' &&\n      isNodeNextRequest(request)\n    ) {\n      return NextRequestAdapter.fromNodeNextRequest(request, signal)\n    } else {\n      throw new Error('Invariant: Unsupported NextRequest type')\n    }\n  }\n\n  public static fromNodeNextRequest(\n    request: NodeNextRequest,\n    signal: AbortSignal\n  ): NextRequest {\n    // HEAD and GET requests can not have a body.\n    let body: BodyInit | null = null\n    if (request.method !== 'GET' && request.method !== 'HEAD' && request.body) {\n      // @ts-expect-error - this is handled by undici, when streams/web land use it instead\n      body = request.body\n    }\n\n    let url: URL\n    if (request.url.startsWith('http')) {\n      url = new URL(request.url)\n    } else {\n      // Grab the full URL from the request metadata.\n      const base = getRequestMeta(request, 'initURL')\n      if (!base || !base.startsWith('http')) {\n        // Because the URL construction relies on the fact that the URL provided\n        // is absolute, we need to provide a base URL. We can't use the request\n        // URL because it's relative, so we use a dummy URL instead.\n        url = new URL(request.url, 'http://n')\n      } else {\n        url = new URL(request.url, base)\n      }\n    }\n\n    return new NextRequest(url, {\n      method: request.method,\n      headers: fromNodeOutgoingHttpHeaders(request.headers),\n      duplex: 'half',\n      signal,\n      // geo\n      // ip\n      // nextConfig\n\n      // body can not be passed if request was aborted\n      // or we get a Request body was disturbed error\n      ...(signal.aborted\n        ? {}\n        : {\n            body,\n          }),\n    })\n  }\n\n  public static fromWebNextRequest(request: WebNextRequest): NextRequest {\n    // HEAD and GET requests can not have a body.\n    let body: ReadableStream | null = null\n    if (request.method !== 'GET' && request.method !== 'HEAD') {\n      body = request.body\n    }\n\n    return new NextRequest(request.url, {\n      method: request.method,\n      headers: fromNodeOutgoingHttpHeaders(request.headers),\n      duplex: 'half',\n      signal: request.request.signal,\n      // geo\n      // ip\n      // nextConfig\n\n      // body can not be passed if request was aborted\n      // or we get a Request body was disturbed error\n      ...(request.request.signal.aborted\n        ? {}\n        : {\n            body,\n          }),\n    })\n  }\n}\n","import type { AppPageModule } from './route-modules/app-page/module'\n\n// Combined load times for loading client components\nlet clientComponentLoadStart = 0\nlet clientComponentLoadTimes = 0\nlet clientComponentLoadCount = 0\n\nexport function wrapClientComponentLoader(\n  ComponentMod: AppPageModule\n): AppPageModule['__next_app__'] {\n  if (!('performance' in globalThis)) {\n    return ComponentMod.__next_app__\n  }\n\n  return {\n    require: (...args) => {\n      const startTime = performance.now()\n\n      if (clientComponentLoadStart === 0) {\n        clientComponentLoadStart = startTime\n      }\n\n      try {\n        clientComponentLoadCount += 1\n        return ComponentMod.__next_app__.require(...args)\n      } finally {\n        clientComponentLoadTimes += performance.now() - startTime\n      }\n    },\n    loadChunk: (...args) => {\n      const startTime = performance.now()\n      const result = ComponentMod.__next_app__.loadChunk(...args)\n      // Avoid wrapping `loadChunk`'s result in an extra promise in case something like React depends on its identity.\n      // We only need to know when it's settled.\n      result.finally(() => {\n        clientComponentLoadTimes += performance.now() - startTime\n      })\n      return result\n    },\n  }\n}\n\nexport function getClientComponentLoaderMetrics(\n  options: { reset?: boolean } = {}\n) {\n  const metrics =\n    clientComponentLoadStart === 0\n      ? undefined\n      : {\n          clientComponentLoadStart,\n          clientComponentLoadTimes,\n          clientComponentLoadCount,\n        }\n\n  if (options.reset) {\n    clientComponentLoadStart = 0\n    clientComponentLoadTimes = 0\n    clientComponentLoadCount = 0\n  }\n\n  return metrics\n}\n","import type { ServerResponse } from 'node:http'\n\nimport {\n  ResponseAbortedName,\n  createAbortController,\n} from './web/spec-extension/adapters/next-request'\nimport { DetachedPromise } from '../lib/detached-promise'\nimport { getTracer } from './lib/trace/tracer'\nimport { NextNodeServerSpan } from './lib/trace/constants'\nimport { getClientComponentLoaderMetrics } from './client-component-renderer-logger'\n\nexport function isAbortError(e: any): e is Error & { name: 'AbortError' } {\n  return e?.name === 'AbortError' || e?.name === ResponseAbortedName\n}\n\nfunction createWriterFromResponse(\n  res: ServerResponse,\n  waitUntilForEnd?: Promise<unknown>\n): WritableStream<Uint8Array> {\n  let started = false\n\n  // Create a promise that will resolve once the response has drained. See\n  // https://nodejs.org/api/stream.html#stream_event_drain\n  let drained = new DetachedPromise<void>()\n  function onDrain() {\n    drained.resolve()\n  }\n  res.on('drain', onDrain)\n\n  // If the finish event fires, it means we shouldn't block and wait for the\n  // drain event.\n  res.once('close', () => {\n    res.off('drain', onDrain)\n    drained.resolve()\n  })\n\n  // Create a promise that will resolve once the response has finished. See\n  // https://nodejs.org/api/http.html#event-finish_1\n  const finished = new DetachedPromise<void>()\n  res.once('finish', () => {\n    finished.resolve()\n  })\n\n  // Create a writable stream that will write to the response.\n  return new WritableStream<Uint8Array>({\n    write: async (chunk) => {\n      // You'd think we'd want to use `start` instead of placing this in `write`\n      // but this ensures that we don't actually flush the headers until we've\n      // started writing chunks.\n      if (!started) {\n        started = true\n\n        if (\n          'performance' in globalThis &&\n          process.env.NEXT_OTEL_PERFORMANCE_PREFIX\n        ) {\n          const metrics = getClientComponentLoaderMetrics()\n          if (metrics) {\n            performance.measure(\n              `${process.env.NEXT_OTEL_PERFORMANCE_PREFIX}:next-client-component-loading`,\n              {\n                start: metrics.clientComponentLoadStart,\n                end:\n                  metrics.clientComponentLoadStart +\n                  metrics.clientComponentLoadTimes,\n              }\n            )\n          }\n        }\n\n        res.flushHeaders()\n        getTracer().trace(\n          NextNodeServerSpan.startResponse,\n          {\n            spanName: 'start response',\n          },\n          () => undefined\n        )\n      }\n\n      try {\n        const ok = res.write(chunk)\n\n        // Added by the `compression` middleware, this is a function that will\n        // flush the partially-compressed response to the client.\n        if ('flush' in res && typeof res.flush === 'function') {\n          res.flush()\n        }\n\n        // If the write returns false, it means there's some backpressure, so\n        // wait until it's streamed before continuing.\n        if (!ok) {\n          await drained.promise\n\n          // Reset the drained promise so that we can wait for the next drain event.\n          drained = new DetachedPromise<void>()\n        }\n      } catch (err) {\n        res.end()\n        throw new Error('failed to write chunk to response', { cause: err })\n      }\n    },\n    abort: (err) => {\n      if (res.writableFinished) return\n\n      res.destroy(err)\n    },\n    close: async () => {\n      // if a waitUntil promise was passed, wait for it to resolve before\n      // ending the response.\n      if (waitUntilForEnd) {\n        await waitUntilForEnd\n      }\n\n      if (res.writableFinished) return\n\n      res.end()\n      return finished.promise\n    },\n  })\n}\n\nexport async function pipeToNodeResponse(\n  readable: ReadableStream<Uint8Array>,\n  res: ServerResponse,\n  waitUntilForEnd?: Promise<unknown>\n) {\n  try {\n    // If the response has already errored, then just return now.\n    const { errored, destroyed } = res\n    if (errored || destroyed) return\n\n    // Create a new AbortController so that we can abort the readable if the\n    // client disconnects.\n    const controller = createAbortController(res)\n\n    const writer = createWriterFromResponse(res, waitUntilForEnd)\n\n    await readable.pipeTo(writer, { signal: controller.signal })\n  } catch (err: any) {\n    // If this isn't related to an abort error, re-throw it.\n    if (isAbortError(err)) return\n\n    throw new Error('failed to pipe response', { cause: err })\n  }\n}\n","import type { OutgoingHttpHeaders, ServerResponse } from 'http'\nimport type { CacheControl } from './lib/cache-control'\nimport type { FetchMetrics } from './base-http'\n\nimport {\n  chainStreams,\n  streamFromBuffer,\n  streamFromString,\n  streamToString,\n} from './stream-utils/node-web-streams-helper'\nimport { isAbortError, pipeToNodeResponse } from './pipe-readable'\nimport type { RenderResumeDataCache } from './resume-data-cache/resume-data-cache'\nimport { InvariantError } from '../shared/lib/invariant-error'\nimport type {\n  HTML_CONTENT_TYPE_HEADER,\n  JSON_CONTENT_TYPE_HEADER,\n  TEXT_PLAIN_CONTENT_TYPE_HEADER,\n} from '../lib/constants'\nimport type { RSC_CONTENT_TYPE_HEADER } from '../client/components/app-router-headers'\n\ntype ContentTypeOption =\n  | typeof RSC_CONTENT_TYPE_HEADER // For App Page RSC responses\n  | typeof HTML_CONTENT_TYPE_HEADER // For App Page, Pages HTML responses\n  | typeof JSON_CONTENT_TYPE_HEADER // For API routes, Next.js data requests\n  | typeof TEXT_PLAIN_CONTENT_TYPE_HEADER // For simplified errors\n\nexport type AppPageRenderResultMetadata = {\n  flightData?: Buffer\n  cacheControl?: CacheControl\n  staticBailoutInfo?: {\n    stack?: string\n    description?: string\n  }\n\n  /**\n   * The postponed state if the render had postponed and needs to be resumed.\n   */\n  postponed?: string\n\n  /**\n   * The headers to set on the response that were added by the render.\n   */\n  headers?: OutgoingHttpHeaders\n  statusCode?: number\n  fetchTags?: string\n  fetchMetrics?: FetchMetrics\n\n  segmentData?: Map<string, Buffer>\n\n  /**\n   * In development, the resume data cache is warmed up before the render. This\n   * is attached to the metadata so that it can be used during the render. When\n   * prerendering, the filled resume data cache is also attached to the metadata\n   * so that it can be used when prerendering matching fallback shells.\n   */\n  renderResumeDataCache?: RenderResumeDataCache\n}\n\nexport type PagesRenderResultMetadata = {\n  pageData?: any\n  cacheControl?: CacheControl\n  assetQueryString?: string\n  isNotFound?: boolean\n  isRedirect?: boolean\n}\n\nexport type StaticRenderResultMetadata = {}\n\nexport type RenderResultMetadata = AppPageRenderResultMetadata &\n  PagesRenderResultMetadata &\n  StaticRenderResultMetadata\n\nexport type RenderResultResponse =\n  | ReadableStream<Uint8Array>[]\n  | ReadableStream<Uint8Array>\n  | string\n  | Buffer\n  | null\n\nexport type RenderResultOptions<\n  Metadata extends RenderResultMetadata = RenderResultMetadata,\n> = {\n  contentType: ContentTypeOption | null\n  waitUntil?: Promise<unknown>\n  metadata: Metadata\n}\n\nexport default class RenderResult<\n  Metadata extends RenderResultMetadata = RenderResultMetadata,\n> {\n  /**\n   * The detected content type for the response. This is used to set the\n   * `Content-Type` header.\n   */\n  public readonly contentType: ContentTypeOption | null\n\n  /**\n   * The metadata for the response. This is used to set the revalidation times\n   * and other metadata.\n   */\n  public readonly metadata: Readonly<Metadata>\n\n  /**\n   * The response itself. This can be a string, a stream, or null. If it's a\n   * string, then it's a static response. If it's a stream, then it's a\n   * dynamic response. If it's null, then the response was not found or was\n   * already sent.\n   */\n  private response: RenderResultResponse\n\n  /**\n   * A render result that represents an empty response. This is used to\n   * represent a response that was not found or was already sent.\n   */\n  public static readonly EMPTY = new RenderResult<StaticRenderResultMetadata>(\n    null,\n    { metadata: {}, contentType: null }\n  )\n\n  /**\n   * Creates a new RenderResult instance from a static response.\n   *\n   * @param value the static response value\n   * @param contentType the content type of the response\n   * @returns a new RenderResult instance\n   */\n  public static fromStatic(\n    value: string | Buffer,\n    contentType: ContentTypeOption\n  ) {\n    return new RenderResult<StaticRenderResultMetadata>(value, {\n      metadata: {},\n      contentType,\n    })\n  }\n\n  private readonly waitUntil?: Promise<unknown>\n\n  constructor(\n    response: RenderResultResponse,\n    { contentType, waitUntil, metadata }: RenderResultOptions<Metadata>\n  ) {\n    this.response = response\n    this.contentType = contentType\n    this.metadata = metadata\n    this.waitUntil = waitUntil\n  }\n\n  public assignMetadata(metadata: Metadata) {\n    Object.assign(this.metadata, metadata)\n  }\n\n  /**\n   * Returns true if the response is null. It can be null if the response was\n   * not found or was already sent.\n   */\n  public get isNull(): boolean {\n    return this.response === null\n  }\n\n  /**\n   * Returns false if the response is a string. It can be a string if the page\n   * was prerendered. If it's not, then it was generated dynamically.\n   */\n  public get isDynamic(): boolean {\n    return typeof this.response !== 'string'\n  }\n\n  /**\n   * Returns the response if it is a string. If the page was dynamic, this will\n   * return a promise if the `stream` option is true, or it will throw an error.\n   *\n   * @param stream Whether or not to return a promise if the response is dynamic\n   * @returns The response as a string\n   */\n  public toUnchunkedString(stream?: false): string\n  public toUnchunkedString(stream: true): Promise<string>\n  public toUnchunkedString(stream = false): Promise<string> | string {\n    if (this.response === null) {\n      // If the response is null, return an empty string. This behavior is\n      // intentional as we're now providing the `RenderResult.EMPTY` value.\n      return ''\n    }\n\n    if (typeof this.response !== 'string') {\n      if (!stream) {\n        throw new InvariantError(\n          'dynamic responses cannot be unchunked. This is a bug in Next.js'\n        )\n      }\n\n      return streamToString(this.readable)\n    }\n\n    return this.response\n  }\n\n  /**\n   * Returns a readable stream of the response.\n   */\n  private get readable(): ReadableStream<Uint8Array> {\n    if (this.response === null) {\n      // If the response is null, return an empty stream. This behavior is\n      // intentional as we're now providing the `RenderResult.EMPTY` value.\n      return new ReadableStream<Uint8Array>({\n        start(controller) {\n          controller.close()\n        },\n      })\n    }\n\n    if (typeof this.response === 'string') {\n      return streamFromString(this.response)\n    }\n\n    if (Buffer.isBuffer(this.response)) {\n      return streamFromBuffer(this.response)\n    }\n\n    // If the response is an array of streams, then chain them together.\n    if (Array.isArray(this.response)) {\n      return chainStreams(...this.response)\n    }\n\n    return this.response\n  }\n\n  /**\n   * Coerces the response to an array of streams. This will convert the response\n   * to an array of streams if it is not already one.\n   *\n   * @returns An array of streams\n   */\n  private coerce(): ReadableStream<Uint8Array>[] {\n    if (this.response === null) {\n      // If the response is null, return an empty stream. This behavior is\n      // intentional as we're now providing the `RenderResult.EMPTY` value.\n      return []\n    }\n\n    if (typeof this.response === 'string') {\n      return [streamFromString(this.response)]\n    } else if (Array.isArray(this.response)) {\n      return this.response\n    } else if (Buffer.isBuffer(this.response)) {\n      return [streamFromBuffer(this.response)]\n    } else {\n      return [this.response]\n    }\n  }\n\n  /**\n   * Unshifts a new stream to the response. This will convert the response to an\n   * array of streams if it is not already one and will add the new stream to\n   * the start of the array. When this response is piped, all of the streams\n   * will be piped one after the other.\n   *\n   * @param readable The new stream to unshift\n   */\n  public unshift(readable: ReadableStream<Uint8Array>): void {\n    // Coerce the response to an array of streams.\n    this.response = this.coerce()\n\n    // Add the new stream to the start of the array.\n    this.response.unshift(readable)\n  }\n\n  /**\n   * Chains a new stream to the response. This will convert the response to an\n   * array of streams if it is not already one and will add the new stream to\n   * the end. When this response is piped, all of the streams will be piped\n   * one after the other.\n   *\n   * @param readable The new stream to chain\n   */\n  public push(readable: ReadableStream<Uint8Array>): void {\n    // Coerce the response to an array of streams.\n    this.response = this.coerce()\n\n    // Add the new stream to the end of the array.\n    this.response.push(readable)\n  }\n\n  /**\n   * Pipes the response to a writable stream. This will close/cancel the\n   * writable stream if an error is encountered. If this doesn't throw, then\n   * the writable stream will be closed or aborted.\n   *\n   * @param writable Writable stream to pipe the response to\n   */\n  public async pipeTo(writable: WritableStream<Uint8Array>): Promise<void> {\n    try {\n      await this.readable.pipeTo(writable, {\n        // We want to close the writable stream ourselves so that we can wait\n        // for the waitUntil promise to resolve before closing it. If an error\n        // is encountered, we'll abort the writable stream if we swallowed the\n        // error.\n        preventClose: true,\n      })\n\n      // If there is a waitUntil promise, wait for it to resolve before\n      // closing the writable stream.\n      if (this.waitUntil) await this.waitUntil\n\n      // Close the writable stream.\n      await writable.close()\n    } catch (err) {\n      // If this is an abort error, we should abort the writable stream (as we\n      // took ownership of it when we started piping). We don't need to re-throw\n      // because we handled the error.\n      if (isAbortError(err)) {\n        // Abort the writable stream if an error is encountered.\n        await writable.abort(err)\n\n        return\n      }\n\n      // We're not aborting the writer here as when this method throws it's not\n      // clear as to how so the caller should assume it's their responsibility\n      // to clean up the writer.\n      throw err\n    }\n  }\n\n  /**\n   * Pipes the response to a node response. This will close/cancel the node\n   * response if an error is encountered.\n   *\n   * @param res\n   */\n  public async pipeToNodeResponse(res: ServerResponse) {\n    await pipeToNodeResponse(this.readable, res, this.waitUntil)\n  }\n}\n","export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n","import {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedAppPageValue,\n  type CachedPageValue,\n  type IncrementalResponseCacheEntry,\n  type ResponseCacheEntry,\n} from './types'\n\nimport RenderResult from '../render-result'\nimport { RouteKind } from '../route-kind'\nimport { HTML_CONTENT_TYPE_HEADER } from '../../lib/constants'\n\nexport async function fromResponseCacheEntry(\n  cacheEntry: ResponseCacheEntry\n): Promise<IncrementalResponseCacheEntry> {\n  return {\n    ...cacheEntry,\n    value:\n      cacheEntry.value?.kind === CachedRouteKind.PAGES\n        ? {\n            kind: CachedRouteKind.PAGES,\n            html: await cacheEntry.value.html.toUnchunkedString(true),\n            pageData: cacheEntry.value.pageData,\n            headers: cacheEntry.value.headers,\n            status: cacheEntry.value.status,\n          }\n        : cacheEntry.value?.kind === CachedRouteKind.APP_PAGE\n          ? {\n              kind: CachedRouteKind.APP_PAGE,\n              html: await cacheEntry.value.html.toUnchunkedString(true),\n              postponed: cacheEntry.value.postponed,\n              rscData: cacheEntry.value.rscData,\n              headers: cacheEntry.value.headers,\n              status: cacheEntry.value.status,\n              segmentData: cacheEntry.value.segmentData,\n            }\n          : cacheEntry.value,\n  }\n}\n\nexport async function toResponseCacheEntry(\n  response: IncrementalResponseCacheEntry | null\n): Promise<ResponseCacheEntry | null> {\n  if (!response) return null\n\n  return {\n    isMiss: response.isMiss,\n    isStale: response.isStale,\n    cacheControl: response.cacheControl,\n    value:\n      response.value?.kind === CachedRouteKind.PAGES\n        ? ({\n            kind: CachedRouteKind.PAGES,\n            html: RenderResult.fromStatic(\n              response.value.html,\n              HTML_CONTENT_TYPE_HEADER\n            ),\n            pageData: response.value.pageData,\n            headers: response.value.headers,\n            status: response.value.status,\n          } satisfies CachedPageValue)\n        : response.value?.kind === CachedRouteKind.APP_PAGE\n          ? ({\n              kind: CachedRouteKind.APP_PAGE,\n              html: RenderResult.fromStatic(\n                response.value.html,\n                HTML_CONTENT_TYPE_HEADER\n              ),\n              rscData: response.value.rscData,\n              headers: response.value.headers,\n              status: response.value.status,\n              postponed: response.value.postponed,\n              segmentData: response.value.segmentData,\n            } satisfies CachedAppPageValue)\n          : response.value,\n  }\n}\n\nexport function routeKindToIncrementalCacheKind(\n  routeKind: RouteKind\n): Exclude<IncrementalCacheKind, IncrementalCacheKind.FETCH> {\n  switch (routeKind) {\n    case RouteKind.PAGES:\n      return IncrementalCacheKind.PAGES\n    case RouteKind.APP_PAGE:\n      return IncrementalCacheKind.APP_PAGE\n    case RouteKind.IMAGE:\n      return IncrementalCacheKind.IMAGE\n    case RouteKind.APP_ROUTE:\n      return IncrementalCacheKind.APP_ROUTE\n    case RouteKind.PAGES_API:\n      // Pages Router API routes are not cached in the incremental cache.\n      throw new Error(`Unexpected route kind ${routeKind}`)\n    default:\n      return routeKind satisfies never\n  }\n}\n","import type {\n  ResponseCacheEntry,\n  ResponseGenerator,\n  ResponseCacheBase,\n  IncrementalResponseCacheEntry,\n  IncrementalResponseCache,\n} from './types'\n\nimport { Batcher } from '../../lib/batcher'\nimport { scheduleOnNextTick } from '../../lib/scheduler'\nimport {\n  fromResponseCacheEntry,\n  routeKindToIncrementalCacheKind,\n  toResponseCacheEntry,\n} from './utils'\nimport type { RouteKind } from '../route-kind'\n\nexport * from './types'\n\nexport default class ResponseCache implements ResponseCacheBase {\n  private readonly batcher = Batcher.create<\n    { key: string; isOnDemandRevalidate: boolean },\n    IncrementalResponseCacheEntry | null,\n    string\n  >({\n    // Ensure on-demand revalidate doesn't block normal requests, it should be\n    // safe to run an on-demand revalidate for the same key as a normal request.\n    cacheKeyFn: ({ key, isOnDemandRevalidate }) =>\n      `${key}-${isOnDemandRevalidate ? '1' : '0'}`,\n    // We wait to do any async work until after we've added our promise to\n    // `pendingResponses` to ensure that any any other calls will reuse the\n    // same promise until we've fully finished our work.\n    schedulerFn: scheduleOnNextTick,\n  })\n\n  private previousCacheItem?: {\n    key: string\n    entry: IncrementalResponseCacheEntry | null\n    expiresAt: number\n  }\n\n  // we don't use minimal_mode name here as this.minimal_mode is\n  // statically replace for server runtimes but we need it to\n  // be dynamic here\n  private minimal_mode?: boolean\n\n  constructor(minimal_mode: boolean) {\n    this.minimal_mode = minimal_mode\n  }\n\n  public async get(\n    key: string | null,\n    responseGenerator: ResponseGenerator,\n    context: {\n      routeKind: RouteKind\n      isOnDemandRevalidate?: boolean\n      isPrefetch?: boolean\n      incrementalCache: IncrementalResponseCache\n      isRoutePPREnabled?: boolean\n      isFallback?: boolean\n      waitUntil?: (prom: Promise<any>) => void\n    }\n  ): Promise<ResponseCacheEntry | null> {\n    // If there is no key for the cache, we can't possibly look this up in the\n    // cache so just return the result of the response generator.\n    if (!key) {\n      return responseGenerator({ hasResolved: false, previousCacheEntry: null })\n    }\n\n    const {\n      incrementalCache,\n      isOnDemandRevalidate = false,\n      isFallback = false,\n      isRoutePPREnabled = false,\n      waitUntil,\n    } = context\n\n    const response = await this.batcher.batch(\n      { key, isOnDemandRevalidate },\n      (cacheKey, resolve) => {\n        const prom = (async () => {\n          // We keep the previous cache entry around to leverage when the\n          // incremental cache is disabled in minimal mode.\n          if (\n            this.minimal_mode &&\n            this.previousCacheItem?.key === cacheKey &&\n            this.previousCacheItem.expiresAt > Date.now()\n          ) {\n            return this.previousCacheItem.entry\n          }\n\n          // Coerce the kindHint into a given kind for the incremental cache.\n          const kind = routeKindToIncrementalCacheKind(context.routeKind)\n\n          let resolved = false\n          let cachedResponse: IncrementalResponseCacheEntry | null = null\n          try {\n            cachedResponse = !this.minimal_mode\n              ? await incrementalCache.get(key, {\n                  kind,\n                  isRoutePPREnabled: context.isRoutePPREnabled,\n                  isFallback,\n                })\n              : null\n\n            if (cachedResponse && !isOnDemandRevalidate) {\n              resolve(cachedResponse)\n              resolved = true\n\n              if (!cachedResponse.isStale || context.isPrefetch) {\n                // The cached value is still valid, so we don't need\n                // to update it yet.\n                return null\n              }\n            }\n\n            const cacheEntry = await responseGenerator({\n              hasResolved: resolved,\n              previousCacheEntry: cachedResponse,\n              isRevalidating: true,\n            })\n\n            // If the cache entry couldn't be generated, we don't want to cache\n            // the result.\n            if (!cacheEntry) {\n              // Unset the previous cache item if it was set.\n              if (this.minimal_mode) this.previousCacheItem = undefined\n              return null\n            }\n\n            const resolveValue = await fromResponseCacheEntry({\n              ...cacheEntry,\n              isMiss: !cachedResponse,\n            })\n            if (!resolveValue) {\n              // Unset the previous cache item if it was set.\n              if (this.minimal_mode) this.previousCacheItem = undefined\n              return null\n            }\n\n            // For on-demand revalidate wait to resolve until cache is set.\n            // Otherwise resolve now.\n            if (!isOnDemandRevalidate && !resolved) {\n              resolve(resolveValue)\n              resolved = true\n            }\n\n            // We want to persist the result only if it has a cache control value\n            // defined.\n            if (resolveValue.cacheControl) {\n              if (this.minimal_mode) {\n                this.previousCacheItem = {\n                  key: cacheKey,\n                  entry: resolveValue,\n                  expiresAt: Date.now() + 1000,\n                }\n              } else {\n                await incrementalCache.set(key, resolveValue.value, {\n                  cacheControl: resolveValue.cacheControl,\n                  isRoutePPREnabled,\n                  isFallback,\n                })\n              }\n            }\n\n            return resolveValue\n          } catch (err) {\n            // When a path is erroring we automatically re-set the existing cache\n            // with new revalidate and expire times to prevent non-stop retrying.\n            if (cachedResponse?.cacheControl) {\n              const newRevalidate = Math.min(\n                Math.max(cachedResponse.cacheControl.revalidate || 3, 3),\n                30\n              )\n\n              const newExpire =\n                cachedResponse.cacheControl.expire === undefined\n                  ? undefined\n                  : Math.max(\n                      newRevalidate + 3,\n                      cachedResponse.cacheControl.expire\n                    )\n\n              await incrementalCache.set(key, cachedResponse.value, {\n                cacheControl: { revalidate: newRevalidate, expire: newExpire },\n                isRoutePPREnabled,\n                isFallback,\n              })\n            }\n\n            // While revalidating in the background we can't reject as we already\n            // resolved the cache entry so log the error here.\n            if (resolved) {\n              console.error(err)\n              return null\n            }\n\n            // We haven't resolved yet, so let's throw to indicate an error.\n            throw err\n          }\n        })()\n\n        // we need to ensure background revalidates are\n        // passed to waitUntil\n        if (waitUntil) {\n          waitUntil(prom)\n        }\n        return prom\n      }\n    )\n\n    return toResponseCacheEntry(response)\n  }\n}\n","import type {\n  WorkAsyncStorage,\n  WorkStore,\n} from '../app-render/work-async-storage.external'\n\nimport { AppRenderSpan, NextNodeServerSpan } from './trace/constants'\nimport { getTracer, SpanKind } from './trace/tracer'\nimport {\n  CACHE_ONE_YEAR,\n  INFINITE_CACHE,\n  NEXT_CACHE_TAG_MAX_ITEMS,\n  NEXT_CACHE_TAG_MAX_LENGTH,\n} from '../../lib/constants'\nimport { markCurrentScopeAsDynamic } from '../app-render/dynamic-rendering'\nimport { makeHangingPromise } from '../dynamic-rendering-utils'\nimport type { FetchMetric } from '../base-http'\nimport { createDedupeFetch } from './dedupe-fetch'\nimport {\n  getCacheSignal,\n  type RevalidateStore,\n  type WorkUnitAsyncStorage,\n} from '../app-render/work-unit-async-storage.external'\nimport {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedFetchData,\n  type ServerComponentsHmrCache,\n  type SetIncrementalFetchCacheContext,\n} from '../response-cache'\nimport { waitAtLeastOneReactRenderTask } from '../../lib/scheduler'\nimport { cloneResponse } from './clone-response'\nimport type { IncrementalCache } from './incremental-cache'\n\nconst isEdgeRuntime = process.env.NEXT_RUNTIME === 'edge'\n\ntype Fetcher = typeof fetch\n\ntype PatchedFetcher = Fetcher & {\n  readonly __nextPatched: true\n  readonly __nextGetStaticStore: () => WorkAsyncStorage\n  readonly _nextOriginalFetch: Fetcher\n}\n\nexport const NEXT_PATCH_SYMBOL = Symbol.for('next-patch')\n\nfunction isFetchPatched() {\n  return (globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] === true\n}\n\nexport function validateRevalidate(\n  revalidateVal: unknown,\n  route: string\n): undefined | number {\n  try {\n    let normalizedRevalidate: number | undefined = undefined\n\n    if (revalidateVal === false) {\n      normalizedRevalidate = INFINITE_CACHE\n    } else if (\n      typeof revalidateVal === 'number' &&\n      !isNaN(revalidateVal) &&\n      revalidateVal > -1\n    ) {\n      normalizedRevalidate = revalidateVal\n    } else if (typeof revalidateVal !== 'undefined') {\n      throw new Error(\n        `Invalid revalidate value \"${revalidateVal}\" on \"${route}\", must be a non-negative number or false`\n      )\n    }\n    return normalizedRevalidate\n  } catch (err: any) {\n    // handle client component error from attempting to check revalidate value\n    if (err instanceof Error && err.message.includes('Invalid revalidate')) {\n      throw err\n    }\n    return undefined\n  }\n}\n\nexport function validateTags(tags: any[], description: string) {\n  const validTags: string[] = []\n  const invalidTags: Array<{\n    tag: any\n    reason: string\n  }> = []\n\n  for (let i = 0; i < tags.length; i++) {\n    const tag = tags[i]\n\n    if (typeof tag !== 'string') {\n      invalidTags.push({ tag, reason: 'invalid type, must be a string' })\n    } else if (tag.length > NEXT_CACHE_TAG_MAX_LENGTH) {\n      invalidTags.push({\n        tag,\n        reason: `exceeded max length of ${NEXT_CACHE_TAG_MAX_LENGTH}`,\n      })\n    } else {\n      validTags.push(tag)\n    }\n\n    if (validTags.length > NEXT_CACHE_TAG_MAX_ITEMS) {\n      console.warn(\n        `Warning: exceeded max tag count for ${description}, dropped tags:`,\n        tags.slice(i).join(', ')\n      )\n      break\n    }\n  }\n\n  if (invalidTags.length > 0) {\n    console.warn(`Warning: invalid tags passed to ${description}: `)\n\n    for (const { tag, reason } of invalidTags) {\n      console.log(`tag: \"${tag}\" ${reason}`)\n    }\n  }\n  return validTags\n}\n\nfunction trackFetchMetric(\n  workStore: WorkStore,\n  ctx: Omit<FetchMetric, 'end' | 'idx'>\n) {\n  if (!workStore.shouldTrackFetchMetrics) {\n    return\n  }\n\n  workStore.fetchMetrics ??= []\n\n  workStore.fetchMetrics.push({\n    ...ctx,\n    end: performance.timeOrigin + performance.now(),\n    idx: workStore.nextFetchId || 0,\n  })\n}\n\nasync function createCachedPrerenderResponse(\n  res: Response,\n  cacheKey: string,\n  incrementalCacheContext: SetIncrementalFetchCacheContext | undefined,\n  incrementalCache: IncrementalCache,\n  revalidate: number,\n  handleUnlock: () => Promise<void> | void\n): Promise<Response> {\n  // We are prerendering at build time or revalidate time with cacheComponents so we\n  // need to buffer the response so we can guarantee it can be read in a\n  // microtask.\n  const bodyBuffer = await res.arrayBuffer()\n\n  const fetchedData = {\n    headers: Object.fromEntries(res.headers.entries()),\n    body: Buffer.from(bodyBuffer).toString('base64'),\n    status: res.status,\n    url: res.url,\n  }\n\n  // We can skip setting the serverComponentsHmrCache because we aren't in dev\n  // mode.\n\n  if (incrementalCacheContext) {\n    await incrementalCache.set(\n      cacheKey,\n      { kind: CachedRouteKind.FETCH, data: fetchedData, revalidate },\n      incrementalCacheContext\n    )\n  }\n\n  await handleUnlock()\n\n  // We return a new Response to the caller.\n  return new Response(bodyBuffer, {\n    headers: res.headers,\n    status: res.status,\n    statusText: res.statusText,\n  })\n}\n\nasync function createCachedDynamicResponse(\n  workStore: WorkStore,\n  res: Response,\n  cacheKey: string,\n  incrementalCacheContext: SetIncrementalFetchCacheContext | undefined,\n  incrementalCache: IncrementalCache,\n  serverComponentsHmrCache: ServerComponentsHmrCache | undefined,\n  revalidate: number,\n  input: RequestInfo | URL,\n  handleUnlock: () => Promise<void> | void\n): Promise<Response> {\n  // We're cloning the response using this utility because there exists a bug in\n  // the undici library around response cloning. See the following pull request\n  // for more details: https://github.com/vercel/next.js/pull/73274\n  const [cloned1, cloned2] = cloneResponse(res)\n\n  // We are dynamically rendering including dev mode. We want to return the\n  // response to the caller as soon as possible because it might stream over a\n  // very long time.\n  const cacheSetPromise = cloned1\n    .arrayBuffer()\n    .then(async (arrayBuffer) => {\n      const bodyBuffer = Buffer.from(arrayBuffer)\n\n      const fetchedData = {\n        headers: Object.fromEntries(cloned1.headers.entries()),\n        body: bodyBuffer.toString('base64'),\n        status: cloned1.status,\n        url: cloned1.url,\n      }\n\n      serverComponentsHmrCache?.set(cacheKey, fetchedData)\n\n      if (incrementalCacheContext) {\n        await incrementalCache.set(\n          cacheKey,\n          { kind: CachedRouteKind.FETCH, data: fetchedData, revalidate },\n          incrementalCacheContext\n        )\n      }\n    })\n    .catch((error) => console.warn(`Failed to set fetch cache`, input, error))\n    .finally(handleUnlock)\n\n  const pendingRevalidateKey = `cache-set-${cacheKey}`\n  workStore.pendingRevalidates ??= {}\n\n  if (pendingRevalidateKey in workStore.pendingRevalidates) {\n    // there is already a pending revalidate entry that we need to await to\n    // avoid race conditions\n    await workStore.pendingRevalidates[pendingRevalidateKey]\n  }\n\n  workStore.pendingRevalidates[pendingRevalidateKey] = cacheSetPromise.finally(\n    () => {\n      // If the pending revalidate is not present in the store, then we have\n      // nothing to delete.\n      if (!workStore.pendingRevalidates?.[pendingRevalidateKey]) {\n        return\n      }\n\n      delete workStore.pendingRevalidates[pendingRevalidateKey]\n    }\n  )\n\n  return cloned2\n}\n\ninterface PatchableModule {\n  workAsyncStorage: WorkAsyncStorage\n  workUnitAsyncStorage: WorkUnitAsyncStorage\n}\n\nexport function createPatchedFetcher(\n  originFetch: Fetcher,\n  { workAsyncStorage, workUnitAsyncStorage }: PatchableModule\n): PatchedFetcher {\n  // Create the patched fetch function.\n  const patched = async function fetch(\n    input: RequestInfo | URL,\n    init: RequestInit | undefined\n  ): Promise<Response> {\n    let url: URL | undefined\n    try {\n      url = new URL(input instanceof Request ? input.url : input)\n      url.username = ''\n      url.password = ''\n    } catch {\n      // Error caused by malformed URL should be handled by native fetch\n      url = undefined\n    }\n    const fetchUrl = url?.href ?? ''\n    const method = init?.method?.toUpperCase() || 'GET'\n\n    // Do create a new span trace for internal fetches in the\n    // non-verbose mode.\n    const isInternal = (init?.next as any)?.internal === true\n    const hideSpan = process.env.NEXT_OTEL_FETCH_DISABLED === '1'\n    // We don't track fetch metrics for internal fetches\n    // so it's not critical that we have a start time, as it won't be recorded.\n    // This is to workaround a flaky issue where performance APIs might\n    // not be available and will require follow-up investigation.\n    const fetchStart: number | undefined = isInternal\n      ? undefined\n      : performance.timeOrigin + performance.now()\n\n    const workStore = workAsyncStorage.getStore()\n    const workUnitStore = workUnitAsyncStorage.getStore()\n\n    // During static generation we track cache reads so we can reason about when they fill\n    let cacheSignal = workUnitStore ? getCacheSignal(workUnitStore) : null\n    if (cacheSignal) {\n      cacheSignal.beginRead()\n    }\n\n    const result = getTracer().trace(\n      isInternal ? NextNodeServerSpan.internalFetch : AppRenderSpan.fetch,\n      {\n        hideSpan,\n        kind: SpanKind.CLIENT,\n        spanName: ['fetch', method, fetchUrl].filter(Boolean).join(' '),\n        attributes: {\n          'http.url': fetchUrl,\n          'http.method': method,\n          'net.peer.name': url?.hostname,\n          'net.peer.port': url?.port || undefined,\n        },\n      },\n      async () => {\n        // If this is an internal fetch, we should not do any special treatment.\n        if (isInternal) {\n          return originFetch(input, init)\n        }\n\n        // If the workStore is not available, we can't do any\n        // special treatment of fetch, therefore fallback to the original\n        // fetch implementation.\n        if (!workStore) {\n          return originFetch(input, init)\n        }\n\n        // We should also fallback to the original fetch implementation if we\n        // are in draft mode, it does not constitute a static generation.\n        if (workStore.isDraftMode) {\n          return originFetch(input, init)\n        }\n\n        const isRequestInput =\n          input &&\n          typeof input === 'object' &&\n          typeof (input as Request).method === 'string'\n\n        const getRequestMeta = (field: string) => {\n          // If request input is present but init is not, retrieve from input first.\n          const value = (init as any)?.[field]\n          return value || (isRequestInput ? (input as any)[field] : null)\n        }\n\n        let finalRevalidate: number | undefined = undefined\n        const getNextField = (field: 'revalidate' | 'tags') => {\n          return typeof init?.next?.[field] !== 'undefined'\n            ? init?.next?.[field]\n            : isRequestInput\n              ? (input as any).next?.[field]\n              : undefined\n        }\n        // RequestInit doesn't keep extra fields e.g. next so it's\n        // only available if init is used separate\n        const originalFetchRevalidate = getNextField('revalidate')\n        let currentFetchRevalidate = originalFetchRevalidate\n        const tags: string[] = validateTags(\n          getNextField('tags') || [],\n          `fetch ${input.toString()}`\n        )\n\n        let revalidateStore: RevalidateStore | undefined\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'prerender':\n            case 'prerender-runtime':\n            // TODO: Stop accumulating tags in client prerender. (fallthrough)\n            case 'prerender-client':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'cache':\n            case 'private-cache':\n              revalidateStore = workUnitStore\n              break\n            case 'request':\n            case 'unstable-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        if (revalidateStore) {\n          if (Array.isArray(tags)) {\n            // Collect tags onto parent caches or parent prerenders.\n            const collectedTags =\n              revalidateStore.tags ?? (revalidateStore.tags = [])\n            for (const tag of tags) {\n              if (!collectedTags.includes(tag)) {\n                collectedTags.push(tag)\n              }\n            }\n          }\n        }\n\n        const implicitTags = workUnitStore?.implicitTags\n\n        let pageFetchCacheMode = workStore.fetchCache\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'unstable-cache':\n              // Inside unstable-cache we treat it the same as force-no-store on\n              // the page.\n              pageFetchCacheMode = 'force-no-store'\n              break\n            case 'prerender':\n            case 'prerender-client':\n            case 'prerender-runtime':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'request':\n            case 'cache':\n            case 'private-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        const isUsingNoStore = !!workStore.isUnstableNoStore\n\n        let currentFetchCacheConfig = getRequestMeta('cache')\n        let cacheReason = ''\n        let cacheWarning: string | undefined\n\n        if (\n          typeof currentFetchCacheConfig === 'string' &&\n          typeof currentFetchRevalidate !== 'undefined'\n        ) {\n          // If the revalidate value conflicts with the cache value, we should warn the user and unset the conflicting values.\n          const isConflictingRevalidate =\n            // revalidate: 0 and cache: force-cache\n            (currentFetchCacheConfig === 'force-cache' &&\n              currentFetchRevalidate === 0) ||\n            // revalidate: >0 or revalidate: false and cache: no-store\n            (currentFetchCacheConfig === 'no-store' &&\n              (currentFetchRevalidate > 0 || currentFetchRevalidate === false))\n\n          if (isConflictingRevalidate) {\n            cacheWarning = `Specified \"cache: ${currentFetchCacheConfig}\" and \"revalidate: ${currentFetchRevalidate}\", only one should be specified.`\n            currentFetchCacheConfig = undefined\n            currentFetchRevalidate = undefined\n          }\n        }\n\n        const hasExplicitFetchCacheOptOut =\n          // fetch config itself signals not to cache\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store' ||\n          // the fetch isn't explicitly caching and the segment level cache config signals not to cache\n          // note: `pageFetchCacheMode` is also set by being in an unstable_cache context.\n          pageFetchCacheMode === 'force-no-store' ||\n          pageFetchCacheMode === 'only-no-store'\n\n        // If no explicit fetch cache mode is set, but dynamic = `force-dynamic` is set,\n        // we shouldn't consider caching the fetch. This is because the `dynamic` cache\n        // is considered a \"top-level\" cache mode, whereas something like `fetchCache` is more\n        // fine-grained. Top-level modes are responsible for setting reasonable defaults for the\n        // other configurations.\n        const noFetchConfigAndForceDynamic =\n          !pageFetchCacheMode &&\n          !currentFetchCacheConfig &&\n          !currentFetchRevalidate &&\n          workStore.forceDynamic\n\n        if (\n          // force-cache was specified without a revalidate value. We set the revalidate value to false\n          // which will signal the cache to not revalidate\n          currentFetchCacheConfig === 'force-cache' &&\n          typeof currentFetchRevalidate === 'undefined'\n        ) {\n          currentFetchRevalidate = false\n        } else if (\n          hasExplicitFetchCacheOptOut ||\n          noFetchConfigAndForceDynamic\n        ) {\n          currentFetchRevalidate = 0\n        }\n\n        if (\n          currentFetchCacheConfig === 'no-cache' ||\n          currentFetchCacheConfig === 'no-store'\n        ) {\n          cacheReason = `cache: ${currentFetchCacheConfig}`\n        }\n\n        finalRevalidate = validateRevalidate(\n          currentFetchRevalidate,\n          workStore.route\n        )\n\n        const _headers = getRequestMeta('headers')\n        const initHeaders: Headers =\n          typeof _headers?.get === 'function'\n            ? _headers\n            : new Headers(_headers || {})\n\n        const hasUnCacheableHeader =\n          initHeaders.get('authorization') || initHeaders.get('cookie')\n\n        const isUnCacheableMethod = !['get', 'head'].includes(\n          getRequestMeta('method')?.toLowerCase() || 'get'\n        )\n\n        /**\n         * We automatically disable fetch caching under the following conditions:\n         * - Fetch cache configs are not set. Specifically:\n         *    - A page fetch cache mode is not set (export const fetchCache=...)\n         *    - A fetch cache mode is not set in the fetch call (fetch(url, { cache: ... }))\n         *      or the fetch cache mode is set to 'default'\n         *    - A fetch revalidate value is not set in the fetch call (fetch(url, { revalidate: ... }))\n         * - OR the fetch comes after a configuration that triggered dynamic rendering (e.g., reading cookies())\n         *   and the fetch was considered uncacheable (e.g., POST method or has authorization headers)\n         */\n        const hasNoExplicitCacheConfig =\n          // eslint-disable-next-line eqeqeq\n          pageFetchCacheMode == undefined &&\n          // eslint-disable-next-line eqeqeq\n          (currentFetchCacheConfig == undefined ||\n            // when considering whether to opt into the default \"no-cache\" fetch semantics,\n            // a \"default\" cache config should be treated the same as no cache config\n            currentFetchCacheConfig === 'default') &&\n          // eslint-disable-next-line eqeqeq\n          currentFetchRevalidate == undefined\n\n        let autoNoCache = Boolean(\n          (hasUnCacheableHeader || isUnCacheableMethod) &&\n            revalidateStore?.revalidate === 0\n        )\n\n        let isImplicitBuildTimeCache = false\n\n        if (!autoNoCache && hasNoExplicitCacheConfig) {\n          // We don't enable automatic no-cache behavior during build-time\n          // prerendering so that we can still leverage the fetch cache between\n          // export workers.\n          if (workStore.isBuildTimePrerendering) {\n            isImplicitBuildTimeCache = true\n          } else {\n            autoNoCache = true\n          }\n        }\n\n        // If we have no cache config, and we're in Dynamic I/O prerendering,\n        // it'll be a dynamic call. We don't have to issue that dynamic call.\n        if (hasNoExplicitCacheConfig && workUnitStore !== undefined) {\n          switch (workUnitStore.type) {\n            case 'prerender':\n            case 'prerender-runtime':\n            // While we don't want to do caching in the client scope we know the\n            // fetch will be dynamic for cacheComponents so we may as well avoid the\n            // call here. (fallthrough)\n            case 'prerender-client':\n              if (cacheSignal) {\n                cacheSignal.endRead()\n                cacheSignal = null\n              }\n\n              return makeHangingPromise<Response>(\n                workUnitStore.renderSignal,\n                workStore.route,\n                'fetch()'\n              )\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'request':\n            case 'cache':\n            case 'private-cache':\n            case 'unstable-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        switch (pageFetchCacheMode) {\n          case 'force-no-store': {\n            cacheReason = 'fetchCache = force-no-store'\n            break\n          }\n          case 'only-no-store': {\n            if (\n              currentFetchCacheConfig === 'force-cache' ||\n              (typeof finalRevalidate !== 'undefined' && finalRevalidate > 0)\n            ) {\n              throw new Error(\n                `cache: 'force-cache' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-no-store'`\n              )\n            }\n            cacheReason = 'fetchCache = only-no-store'\n            break\n          }\n          case 'only-cache': {\n            if (currentFetchCacheConfig === 'no-store') {\n              throw new Error(\n                `cache: 'no-store' used on fetch for ${fetchUrl} with 'export const fetchCache = 'only-cache'`\n              )\n            }\n            break\n          }\n          case 'force-cache': {\n            if (\n              typeof currentFetchRevalidate === 'undefined' ||\n              currentFetchRevalidate === 0\n            ) {\n              cacheReason = 'fetchCache = force-cache'\n              finalRevalidate = INFINITE_CACHE\n            }\n            break\n          }\n          case 'default-cache':\n          case 'default-no-store':\n          case 'auto':\n          case undefined:\n            // sometimes we won't match the above cases. the reason we don't move\n            // everything to this switch is the use of autoNoCache which is not a fetchCacheMode\n            // I suspect this could be unified with fetchCacheMode however in which case we could\n            // simplify the switch case and ensure we have an exhaustive switch handling all modes\n            break\n          default:\n            pageFetchCacheMode satisfies never\n        }\n\n        if (typeof finalRevalidate === 'undefined') {\n          if (pageFetchCacheMode === 'default-cache' && !isUsingNoStore) {\n            finalRevalidate = INFINITE_CACHE\n            cacheReason = 'fetchCache = default-cache'\n          } else if (pageFetchCacheMode === 'default-no-store') {\n            finalRevalidate = 0\n            cacheReason = 'fetchCache = default-no-store'\n          } else if (isUsingNoStore) {\n            finalRevalidate = 0\n            cacheReason = 'noStore call'\n          } else if (autoNoCache) {\n            finalRevalidate = 0\n            cacheReason = 'auto no cache'\n          } else {\n            // TODO: should we consider this case an invariant?\n            cacheReason = 'auto cache'\n            finalRevalidate = revalidateStore\n              ? revalidateStore.revalidate\n              : INFINITE_CACHE\n          }\n        } else if (!cacheReason) {\n          cacheReason = `revalidate: ${finalRevalidate}`\n        }\n\n        if (\n          // when force static is configured we don't bail from\n          // `revalidate: 0` values\n          !(workStore.forceStatic && finalRevalidate === 0) &&\n          // we don't consider autoNoCache to switch to dynamic for ISR\n          !autoNoCache &&\n          // If the revalidate value isn't currently set or the value is less\n          // than the current revalidate value, we should update the revalidate\n          // value.\n          revalidateStore &&\n          finalRevalidate < revalidateStore.revalidate\n        ) {\n          // If we were setting the revalidate value to 0, we should try to\n          // postpone instead first.\n          if (finalRevalidate === 0) {\n            if (workUnitStore) {\n              switch (workUnitStore.type) {\n                case 'prerender':\n                case 'prerender-client':\n                case 'prerender-runtime':\n                  if (cacheSignal) {\n                    cacheSignal.endRead()\n                    cacheSignal = null\n                  }\n                  return makeHangingPromise<Response>(\n                    workUnitStore.renderSignal,\n                    workStore.route,\n                    'fetch()'\n                  )\n                case 'prerender-ppr':\n                case 'prerender-legacy':\n                case 'request':\n                case 'cache':\n                case 'private-cache':\n                case 'unstable-cache':\n                  break\n                default:\n                  workUnitStore satisfies never\n              }\n            }\n\n            markCurrentScopeAsDynamic(\n              workStore,\n              workUnitStore,\n              `revalidate: 0 fetch ${input} ${workStore.route}`\n            )\n          }\n\n          // We only want to set the revalidate store's revalidate time if it\n          // was explicitly set for the fetch call, i.e.\n          // originalFetchRevalidate.\n          if (revalidateStore && originalFetchRevalidate === finalRevalidate) {\n            revalidateStore.revalidate = finalRevalidate\n          }\n        }\n\n        const isCacheableRevalidate =\n          typeof finalRevalidate === 'number' && finalRevalidate > 0\n\n        let cacheKey: string | undefined\n        const { incrementalCache } = workStore\n        let isHmrRefresh = false\n        let serverComponentsHmrCache: ServerComponentsHmrCache | undefined\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'request':\n            case 'cache':\n            case 'private-cache':\n              isHmrRefresh = workUnitStore.isHmrRefresh ?? false\n              serverComponentsHmrCache = workUnitStore.serverComponentsHmrCache\n              break\n            case 'prerender':\n            case 'prerender-client':\n            case 'prerender-runtime':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n            case 'unstable-cache':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        if (\n          incrementalCache &&\n          (isCacheableRevalidate || serverComponentsHmrCache)\n        ) {\n          try {\n            cacheKey = await incrementalCache.generateCacheKey(\n              fetchUrl,\n              isRequestInput ? (input as RequestInit) : init\n            )\n          } catch (err) {\n            console.error(`Failed to generate cache key for`, input)\n          }\n        }\n\n        const fetchIdx = workStore.nextFetchId ?? 1\n        workStore.nextFetchId = fetchIdx + 1\n\n        let handleUnlock: () => Promise<void> | void = () => {}\n\n        const doOriginalFetch = async (\n          isStale?: boolean,\n          cacheReasonOverride?: string\n        ) => {\n          const requestInputFields = [\n            'cache',\n            'credentials',\n            'headers',\n            'integrity',\n            'keepalive',\n            'method',\n            'mode',\n            'redirect',\n            'referrer',\n            'referrerPolicy',\n            'window',\n            'duplex',\n\n            // don't pass through signal when revalidating\n            ...(isStale ? [] : ['signal']),\n          ]\n\n          if (isRequestInput) {\n            const reqInput: Request = input as any\n            const reqOptions: RequestInit = {\n              body: (reqInput as any)._ogBody || reqInput.body,\n            }\n\n            for (const field of requestInputFields) {\n              // @ts-expect-error custom fields\n              reqOptions[field] = reqInput[field]\n            }\n            input = new Request(reqInput.url, reqOptions)\n          } else if (init) {\n            const { _ogBody, body, signal, ...otherInput } =\n              init as RequestInit & { _ogBody?: any }\n            init = {\n              ...otherInput,\n              body: _ogBody || body,\n              signal: isStale ? undefined : signal,\n            }\n          }\n\n          // add metadata to init without editing the original\n          const clonedInit = {\n            ...init,\n            next: { ...init?.next, fetchType: 'origin', fetchIdx },\n          }\n\n          return originFetch(input, clonedInit)\n            .then(async (res) => {\n              if (!isStale && fetchStart) {\n                trackFetchMetric(workStore, {\n                  start: fetchStart,\n                  url: fetchUrl,\n                  cacheReason: cacheReasonOverride || cacheReason,\n                  cacheStatus:\n                    finalRevalidate === 0 || cacheReasonOverride\n                      ? 'skip'\n                      : 'miss',\n                  cacheWarning,\n                  status: res.status,\n                  method: clonedInit.method || 'GET',\n                })\n              }\n              if (\n                res.status === 200 &&\n                incrementalCache &&\n                cacheKey &&\n                (isCacheableRevalidate || serverComponentsHmrCache)\n              ) {\n                const normalizedRevalidate =\n                  finalRevalidate >= INFINITE_CACHE\n                    ? CACHE_ONE_YEAR\n                    : finalRevalidate\n\n                const incrementalCacheConfig:\n                  | SetIncrementalFetchCacheContext\n                  | undefined = isCacheableRevalidate\n                  ? {\n                      fetchCache: true,\n                      fetchUrl,\n                      fetchIdx,\n                      tags,\n                      isImplicitBuildTimeCache,\n                    }\n                  : undefined\n\n                switch (workUnitStore?.type) {\n                  case 'prerender':\n                  case 'prerender-client':\n                  case 'prerender-runtime':\n                    return createCachedPrerenderResponse(\n                      res,\n                      cacheKey,\n                      incrementalCacheConfig,\n                      incrementalCache,\n                      normalizedRevalidate,\n                      handleUnlock\n                    )\n                  case 'prerender-ppr':\n                  case 'prerender-legacy':\n                  case 'request':\n                  case 'cache':\n                  case 'private-cache':\n                  case 'unstable-cache':\n                  case undefined:\n                    return createCachedDynamicResponse(\n                      workStore,\n                      res,\n                      cacheKey,\n                      incrementalCacheConfig,\n                      incrementalCache,\n                      serverComponentsHmrCache,\n                      normalizedRevalidate,\n                      input,\n                      handleUnlock\n                    )\n                  default:\n                    workUnitStore satisfies never\n                }\n              }\n\n              // we had response that we determined shouldn't be cached so we return it\n              // and don't cache it. This also needs to unlock the cache lock we acquired.\n              await handleUnlock()\n\n              return res\n            })\n            .catch((error) => {\n              handleUnlock()\n              throw error\n            })\n        }\n\n        let cacheReasonOverride\n        let isForegroundRevalidate = false\n        let isHmrRefreshCache = false\n\n        if (cacheKey && incrementalCache) {\n          let cachedFetchData: CachedFetchData | undefined\n\n          if (isHmrRefresh && serverComponentsHmrCache) {\n            cachedFetchData = serverComponentsHmrCache.get(cacheKey)\n            isHmrRefreshCache = true\n          }\n\n          if (isCacheableRevalidate && !cachedFetchData) {\n            handleUnlock = await incrementalCache.lock(cacheKey)\n            const entry = workStore.isOnDemandRevalidate\n              ? null\n              : await incrementalCache.get(cacheKey, {\n                  kind: IncrementalCacheKind.FETCH,\n                  revalidate: finalRevalidate,\n                  fetchUrl,\n                  fetchIdx,\n                  tags,\n                  softTags: implicitTags?.tags,\n                })\n\n            if (hasNoExplicitCacheConfig && workUnitStore) {\n              switch (workUnitStore.type) {\n                case 'prerender':\n                case 'prerender-client':\n                case 'prerender-runtime':\n                  // We sometimes use the cache to dedupe fetches that do not\n                  // specify a cache configuration. In these cases we want to\n                  // make sure we still exclude them from prerenders if\n                  // cacheComponents is on so we introduce an artificial task boundary\n                  // here.\n                  await waitAtLeastOneReactRenderTask()\n                  break\n                case 'prerender-ppr':\n                case 'prerender-legacy':\n                case 'request':\n                case 'cache':\n                case 'private-cache':\n                case 'unstable-cache':\n                  break\n                default:\n                  workUnitStore satisfies never\n              }\n            }\n\n            if (entry) {\n              await handleUnlock()\n            } else {\n              // in dev, incremental cache response will be null in case the browser adds `cache-control: no-cache` in the request headers\n              cacheReasonOverride = 'cache-control: no-cache (hard refresh)'\n            }\n\n            if (entry?.value && entry.value.kind === CachedRouteKind.FETCH) {\n              // when stale and is revalidating we wait for fresh data\n              // so the revalidated entry has the updated data\n              if (workStore.isRevalidate && entry.isStale) {\n                isForegroundRevalidate = true\n              } else {\n                if (entry.isStale) {\n                  workStore.pendingRevalidates ??= {}\n                  if (!workStore.pendingRevalidates[cacheKey]) {\n                    const pendingRevalidate = doOriginalFetch(true)\n                      .then(async (response) => ({\n                        body: await response.arrayBuffer(),\n                        headers: response.headers,\n                        status: response.status,\n                        statusText: response.statusText,\n                      }))\n                      .finally(() => {\n                        workStore.pendingRevalidates ??= {}\n                        delete workStore.pendingRevalidates[cacheKey || '']\n                      })\n\n                    // Attach the empty catch here so we don't get a \"unhandled\n                    // promise rejection\" warning.\n                    pendingRevalidate.catch(console.error)\n\n                    workStore.pendingRevalidates[cacheKey] = pendingRevalidate\n                  }\n                }\n\n                cachedFetchData = entry.value.data\n              }\n            }\n          }\n\n          if (cachedFetchData) {\n            if (fetchStart) {\n              trackFetchMetric(workStore, {\n                start: fetchStart,\n                url: fetchUrl,\n                cacheReason,\n                cacheStatus: isHmrRefreshCache ? 'hmr' : 'hit',\n                cacheWarning,\n                status: cachedFetchData.status || 200,\n                method: init?.method || 'GET',\n              })\n            }\n\n            const response = new Response(\n              Buffer.from(cachedFetchData.body, 'base64'),\n              {\n                headers: cachedFetchData.headers,\n                status: cachedFetchData.status,\n              }\n            )\n\n            Object.defineProperty(response, 'url', {\n              value: cachedFetchData.url,\n            })\n\n            return response\n          }\n        }\n\n        if (workStore.isStaticGeneration && init && typeof init === 'object') {\n          const { cache } = init\n\n          // Delete `cache` property as Cloudflare Workers will throw an error\n          if (isEdgeRuntime) delete init.cache\n\n          if (cache === 'no-store') {\n            // If enabled, we should bail out of static generation.\n            if (workUnitStore) {\n              switch (workUnitStore.type) {\n                case 'prerender':\n                case 'prerender-client':\n                case 'prerender-runtime':\n                  if (cacheSignal) {\n                    cacheSignal.endRead()\n                    cacheSignal = null\n                  }\n                  return makeHangingPromise<Response>(\n                    workUnitStore.renderSignal,\n                    workStore.route,\n                    'fetch()'\n                  )\n                case 'prerender-ppr':\n                case 'prerender-legacy':\n                case 'request':\n                case 'cache':\n                case 'private-cache':\n                case 'unstable-cache':\n                  break\n                default:\n                  workUnitStore satisfies never\n              }\n            }\n            markCurrentScopeAsDynamic(\n              workStore,\n              workUnitStore,\n              `no-store fetch ${input} ${workStore.route}`\n            )\n          }\n\n          const hasNextConfig = 'next' in init\n          const { next = {} } = init\n          if (\n            typeof next.revalidate === 'number' &&\n            revalidateStore &&\n            next.revalidate < revalidateStore.revalidate\n          ) {\n            if (next.revalidate === 0) {\n              // If enabled, we should bail out of static generation.\n              if (workUnitStore) {\n                switch (workUnitStore.type) {\n                  case 'prerender':\n                  case 'prerender-client':\n                  case 'prerender-runtime':\n                    return makeHangingPromise<Response>(\n                      workUnitStore.renderSignal,\n                      workStore.route,\n                      'fetch()'\n                    )\n                  case 'request':\n                  case 'cache':\n                  case 'private-cache':\n                  case 'unstable-cache':\n                  case 'prerender-legacy':\n                  case 'prerender-ppr':\n                    break\n                  default:\n                    workUnitStore satisfies never\n                }\n              }\n              markCurrentScopeAsDynamic(\n                workStore,\n                workUnitStore,\n                `revalidate: 0 fetch ${input} ${workStore.route}`\n              )\n            }\n\n            if (!workStore.forceStatic || next.revalidate !== 0) {\n              revalidateStore.revalidate = next.revalidate\n            }\n          }\n          if (hasNextConfig) delete init.next\n        }\n\n        // if we are revalidating the whole page via time or on-demand and\n        // the fetch cache entry is stale we should still de-dupe the\n        // origin hit if it's a cache-able entry\n        if (cacheKey && isForegroundRevalidate) {\n          const pendingRevalidateKey = cacheKey\n          workStore.pendingRevalidates ??= {}\n          let pendingRevalidate =\n            workStore.pendingRevalidates[pendingRevalidateKey]\n\n          if (pendingRevalidate) {\n            const revalidatedResult: {\n              body: ArrayBuffer\n              headers: Headers\n              status: number\n              statusText: string\n            } = await pendingRevalidate\n            return new Response(revalidatedResult.body, {\n              headers: revalidatedResult.headers,\n              status: revalidatedResult.status,\n              statusText: revalidatedResult.statusText,\n            })\n          }\n\n          // We used to just resolve the Response and clone it however for\n          // static generation with cacheComponents we need the response to be able to\n          // be resolved in a microtask and cloning the response will never have\n          // a body that can resolve in a microtask in node (as observed through\n          // experimentation) So instead we await the body and then when it is\n          // available we construct manually cloned Response objects with the\n          // body as an ArrayBuffer. This will be resolvable in a microtask\n          // making it compatible with cacheComponents.\n          const pendingResponse = doOriginalFetch(true, cacheReasonOverride)\n            // We're cloning the response using this utility because there\n            // exists a bug in the undici library around response cloning.\n            // See the following pull request for more details:\n            // https://github.com/vercel/next.js/pull/73274\n            .then(cloneResponse)\n\n          pendingRevalidate = pendingResponse\n            .then(async (responses) => {\n              const response = responses[0]\n              return {\n                body: await response.arrayBuffer(),\n                headers: response.headers,\n                status: response.status,\n                statusText: response.statusText,\n              }\n            })\n            .finally(() => {\n              // If the pending revalidate is not present in the store, then\n              // we have nothing to delete.\n              if (!workStore.pendingRevalidates?.[pendingRevalidateKey]) {\n                return\n              }\n\n              delete workStore.pendingRevalidates[pendingRevalidateKey]\n            })\n\n          // Attach the empty catch here so we don't get a \"unhandled promise\n          // rejection\" warning\n          pendingRevalidate.catch(() => {})\n\n          workStore.pendingRevalidates[pendingRevalidateKey] = pendingRevalidate\n\n          return pendingResponse.then((responses) => responses[1])\n        } else {\n          return doOriginalFetch(false, cacheReasonOverride)\n        }\n      }\n    )\n\n    if (cacheSignal) {\n      try {\n        return await result\n      } finally {\n        if (cacheSignal) {\n          cacheSignal.endRead()\n        }\n      }\n    }\n    return result\n  }\n\n  // Attach the necessary properties to the patched fetch function.\n  // We don't use this to determine if the fetch function has been patched,\n  // but for external consumers to determine if the fetch function has been\n  // patched.\n  patched.__nextPatched = true as const\n  patched.__nextGetStaticStore = () => workAsyncStorage\n  patched._nextOriginalFetch = originFetch\n  ;(globalThis as Record<symbol, unknown>)[NEXT_PATCH_SYMBOL] = true\n\n  // Assign the function name also as a name property, so that it's preserved\n  // even when mangling is enabled.\n  Object.defineProperty(patched, 'name', { value: 'fetch', writable: false })\n\n  return patched\n}\n\n// we patch fetch to collect cache information used for\n// determining if a page is static or not\nexport function patchFetch(options: PatchableModule) {\n  // If we've already patched fetch, we should not patch it again.\n  if (isFetchPatched()) return\n\n  // Grab the original fetch function. We'll attach this so we can use it in\n  // the patched fetch function.\n  const original = createDedupeFetch(globalThis.fetch)\n\n  // Set the global fetch to the patched fetch.\n  globalThis.fetch = createPatchedFetcher(original, options)\n}\n","import type { IncrementalCache } from '../../lib/incremental-cache'\n\nimport { CACHE_ONE_YEAR } from '../../../lib/constants'\nimport { validateRevalidate, validateTags } from '../../lib/patch-fetch'\nimport {\n  workAsyncStorage,\n  type WorkStore,\n} from '../../app-render/work-async-storage.external'\nimport {\n  getCacheSignal,\n  getDraftModeProviderForCacheScope,\n  workUnitAsyncStorage,\n} from '../../app-render/work-unit-async-storage.external'\nimport {\n  CachedRouteKind,\n  IncrementalCacheKind,\n  type CachedFetchData,\n} from '../../response-cache'\nimport type {\n  UnstableCacheStore,\n  WorkUnitStore,\n} from '../../app-render/work-unit-async-storage.external'\n\ntype Callback = (...args: any[]) => Promise<any>\n\nlet noStoreFetchIdx = 0\n\nasync function cacheNewResult<T>(\n  result: T,\n  incrementalCache: IncrementalCache,\n  cacheKey: string,\n  tags: string[],\n  revalidate: number | false | undefined,\n  fetchIdx: number,\n  fetchUrl: string\n): Promise<unknown> {\n  await incrementalCache.set(\n    cacheKey,\n    {\n      kind: CachedRouteKind.FETCH,\n      data: {\n        headers: {},\n        // TODO: handle non-JSON values?\n        body: JSON.stringify(result),\n        status: 200,\n        url: '',\n      } satisfies CachedFetchData,\n      revalidate: typeof revalidate !== 'number' ? CACHE_ONE_YEAR : revalidate,\n    },\n    { fetchCache: true, tags, fetchIdx, fetchUrl }\n  )\n  return\n}\n\n/**\n * This function allows you to cache the results of expensive operations, like database queries, and reuse them across multiple requests.\n *\n * Read more: [Next.js Docs: `unstable_cache`](https://nextjs.org/docs/app/api-reference/functions/unstable_cache)\n */\nexport function unstable_cache<T extends Callback>(\n  cb: T,\n  keyParts?: string[],\n  options: {\n    /**\n     * The revalidation interval in seconds.\n     */\n    revalidate?: number | false\n    tags?: string[]\n  } = {}\n): T {\n  if (options.revalidate === 0) {\n    throw new Error(\n      `Invariant revalidate: 0 can not be passed to unstable_cache(), must be \"false\" or \"> 0\" ${cb.toString()}`\n    )\n  }\n\n  // Validate the tags provided are valid\n  const tags = options.tags\n    ? validateTags(options.tags, `unstable_cache ${cb.toString()}`)\n    : []\n\n  // Validate the revalidate options\n  validateRevalidate(\n    options.revalidate,\n    `unstable_cache ${cb.name || cb.toString()}`\n  )\n\n  // Stash the fixed part of the key at construction time. The invocation key will combine\n  // the fixed key with the arguments when actually called\n  // @TODO if cb.toString() is long we should hash it\n  // @TODO come up with a collision-free way to combine keyParts\n  // @TODO consider validating the keyParts are all strings. TS can't provide runtime guarantees\n  // and the error produced by accidentally using something that cannot be safely coerced is likely\n  // hard to debug\n  const fixedKey = `${cb.toString()}-${\n    Array.isArray(keyParts) && keyParts.join(',')\n  }`\n\n  const cachedCb = async (...args: any[]) => {\n    const workStore = workAsyncStorage.getStore()\n    const workUnitStore = workUnitAsyncStorage.getStore()\n\n    // We must be able to find the incremental cache otherwise we throw\n    const maybeIncrementalCache:\n      | import('../../lib/incremental-cache').IncrementalCache\n      | undefined =\n      workStore?.incrementalCache || (globalThis as any).__incrementalCache\n\n    if (!maybeIncrementalCache) {\n      throw new Error(\n        `Invariant: incrementalCache missing in unstable_cache ${cb.toString()}`\n      )\n    }\n    const incrementalCache = maybeIncrementalCache\n\n    const cacheSignal = workUnitStore ? getCacheSignal(workUnitStore) : null\n    if (cacheSignal) {\n      cacheSignal.beginRead()\n    }\n    try {\n      // If there's no request store, we aren't in a request (or we're not in\n      // app router) and if there's no static generation store, we aren't in app\n      // router. Default to an empty pathname and search params when there's no\n      // request store or static generation store available.\n      const fetchUrlPrefix =\n        workStore && workUnitStore\n          ? getFetchUrlPrefix(workStore, workUnitStore)\n          : ''\n\n      // Construct the complete cache key for this function invocation\n      // @TODO stringify is likely not safe here. We will coerce undefined to null which will make\n      // the keyspace smaller than the execution space\n      const invocationKey = `${fixedKey}-${JSON.stringify(args)}`\n      const cacheKey = await incrementalCache.generateCacheKey(invocationKey)\n      // $urlWithPath,$sortedQueryStringKeys,$hashOfEveryThingElse\n      const fetchUrl = `unstable_cache ${fetchUrlPrefix} ${cb.name ? ` ${cb.name}` : cacheKey}`\n      const fetchIdx =\n        (workStore ? workStore.nextFetchId : noStoreFetchIdx) ?? 1\n\n      const implicitTags = workUnitStore?.implicitTags\n\n      const innerCacheStore: UnstableCacheStore = {\n        type: 'unstable-cache',\n        phase: 'render',\n        implicitTags,\n        draftMode:\n          workUnitStore &&\n          workStore &&\n          getDraftModeProviderForCacheScope(workStore, workUnitStore),\n      }\n\n      if (workStore) {\n        workStore.nextFetchId = fetchIdx + 1\n\n        // We are in an App Router context. We try to return the cached entry if it exists and is valid\n        // If the entry is fresh we return it. If the entry is stale we return it but revalidate the entry in\n        // the background. If the entry is missing or invalid we generate a new entry and return it.\n\n        let isNestedUnstableCache = false\n\n        if (workUnitStore) {\n          switch (workUnitStore.type) {\n            case 'cache':\n            case 'private-cache':\n            case 'prerender':\n            case 'prerender-runtime':\n            case 'prerender-ppr':\n            case 'prerender-legacy':\n              // We update the store's revalidate property if the option.revalidate is a higher precedence\n              // options.revalidate === undefined doesn't affect timing.\n              // options.revalidate === false doesn't shrink timing. it stays at the maximum.\n              if (typeof options.revalidate === 'number') {\n                if (workUnitStore.revalidate < options.revalidate) {\n                  // The store is already revalidating on a shorter time interval, leave it alone\n                } else {\n                  workUnitStore.revalidate = options.revalidate\n                }\n              }\n\n              // We need to accumulate the tags for this invocation within the store\n              const collectedTags = workUnitStore.tags\n              if (collectedTags === null) {\n                workUnitStore.tags = tags.slice()\n              } else {\n                for (const tag of tags) {\n                  // @TODO refactor tags to be a set to avoid this O(n) lookup\n                  if (!collectedTags.includes(tag)) {\n                    collectedTags.push(tag)\n                  }\n                }\n              }\n              break\n            case 'unstable-cache':\n              isNestedUnstableCache = true\n              break\n            case 'prerender-client':\n            case 'request':\n              break\n            default:\n              workUnitStore satisfies never\n          }\n        }\n\n        if (\n          // when we are nested inside of other unstable_cache's\n          // we should bypass cache similar to fetches\n          !isNestedUnstableCache &&\n          workStore.fetchCache !== 'force-no-store' &&\n          !workStore.isOnDemandRevalidate &&\n          !incrementalCache.isOnDemandRevalidate &&\n          !workStore.isDraftMode\n        ) {\n          // We attempt to get the current cache entry from the incremental cache.\n          const cacheEntry = await incrementalCache.get(cacheKey, {\n            kind: IncrementalCacheKind.FETCH,\n            revalidate: options.revalidate,\n            tags,\n            softTags: implicitTags?.tags,\n            fetchIdx,\n            fetchUrl,\n          })\n\n          if (cacheEntry && cacheEntry.value) {\n            // The entry exists and has a value\n            if (cacheEntry.value.kind !== CachedRouteKind.FETCH) {\n              // The entry is invalid and we need a special warning\n              // @TODO why do we warn this way? Should this just be an error? How are these errors surfaced\n              // so bugs can be reported\n              // @TODO the invocation key can have sensitive data in it. we should not log this entire object\n              console.error(\n                `Invariant invalid cacheEntry returned for ${invocationKey}`\n              )\n              // will fall through to generating a new cache entry below\n            } else {\n              // We have a valid cache entry so we will be returning it. We also check to see if we need\n              // to background revalidate it by checking if it is stale.\n              const cachedResponse =\n                cacheEntry.value.data.body !== undefined\n                  ? JSON.parse(cacheEntry.value.data.body)\n                  : undefined\n              if (cacheEntry.isStale) {\n                // In App Router we return the stale result and revalidate in the background\n                if (!workStore.pendingRevalidates) {\n                  workStore.pendingRevalidates = {}\n                }\n\n                // We run the cache function asynchronously and save the result when it completes\n                workStore.pendingRevalidates[invocationKey] =\n                  workUnitAsyncStorage\n                    .run(innerCacheStore, cb, ...args)\n                    .then((result) => {\n                      return cacheNewResult(\n                        result,\n                        incrementalCache,\n                        cacheKey,\n                        tags,\n                        options.revalidate,\n                        fetchIdx,\n                        fetchUrl\n                      )\n                    })\n                    // @TODO This error handling seems wrong. We swallow the error?\n                    .catch((err) =>\n                      console.error(\n                        `revalidating cache with key: ${invocationKey}`,\n                        err\n                      )\n                    )\n              }\n              // We had a valid cache entry so we return it here\n              return cachedResponse\n            }\n          }\n        }\n\n        // If we got this far then we had an invalid cache entry and need to generate a new one\n        const result = await workUnitAsyncStorage.run(\n          innerCacheStore,\n          cb,\n          ...args\n        )\n\n        if (!workStore.isDraftMode) {\n          if (!workStore.pendingRevalidates) {\n            workStore.pendingRevalidates = {}\n          }\n\n          // We need to push the cache result promise to pending\n          // revalidates otherwise it won't be awaited and is just\n          // dangling\n          workStore.pendingRevalidates[invocationKey] = cacheNewResult(\n            result,\n            incrementalCache,\n            cacheKey,\n            tags,\n            options.revalidate,\n            fetchIdx,\n            fetchUrl\n          )\n        }\n\n        return result\n      } else {\n        noStoreFetchIdx += 1\n        // We are in Pages Router or were called outside of a render. We don't have a store\n        // so we just call the callback directly when it needs to run.\n        // If the entry is fresh we return it. If the entry is stale we return it but revalidate the entry in\n        // the background. If the entry is missing or invalid we generate a new entry and return it.\n\n        if (!incrementalCache.isOnDemandRevalidate) {\n          // We aren't doing an on demand revalidation so we check use the cache if valid\n          const cacheEntry = await incrementalCache.get(cacheKey, {\n            kind: IncrementalCacheKind.FETCH,\n            revalidate: options.revalidate,\n            tags,\n            fetchIdx,\n            fetchUrl,\n            softTags: implicitTags?.tags,\n          })\n\n          if (cacheEntry && cacheEntry.value) {\n            // The entry exists and has a value\n            if (cacheEntry.value.kind !== CachedRouteKind.FETCH) {\n              // The entry is invalid and we need a special warning\n              // @TODO why do we warn this way? Should this just be an error? How are these errors surfaced\n              // so bugs can be reported\n              console.error(\n                `Invariant invalid cacheEntry returned for ${invocationKey}`\n              )\n              // will fall through to generating a new cache entry below\n            } else if (!cacheEntry.isStale) {\n              // We have a valid cache entry and it is fresh so we return it\n              return cacheEntry.value.data.body !== undefined\n                ? JSON.parse(cacheEntry.value.data.body)\n                : undefined\n            }\n          }\n        }\n\n        // If we got this far then we had an invalid cache entry and need to generate a new one\n        const result = await workUnitAsyncStorage.run(\n          innerCacheStore,\n          cb,\n          ...args\n        )\n\n        // we need to wait setting the new cache result here as\n        // we don't have pending revalidates on workStore to\n        // push to and we can't have a dangling promise\n        await cacheNewResult(\n          result,\n          incrementalCache,\n          cacheKey,\n          tags,\n          options.revalidate,\n          fetchIdx,\n          fetchUrl\n        )\n        return result\n      }\n    } finally {\n      if (cacheSignal) {\n        cacheSignal.endRead()\n      }\n    }\n  }\n  // TODO: once AsyncLocalStorage.run() returns the correct types this override will no longer be necessary\n  return cachedCb as unknown as T\n}\n\nfunction getFetchUrlPrefix(\n  workStore: WorkStore,\n  workUnitStore: WorkUnitStore\n): string {\n  switch (workUnitStore.type) {\n    case 'request':\n      const pathname = workUnitStore.url.pathname\n      const searchParams = new URLSearchParams(workUnitStore.url.search)\n\n      const sortedSearch = [...searchParams.keys()]\n        .sort((a, b) => a.localeCompare(b))\n        .map((key) => `${key}=${searchParams.get(key)}`)\n        .join('&')\n\n      return `${pathname}${sortedSearch.length ? '?' : ''}${sortedSearch}`\n    case 'prerender':\n    case 'prerender-client':\n    case 'prerender-runtime':\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'cache':\n    case 'private-cache':\n    case 'unstable-cache':\n      return workStore.route\n    default:\n      return workUnitStore satisfies never\n  }\n}\n","class UrlNode {\n  placeholder: boolean = true\n  children: Map<string, UrlNode> = new Map()\n  slugName: string | null = null\n  restSlugName: string | null = null\n  optionalRestSlugName: string | null = null\n\n  insert(urlPath: string): void {\n    this._insert(urlPath.split('/').filter(Boolean), [], false)\n  }\n\n  smoosh(): string[] {\n    return this._smoosh()\n  }\n\n  private _smoosh(prefix: string = '/'): string[] {\n    const childrenPaths = [...this.children.keys()].sort()\n    if (this.slugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[]'), 1)\n    }\n    if (this.restSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[...]'), 1)\n    }\n    if (this.optionalRestSlugName !== null) {\n      childrenPaths.splice(childrenPaths.indexOf('[[...]]'), 1)\n    }\n\n    const routes = childrenPaths\n      .map((c) => this.children.get(c)!._smoosh(`${prefix}${c}/`))\n      .reduce((prev, curr) => [...prev, ...curr], [])\n\n    if (this.slugName !== null) {\n      routes.push(\n        ...this.children.get('[]')!._smoosh(`${prefix}[${this.slugName}]/`)\n      )\n    }\n\n    if (!this.placeholder) {\n      const r = prefix === '/' ? '/' : prefix.slice(0, -1)\n      if (this.optionalRestSlugName != null) {\n        throw new Error(\n          `You cannot define a route with the same specificity as a optional catch-all route (\"${r}\" and \"${r}[[...${this.optionalRestSlugName}]]\").`\n        )\n      }\n\n      routes.unshift(r)\n    }\n\n    if (this.restSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[...]')!\n          ._smoosh(`${prefix}[...${this.restSlugName}]/`)\n      )\n    }\n\n    if (this.optionalRestSlugName !== null) {\n      routes.push(\n        ...this.children\n          .get('[[...]]')!\n          ._smoosh(`${prefix}[[...${this.optionalRestSlugName}]]/`)\n      )\n    }\n\n    return routes\n  }\n\n  private _insert(\n    urlPaths: string[],\n    slugNames: string[],\n    isCatchAll: boolean\n  ): void {\n    if (urlPaths.length === 0) {\n      this.placeholder = false\n      return\n    }\n\n    if (isCatchAll) {\n      throw new Error(`Catch-all must be the last part of the URL.`)\n    }\n\n    // The next segment in the urlPaths list\n    let nextSegment = urlPaths[0]\n\n    // Check if the segment matches `[something]`\n    if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n      // Strip `[` and `]`, leaving only `something`\n      let segmentName = nextSegment.slice(1, -1)\n\n      let isOptional = false\n      if (segmentName.startsWith('[') && segmentName.endsWith(']')) {\n        // Strip optional `[` and `]`, leaving only `something`\n        segmentName = segmentName.slice(1, -1)\n        isOptional = true\n      }\n\n      if (segmentName.startsWith('…')) {\n        throw new Error(\n          `Detected a three-dot character ('…') at ('${segmentName}'). Did you mean ('...')?`\n        )\n      }\n\n      if (segmentName.startsWith('...')) {\n        // Strip `...`, leaving only `something`\n        segmentName = segmentName.substring(3)\n        isCatchAll = true\n      }\n\n      if (segmentName.startsWith('[') || segmentName.endsWith(']')) {\n        throw new Error(\n          `Segment names may not start or end with extra brackets ('${segmentName}').`\n        )\n      }\n\n      if (segmentName.startsWith('.')) {\n        throw new Error(\n          `Segment names may not start with erroneous periods ('${segmentName}').`\n        )\n      }\n\n      function handleSlug(previousSlug: string | null, nextSlug: string) {\n        if (previousSlug !== null) {\n          // If the specific segment already has a slug but the slug is not `something`\n          // This prevents collisions like:\n          // pages/[post]/index.js\n          // pages/[id]/index.js\n          // Because currently multiple dynamic params on the same segment level are not supported\n          if (previousSlug !== nextSlug) {\n            // TODO: This error seems to be confusing for users, needs an error link, the description can be based on above comment.\n            throw new Error(\n              `You cannot use different slug names for the same dynamic path ('${previousSlug}' !== '${nextSlug}').`\n            )\n          }\n        }\n\n        slugNames.forEach((slug) => {\n          if (slug === nextSlug) {\n            throw new Error(\n              `You cannot have the same slug name \"${nextSlug}\" repeat within a single dynamic path`\n            )\n          }\n\n          if (slug.replace(/\\W/g, '') === nextSegment.replace(/\\W/g, '')) {\n            throw new Error(\n              `You cannot have the slug names \"${slug}\" and \"${nextSlug}\" differ only by non-word symbols within a single dynamic path`\n            )\n          }\n        })\n\n        slugNames.push(nextSlug)\n      }\n\n      if (isCatchAll) {\n        if (isOptional) {\n          if (this.restSlugName != null) {\n            throw new Error(\n              `You cannot use both an required and optional catch-all route at the same level (\"[...${this.restSlugName}]\" and \"${urlPaths[0]}\" ).`\n            )\n          }\n\n          handleSlug(this.optionalRestSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.optionalRestSlugName = segmentName\n          // nextSegment is overwritten to [[...]] so that it can later be sorted specifically\n          nextSegment = '[[...]]'\n        } else {\n          if (this.optionalRestSlugName != null) {\n            throw new Error(\n              `You cannot use both an optional and required catch-all route at the same level (\"[[...${this.optionalRestSlugName}]]\" and \"${urlPaths[0]}\").`\n            )\n          }\n\n          handleSlug(this.restSlugName, segmentName)\n          // slugName is kept as it can only be one particular slugName\n          this.restSlugName = segmentName\n          // nextSegment is overwritten to [...] so that it can later be sorted specifically\n          nextSegment = '[...]'\n        }\n      } else {\n        if (isOptional) {\n          throw new Error(\n            `Optional route parameters are not yet supported (\"${urlPaths[0]}\").`\n          )\n        }\n        handleSlug(this.slugName, segmentName)\n        // slugName is kept as it can only be one particular slugName\n        this.slugName = segmentName\n        // nextSegment is overwritten to [] so that it can later be sorted specifically\n        nextSegment = '[]'\n      }\n    }\n\n    // If this UrlNode doesn't have the nextSegment yet we create a new child UrlNode\n    if (!this.children.has(nextSegment)) {\n      this.children.set(nextSegment, new UrlNode())\n    }\n\n    this.children\n      .get(nextSegment)!\n      ._insert(urlPaths.slice(1), slugNames, isCatchAll)\n  }\n}\n\n/**\n * @deprecated Use `sortSortableRoutes` or `sortPages` instead.\n */\nexport function getSortedRoutes(\n  normalizedPages: ReadonlyArray<string>\n): string[] {\n  // First the UrlNode is created, and every UrlNode can have only 1 dynamic segment\n  // Eg you can't have pages/[post]/abc.js and pages/[hello]/something-else.js\n  // Only 1 dynamic segment per nesting level\n\n  // So in the case that is test/integration/dynamic-routing it'll be this:\n  // pages/[post]/comments.js\n  // pages/blog/[post]/comment/[id].js\n  // Both are fine because `pages/[post]` and `pages/blog` are on the same level\n  // So in this case `UrlNode` created here has `this.slugName === 'post'`\n  // And since your PR passed through `slugName` as an array basically it'd including it in too many possibilities\n  // Instead what has to be passed through is the upwards path's dynamic names\n  const root = new UrlNode()\n\n  // Here the `root` gets injected multiple paths, and insert will break them up into sublevels\n  normalizedPages.forEach((pagePath) => root.insert(pagePath))\n  // Smoosh will then sort those sublevels up to the point where you get the correct route definition priority\n  return root.smoosh()\n}\n\n/**\n * @deprecated Use `sortSortableRouteObjects` or `sortPageObjects` instead.\n */\nexport function getSortedRouteObjects<T>(\n  objects: T[],\n  getter: (obj: T) => string\n): T[] {\n  // We're assuming here that all the pathnames are unique, that way we can\n  // sort the list and use the index as the key.\n  const indexes: Record<string, number> = {}\n  const pathnames: string[] = []\n  for (let i = 0; i < objects.length; i++) {\n    const pathname = getter(objects[i])\n    indexes[pathname] = i\n    pathnames[i] = pathname\n  }\n\n  // Sort the pathnames.\n  const sorted = getSortedRoutes(pathnames)\n\n  // Map the sorted pathnames back to the original objects using the new sorted\n  // index.\n  return sorted.map((pathname) => objects[indexes[pathname]])\n}\n","import {\n  extractInterceptionRouteInformation,\n  isInterceptionRouteAppPath,\n} from './interception-routes'\n\n// Identify /.*[param].*/ in route string\nconst TEST_ROUTE = /\\/[^/]*\\[[^/]+\\][^/]*(?=\\/|$)/\n\n// Identify /[param]/ in route string\nconst TEST_STRICT_ROUTE = /\\/\\[[^/]+\\](?=\\/|$)/\n\n/**\n * Check if a route is dynamic.\n *\n * @param route - The route to check.\n * @param strict - Whether to use strict mode which prohibits segments with prefixes/suffixes (default: true).\n * @returns Whether the route is dynamic.\n */\nexport function isDynamicRoute(route: string, strict: boolean = true): boolean {\n  if (isInterceptionRouteAppPath(route)) {\n    route = extractInterceptionRouteInformation(route).interceptedRoute\n  }\n\n  if (strict) {\n    return TEST_STRICT_ROUTE.test(route)\n  }\n\n  return TEST_ROUTE.test(route)\n}\n","export { getSortedRoutes, getSortedRouteObjects } from './sorted-routes'\nexport { isDynamicRoute } from './is-dynamic'\n","import {\n  abortAndThrowOnSynchronousRequestDataAccess,\n  postponeWithTracking,\n} from '../../app-render/dynamic-rendering'\nimport { isDynamicRoute } from '../../../shared/lib/router/utils'\nimport {\n  NEXT_CACHE_IMPLICIT_TAG_ID,\n  NEXT_CACHE_SOFT_TAG_MAX_LENGTH,\n} from '../../../lib/constants'\nimport { workAsyncStorage } from '../../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../../app-render/work-unit-async-storage.external'\nimport { DynamicServerError } from '../../../client/components/hooks-server-context'\nimport { InvariantError } from '../../../shared/lib/invariant-error'\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n *\n * Read more: [Next.js Docs: `revalidateTag`](https://nextjs.org/docs/app/api-reference/functions/revalidateTag)\n */\nexport function revalidateTag(tag: string) {\n  return revalidate([tag], `revalidateTag ${tag}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific path.\n *\n * Read more: [Next.js Docs: `unstable_expirePath`](https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath)\n */\nexport function unstable_expirePath(\n  originalPath: string,\n  type?: 'layout' | 'page'\n) {\n  if (originalPath.length > NEXT_CACHE_SOFT_TAG_MAX_LENGTH) {\n    console.warn(\n      `Warning: expirePath received \"${originalPath}\" which exceeded max length of ${NEXT_CACHE_SOFT_TAG_MAX_LENGTH}. See more info here https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath`\n    )\n    return\n  }\n\n  let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath}`\n\n  if (type) {\n    normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}`\n  } else if (isDynamicRoute(originalPath)) {\n    console.warn(\n      `Warning: a dynamic page path \"${originalPath}\" was passed to \"expirePath\", but the \"type\" parameter is missing. This has no effect by default, see more info here https://nextjs.org/docs/app/api-reference/functions/unstable_expirePath`\n    )\n  }\n  return revalidate([normalizedPath], `unstable_expirePath ${originalPath}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n *\n * Read more: [Next.js Docs: `unstable_expireTag`](https://nextjs.org/docs/app/api-reference/functions/unstable_expireTag)\n */\nexport function unstable_expireTag(...tags: string[]) {\n  return revalidate(tags, `unstable_expireTag ${tags.join(', ')}`)\n}\n\n/**\n * This function allows you to purge [cached data](https://nextjs.org/docs/app/building-your-application/caching) on-demand for a specific path.\n *\n * Read more: [Next.js Docs: `revalidatePath`](https://nextjs.org/docs/app/api-reference/functions/revalidatePath)\n */\nexport function revalidatePath(originalPath: string, type?: 'layout' | 'page') {\n  if (originalPath.length > NEXT_CACHE_SOFT_TAG_MAX_LENGTH) {\n    console.warn(\n      `Warning: revalidatePath received \"${originalPath}\" which exceeded max length of ${NEXT_CACHE_SOFT_TAG_MAX_LENGTH}. See more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n    return\n  }\n\n  let normalizedPath = `${NEXT_CACHE_IMPLICIT_TAG_ID}${originalPath}`\n\n  if (type) {\n    normalizedPath += `${normalizedPath.endsWith('/') ? '' : '/'}${type}`\n  } else if (isDynamicRoute(originalPath)) {\n    console.warn(\n      `Warning: a dynamic page path \"${originalPath}\" was passed to \"revalidatePath\", but the \"type\" parameter is missing. This has no effect by default, see more info here https://nextjs.org/docs/app/api-reference/functions/revalidatePath`\n    )\n  }\n  return revalidate([normalizedPath], `revalidatePath ${originalPath}`)\n}\n\nfunction revalidate(tags: string[], expression: string) {\n  const store = workAsyncStorage.getStore()\n  if (!store || !store.incrementalCache) {\n    throw new Error(\n      `Invariant: static generation store missing in ${expression}`\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (workUnitStore) {\n    if (workUnitStore.phase === 'render') {\n      throw new Error(\n        `Route ${store.route} used \"${expression}\" during render which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n      )\n    }\n\n    switch (workUnitStore.type) {\n      case 'cache':\n      case 'private-cache':\n        throw new Error(\n          `Route ${store.route} used \"${expression}\" inside a \"use cache\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n        )\n      case 'unstable-cache':\n        throw new Error(\n          `Route ${store.route} used \"${expression}\" inside a function cached with \"unstable_cache(...)\" which is unsupported. To ensure revalidation is performed consistently it must always happen outside of renders and cached functions. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`\n        )\n      case 'prerender':\n      case 'prerender-runtime':\n        // cacheComponents Prerender\n        const error = new Error(\n          `Route ${store.route} used ${expression} without first calling \\`await connection()\\`.`\n        )\n        return abortAndThrowOnSynchronousRequestDataAccess(\n          store.route,\n          expression,\n          error,\n          workUnitStore\n        )\n      case 'prerender-client':\n        throw new InvariantError(\n          `${expression} must not be used within a client component. Next.js should be preventing ${expression} from being included in client components statically, but did not in this case.`\n        )\n      case 'prerender-ppr':\n        return postponeWithTracking(\n          store.route,\n          expression,\n          workUnitStore.dynamicTracking\n        )\n      case 'prerender-legacy':\n        workUnitStore.revalidate = 0\n\n        const err = new DynamicServerError(\n          `Route ${store.route} couldn't be rendered statically because it used \\`${expression}\\`. See more info here: https://nextjs.org/docs/messages/dynamic-server-error`\n        )\n        store.dynamicUsageDescription = expression\n        store.dynamicUsageStack = err.stack\n\n        throw err\n      case 'request':\n        if (process.env.NODE_ENV !== 'production') {\n          // TODO: This is most likely incorrect. It would lead to the ISR\n          // status being flipped when revalidating a static page with a server\n          // action.\n          workUnitStore.usedDynamic = true\n        }\n        break\n      default:\n        workUnitStore satisfies never\n    }\n  }\n\n  if (!store.pendingRevalidatedTags) {\n    store.pendingRevalidatedTags = []\n  }\n\n  for (const tag of tags) {\n    if (!store.pendingRevalidatedTags.includes(tag)) {\n      store.pendingRevalidatedTags.push(tag)\n    }\n  }\n\n  // TODO: only revalidate if the path matches\n  store.pathWasRevalidated = true\n}\n","import { workAsyncStorage } from '../../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../../app-render/work-unit-async-storage.external'\nimport { markCurrentScopeAsDynamic } from '../../app-render/dynamic-rendering'\n\n/**\n * This function can be used to declaratively opt out of static rendering and indicate a particular component should not be cached.\n *\n * It marks the current scope as dynamic.\n *\n * - In [non-PPR](https://nextjs.org/docs/app/api-reference/next-config-js/partial-prerendering) cases this will make a static render\n * halt and mark the page as dynamic.\n * - In PPR cases this will postpone the render at this location.\n *\n * If we are inside a cache scope then this function does nothing.\n *\n * @note It expects to be called within App Router and will error otherwise.\n *\n * Read more: [Next.js Docs: `unstable_noStore`](https://nextjs.org/docs/app/api-reference/functions/unstable_noStore)\n */\nexport function unstable_noStore() {\n  const callingExpression = 'unstable_noStore()'\n  const store = workAsyncStorage.getStore()\n  const workUnitStore = workUnitAsyncStorage.getStore()\n  if (!store) {\n    // This generally implies we are being called in Pages router. We should probably not support\n    // unstable_noStore in contexts outside of `react-server` condition but since we historically\n    // have not errored here previously, we maintain that behavior for now.\n    return\n  } else if (store.forceStatic) {\n    return\n  } else {\n    store.isUnstableNoStore = true\n    if (workUnitStore) {\n      switch (workUnitStore.type) {\n        case 'prerender':\n        case 'prerender-client':\n        case 'prerender-runtime':\n          // unstable_noStore() is a noop in Dynamic I/O.\n          return\n        case 'prerender-ppr':\n        case 'prerender-legacy':\n        case 'request':\n        case 'cache':\n        case 'private-cache':\n        case 'unstable-cache':\n          break\n        default:\n          workUnitStore satisfies never\n      }\n    }\n    markCurrentScopeAsDynamic(store, workUnitStore, callingExpression)\n  }\n}\n","import { workAsyncStorage } from '../app-render/work-async-storage.external'\nimport { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external'\n\nexport type CacheLife = {\n  // How long the client can cache a value without checking with the server.\n  stale?: number\n  // How frequently you want the cache to refresh on the server.\n  // Stale values may be served while revalidating.\n  revalidate?: number\n  // In the worst case scenario, where you haven't had traffic in a while,\n  // how stale can a value be until you prefer deopting to dynamic.\n  // Must be longer than revalidate.\n  expire?: number\n}\n// The equivalent header is kind of like:\n// Cache-Control: max-age=[stale],s-max-age=[revalidate],stale-while-revalidate=[expire-revalidate],stale-if-error=[expire-revalidate]\n// Except that stale-while-revalidate/stale-if-error only applies to shared caches - not private caches.\n\n// The default revalidates relatively frequently but doesn't expire to ensure it's always\n// able to serve fast results but by default doesn't hang.\n\n// This gets overridden by the next-types-plugin\ntype CacheLifeProfiles =\n  | 'default'\n  | 'seconds'\n  | 'minutes'\n  | 'hours'\n  | 'days'\n  | 'weeks'\n  | 'max'\n  | (string & {})\n\nfunction validateCacheLife(profile: CacheLife) {\n  if (profile.stale !== undefined) {\n    if ((profile.stale as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you want to cache on the client forever ' +\n          'without checking with the server.'\n      )\n    } else if (typeof profile.stale !== 'number') {\n      throw new Error('The stale option must be a number of seconds.')\n    }\n  }\n  if (profile.revalidate !== undefined) {\n    if ((profile.revalidate as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you do not want to revalidate by time.'\n      )\n    } else if (typeof profile.revalidate !== 'number') {\n      throw new Error('The revalidate option must be a number of seconds.')\n    }\n  }\n  if (profile.expire !== undefined) {\n    if ((profile.expire as any) === false) {\n      throw new Error(\n        'Pass `Infinity` instead of `false` if you want to cache on the server forever ' +\n          'without checking with the origin.'\n      )\n    } else if (typeof profile.expire !== 'number') {\n      throw new Error('The expire option must be a number of seconds.')\n    }\n  }\n\n  if (profile.revalidate !== undefined && profile.expire !== undefined) {\n    if (profile.revalidate > profile.expire) {\n      throw new Error(\n        'If providing both the revalidate and expire options, ' +\n          'the expire option must be greater than the revalidate option. ' +\n          'The expire option indicates how many seconds from the start ' +\n          'until it can no longer be used.'\n      )\n    }\n  }\n\n  if (profile.stale !== undefined && profile.expire !== undefined) {\n    if (profile.stale > profile.expire) {\n      throw new Error(\n        'If providing both the stale and expire options, ' +\n          'the expire option must be greater than the stale option. ' +\n          'The expire option indicates how many seconds from the start ' +\n          'until it can no longer be used.'\n      )\n    }\n  }\n}\n\nexport function cacheLife(profile: CacheLifeProfiles | CacheLife): void {\n  if (!process.env.__NEXT_USE_CACHE) {\n    throw new Error(\n      'cacheLife() is only available with the experimental.useCache config.'\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n\n  switch (workUnitStore?.type) {\n    case 'prerender':\n    case 'prerender-client':\n    case 'prerender-runtime':\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'request':\n    case 'unstable-cache':\n    case undefined:\n      throw new Error(\n        'cacheLife() can only be called inside a \"use cache\" function.'\n      )\n    case 'cache':\n    case 'private-cache':\n      break\n    default:\n      workUnitStore satisfies never\n  }\n\n  if (typeof profile === 'string') {\n    const workStore = workAsyncStorage.getStore()\n    if (!workStore) {\n      throw new Error(\n        'cacheLife() can only be called during App Router rendering at the moment.'\n      )\n    }\n    if (!workStore.cacheLifeProfiles) {\n      throw new Error(\n        'cacheLifeProfiles should always be provided. This is a bug in Next.js.'\n      )\n    }\n\n    // TODO: This should be globally available and not require an AsyncLocalStorage.\n    const configuredProfile = workStore.cacheLifeProfiles[profile]\n    if (configuredProfile === undefined) {\n      if (workStore.cacheLifeProfiles[profile.trim()]) {\n        throw new Error(\n          `Unknown cacheLife profile \"${profile}\" is not configured in next.config.js\\n` +\n            `Did you mean \"${profile.trim()}\" without the spaces?`\n        )\n      }\n      throw new Error(\n        `Unknown cacheLife profile \"${profile}\" is not configured in next.config.js\\n` +\n          'module.exports = {\\n' +\n          '  experimental: {\\n' +\n          '    cacheLife: {\\n' +\n          `      \"${profile}\": ...\\n` +\n          '    }\\n' +\n          '  }\\n' +\n          '}'\n      )\n    }\n    profile = configuredProfile\n  } else if (\n    typeof profile !== 'object' ||\n    profile === null ||\n    Array.isArray(profile)\n  ) {\n    throw new Error(\n      'Invalid cacheLife() option. Either pass a profile name or object.'\n    )\n  } else {\n    validateCacheLife(profile)\n  }\n\n  if (profile.revalidate !== undefined) {\n    // Track the explicit revalidate time.\n    if (\n      workUnitStore.explicitRevalidate === undefined ||\n      workUnitStore.explicitRevalidate > profile.revalidate\n    ) {\n      workUnitStore.explicitRevalidate = profile.revalidate\n    }\n  }\n  if (profile.expire !== undefined) {\n    // Track the explicit expire time.\n    if (\n      workUnitStore.explicitExpire === undefined ||\n      workUnitStore.explicitExpire > profile.expire\n    ) {\n      workUnitStore.explicitExpire = profile.expire\n    }\n  }\n  if (profile.stale !== undefined) {\n    // Track the explicit stale time.\n    if (\n      workUnitStore.explicitStale === undefined ||\n      workUnitStore.explicitStale > profile.stale\n    ) {\n      workUnitStore.explicitStale = profile.stale\n    }\n  }\n}\n","import { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external'\nimport { validateTags } from '../lib/patch-fetch'\n\nexport function cacheTag(...tags: string[]): void {\n  if (!process.env.__NEXT_USE_CACHE) {\n    throw new Error(\n      'cacheTag() is only available with the experimental.useCache config.'\n    )\n  }\n\n  const workUnitStore = workUnitAsyncStorage.getStore()\n\n  switch (workUnitStore?.type) {\n    case 'prerender':\n    case 'prerender-client':\n    case 'prerender-runtime':\n    case 'prerender-ppr':\n    case 'prerender-legacy':\n    case 'request':\n    case 'unstable-cache':\n    case undefined:\n      throw new Error(\n        'cacheTag() can only be called inside a \"use cache\" function.'\n      )\n    case 'cache':\n    case 'private-cache':\n      break\n    default:\n      workUnitStore satisfies never\n  }\n\n  const validTags = validateTags(tags, 'cacheTag()')\n\n  if (!workUnitStore.tags) {\n    workUnitStore.tags = validTags\n  } else {\n    workUnitStore.tags.push(...validTags)\n  }\n}\n","const cacheExports = {\n  unstable_cache: require('next/dist/server/web/spec-extension/unstable-cache')\n    .unstable_cache,\n\n  revalidateTag: require('next/dist/server/web/spec-extension/revalidate')\n    .revalidateTag,\n  revalidatePath: require('next/dist/server/web/spec-extension/revalidate')\n    .revalidatePath,\n\n  unstable_expireTag: require('next/dist/server/web/spec-extension/revalidate')\n    .unstable_expireTag,\n  unstable_expirePath: require('next/dist/server/web/spec-extension/revalidate')\n    .unstable_expirePath,\n\n  unstable_noStore:\n    require('next/dist/server/web/spec-extension/unstable-no-store')\n      .unstable_noStore,\n  unstable_cacheLife: require('next/dist/server/use-cache/cache-life')\n    .cacheLife,\n  unstable_cacheTag: require('next/dist/server/use-cache/cache-tag').cacheTag,\n}\n\n// https://nodejs.org/api/esm.html#commonjs-namespaces\n// When importing CommonJS modules, the module.exports object is provided as the default export\nmodule.exports = cacheExports\n\n// make import { xxx } from 'next/cache' work\nexports.unstable_cache = cacheExports.unstable_cache\nexports.revalidatePath = cacheExports.revalidatePath\nexports.revalidateTag = cacheExports.revalidateTag\nexports.unstable_expireTag = cacheExports.unstable_expireTag\nexports.unstable_expirePath = cacheExports.unstable_expirePath\nexports.unstable_noStore = cacheExports.unstable_noStore\nexports.unstable_cacheLife = cacheExports.unstable_cacheLife\nexports.unstable_cacheTag = cacheExports.unstable_cacheTag\n","\"use server\";\nimport { cookies } from \"next/headers\";\nasync function invalidateCacheAction() {\n  void (await cookies()).delete(`__clerk_invalidate_cache_cookie_${Date.now()}`);\n}\nexport {\n  invalidateCacheAction\n};\n","'use server'\n\nimport type {ClientPerspective, SyncTag} from '@sanity/client'\nimport {perspectiveCookieName} from '@sanity/preview-url-secret/constants'\nimport {revalidateTag} from 'next/cache.js'\nimport {cookies, draftMode} from 'next/headers.js'\nimport {sanitizePerspective} from '../utils'\n\n// export async function disableDraftMode(): Promise<void> {\n//   'use server'\n//   await Promise.allSettled([\n//     (await draftMode()).disable(),\n//     // Simulate a delay to show the loading state\n//     new Promise((resolve) => setTimeout(resolve, 1000)),\n//   ])\n// }\n\nexport async function revalidateSyncTags(tags: SyncTag[]): Promise<void> {\n  await revalidateTag('sanity:fetch-sync-tags')\n\n  for (const _tag of tags) {\n    const tag = `sanity:${_tag}`\n    await revalidateTag(tag)\n    // eslint-disable-next-line no-console\n    console.log(`<SanityLive /> revalidated tag: ${tag}`)\n  }\n}\n\nexport async function setPerspectiveCookie(perspective: ClientPerspective): Promise<void> {\n  if (!(await draftMode()).isEnabled) {\n    // throw new Error('Draft mode is not enabled, setting perspective cookie is not allowed')\n    return\n  }\n  const sanitizedPerspective = sanitizePerspective(perspective, 'drafts')\n  if (perspective !== sanitizedPerspective) {\n    throw new Error(`Invalid perspective: ${perspective}`)\n  }\n\n  ;(await cookies()).set(\n    perspectiveCookieName,\n    Array.isArray(sanitizedPerspective) ? sanitizedPerspective.join(',') : sanitizedPerspective,\n    {\n      httpOnly: true,\n      path: '/',\n      secure: true,\n      sameSite: 'none',\n    },\n  )\n}\n\n// export async function handleDraftModeActionMissing(): Promise<void | string> {\n//   return 'The <SanityLive /> component is missing the handleDraftModeAction prop'\n// }\n"],"names":["cloneResponse","noop","registry","globalThis","FinalizationRegistry","weakRef","stream","deref","locked","cancel","then","original","body","body1","body2","tee","cloned1","Response","status","statusText","headers","Object","defineProperty","value","url","configurable","enumerable","writable","register","WeakRef","cloned2","createDedupeFetch","simpleCacheKey","generateCacheKey","request","JSON","stringify","method","Array","from","entries","mode","redirect","credentials","referrer","referrerPolicy","integrity","originalFetch","getCacheEntries","React","cache","dedupeFetch","resource","options","signal","cacheKey","URL","Request","keepalive","cacheEntries","i","j","length","key","promise","response","InvariantError","entry","push","CachedRouteKind","IncrementalCacheKind","Batcher","cacheKeyFn","schedulerFn","fn","pending","Map","create","batch","Promise","resolve","get","reject","DetachedPromise","set","result","err","delete","NEXT_REQUEST_META","addRequestMeta","getRequestMeta","removeRequestMeta","setRequestMeta","Symbol","for","req","meta","isNodeNextRequest","isNodeNextResponse","isWebNextRequest","isWebNextResponse","process","env","NEXT_RUNTIME","res","NextRequestAdapter","ResponseAborted","ResponseAbortedName","createAbortController","signalFromNodeResponse","Error","name","controller","AbortController","once","writableFinished","abort","errored","destroyed","AbortSignal","fromBaseNextRequest","fromWebNextRequest","fromNodeNextRequest","startsWith","base","NextRequest","fromNodeOutgoingHttpHeaders","duplex","aborted","getClientComponentLoaderMetrics","wrapClientComponentLoader","clientComponentLoadStart","clientComponentLoadTimes","clientComponentLoadCount","ComponentMod","__next_app__","require","args","startTime","performance","now","loadChunk","finally","metrics","undefined","reset","isAbortError","pipeToNodeResponse","e","createWriterFromResponse","waitUntilForEnd","started","drained","onDrain","on","off","finished","WritableStream","write","chunk","NEXT_OTEL_PERFORMANCE_PREFIX","measure","start","end","flushHeaders","getTracer","trace","NextNodeServerSpan","startResponse","spanName","ok","flush","cause","destroy","close","readable","writer","pipeTo","RenderResult","EMPTY","metadata","contentType","fromStatic","constructor","waitUntil","assignMetadata","assign","isNull","isDynamic","toUnchunkedString","streamToString","ReadableStream","streamFromString","Buffer","isBuffer","streamFromBuffer","isArray","chainStreams","coerce","unshift","preventClose","RouteKind","fromResponseCacheEntry","routeKindToIncrementalCacheKind","toResponseCacheEntry","cacheEntry","kind","PAGES","html","pageData","APP_PAGE","postponed","rscData","segmentData","isMiss","isStale","cacheControl","HTML_CONTENT_TYPE_HEADER","routeKind","IMAGE","APP_ROUTE","PAGES_API","ResponseCache","minimal_mode","batcher","isOnDemandRevalidate","scheduleOnNextTick","responseGenerator","context","hasResolved","previousCacheEntry","incrementalCache","isFallback","isRoutePPREnabled","prom","previousCacheItem","expiresAt","Date","resolved","cachedResponse","isPrefetch","isRevalidating","resolveValue","newRevalidate","Math","min","max","revalidate","newExpire","expire","console","error","NEXT_PATCH_SYMBOL","createPatchedFetcher","patchFetch","validateRevalidate","validateTags","isEdgeRuntime","isFetchPatched","revalidateVal","route","normalizedRevalidate","INFINITE_CACHE","isNaN","message","includes","tags","description","validTags","invalidTags","tag","reason","NEXT_CACHE_TAG_MAX_LENGTH","NEXT_CACHE_TAG_MAX_ITEMS","warn","slice","join","log","trackFetchMetric","workStore","ctx","shouldTrackFetchMetrics","fetchMetrics","timeOrigin","idx","nextFetchId","createCachedPrerenderResponse","incrementalCacheContext","handleUnlock","bodyBuffer","arrayBuffer","fetchedData","fromEntries","toString","FETCH","data","createCachedDynamicResponse","serverComponentsHmrCache","input","cacheSetPromise","catch","pendingRevalidateKey","pendingRevalidates","originFetch","workAsyncStorage","workUnitAsyncStorage","patched","fetch","init","username","password","fetchUrl","href","toUpperCase","isInternal","next","internal","hideSpan","NEXT_OTEL_FETCH_DISABLED","fetchStart","getStore","workUnitStore","cacheSignal","getCacheSignal","beginRead","internalFetch","AppRenderSpan","SpanKind","CLIENT","filter","Boolean","attributes","hostname","port","isDraftMode","isRequestInput","field","finalRevalidate","getNextField","originalFetchRevalidate","currentFetchRevalidate","revalidateStore","type","collectedTags","implicitTags","pageFetchCacheMode","fetchCache","isUsingNoStore","isUnstableNoStore","currentFetchCacheConfig","cacheReason","cacheWarning","isConflictingRevalidate","hasExplicitFetchCacheOptOut","noFetchConfigAndForceDynamic","forceDynamic","_headers","initHeaders","Headers","hasUnCacheableHeader","isUnCacheableMethod","toLowerCase","hasNoExplicitCacheConfig","autoNoCache","isImplicitBuildTimeCache","isBuildTimePrerendering","endRead","makeHangingPromise","renderSignal","forceStatic","markCurrentScopeAsDynamic","isCacheableRevalidate","isHmrRefresh","fetchIdx","doOriginalFetch","cacheReasonOverride","requestInputFields","reqInput","reqOptions","_ogBody","otherInput","clonedInit","fetchType","cacheStatus","CACHE_ONE_YEAR","incrementalCacheConfig","isForegroundRevalidate","isHmrRefreshCache","cachedFetchData","lock","softTags","waitAtLeastOneReactRenderTask","isRevalidate","pendingRevalidate","isStaticGeneration","hasNextConfig","revalidatedResult","pendingResponse","responses","__nextPatched","__nextGetStaticStore","_nextOriginalFetch","unstable_cache","noStoreFetchIdx","cacheNewResult","cb","keyParts","fixedKey","cachedCb","maybeIncrementalCache","__incrementalCache","fetchUrlPrefix","getFetchUrlPrefix","invocationKey","innerCacheStore","phase","draftMode","getDraftModeProviderForCacheScope","isNestedUnstableCache","parse","run","pathname","searchParams","URLSearchParams","search","sortedSearch","keys","sort","a","b","localeCompare","map","getSortedRouteObjects","getSortedRoutes","UrlNode","insert","urlPath","_insert","split","smoosh","_smoosh","prefix","childrenPaths","children","slugName","splice","indexOf","restSlugName","optionalRestSlugName","routes","c","reduce","prev","curr","placeholder","r","urlPaths","slugNames","isCatchAll","nextSegment","endsWith","segmentName","isOptional","substring","handleSlug","previousSlug","nextSlug","forEach","slug","replace","has","normalizedPages","root","pagePath","objects","getter","indexes","pathnames","sorted","isDynamicRoute","TEST_ROUTE","TEST_STRICT_ROUTE","strict","isInterceptionRouteAppPath","extractInterceptionRouteInformation","interceptedRoute","test","revalidatePath","revalidateTag","unstable_expirePath","unstable_expireTag","originalPath","NEXT_CACHE_SOFT_TAG_MAX_LENGTH","normalizedPath","NEXT_CACHE_IMPLICIT_TAG_ID","expression","store","abortAndThrowOnSynchronousRequestDataAccess","postponeWithTracking","dynamicTracking","DynamicServerError","dynamicUsageDescription","dynamicUsageStack","stack","NODE_ENV","usedDynamic","pendingRevalidatedTags","pathWasRevalidated","unstable_noStore","callingExpression","cacheLife","validateCacheLife","profile","stale","__NEXT_USE_CACHE","cacheLifeProfiles","configuredProfile","trim","explicitRevalidate","explicitExpire","explicitStale","cacheTag"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]}