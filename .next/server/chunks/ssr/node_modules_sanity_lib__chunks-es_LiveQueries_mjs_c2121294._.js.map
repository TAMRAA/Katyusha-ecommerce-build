{"version":3,"sources":["turbopack:///[project]/node_modules/@sanity/client/src/csm/resolvePerspectives.ts","turbopack:///[project]/node_modules/sanity/src/presentation/loader/useLiveEvents.ts","turbopack:///[project]/node_modules/@sanity/client/src/csm/createSourceDocumentResolver.ts","turbopack:///[project]/node_modules/@sanity/client/src/csm/applySourceDocuments.ts","turbopack:///[project]/node_modules/sanity/src/presentation/loader/utils.ts","turbopack:///[project]/node_modules/@sanity/client/src/csm/resolvedKeyedSourcePath.ts","turbopack:///[project]/node_modules/@sanity/client/src/csm/resolveEditUrl.ts","turbopack:///[project]/node_modules/sanity/src/presentation/loader/useLiveQueries.ts","turbopack:///[project]/node_modules/sanity/src/presentation/loader/LiveQueries.tsx"],"sourcesContent":["import {validateApiPerspective} from '../config'\nimport type {StackablePerspective} from '../types'\nimport type {ClientPerspective} from './types'\n\n/**\n * This resolves the perspectives to how documents should be resolved when applying optimistic updates,\n * like in `applySourceDocuments`.\n * @internal\n */\nexport function resolvePerspectives(\n  perspective: Exclude<ClientPerspective, 'raw'>,\n): ('published' | 'drafts' | StackablePerspective)[] {\n  validateApiPerspective(perspective)\n\n  if (Array.isArray(perspective)) {\n    if (!perspective.includes('published')) {\n      return [...perspective, 'published']\n    }\n    return perspective\n  }\n  switch (perspective) {\n    case 'previewDrafts':\n    case 'drafts':\n      return ['drafts', 'published']\n    case 'published':\n    default:\n      return ['published']\n  }\n}\n","import {type LiveEvent, type LiveEventMessage} from '@sanity/client'\nimport {useDeferredValue, useEffect, useReducer, useState} from 'react'\nimport {type SanityClient} from 'sanity'\n\ntype State = {\n  /**\n   * Growing list over live events with Sync Tags,\n   * that can be used to refetch with Sanity Client, using the id as the lastLiveEventId parameter\n   */\n  messages: LiveEventMessage[]\n  /**\n   * If the connection experiences a reconnect, or a restart event is received, the counter is incremented.\n   * This counter is suitable as a `key` on React Components as a way to reset its internal state and refetch.\n   */\n  resets: number\n}\n\nexport function reducer(state: State, event: LiveEvent): State {\n  switch (event.type) {\n    case 'message':\n      return {\n        ...state,\n        messages: [...state.messages, event],\n      }\n    case 'reconnect':\n    case 'restart':\n      return {\n        ...state,\n        messages: [],\n        resets: state.resets + 1,\n      }\n    case 'welcome':\n      // no-op\n      return state\n    default:\n      throw Error(\n        `Unknown event: ${\n          // oxlint-disable-next-line no-explicit-any\n          (event as any).type\n        }`,\n        {cause: event},\n      )\n  }\n}\n\nexport const initialState: State = {\n  messages: [],\n  resets: 0,\n}\n\nexport function useLiveEvents(client: SanityClient): State {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const [error, setError] = useState<unknown>(null)\n  if (error !== null) {\n    // Push error to nearest error boundary\n    throw error\n  }\n\n  useEffect(() => {\n    const subscription = client.live\n      .events({includeDrafts: true, tag: 'presentation-loader'})\n      .subscribe({\n        next: dispatch,\n        error: (err) =>\n          setError(\n            err instanceof Error\n              ? err\n              : new Error('Unexpected error in useLiveEvents', {cause: err}),\n          ),\n      })\n    return () => subscription.unsubscribe()\n  }, [client.live])\n\n  return useDeferredValue(state)\n}\n","import {getDraftId, getPublishedId, getVersionId} from './draftUtils'\nimport {resolvePerspectives} from './resolvePerspectives'\nimport type {ClientPerspective, ContentSourceMapDocuments, SanityDocument} from './types'\n\n/** @internal */\nexport type ResolvedDocument = Partial<SanityDocument> &\n  Required<Pick<SanityDocument, '_id' | '_type'>>\n\n/** @internal */\nexport type MatchedDocument = Partial<SanityDocument> &\n  Required<Pick<SanityDocument, '_id' | '_type' | '_originalId'>>\n\n/** @internal */\nexport function createSourceDocumentResolver(\n  getCachedDocument: (\n    sourceDocument: ContentSourceMapDocuments[number],\n  ) => ResolvedDocument | null | undefined,\n  _perspective: Exclude<ClientPerspective, 'raw'>,\n) {\n  const perspectives = resolvePerspectives(_perspective)\n  function findDocument(sourceDocument: ContentSourceMapDocuments[number]) {\n    for (const perspective of perspectives) {\n      let match: ReturnType<typeof getCachedDocument> = null\n      if (perspective.startsWith('r')) {\n        match = getCachedDocument({\n          ...sourceDocument,\n          _id: getVersionId(sourceDocument._id, perspective),\n        })\n      }\n      if (perspective === 'drafts') {\n        match = getCachedDocument({\n          ...sourceDocument,\n          _id: getDraftId(sourceDocument._id),\n        })\n      }\n      if (perspective === 'published') {\n        match = getCachedDocument({\n          ...sourceDocument,\n          _id: getPublishedId(sourceDocument._id),\n        })\n      }\n      if (match) {\n        return {...match, _id: getPublishedId(match._id), _originalId: match._id}\n      }\n    }\n    return null\n  }\n  // define resolver that loops over source documents and perspectives\n  return function resolveSourceDocument(\n    sourceDocument: ContentSourceMapDocuments[number],\n  ): MatchedDocument | null {\n    return findDocument(sourceDocument)\n  }\n}\n","import {createSourceDocumentResolver} from './createSourceDocumentResolver'\nimport {parseJsonPath} from './jsonPath'\nimport {resolveMapping} from './resolveMapping'\nimport * as paths from './studioPath'\nimport type {\n  Any,\n  ApplySourceDocumentsUpdateFunction,\n  ClientPerspective,\n  ContentSourceMap,\n  ContentSourceMapDocuments,\n  Path,\n  SanityDocument,\n} from './types'\nimport {walkMap} from './walkMap'\n\n/**\n * Optimistically applies source documents to a result, using the content source map to trace fields.\n * Can be used to apply mutations to documents being edited in a Studio, or any mutation on Content Lake, to a result with extremely low latency.\n * @alpha\n */\nexport function applySourceDocuments<Result = unknown>(\n  result: Result,\n  resultSourceMap: ContentSourceMap | undefined,\n  getCachedDocument: (\n    sourceDocument: ContentSourceMapDocuments[number],\n  ) =>\n    | (Partial<SanityDocument> & Required<Pick<SanityDocument, '_id' | '_type'>>)\n    | null\n    | undefined,\n  updateFn: ApplySourceDocumentsUpdateFunction,\n  perspective: Exclude<ClientPerspective, 'raw'>,\n): Result {\n  if (!resultSourceMap) return result\n\n  const resolveDocument = createSourceDocumentResolver(getCachedDocument, perspective)\n  const cachedDocuments = resultSourceMap.documents?.map?.(resolveDocument) || []\n\n  return walkMap(JSON.parse(JSON.stringify(result)), (value, path) => {\n    const resolveMappingResult = resolveMapping(path, resultSourceMap)\n    if (!resolveMappingResult) {\n      return value\n    }\n\n    const {mapping, pathSuffix} = resolveMappingResult\n    if (mapping.type !== 'value') {\n      return value\n    }\n\n    if (mapping.source.type !== 'documentValue') {\n      return value\n    }\n\n    const sourceDocument = resultSourceMap.documents[mapping.source.document]\n    const sourcePath = resultSourceMap.paths[mapping.source.path]\n\n    if (sourceDocument) {\n      const parsedPath = parseJsonPath(sourcePath + pathSuffix)\n      const stringifiedPath = paths.toString(parsedPath as Path)\n      const cachedDocument = cachedDocuments[mapping.source.document]\n\n      if (!cachedDocument) {\n        return value\n      }\n\n      const changedValue = cachedDocument\n        ? paths.get<Result[keyof Result]>(cachedDocument, stringifiedPath, value)\n        : value\n      return value === changedValue\n        ? value\n        : updateFn<Result[keyof Result]>(changedValue as Any, {\n            cachedDocument,\n            previousValue: value as Result[keyof Result],\n            sourceDocument,\n            sourcePath: parsedPath,\n          })\n    }\n\n    return value\n  }) as Result\n}\n","import {toPlainText} from '@portabletext/react'\nimport {isPortableTextBlock} from '@portabletext/toolkit'\nimport {type ClientPerspective, type QueryParams} from '@sanity/client'\nimport {type ApplySourceDocumentsUpdateFunction} from '@sanity/client/csm'\nimport {type FIXME} from 'sanity'\n\n/**\n * Used by `applySourceDocuments`\n * @internal\n */\nexport const mapChangedValue: ApplySourceDocumentsUpdateFunction = (\n  changedValue: FIXME,\n  {previousValue},\n) => {\n  if (typeof previousValue === 'string') {\n    if (typeof changedValue === 'number') {\n      // If the string() function was used in the query, we need to convert the source value to a string as well\n      return `${changedValue}`\n    }\n    // If it's an array in the source, but a string in the query response, it could be pt::text\n    if (Array.isArray(changedValue)) {\n      if (changedValue.length === 0) {\n        // If it's empty assume it's PT and return an empty string\n        return ''\n      }\n      // If the array contains any valid block type, assume the GROQ initially used pt::text on it and do the same conversion\n      if (changedValue.some((node) => typeof node === 'object' && isPortableTextBlock(node))) {\n        return toPlainText(changedValue)\n      }\n    }\n  }\n\n  return changedValue\n}\n\n/**\n * @internal\n */\nexport type QueryCacheKey = `${string}:${string}:${string}`\n/**\n * @internal\n */\nexport function getQueryCacheKey(\n  perspective: ClientPerspective,\n  query: string,\n  params: QueryParams,\n): QueryCacheKey {\n  return `${perspective}:${query}:${JSON.stringify(params)}`\n}\n","import {jsonPath, parseJsonPath} from './jsonPath'\nimport type {ContentSourceMapParsedPath} from './types'\n\n/**\n * @internal\n */\nexport function resolvedKeyedSourcePath(options: {\n  keyedResultPath: ContentSourceMapParsedPath\n  pathSuffix?: string\n  sourceBasePath: string\n}): ContentSourceMapParsedPath {\n  const {keyedResultPath, pathSuffix, sourceBasePath} = options\n\n  const inferredResultPath = pathSuffix === undefined ? [] : parseJsonPath(pathSuffix)\n\n  const inferredPath = keyedResultPath.slice(keyedResultPath.length - inferredResultPath.length)\n\n  const inferredPathSuffix = inferredPath.length ? jsonPath(inferredPath).slice(1) : ''\n\n  return parseJsonPath(sourceBasePath + inferredPathSuffix)\n}\n","import {createEditUrl} from './createEditUrl'\nimport {studioPathToJsonPath} from './jsonPath'\nimport {resolveEditInfo} from './resolveEditInfo'\nimport type {ResolveEditUrlOptions} from './types'\n\n/** @alpha */\nexport function resolveEditUrl(\n  options: ResolveEditUrlOptions,\n): ReturnType<typeof createEditUrl> | undefined {\n  const {resultSourceMap, studioUrl} = options\n  const resultPath = studioPathToJsonPath(options.resultPath)\n\n  const editInfo = resolveEditInfo({\n    resultPath,\n    resultSourceMap,\n    studioUrl,\n  })\n  if (!editInfo) {\n    return undefined\n  }\n\n  return createEditUrl(editInfo)\n}\n","import {type ClientPerspective} from '@sanity/client'\nimport isEqual from 'fast-deep-equal'\nimport {useDeferredValue, useEffect, useReducer} from 'react'\nimport {type QueryParams} from 'sanity'\n\nimport {LOADER_QUERY_GC_INTERVAL} from '../constants'\nimport {getQueryCacheKey, type QueryCacheKey} from './utils'\n\ntype LiveQueriesState = Map<\n  QueryCacheKey,\n  {\n    query: string\n    params: QueryParams\n    perspective: ClientPerspective\n  }\n>\n\ntype State = {\n  queries: LiveQueriesState\n  heartbeats: Map<\n    QueryCacheKey,\n    {\n      receivedAt: number\n      /**\n       * If false it means the query can't safely be garbage collected,\n       * as older versions of \\@sanity/core-loader doesn't fire listen events\n       * on an interval.\n       */\n      heartbeat: number | false\n    }\n  >\n}\n\ntype QueryListenAction = {\n  type: 'query-listen'\n  payload: {\n    perspective: ClientPerspective\n    query: string\n    params: QueryParams\n    heartbeat: number | false\n  }\n}\ntype GarbageCollectAction = {type: 'gc'}\ntype Action = QueryListenAction | GarbageCollectAction\n\nfunction gc(state: State): State {\n  if (state.queries.size < 1) {\n    return state\n  }\n\n  const now = Date.now()\n  const hasAnyExpired = Array.from(state.heartbeats.values()).some(\n    (entry) => entry.heartbeat !== false && now > entry.receivedAt + entry.heartbeat,\n  )\n  if (!hasAnyExpired) {\n    return state\n  }\n  const nextHeartbeats = new Map()\n  const nextQueries = new Map()\n  for (const [key, entry] of state.heartbeats.entries()) {\n    if (entry.heartbeat !== false && now > entry.receivedAt + entry.heartbeat) {\n      continue\n    }\n    nextHeartbeats.set(key, entry)\n    nextQueries.set(key, state.queries.get(key))\n  }\n\n  return {...state, queries: nextQueries, heartbeats: nextHeartbeats}\n}\nfunction queryListen(state: State, {payload}: QueryListenAction): State {\n  const key = getQueryCacheKey(payload.perspective, payload.query, payload.params)\n  const data = {query: payload.query, params: payload.params, perspective: payload.perspective}\n\n  const nextHeartbeats = new Map(state.heartbeats)\n  nextHeartbeats.set(key, {\n    receivedAt: Date.now(),\n    heartbeat: payload.heartbeat,\n  })\n\n  let nextQueries = state.queries\n  /**\n   * The data comes from a postMessage event, which uses the structured clone algorithm to serialize state (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#message).\n   * This impacts `params`, which is an object, as it will be a new object every time even if the sender is sending the same object instance on their end.\n   * It also impacts `perspective`, as it's no longer just a string, but can also be an array of strings.\n   * Both cases are handled by fast-deep-equal, which is used to compare the data before deciding wether the state should be updated.\n   */\n  if (!state.queries.has(key) || !isEqual(state.queries.get(key), data)) {\n    nextQueries = new Map(state.queries)\n    nextQueries.set(key, data)\n  }\n\n  return {heartbeats: nextHeartbeats, queries: nextQueries}\n}\n\nexport function reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'query-listen':\n      return queryListen(state, action)\n    case 'gc':\n      return gc(state)\n    default:\n      throw Error(\n        `Unknown action: ${\n          // oxlint-disable-next-line no-explicit-any\n          (action as any).type\n        }`,\n        {cause: action},\n      )\n  }\n}\n\nexport const initialState: State = {\n  queries: new Map(),\n  heartbeats: new Map(),\n}\n\nexport function useLiveQueries(): [LiveQueriesState, React.ActionDispatch<[action: Action]>] {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(() => {\n    const interval = setInterval(() => dispatch({type: 'gc'}), LOADER_QUERY_GC_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  const queries = useDeferredValue(state.queries)\n  return [queries, dispatch]\n}\n","import {\n  type ClientPerspective,\n  type ContentSourceMap,\n  type LiveEventMessage,\n  type QueryParams,\n  type SyncTag,\n} from '@sanity/client'\nimport {applySourceDocuments, getPublishedId} from '@sanity/client/csm'\nimport {\n  type ChannelInstance,\n  type Controller,\n  createConnectionMachine,\n  type StatusEvent,\n} from '@sanity/comlink'\nimport {\n  createCompatibilityActors,\n  type LoaderControllerMsg,\n  type LoaderNodeMsg,\n} from '@sanity/presentation-comlink'\nimport isEqual from 'fast-deep-equal'\nimport {memo, startTransition, useDeferredValue, useEffect, useMemo, useState} from 'react'\nimport {\n  isReleasePerspective,\n  RELEASES_STUDIO_CLIENT_OPTIONS,\n  type SanityClient,\n  type SanityDocument,\n  useClient,\n  useDataset,\n  useProjectId,\n} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {API_VERSION, MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL} from '../constants'\nimport {type LoaderConnection, type PresentationPerspective} from '../types'\nimport {type DocumentOnPage} from '../useDocumentsOnPage'\nimport {useLiveEvents} from './useLiveEvents'\nimport {useLiveQueries} from './useLiveQueries'\nimport {mapChangedValue} from './utils'\n\nexport interface LiveQueriesProps {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  controller: Controller | undefined\n  perspective: ClientPerspective\n  onLoadersConnection: (event: StatusEvent) => void\n  onDocumentsOnPage: (\n    key: string,\n    perspective: PresentationPerspective,\n    state: DocumentOnPage[],\n  ) => void\n}\n\nexport default function LiveQueries(props: LiveQueriesProps): React.JSX.Element {\n  const {controller, perspective: activePerspective, onLoadersConnection, onDocumentsOnPage} = props\n\n  const [comlink, setComlink] = useState<ChannelInstance<LoaderControllerMsg, LoaderNodeMsg>>()\n  const [liveQueries, liveQueriesDispatch] = useLiveQueries()\n\n  const projectId = useProjectId()\n  const dataset = useDataset()\n\n  useEffect((): (() => void) => {\n    if (controller) {\n      const nextComlink = controller.createChannel<LoaderControllerMsg, LoaderNodeMsg>(\n        {\n          name: 'presentation',\n          connectTo: 'loaders',\n          heartbeat: true,\n        },\n        createConnectionMachine<LoaderControllerMsg, LoaderNodeMsg>().provide({\n          actors: createCompatibilityActors<LoaderControllerMsg>(),\n        }),\n      )\n      setComlink(nextComlink)\n\n      nextComlink.onStatus(onLoadersConnection)\n\n      nextComlink.on('loader/documents', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          onDocumentsOnPage(\n            'loaders',\n            // oxlint-disable-next-line no-explicit-any\n            data.perspective as unknown as any,\n            data.documents,\n          )\n        }\n      })\n\n      nextComlink.on('loader/query-listen', (data) => {\n        if (data.projectId === projectId && data.dataset === dataset) {\n          if (\n            typeof data.heartbeat === 'number' &&\n            data.heartbeat < MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL\n          ) {\n            throw new Error(\n              `Loader query listen heartbeat interval must be at least ${MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL}ms`,\n            )\n          }\n          liveQueriesDispatch({\n            type: 'query-listen',\n            payload: {\n              perspective: data.perspective,\n              query: data.query,\n              params: data.params,\n              heartbeat: data.heartbeat ?? false,\n            },\n          })\n        }\n      })\n\n      return nextComlink.start()\n    }\n    return () => undefined\n  }, [controller, dataset, liveQueriesDispatch, onDocumentsOnPage, onLoadersConnection, projectId])\n\n  const studioClient = useClient(\n    isReleasePerspective(activePerspective)\n      ? RELEASES_STUDIO_CLIENT_OPTIONS\n      : {apiVersion: API_VERSION},\n  )\n  const client = useMemo(\n    () =>\n      studioClient.withConfig({\n        resultSourceMap: 'withKeyArraySelector',\n      }),\n    [studioClient],\n  )\n  useEffect(() => {\n    if (comlink) {\n      comlink.post('loader/perspective', {\n        projectId,\n        dataset,\n        perspective: activePerspective,\n      })\n    }\n  }, [comlink, activePerspective, projectId, dataset])\n\n  /**\n   * Defer the liveDocument to avoid unnecessary rerenders on rapid edits\n   */\n  const liveDocument = useDeferredValue(props.liveDocument)\n\n  const liveEvents = useLiveEvents(client)\n\n  return (\n    <>\n      {[...liveQueries.entries()].map(([key, {query, params, perspective}]) => (\n        <QuerySubscription\n          key={`${liveEvents.resets}:${key}`}\n          projectId={projectId}\n          dataset={dataset}\n          perspective={perspective}\n          query={query}\n          params={params}\n          comlink={comlink}\n          client={client}\n          liveDocument={liveDocument}\n          liveEventsMessages={liveEvents.messages}\n        />\n      ))}\n    </>\n  )\n}\n\ninterface SharedProps {\n  /**\n   * The Sanity client to use for fetching data and listening to mutations.\n   */\n  client: SanityClient\n}\n\ninterface QuerySubscriptionProps\n  extends Pick<UseQuerySubscriptionProps, 'client' | 'liveDocument' | 'liveEventsMessages'> {\n  projectId: string\n  dataset: string\n  perspective: ClientPerspective\n  query: string\n  params: QueryParams\n  comlink: LoaderConnection | undefined\n}\nfunction QuerySubscriptionComponent(props: QuerySubscriptionProps) {\n  const {\n    projectId,\n    dataset,\n    perspective,\n    query,\n    client,\n    liveDocument,\n    params,\n    comlink,\n    liveEventsMessages,\n  } = props\n\n  const {\n    result,\n    resultSourceMap,\n    syncTags: tags,\n  } = useQuerySubscription({\n    client,\n    liveDocument,\n    params,\n    perspective,\n    query,\n    liveEventsMessages,\n  }) || {}\n\n  /* eslint-disable @typescript-eslint/no-shadow,max-params */\n  const handleQueryChange = useEffectEvent(\n    (\n      comlink: LoaderConnection | undefined,\n      perspective: ClientPerspective,\n      query: string,\n      params: QueryParams,\n      result: unknown,\n      resultSourceMap: ContentSourceMap | undefined,\n      tags: `s1:${string}`[] | undefined,\n    ) => {\n      comlink?.post('loader/query-change', {\n        projectId,\n        dataset,\n        perspective,\n        query,\n        params,\n        result,\n        resultSourceMap,\n        tags,\n      })\n    },\n  )\n  /* eslint-enable @typescript-eslint/no-shadow,max-params */\n\n  useEffect(() => {\n    if (resultSourceMap) {\n      handleQueryChange(comlink, perspective, query, params, result, resultSourceMap, tags)\n    }\n    return undefined\n  }, [comlink, params, perspective, query, result, resultSourceMap, tags])\n\n  return null\n}\nconst QuerySubscription = memo(QuerySubscriptionComponent)\nQuerySubscription.displayName = 'Memo(QuerySubscription)'\n\ninterface UseQuerySubscriptionProps extends Required<Pick<SharedProps, 'client'>> {\n  liveDocument: Partial<SanityDocument> | null | undefined\n  query: string\n  params: QueryParams\n  perspective: ClientPerspective\n  liveEventsMessages: LiveEventMessage[]\n}\nfunction useQuerySubscription(props: UseQuerySubscriptionProps) {\n  const {liveDocument, client, query, params, perspective, liveEventsMessages} = props\n  const [result, setResult] = useState<unknown>(null)\n  const [resultSourceMap, setResultSourceMap] = useState<ContentSourceMap | null | undefined>(null)\n  const [syncTags, setSyncTags] = useState<SyncTag[] | undefined>(undefined)\n  const [skipEventIds] = useState(() => new Set(liveEventsMessages.map((msg) => msg.id)))\n  const recentLiveEvents = liveEventsMessages.filter((msg) => !skipEventIds.has(msg.id))\n  const lastLiveEvent = recentLiveEvents.findLast((msg) =>\n    msg.tags.some((tag) => syncTags?.includes(tag)),\n  )\n  const lastLiveEventId = lastLiveEvent?.id\n\n  // Make sure any async errors bubble up to the nearest error boundary\n  const [error, setError] = useState<unknown>(null)\n  if (error) throw error\n\n  /* eslint-disable max-nested-callbacks */\n  useEffect(() => {\n    const controller = new AbortController()\n\n    client\n      .fetch(query, params, {\n        lastLiveEventId,\n        tag: 'presentation-loader',\n        signal: controller.signal,\n        perspective,\n        filterResponse: false,\n        returnQuery: false,\n      })\n      .then((response) => {\n        startTransition(() => {\n          setResult((prev: unknown) => (isEqual(prev, response.result) ? prev : response.result))\n          setResultSourceMap((prev) =>\n            isEqual(prev, response.resultSourceMap) ? prev : response.resultSourceMap,\n          )\n          setSyncTags((prev) => (isEqual(prev, response.syncTags) ? prev : response.syncTags))\n        })\n      })\n      .catch((err) => {\n        if (typeof err !== 'object' || err?.name !== 'AbortError') {\n          setError(err)\n        }\n      })\n\n    return () => {\n      controller.abort()\n    }\n  }, [client, lastLiveEventId, params, perspective, query])\n  /* eslint-enable max-nested-callbacks */\n\n  return useMemo(() => {\n    if (liveDocument && resultSourceMap) {\n      return {\n        result: turboChargeResultIfSourceMap(liveDocument, result, perspective, resultSourceMap),\n        resultSourceMap,\n        syncTags,\n      }\n    }\n    return {result, resultSourceMap, syncTags}\n  }, [liveDocument, perspective, result, resultSourceMap, syncTags])\n}\n\nexport function turboChargeResultIfSourceMap<T = unknown>(\n  liveDocument: Partial<SanityDocument> | null | undefined,\n  result: T,\n  perspective: ClientPerspective,\n  resultSourceMap?: ContentSourceMap,\n): T {\n  if (perspective === 'raw') {\n    throw new Error('turboChargeResultIfSourceMap does not support raw perspective')\n  }\n  return applySourceDocuments(\n    result,\n    resultSourceMap,\n    (sourceDocument) => {\n      // If there's a displayed document, always prefer it\n      if (\n        // If _projectId is set, it's a cross dataset reference and we should skip it\n        !sourceDocument._projectId &&\n        liveDocument?._id &&\n        getPublishedId(liveDocument._id) === getPublishedId(sourceDocument._id)\n      ) {\n        if (typeof liveDocument._id === 'string' && typeof sourceDocument._type === 'string') {\n          return liveDocument as unknown as Required<Pick<SanityDocument, '_id' | '_type'>>\n        }\n        return {\n          ...liveDocument,\n          _id: liveDocument._id || sourceDocument._id,\n          _type: liveDocument._type || sourceDocument._type,\n        }\n      }\n      return null\n    },\n    mapChangedValue,\n    perspective,\n  )\n}\n"],"names":["reducer","state","event","type","messages","resets","Error","cause","initialState","useLiveEvents","client","_c","dispatch","useReducer","error","setError","useState","t0","t1","$","live","subscription","events","includeDrafts","tag","subscribe","next","err","paths.toString","paths.get","unsubscribe","useEffect","useDeferredValue","mapChangedValue","changedValue","previousValue","Array","isArray","length","some","node","isPortableTextBlock","toPlainText","getQueryCacheKey","perspective","query","params","JSON","stringify","gc","queries","size","now","Date","from","heartbeats","values","entry","heartbeat","receivedAt","nextHeartbeats","Map","nextQueries","key","entries","set","get","queryListen","payload","data","has","isEqual","action","useLiveQueries","Symbol","for","interval","setInterval","LOADER_QUERY_GC_INTERVAL","clearInterval","t2","LiveQueries","props","controller","activePerspective","onLoadersConnection","onDocumentsOnPage","comlink","setComlink","liveQueries","liveQueriesDispatch","projectId","useProjectId","dataset","useDataset","nextComlink","createChannel","name","connectTo","createConnectionMachine","provide","actors","createCompatibilityActors","onStatus","on","documents","data_0","MIN_LOADER_QUERY_LISTEN_HEARTBEAT_INTERVAL","start","_temp","isReleasePerspective","RELEASES_STUDIO_CLIENT_OPTIONS","apiVersion","API_VERSION","studioClient","useClient","t3","withConfig","resultSourceMap","t4","t5","post","liveDocument","liveEvents","t6","t7","map","t8","t9","QuerySubscriptionComponent","liveEventsMessages","result","syncTags","tags","useQuerySubscription","comlink_0","perspective_0","query_0","params_0","result_0","resultSourceMap_0","tags_0","handleQueryChange","useEffectEvent","QuerySubscription","memo","displayName","setResult","setResultSourceMap","setSyncTags","undefined","Set","_temp2","skipEventIds","msg_0","msg","id","recentLiveEvents","filter","msg_1","includes","findLast","lastLiveEventId","AbortController","fetch","signal","filterResponse","returnQuery","then","response","startTransition","prev","prev_0","prev_1","catch","abort","bb0","turboChargeResultIfSourceMap","applySourceDocuments","sourceDocument","_projectId","_id","getPublishedId","_type"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8]}