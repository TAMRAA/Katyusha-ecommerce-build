{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/Katyusha-ecommerce/ecommerce-build/lib/imageUrl.ts"],"sourcesContent":["import { client } from \"@/sanity/lib/client\";\nimport imageUrlBuilder from \"@sanity/image-url\";\nimport { SanityImageSource } from \"@sanity/image-url/lib/types/types\";\n\nconst builder = imageUrlBuilder(client);\n\nexport function imageUrl(source: SanityImageSource){\n  return builder.image(source);\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGA,MAAM,UAAU,IAAA,2KAAe,EAAC,iIAAM;AAE/B,SAAS,SAAS,MAAyB;IAChD,OAAO,QAAQ,KAAK,CAAC;AACvB","debugId":null}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/Katyusha-ecommerce/ecommerce-build/lib/stripe.ts"],"sourcesContent":["import Stripe from \"stripe\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error(\"STRIPE_SECRET_KEY is not set\");\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion:\"2025-08-27.basil\", // Use the latest ApiVersion\n});\n\nexport default stripe;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAClC,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,SAAS,IAAI,iKAAM,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IACvD,YAAW;AACb;uCAEe","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/Katyusha-ecommerce/ecommerce-build/actions/createCheckoutSession.ts"],"sourcesContent":["\"use server\";\nimport { BasketItem } from \"@/app/(store)/store/store\";\nimport { imageUrl } from \"@/lib/imageUrl\";\nimport stripe from \"@/lib/stripe\";\nimport { toPlainText } from \"@portabletext/toolkit\";\n\nexport type Metadata = {\n  orderNumber: string;\n  customerName: string;\n  customerEmail: string;\n  clerkUserId: string;\n};\n\nexport type GroupedBasketItem = {\n  product: BasketItem[\"product\"];\n  quantity: number;\n};\n\nexport async function createCheckoutSession(\n  items: GroupedBasketItem[],\n  metadata: Metadata\n) {\n  try {\n    // Check if any grouped items don't have a price\n    const itemsWithoutPrice = items.filter((item) => !item.product.price);\n    if (itemsWithoutPrice.length > 0) {\n      throw new Error(\"Some items do not have a price\");\n    }\n\n    // Log items for debugging\n    console.log(\"Items:\", JSON.stringify(items, null, 2));\n\n    // Search for existing customers by email\n    const customers = await stripe.customers.list({\n      email: metadata.customerEmail,\n      limit: 1,\n    });\n\n    let customerId: string | undefined;\n    if (customers.data.length > 0) {\n      customerId = customers.data[0].id;\n    }\n    const baseUrl =\n      process.env.NODE_ENV === \"production\"\n        ? `https://${process.env.VERCEL_URL}`\n        : `${process.env.NEXT_PUBLIC_BASE_URL}`;\n    const successUrl = `${baseUrl}/success?session_id={CHECKOUT_SESSION_ID}&orderNumber=${metadata.orderNumber}`;\n    const cancelUrl = `${baseUrl}/basket`;\n    // Debugging\n    console.log(\"SUCCESS URL <<<<<<\", successUrl);\n    console.log(\"CANCEL URL <<<<<<\", cancelUrl);\n\n    const session = await stripe.checkout.sessions.create({\n      customer: customerId,\n      customer_creation: customerId ? undefined : \"always\",\n      customer_email: !customerId ? metadata.customerEmail : undefined,\n      metadata,\n      mode: \"payment\",\n      allow_promotion_codes: true,\n      success_url: successUrl,\n      cancel_url: cancelUrl,\n      line_items: items.map((item) => ({\n        price_data: {\n          currency: \"usd\",\n          unit_amount: Math.round(item.product.price! * 100),\n          product_data: {\n            name: item.product.name || \"Unnamed Product\",\n            description: item.product.description\n              ? toPlainText(item.product.description)\n              : undefined,\n            metadata: {\n              id: item.product._id,\n            },\n            images: item.product.image\n              ? [imageUrl(item.product.image).url()]\n              : undefined,\n          },\n        },\n        quantity: item.quantity,\n      })),\n    });\n\n    console.log(\"Stripe session:\", JSON.stringify(session, null, 2));\n    return session.url;\n  } catch (error) {\n    console.error(\"Error creating checkout session:\", error);\n    throw error;\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;;;;;;AAcO,eAAe,sBACpB,KAA0B,EAC1B,QAAkB;IAElB,IAAI;QACF,gDAAgD;QAChD,MAAM,oBAAoB,MAAM,MAAM,CAAC,CAAC,OAAS,CAAC,KAAK,OAAO,CAAC,KAAK;QACpE,IAAI,kBAAkB,MAAM,GAAG,GAAG;YAChC,MAAM,IAAI,MAAM;QAClB;QAEA,0BAA0B;QAC1B,QAAQ,GAAG,CAAC,UAAU,KAAK,SAAS,CAAC,OAAO,MAAM;QAElD,yCAAyC;QACzC,MAAM,YAAY,MAAM,wHAAM,CAAC,SAAS,CAAC,IAAI,CAAC;YAC5C,OAAO,SAAS,aAAa;YAC7B,OAAO;QACT;QAEA,IAAI;QACJ,IAAI,UAAU,IAAI,CAAC,MAAM,GAAG,GAAG;YAC7B,aAAa,UAAU,IAAI,CAAC,EAAE,CAAC,EAAE;QACnC;QACA,MAAM,UACJ,sCACI,0BACA,4DAAqC;QAC3C,MAAM,aAAa,GAAG,QAAQ,sDAAsD,EAAE,SAAS,WAAW,EAAE;QAC5G,MAAM,YAAY,GAAG,QAAQ,OAAO,CAAC;QACrC,YAAY;QACZ,QAAQ,GAAG,CAAC,sBAAsB;QAClC,QAAQ,GAAG,CAAC,qBAAqB;QAEjC,MAAM,UAAU,MAAM,wHAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;YACpD,UAAU;YACV,mBAAmB,aAAa,YAAY;YAC5C,gBAAgB,CAAC,aAAa,SAAS,aAAa,GAAG;YACvD;YACA,MAAM;YACN,uBAAuB;YACvB,aAAa;YACb,YAAY;YACZ,YAAY,MAAM,GAAG,CAAC,CAAC,OAAS,CAAC;oBAC/B,YAAY;wBACV,UAAU;wBACV,aAAa,KAAK,KAAK,CAAC,KAAK,OAAO,CAAC,KAAK,GAAI;wBAC9C,cAAc;4BACZ,MAAM,KAAK,OAAO,CAAC,IAAI,IAAI;4BAC3B,aAAa,KAAK,OAAO,CAAC,WAAW,GACjC,IAAA,yKAAW,EAAC,KAAK,OAAO,CAAC,WAAW,IACpC;4BACJ,UAAU;gCACR,IAAI,KAAK,OAAO,CAAC,GAAG;4BACtB;4BACA,QAAQ,KAAK,OAAO,CAAC,KAAK,GACtB;gCAAC,IAAA,2HAAQ,EAAC,KAAK,OAAO,CAAC,KAAK,EAAE,GAAG;6BAAG,GACpC;wBACN;oBACF;oBACA,UAAU,KAAK,QAAQ;gBACzB,CAAC;QACH;QAEA,QAAQ,GAAG,CAAC,mBAAmB,KAAK,SAAS,CAAC,SAAS,MAAM;QAC7D,OAAO,QAAQ,GAAG;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,MAAM;IACR;AACF;;;IAtEsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/Katyusha-ecommerce/ecommerce-build/app/%28store%29/basket/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(store)/basket/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(store)/basket/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/tamra/Desktop/KatyushaWeb/Websites/Katyusha-ecommerce/ecommerce-build/app/%28store%29/basket/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(store)/basket/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(store)/basket/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}