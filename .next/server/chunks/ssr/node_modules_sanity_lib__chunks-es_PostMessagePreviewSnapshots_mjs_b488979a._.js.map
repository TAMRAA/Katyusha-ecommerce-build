{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/sanity/lib/_chunks-es/PostMessagePreviewSnapshots.mjs","sources":["file:///Users/tamra/Desktop/Katyusha-ecommerce/ecommerce-build/node_modules/sanity/src/presentation/editor/PostMessagePreviewSnapshots.tsx"],"sourcesContent":["import {type ClientPerspective} from '@sanity/client'\nimport {type PreviewSnapshot} from '@sanity/presentation-comlink'\nimport {type FC, memo, useEffect, useMemo, useRef} from 'react'\nimport {\n  combineLatest,\n  debounceTime,\n  filter,\n  map,\n  merge,\n  NEVER,\n  share,\n  skipWhile,\n  Subject,\n  switchMap,\n  takeUntil,\n} from 'rxjs'\nimport {\n  getDraftId,\n  getPublishedId,\n  type PreviewValue,\n  useDocumentPreviewStore,\n  useSchema,\n} from 'sanity'\n\nimport {type VisualEditingConnection} from '../types'\n\ntype Ref = {\n  _id: string\n  _type: string\n}\n\nexport interface PostMessagePreviewsProps {\n  comlink: VisualEditingConnection\n  perspective: ClientPerspective\n  refs: Ref[]\n}\n\nconst PostMessagePreviews: FC<PostMessagePreviewsProps> = (props) => {\n  const {comlink, refs, perspective} = props\n  const documentPreviewStore = useDocumentPreviewStore()\n  const schema = useSchema()\n\n  const refsSubject = useMemo(() => new Subject<Ref[]>(), [])\n\n  const previews$ = useMemo(() => {\n    return refsSubject.asObservable().pipe(\n      switchMap(\n        (\n          // eslint-disable-next-line @typescript-eslint/no-shadow\n          refs,\n        ) => {\n          return combineLatest(\n            refs.map((ref) => {\n              const draftRef = {...ref, _id: getDraftId(ref._id)}\n              const draft$ =\n                perspective === 'published'\n                  ? // Don't emit if not displaying drafts\n                    NEVER\n                  : documentPreviewStore\n                      .observeForPreview(draftRef, schema.get(draftRef._type)!)\n                      .pipe(\n                        // Share to prevent double subscribe in the merge\n                        share(),\n                        // Don't emit if no snapshot is returned\n                        // eslint-disable-next-line max-nested-callbacks\n                        skipWhile((p) => p.snapshot === null),\n                      )\n\n              const publishedRef = {...ref, _id: getPublishedId(ref._id)}\n              const published$ = documentPreviewStore.observeForPreview(\n                publishedRef,\n                schema.get(publishedRef._type)!,\n              )\n\n              return merge(published$.pipe(takeUntil(draft$)), draft$).pipe(\n                // eslint-disable-next-line max-nested-callbacks\n                filter((p) => !!p.snapshot),\n                // eslint-disable-next-line max-nested-callbacks\n                map((p) => {\n                  const snapshot = p.snapshot as PreviewValue & {\n                    _id: string\n                  }\n                  return {\n                    _id: getPublishedId(snapshot._id),\n                    title: snapshot.title,\n                    subtitle: snapshot.subtitle,\n                    description: snapshot.description,\n                    imageUrl: snapshot.imageUrl,\n                  } as PreviewSnapshot\n                }),\n              )\n            }),\n          )\n        },\n      ),\n      debounceTime(0),\n    )\n  }, [documentPreviewStore, refsSubject, schema, perspective])\n\n  const lastSnapshots = useRef<PreviewSnapshot[]>([])\n\n  // Stream preview snapshots when updates are received, and store the last set\n  // of snapshots so they can be returned if explicitly requested\n  useEffect(() => {\n    const sub = previews$.subscribe((snapshots) => {\n      comlink.post('presentation/preview-snapshots', {snapshots})\n      lastSnapshots.current = snapshots\n    })\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [comlink, previews$])\n\n  // Respond to explict requests for preview snapshots. Streaming will not\n  // always suffice as the previews$ subscriber will not be called if the app\n  // reloads but Presentation does not.\n  useEffect(() => {\n    return comlink.on('visual-editing/preview-snapshots', () => ({\n      snapshots: lastSnapshots.current,\n    }))\n  }, [comlink])\n\n  useEffect(() => {\n    refsSubject.next(refs)\n  }, [refs, refsSubject])\n\n  return null\n}\n\nexport default memo(PostMessagePreviews)\n"],"names":["PostMessagePreviews","props","comlink","refs","perspective","documentPreviewStore","useDocumentPreviewStore","schema","useSchema","refsSubject","useMemo","Subject","previews$","asObservable","pipe","switchMap","combineLatest","map","ref","draftRef","_id","getDraftId","draft$","NEVER","observeForPreview","get","_type","share","skipWhile","p","snapshot","publishedRef","getPublishedId","published$","merge","takeUntil","filter","title","subtitle","description","imageUrl","debounceTime","lastSnapshots","useRef","useEffect","sub","subscribe","snapshots","post","current","unsubscribe","on","next","memo"],"mappings":";;;;;;;;;;;AAqCA,MAAMA,sBAAqDC,CAAAA,UAAU;IACnE,MAAM,EAACC,OAAAA,EAASC,IAAAA,EAAMC,WAAAA,EAAAA,GAAeH,OAC/BI,2BAAuBC,kLAAAA,CAAAA,IACvBC,aAASC,oKAAAA,KAETC,kBAAcC,gNAAAA,EAAQ,IAAM,IAAIC,uJAAAA,IAAkB,CAAA,CAAE,GAEpDC,gBAAYF,gNAAAA,EAAQ,IACjBD,YAAYI,YAAAA,CAAAA,EAAeC,IAAAA,KAChCC,yJAAAA,EACE,CAEEZ,aAEOa,6JAAAA,EACLb,OAAKc,GAAAA,CAAKC,CAAAA,QAAQ;gBAChB,MAAMC,WAAW;oBAAC,GAAGD,GAAAA;oBAAKE,SAAKC,4LAAAA,EAAWH,IAAIE,GAAG;gBAAA,GAC3CE,SACJlB,gBAAgB,cAAA,sCAAA;gBAEZmB,qJAAAA,GACAlB,qBACGmB,iBAAAA,CAAkBL,UAAUZ,OAAOkB,GAAAA,CAAIN,SAASO,KAAK,CAAE,EACvDZ,IAAAA,CAAAA,iDAAAA;oBAECa,qJAAAA,CAAAA,IAAAA,wCAAAA;gBAAAA,gDAAAA;oBAGAC,yJAAAA,EAAWC,CAAAA,IAAMA,EAAEC,QAAAA,KAAa,IAAI,IAGxCC,eAAe;oBAAC,GAAGb,GAAAA;oBAAKE,SAAKY,gMAAAA,EAAed,IAAIE,GAAG;gBAAA,GACnDa,aAAa5B,qBAAqBmB,iBAAAA,CACtCO,cACAxB,OAAOkB,GAAAA,CAAIM,aAAaL,KAAK,CAC/B;gBAEA,WAAOQ,qJAAAA,EAAMD,WAAWnB,IAAAA,KAAKqB,yJAAAA,EAAUb,MAAM,CAAC,GAAGA,MAAM,EAAER,IAAAA,CAAAA,gDAAAA;oBAEvDsB,sJAAAA,EAAQP,CAAAA,MAAM,CAAC,CAACA,IAAEC,QAAQ,GAAA,gDAAA;oBAE1Bb,mJAAAA,EAAKY,CAAAA,QAAM;oBACT,MAAMC,WAAWD,IAAEC,QAAAA;oBAGnB,OAAO;wBACLV,SAAKY,gMAAAA,EAAeF,SAASV,GAAG;wBAChCiB,OAAOP,SAASO,KAAAA;wBAChBC,UAAUR,SAASQ,QAAAA;wBACnBC,aAAaT,SAASS,WAAAA;wBACtBC,UAAUV,SAASU,QAAAA;oBAAAA;gBAEvB,CAAC;YAEL,CAAC,CACH,CAEJ,OACAC,4JAAAA,EAAa,CAAC,CAChB,GACC;QAACpC;QAAsBI;QAAaF;QAAQH,WAAW;KAAC,GAErDsC,oBAAgBC,+MAAAA,EAA0B,CAAA,CAAE;IAIlDC,WAAAA,kNAAAA,EAAU,MAAM;QACd,MAAMC,MAAMjC,UAAUkC,SAAAA,CAAWC,CAAAA,cAAc;YAC7C7C,QAAQ8C,IAAAA,CAAK,kCAAkC;gBAACD;YAAAA,CAAU,GAC1DL,cAAcO,OAAAA,GAAUF;QAC1B,CAAC;QAED,OAAO,MAAM;YACXF,IAAIK,WAAAA,CAAAA;QACN;IACF,GAAG;QAAChD;QAASU,SAAS;KAAC,OAKvBgC,kNAAAA,EAAU,IACD1C,QAAQiD,EAAAA,CAAG,oCAAoC,IAAA,CAAO;gBAC3DJ,WAAWL,cAAcO,OAAAA;YAAAA,CAAAA,CACzB,GACD;QAAC/C,OAAO;KAAC,OAEZ0C,kNAAAA,EAAU,MAAM;QACdnC,YAAY2C,IAAAA,CAAKjD,IAAI;IACvB,GAAG;QAACA;QAAMM,WAAW;KAAC,GAEf;AACT;AAEA,IAAA,kCAAe4C,6MAAAA,EAAKrD,mBAAmB","debugId":null}}]
}