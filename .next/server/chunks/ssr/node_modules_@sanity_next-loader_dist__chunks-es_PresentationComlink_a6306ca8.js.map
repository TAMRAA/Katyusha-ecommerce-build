{"version":3,"sources":["turbopack:///[project]/node_modules/@sanity/next-loader/dist/data:810389 <text/javascript>","turbopack:///[project]/node_modules/@sanity/next-loader/src/client-components/live/PresentationComlink.tsx"],"sourcesContent":["/* __next_internal_action_entry_do_not_use__ [{\"7fdb9730c0dc8d5b63135028e2e413023c2657a6cf\":\"setPerspectiveCookie\"},\"node_modules/@sanity/next-loader/dist/server-actions.js\",\"\"] */\"use turbopack no side effects\";import{createServerReference,callServer,findSourceMapURL}from\"private-next-rsc-action-client-wrapper\";export var setPerspectiveCookie=/*#__PURE__*/createServerReference(\"7fdb9730c0dc8d5b63135028e2e413023c2657a6cf\",callServer,void 0,findSourceMapURL,\"setPerspectiveCookie\");","import type {ClientPerspective} from '@sanity/client'\nimport {\n  createNode,\n  createNodeMachine,\n  // type Node,\n} from '@sanity/comlink'\nimport {setPerspectiveCookie} from '@sanity/next-loader/server-actions'\nimport {\n  createCompatibilityActors,\n  type LoaderControllerMsg,\n  type LoaderNodeMsg,\n} from '@sanity/presentation-comlink'\nimport {useRouter} from 'next/navigation.js'\nimport {\n  useEffect,\n  // useState\n} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {setComlink, setComlinkClientConfig} from '../../hooks/context'\n\nfunction PresentationComlink(props: {\n  projectId: string\n  dataset: string\n  // handleDraftModeAction: (secret: string) => Promise<void | string>\n  draftModeEnabled: boolean\n  draftModePerspective: ClientPerspective\n}): React.JSX.Element | null {\n  const {projectId, dataset, draftModeEnabled, draftModePerspective} = props\n  const router = useRouter()\n\n  // const [presentationComlink, setPresentationComlink] = useState<Node<\n  //   LoaderControllerMsg,\n  //   LoaderNodeMsg\n  // > | null>(null)\n\n  useEffect(() => {\n    setComlinkClientConfig(projectId, dataset)\n  }, [dataset, projectId])\n\n  const handlePerspectiveChange = useEffectEvent(\n    (perspective: ClientPerspective, signal: AbortSignal) => {\n      if (draftModeEnabled && perspective !== draftModePerspective) {\n        setPerspectiveCookie(perspective)\n          .then(() => {\n            if (signal.aborted) return\n            router.refresh()\n          })\n          // eslint-disable-next-line no-console\n          .catch((reason) => console.error('Failed to set the preview perspective cookie', reason))\n      }\n    },\n  )\n\n  // const [status, setStatus] = useState('disconnected')\n  useEffect(() => {\n    const comlink = createNode<LoaderNodeMsg, LoaderControllerMsg>(\n      {\n        name: 'loaders',\n        connectTo: 'presentation',\n      },\n      createNodeMachine<LoaderNodeMsg, LoaderControllerMsg>().provide({\n        actors: createCompatibilityActors<LoaderNodeMsg>(),\n      }),\n    )\n\n    // comlink.onStatus((status) => {\n    //   setStatus(status)\n    // })\n\n    let controller: AbortController | undefined\n    comlink.on('loader/perspective', (data) => {\n      controller?.abort()\n      controller = new AbortController()\n      handlePerspectiveChange(data.perspective, controller.signal)\n    })\n\n    const stop = comlink.start()\n    // setPresentationComlink(comlink)\n    setComlink(comlink)\n    // eslint-disable-next-line no-console\n    // console.log('setting comlink', comlink)\n    return () => {\n      // eslint-disable-next-line no-console\n      // console.log('stopping comlink')\n      stop()\n    }\n  }, [])\n\n  // @TODO come back to this later\n  // const handleEnableDraftMode = useEffectEvent(async (signal: AbortSignal) => {\n  //   if (signal.aborted) return\n  //   const {secret} = await (presentationComlink?.fetch(\n  //     {\n  //       type: 'loader/fetch-preview-url-secret' as const,\n  //       data: {projectId, dataset},\n  //     },\n  //     {signal},\n  //   ) || {secret: null})\n  //   if (signal.aborted) return\n  //   const error = await handleDraftModeAction(secret!)\n  //   // eslint-disable-next-line no-console\n  //   // @TODO call another server action here that can tell us if draft mode is actually enabled\n  //   if (error) {\n  //     // @TODO use sonnet or whatever to push a toast with the error\n  //     // eslint-disable-next-line no-console\n  //     console.error('Error enabling draft mode', error)\n  //     return\n  //   }\n  //   // console.log('Draft mode enabled?', {enabled})\n  //   if (signal.aborted) return\n  //   router.refresh()\n  // })\n  // const connected = status === 'connected'\n  // useEffect(() => {\n  //   if (connected && !draftModeEnabled) {\n  //     const controller = new AbortController()\n  //     handleEnableDraftMode(controller.signal).catch((reason) => {\n  //       // eslint-disable-next-line no-console\n  //       console.error('Failed to enable draft mode', reason)\n  //       return handleEnableDraftMode(controller.signal)\n  //     })\n  //     return () => {\n  //       controller.abort()\n  //     }\n  //   }\n  //   return undefined\n  // }, [connected, draftModeEnabled, handleEnableDraftMode])\n\n  return null\n}\nPresentationComlink.displayName = 'PresentationComlink'\n\nexport default PresentationComlink\n"],"names":[],"mappings":"uFAAoN,EAAA,EAAA,CAAA,CAAA,QAAiH,EAAkC,CAAA,EAAA,EAAA,gBAAb,KAAa,AAAqB,EAAC,IAAxB,yCAAqE,EAAA,UAAU,CAAC,KAAK,EAAE,EAAA,gBAAgB,CAAC,6FCoB7c,SAAS,EAAoB,CAAA,EAO3B,AAD2B,GACrB,WAAC,CAAA,SAAW,CAAA,kBAAS,CAAA,sBAAkB,CAAA,CAAA,CAAwB,EAC/D,EAAA,CAAA,EAAS,EAAA,SAAA,CAAA,GAOf,CAAA,EAAA,EAAA,SAAA,EAAU,KACR,CAAA,AADc,EACd,EAAA,sBAAA,EAAuB,EAAW,EACpC,EAAG,CAAC,EADuC,AAC9B,EAAU,EAEvB,IAAM,CAFgB,CAEhB,CAAA,EAA0B,EAAA,cAAA,EAC9B,CAAC,EAAgC,KAC3B,GAAoB,GAD+B,CACf,GACtC,EAAqB,GAClB,IAAA,CAAK,GADwB,EAExB,CADM,CACC,OAAA,EACX,EAAO,OAAA,CAAA,CACT,CAAC,EAEA,KAAA,CAAM,AAAC,GAAW,QAAQ,KAAA,CAAM,+CAAgD,GAEvF,GAIF,AAN+F,CAAC,KAMhG,CAAA,EAAA,EAAA,SAAA,EAAU,KACR,CADc,GAeV,EAdE,EAAA,CAAA,EAAU,EAAA,UAAA,EACd,CACE,KAAM,UACN,UAAW,cAAA,EAAA,CAAA,EAEb,EAAA,iBAAA,CAAA,GAAwD,OAAA,CAAQ,CAC9D,OAAA,CAAA,EAAQ,EAAA,yBAAA,CAAA,EAAyC,CAClD,GAQH,EAAQ,EAAA,CAAG,qBAAuB,AAAD,IAC/B,GAAY,EAD6B,IAC7B,EACZ,EAAa,IAAI,gBAAA,AACjB,EAAwB,EAAK,WAAA,CAAa,EAAW,MAAM,CAC7D,CAAC,EAED,IAAM,EAAO,EAAQ,KAAA,CAAA,EAErB,MAAA,CAAA,EAAA,EAAA,UAAA,EAAW,GAGJ,IAHW,CAMhB,CAHW,EAIb,CACF,CAFI,CAED,CAAA,CAAE,EA0CE,IACT,CACA,EAAoB,WAAA,CAAc","ignoreList":[0,1]}