{"version":3,"sources":["turbopack:///[project]/node_modules/@clerk/nextjs/dist/esm/server/keyless.js","turbopack:///[project]/node_modules/@clerk/nextjs/dist/esm/app-router/keyless-actions.js","turbopack:///[project]/sanity/lib/client.ts","turbopack:///[project]/sanity/env.ts","turbopack:///[project]/node_modules/@sanity/next-loader/dist/client-components/live.js/__nextjs-internal-proxy.mjs","turbopack:///[project]/node_modules/@sanity/next-loader/src/client-components/live/SanityLive.tsx","turbopack:///[project]/node_modules/@sanity/next-loader/dist/client-components/live-stream.js/__nextjs-internal-proxy.mjs","turbopack:///[project]/node_modules/@sanity/next-loader/src/client-components/live-stream/SanityLiveStreamLazy.tsx","turbopack:///[project]/sanity/lib/live.ts","turbopack:///[project]/node_modules/@sanity/next-loader/src/isCorsOriginError.ts","turbopack:///[project]/node_modules/@sanity/next-loader/src/resolveCookiePerspective.ts","turbopack:///[project]/node_modules/@sanity/next-loader/src/defineLive.tsx","turbopack:///[project]/node_modules/@clerk/backend/src/jwt/legacyReturn.ts","turbopack:///[project]/node_modules/@clerk/shared/dist/chunk-RHZEJGFD.mjs","turbopack:///[project]/node_modules/@clerk/backend/dist/index.mjs","turbopack:///[project]/node_modules/@clerk/nextjs/dist/esm/server/createClerkClient.js","turbopack:///[project]/node_modules/@clerk/shared/dist/telemetry.mjs"],"sourcesContent":["import \"../chunk-BUSYA2B4.js\";\nimport { canUseKeyless } from \"../utils/feature-flags\";\nconst keylessCookiePrefix = `__clerk_keys_`;\nasync function hashString(str) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(str);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  return hashHex.slice(0, 16);\n}\nasync function getKeylessCookieName() {\n  const PATH = process.env.PWD;\n  if (!PATH) {\n    return `${keylessCookiePrefix}${0}`;\n  }\n  const lastThreeDirs = PATH.split(\"/\").filter(Boolean).slice(-3).reverse().join(\"/\");\n  const hash = await hashString(lastThreeDirs);\n  return `${keylessCookiePrefix}${hash}`;\n}\nasync function getKeylessCookieValue(getter) {\n  if (!canUseKeyless) {\n    return void 0;\n  }\n  const keylessCookieName = await getKeylessCookieName();\n  let keyless;\n  try {\n    if (keylessCookieName) {\n      keyless = JSON.parse(getter(keylessCookieName) || \"{}\");\n    }\n  } catch {\n    keyless = void 0;\n  }\n  return keyless;\n}\nexport {\n  getKeylessCookieName,\n  getKeylessCookieValue\n};\n//# sourceMappingURL=keyless.js.map","\"use server\";\nimport { cookies, headers } from \"next/headers\";\nimport { redirect, RedirectType } from \"next/navigation\";\nimport { errorThrower } from \"../server/errorThrower\";\nimport { detectClerkMiddleware } from \"../server/headers-utils\";\nimport { getKeylessCookieName, getKeylessCookieValue } from \"../server/keyless\";\nimport { canUseKeyless } from \"../utils/feature-flags\";\nconst keylessCookieConfig = {\n  secure: false,\n  httpOnly: false,\n  sameSite: \"lax\"\n};\nasync function syncKeylessConfigAction(args) {\n  const { claimUrl, publishableKey, secretKey, returnUrl } = args;\n  const cookieStore = await cookies();\n  const request = new Request(\"https://placeholder.com\", { headers: await headers() });\n  const keyless = await getKeylessCookieValue((name) => {\n    var _a;\n    return (_a = cookieStore.get(name)) == null ? void 0 : _a.value;\n  });\n  const pksMatch = (keyless == null ? void 0 : keyless.publishableKey) === publishableKey;\n  const sksMatch = (keyless == null ? void 0 : keyless.secretKey) === secretKey;\n  if (pksMatch && sksMatch) {\n    return;\n  }\n  cookieStore.set(\n    await getKeylessCookieName(),\n    JSON.stringify({ claimUrl, publishableKey, secretKey }),\n    keylessCookieConfig\n  );\n  if (detectClerkMiddleware(request)) {\n    redirect(`/clerk-sync-keyless?returnUrl=${returnUrl}`, RedirectType.replace);\n    return;\n  }\n  return;\n}\nasync function createOrReadKeylessAction() {\n  if (!canUseKeyless) {\n    return null;\n  }\n  const result = await import(\"../server/keyless-node.js\").then((m) => m.createOrReadKeyless()).catch(() => null);\n  if (!result) {\n    errorThrower.throwMissingPublishableKeyError();\n    return null;\n  }\n  const { clerkDevelopmentCache, createKeylessModeMessage } = await import(\"../server/keyless-log-cache.js\");\n  clerkDevelopmentCache == null ? void 0 : clerkDevelopmentCache.log({\n    cacheKey: result.publishableKey,\n    msg: createKeylessModeMessage(result)\n  });\n  const { claimUrl, publishableKey, secretKey, apiKeysUrl } = result;\n  void (await cookies()).set(\n    await getKeylessCookieName(),\n    JSON.stringify({ claimUrl, publishableKey, secretKey }),\n    keylessCookieConfig\n  );\n  return {\n    claimUrl,\n    publishableKey,\n    apiKeysUrl\n  };\n}\nasync function deleteKeylessAction() {\n  if (!canUseKeyless) {\n    return;\n  }\n  await import(\"../server/keyless-node.js\").then((m) => m.removeKeyless()).catch(() => {\n  });\n  return;\n}\nasync function detectKeylessEnvDriftAction() {\n  if (!canUseKeyless) {\n    return;\n  }\n  try {\n    const { detectKeylessEnvDrift } = await import(\"../server/keyless-telemetry.js\");\n    await detectKeylessEnvDrift();\n  } catch {\n  }\n}\nexport {\n  createOrReadKeylessAction,\n  deleteKeylessAction,\n  detectKeylessEnvDriftAction,\n  syncKeylessConfigAction\n};\n","import { createClient } from 'next-sanity'\n\nimport { apiVersion, dataset, projectId } from '../env'\n\nexport const client = createClient({\n  projectId,\n  dataset,\n  apiVersion,\n  useCdn: true, // Set to false if statically generating pages, using ISR or tag-based revalidation\n  stega: {\n    studioUrl: process.env.NODE_ENV === \"production\"\n      ? `https://${process.env.VERCEL_URL}/studio`\n      : `${process.env.NEXT_PUBLIC_BASE_URL}/studio`,\n  },\n});\n","export const apiVersion =\n  process.env.NEXT_PUBLIC_SANITY_API_VERSION || '2025-09-16'\n\nexport const dataset = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_DATASET,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_DATASET'\n)\n\nexport const projectId = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_PROJECT_ID'\n)\n\nfunction assertValue<T>(v: T | undefined, errorMessage: string): T {\n  if (v === undefined) {\n    throw new Error(errorMessage)\n  }\n\n  return v\n}\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/node_modules/@sanity/next-loader/dist/client-components/live.js from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@sanity/next-loader/dist/client-components/live.js\",\n    \"default\",\n);\n","import {\n  createClient,\n  type ClientPerspective,\n  type InitializedClientConfig,\n  type LiveEvent,\n  type LiveEventGoAway,\n  type SyncTag,\n} from '@sanity/client'\nimport {revalidateSyncTags as defaultRevalidateSyncTags} from '@sanity/next-loader/server-actions'\nimport {isMaybePresentation, isMaybePreviewWindow} from '@sanity/presentation-comlink'\nimport dynamic from 'next/dynamic'\nimport {useRouter} from 'next/navigation.js'\nimport {useEffect, useMemo, useRef, useState} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {setEnvironment, setPerspective} from '../../hooks/context'\nimport {isCorsOriginError} from '../../isCorsOriginError'\n\nconst PresentationComlink = dynamic(() => import('./PresentationComlink'), {ssr: false})\nconst RefreshOnMount = dynamic(() => import('./RefreshOnMount'), {ssr: false})\nconst RefreshOnFocus = dynamic(() => import('./RefreshOnFocus'), {ssr: false})\nconst RefreshOnReconnect = dynamic(() => import('./RefreshOnReconnect'), {ssr: false})\n\n/**\n * @public\n */\nexport interface SanityLiveProps\n  extends Pick<\n    InitializedClientConfig,\n    | 'projectId'\n    | 'dataset'\n    | 'apiHost'\n    | 'apiVersion'\n    | 'useProjectHostname'\n    | 'token'\n    | 'requestTagPrefix'\n  > {\n  // handleDraftModeAction: (secret: string) => Promise<void | string>\n  draftModeEnabled: boolean\n  draftModePerspective?: ClientPerspective\n  refreshOnMount?: boolean\n  refreshOnFocus?: boolean\n  refreshOnReconnect?: boolean\n  requestTag: string | undefined\n  /**\n   * Handle errors from the Live Events subscription.\n   * By default it's reported using `console.error`, you can override this prop to handle it in your own way.\n   */\n  onError?: (error: unknown) => void\n  intervalOnGoAway?: number | false\n  onGoAway?: (event: LiveEventGoAway, intervalOnGoAway: number | false) => void\n  revalidateSyncTags?: (tags: SyncTag[]) => Promise<void | 'refresh'>\n}\n\nfunction handleError(error: unknown) {\n  /* eslint-disable no-console */\n  if (isCorsOriginError(error)) {\n    console.warn(\n      `Sanity Live is unable to connect to the Sanity API as the current origin - ${window.origin} - is not in the list of allowed CORS origins for this Sanity Project.`,\n      error.addOriginUrl && `Add it here:`,\n      error.addOriginUrl?.toString(),\n    )\n  } else {\n    console.error(error)\n  }\n  /* eslint-enable no-console */\n}\n\nfunction handleOnGoAway(event: LiveEventGoAway, intervalOnGoAway: number | false) {\n  /* eslint-disable no-console */\n  if (intervalOnGoAway) {\n    console.warn(\n      'Sanity Live connection closed, switching to long polling set to a interval of',\n      intervalOnGoAway / 1000,\n      'seconds and the server gave this reason:',\n      event.reason,\n    )\n  } else {\n    console.error(\n      'Sanity Live connection closed, automatic revalidation is disabled, the server gave this reason:',\n      event.reason,\n    )\n  }\n  /* eslint-enable no-console */\n}\n\n/**\n * @public\n */\nexport function SanityLive(props: SanityLiveProps): React.JSX.Element | null {\n  const {\n    projectId,\n    dataset,\n    apiHost,\n    apiVersion,\n    useProjectHostname,\n    token,\n    requestTagPrefix,\n    // handleDraftModeAction,\n    draftModeEnabled,\n    draftModePerspective,\n    refreshOnMount = false,\n    refreshOnFocus = draftModeEnabled\n      ? false\n      : typeof window === 'undefined'\n        ? true\n        : window.self === window.top,\n    refreshOnReconnect = true,\n    intervalOnGoAway = 30_000,\n    requestTag = 'next-loader.live',\n    onError = handleError,\n    onGoAway = handleOnGoAway,\n    revalidateSyncTags = defaultRevalidateSyncTags,\n  } = props\n\n  const client = useMemo(\n    () =>\n      createClient({\n        projectId,\n        dataset,\n        apiHost,\n        apiVersion,\n        useProjectHostname,\n        ignoreBrowserTokenWarning: true,\n        token,\n        useCdn: false,\n        requestTagPrefix,\n      }),\n    [apiHost, apiVersion, dataset, projectId, requestTagPrefix, token, useProjectHostname],\n  )\n  const [longPollingInterval, setLongPollingInterval] = useState<number | false>(false)\n\n  /**\n   * 1. Handle Live Events and call revalidateTag or router.refresh when needed\n   */\n  const router = useRouter()\n  const handleLiveEvent = useEffectEvent((event: LiveEvent) => {\n    if (process.env.NODE_ENV !== 'production' && event.type === 'welcome') {\n      // eslint-disable-next-line no-console\n      console.info(\n        'Sanity is live with',\n        token\n          ? 'automatic revalidation for draft content changes as well as published content'\n          : draftModeEnabled\n            ? 'automatic revalidation for only published content. Provide a `browserToken` to `defineLive` to support draft content outside of Presentation Tool.'\n            : 'automatic revalidation of published content',\n      )\n      // Disable long polling when welcome event is received, this is a no-op if long polling is already disabled\n      setLongPollingInterval(false)\n    } else if (event.type === 'message') {\n      revalidateSyncTags(event.tags).then((result) => {\n        if (result === 'refresh') router.refresh()\n      })\n    } else if (event.type === 'restart' || event.type === 'reconnect') {\n      router.refresh()\n    } else if (event.type === 'goaway') {\n      onGoAway(event, intervalOnGoAway)\n      setLongPollingInterval(intervalOnGoAway)\n    }\n  })\n  useEffect(() => {\n    const subscription = client.live.events({includeDrafts: !!token, tag: requestTag}).subscribe({\n      next: handleLiveEvent,\n      error: (err: unknown) => {\n        // console.error('What?', err)\n        onError(err)\n      },\n    })\n    return () => subscription.unsubscribe()\n  }, [client.live, onError, requestTag, token])\n\n  /**\n   * 2. Notify what perspective we're in, when in Draft Mode\n   */\n  useEffect(() => {\n    if (draftModeEnabled && draftModePerspective) {\n      setPerspective(draftModePerspective)\n    } else {\n      setPerspective('unknown')\n    }\n  }, [draftModeEnabled, draftModePerspective])\n\n  const [loadComlink, setLoadComlink] = useState(false)\n  /**\n   * 3. Notify what environment we're in, when in Draft Mode\n   */\n  useEffect(() => {\n    // If we might be in Presentation Tool, then skip detecting here as it's handled later\n    if (isMaybePresentation()) return\n\n    // If we're definitely not in Presentation Tool, then we can set the environment as stand-alone live preview\n    // if we have both a browser token, and draft mode is enabled\n    if (draftModeEnabled && token) {\n      setEnvironment('live')\n      return\n    }\n    // If we're in draft mode, but don't have a browser token, then we're in static mode\n    // which means that published content is still live, but draft changes likely need manual refresh\n    if (draftModeEnabled) {\n      setEnvironment('static')\n      return\n    }\n\n    // Fallback to `unknown` otherwise, as we simply don't know how it's setup\n    setEnvironment('unknown')\n    return\n  }, [draftModeEnabled, token])\n\n  /**\n   * 4. If Presentation Tool is detected, load up the comlink and integrate with it\n   */\n  useEffect(() => {\n    if (!isMaybePresentation()) return\n    const controller = new AbortController()\n    // Wait for a while to see if Presentation Tool is detected, before assuming the env to be stand-alone live preview\n    const timeout = setTimeout(() => setEnvironment('live'), 3_000)\n    window.addEventListener(\n      'message',\n      ({data}: MessageEvent<unknown>) => {\n        if (\n          data &&\n          typeof data === 'object' &&\n          'domain' in data &&\n          data.domain === 'sanity/channels' &&\n          'from' in data &&\n          data.from === 'presentation'\n        ) {\n          clearTimeout(timeout)\n          setEnvironment(isMaybePreviewWindow() ? 'presentation-window' : 'presentation-iframe')\n          setLoadComlink(true)\n          controller.abort()\n        }\n      },\n      {signal: controller.signal},\n    )\n    return () => {\n      clearTimeout(timeout)\n      controller.abort()\n    }\n  }, [])\n\n  /**\n   * 5. Warn if draft mode is being disabled\n   * @TODO move logic into PresentationComlink, or maybe VisualEditing?\n   */\n  const draftModeEnabledWarnRef = useRef<ReturnType<typeof setTimeout> | undefined>(undefined)\n  useEffect(() => {\n    if (!draftModeEnabled) return\n    clearTimeout(draftModeEnabledWarnRef.current)\n    return () => {\n      draftModeEnabledWarnRef.current = setTimeout(() => {\n        // eslint-disable-next-line no-console\n        console.warn('Sanity Live: Draft mode was enabled, but is now being disabled')\n      })\n    }\n  }, [draftModeEnabled])\n\n  /**\n   * 6. Handle switching to long polling when needed\n   */\n  useEffect(() => {\n    if (!longPollingInterval) return\n    const interval = setInterval(() => router.refresh(), longPollingInterval)\n    return () => clearInterval(interval)\n  }, [longPollingInterval, router])\n\n  return (\n    <>\n      {draftModeEnabled && loadComlink && (\n        <PresentationComlink\n          projectId={projectId!}\n          dataset={dataset!}\n          // handleDraftModeAction={handleDraftModeAction}\n          draftModeEnabled={draftModeEnabled}\n          draftModePerspective={draftModePerspective!}\n        />\n      )}\n      {!draftModeEnabled && refreshOnMount && <RefreshOnMount />}\n      {!draftModeEnabled && refreshOnFocus && <RefreshOnFocus />}\n      {!draftModeEnabled && refreshOnReconnect && <RefreshOnReconnect />}\n    </>\n  )\n}\nSanityLive.displayName = 'SanityLive'\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/node_modules/@sanity/next-loader/dist/client-components/live-stream.js from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@sanity/next-loader/dist/client-components/live-stream.js\",\n    \"default\",\n);\n","/**\n * This file works around a new restriction in Next v15 where server components are not allowed\n * to use dynamic(() => import('...), {ssr: false})\n * only Client Components can set ssr: false.\n */\n\nimport dynamic from 'next/dynamic'\nimport type {SanityLiveStreamProps} from './SanityLiveStream'\n\nconst SanityLiveStreamClientComponent = dynamic(() => import('./SanityLiveStream'), {ssr: false})\n\nexport function SanityLiveStreamLazyClientComponent(props: SanityLiveStreamProps): React.ReactNode {\n  return <SanityLiveStreamClientComponent {...props} />\n}\n","import \"server-only\";\n\nimport { defineLive } from \"next-sanity/live\";\nimport { client } from \"@/sanity/lib/client\";\n\n// Set your viewer token\nconst token = process.env.SANITY_API_READ_TOKEN;\nif(!token){\n  throw new Error(\"Missing SANITY_API_READ_TOKEN\");\n}\n\nexport const { sanityFetch, SanityLive } = defineLive({\n  client,\n  serverToken: token,\n  browserToken: token,\n  fetchOptions:{\n    revalidate: 0,\n  },\n})","import {CorsOriginError} from '@sanity/client'\n\n/** @public */\nexport function isCorsOriginError(error: unknown): error is CorsOriginError {\n  return error instanceof CorsOriginError\n}\n\nexport type {CorsOriginError}\n","/// <reference types=\"next\" />\n\nimport type {ClientPerspective} from '@sanity/client'\nimport {perspectiveCookieName} from '@sanity/preview-url-secret/constants'\nimport {cookies, draftMode} from 'next/headers.js'\nimport {sanitizePerspective} from './utils'\n\n/**\n * @internal\n */\nexport async function resolveCookiePerspective(): Promise<Exclude<ClientPerspective, 'raw'>> {\n  return (await draftMode()).isEnabled\n    ? (await cookies()).has(perspectiveCookieName)\n      ? sanitizePerspective((await cookies()).get(perspectiveCookieName)?.value, 'drafts')\n      : 'drafts'\n    : 'published'\n}\n","/// <reference types=\"next\" />\n/// <reference types=\"react/experimental\" />\n\nimport {prefetchDNS, preconnect} from 'react-dom'\nimport {\n  type ClientPerspective,\n  type ClientReturn,\n  type ContentSourceMap,\n  type LiveEventGoAway,\n  type QueryParams,\n  type SanityClient,\n  type SyncTag,\n} from '@sanity/client'\nimport SanityLiveClientComponent from '@sanity/next-loader/client-components/live'\nimport SanityLiveStreamClientComponent from '@sanity/next-loader/client-components/live-stream'\n// import {handleDraftModeActionMissing} from '@sanity/next-loader/server-actions'\n// import {validateSecret} from '@sanity/preview-url-secret/validate-secret'\nimport {draftMode} from 'next/headers.js'\nimport {resolveCookiePerspective} from './resolveCookiePerspective'\n\n/**\n * @public\n */\nexport type DefinedSanityFetchType = <const QueryString extends string>(options: {\n  query: QueryString\n  params?: QueryParams | Promise<QueryParams>\n  /**\n   * Add custom `next.tags` to the underlying fetch request.\n   * @see https://nextjs.org/docs/app/api-reference/functions/fetch#optionsnexttags\n   * This can be used in conjunction with custom fallback revalidation strategies, as well as with custom Server Actions that mutate data and want to render with fresh data right away (faster than the Live Event latency).\n   * @defaultValue `['sanity']`\n   */\n  tags?: string[]\n  perspective?: Exclude<ClientPerspective, 'raw'>\n  stega?: boolean\n  /**\n   * @deprecated use `requestTag` instead\n   */\n  tag?: never\n  /**\n   * This request tag is used to identify the request when viewing request logs from your Sanity Content Lake.\n   * @see https://www.sanity.io/docs/reference-api-request-tags\n   * @defaultValue 'next-loader.fetch'\n   */\n  requestTag?: string\n}) => Promise<{\n  data: ClientReturn<QueryString>\n  sourceMap: ContentSourceMap | null\n  tags: string[]\n}>\n\n/**\n * @public\n */\nexport type DefinedSanityLiveStreamType = <const QueryString extends string>(props: {\n  query: QueryString\n  params?: QueryParams | Promise<QueryParams>\n  /**\n   * Add custom `next.tags` to the underlying fetch request.\n   * @see https://nextjs.org/docs/app/api-reference/functions/fetch#optionsnexttags\n   * This can be used in conjunction with custom fallback revalidation strategies, as well as with custom Server Actions that mutate data and want to render with fresh data right away (faster than the Live Event latency).\n   * @defaultValue `['sanity']`\n   */\n  tags?: string[]\n  perspective?: Exclude<ClientPerspective, 'raw'>\n  stega?: boolean\n  /**\n   * @deprecated use `requestTag` instead\n   */\n  tag?: never\n  /**\n   * This request tag is used to identify the request when viewing request logs from your Sanity Content Lake.\n   * @see https://www.sanity.io/docs/reference-api-request-tags\n   * @defaultValue 'next-loader.live-stream.fetch'\n   */\n  requestTag?: string\n  children: (result: {\n    data: ClientReturn<QueryString>\n    sourceMap: ContentSourceMap | null\n    tags: string[]\n  }) => Promise<Awaited<React.ReactNode>>\n  // @TODO follow up on this after React 19: https://github.com/vercel/next.js/discussions/67365#discussioncomment-9935377\n  // }) => Promise<Awaited<React.ReactNode>>\n}) => React.ReactNode\n\n/**\n * @public\n */\nexport interface DefinedSanityLiveProps {\n  /**\n   * Automatic refresh of RSC when the component <SanityLive /> is mounted.\n   * Note that this is different from revalidation, which is based on tags and causes `sanityFetch` calls to be re-fetched.\n   * @defaultValue `true`\n   */\n  refreshOnMount?: boolean\n  /**\n   * Automatically refresh when window gets focused\n   * Note that this is different from revalidation, which is based on tags and causes `sanityFetch` calls to be re-fetched.\n   * @defaultValue `false` if draftMode().isEnabled, otherwise `true` if not inside an iframe\n   */\n  refreshOnFocus?: boolean\n  /**\n   * Automatically refresh when the browser regains a network connection (via navigator.onLine)\n   * Note that this is different from revalidation, which is based on tags and causes `sanityFetch` calls to be re-fetched.\n   * @defaultValue `true`\n   */\n  refreshOnReconnect?: boolean\n  /**\n   * Automatically refresh on an interval when the Live Event API emits a `goaway` event, which indicates that the connection is rejected or closed.\n   * This typically happens if the connection limit is reached, or if the connection is idle for too long.\n   * To disable this long polling fallback behavior set `intervalOnGoAway` to `false` or `0`.\n   * You can also use `onGoAway` to handle the `goaway` event in your own way, and read the reason why the event was emitted.\n   * @defaultValue `30_000` 30 seconds interval\n   */\n  intervalOnGoAway?: number | false\n\n  /**\n   * @deprecated use `requestTag` instead\n   */\n  tag?: never\n\n  /**\n   * This request tag is used to identify the request when viewing request logs from your Sanity Content Lake.\n   * @see https://www.sanity.io/docs/reference-api-request-tags\n   * @defaultValue 'next-loader.live'\n   */\n  requestTag?: string\n\n  /**\n   * Handle errors from the Live Events subscription.\n   * By default it's reported using `console.error`, you can override this prop to handle it in your own way.\n   */\n  onError?: (error: unknown) => void\n\n  /**\n   * Handle the `goaway` event if the connection is rejected/closed.\n   * `event.reason` will be a string of why the event was emitted, for example `'connection limit reached'`.\n   * When this happens the `<SanityLive />` will fallback to long polling with a default interval of 30 seconds, providing your own `onGoAway` handler does not change this behavior.\n   * If you want to disable long polling set `intervalOnGoAway` to `false` or `0`.\n   */\n  onGoAway?: (event: LiveEventGoAway, intervalOnGoAway: number | false) => void\n\n  /**\n   * Override how cache tags are invalidated, you need to pass a server action here.\n   * You can also pass a `use client` function here, and have `router.refresh()` be called if the promise resolves to `'refresh'`.\n   */\n  revalidateSyncTags?: (tags: SyncTag[]) => Promise<void | 'refresh'>\n}\n\n/**\n * @public\n */\nexport interface DefineSanityLiveOptions {\n  /**\n   * Required for `sanityFetch` and `SanityLive` to work\n   */\n  client: SanityClient\n  /**\n   * Optional. If provided then the token needs to have permissions to query documents with `drafts.` prefixes in order for `perspective: 'drafts'` to work.\n   * This token is not shared with the browser.\n   */\n  serverToken?: string | false\n  /**\n   * Optional. This token is shared with the browser, and should only have access to query published documents.\n   * It is used to setup a `Live Draft Content` EventSource connection, and enables live previewing drafts stand-alone, outside of Presentation Tool.\n   */\n  browserToken?: string | false\n  /**\n   * Fetch options used by `sanityFetch`\n   */\n  fetchOptions?: {\n    /**\n     * Optional, enables time based revalidation in addition to the EventSource connection.\n     * @defaultValue `false`\n     */\n    revalidate?: number | false\n  }\n  /**\n   * Optional. Include stega encoding when draft mode is enabled.\n   *  @defaultValue `true`\n   */\n  stega?: boolean\n}\n\n// export type VerifyPreviewSecretType = (\n//   secret: string,\n// ) => Promise<{isValid: boolean; studioUrl: string | null}>\n\n/**\n * @public\n */\nexport function defineLive(config: DefineSanityLiveOptions): {\n  /**\n   * Use this function to fetch data from Sanity in your React Server Components.\n   * @public\n   */\n  sanityFetch: DefinedSanityFetchType\n  /**\n   * Render this in your root layout.tsx to make your page revalidate on new content live, automatically.\n   * @public\n   */\n  SanityLive: React.ComponentType<DefinedSanityLiveProps>\n  /**\n   * @alpha experimental, it may change or even be removed at any time\n   */\n  SanityLiveStream: DefinedSanityLiveStreamType\n  // verifyPreviewSecret: VerifyPreviewSecretType\n} {\n  const {\n    client: _client,\n    serverToken,\n    browserToken,\n    fetchOptions,\n    stega: stegaEnabled = true,\n  } = config\n\n  if (!_client) {\n    throw new Error('`client` is required for `defineLive` to function')\n  }\n\n  if (process.env.NODE_ENV !== 'production' && !serverToken && serverToken !== false) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'No `serverToken` provided to `defineLive`. This means that only published content will be fetched and respond to live events. You can silence this warning by setting `serverToken: false`.',\n    )\n  }\n\n  if (process.env.NODE_ENV !== 'production' && !browserToken && browserToken !== false) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'No `browserToken` provided to `defineLive`. This means that live previewing drafts will only work when using the Presentation Tool in your Sanity Studio. To support live previewing drafts stand-alone, provide a `browserToken`. It is shared with the browser so it should only have Viewer rights or lower. You can silence this warning by setting `browserToken: false`.',\n    )\n  }\n\n  const client = _client.withConfig({allowReconfigure: false, useCdn: false})\n  const {token: originalToken} = client.config()\n  const studioUrlDefined = typeof client.config().stega.studioUrl !== 'undefined'\n\n  const sanityFetch: DefinedSanityFetchType = async function sanityFetch<\n    const QueryString extends string,\n  >({\n    query,\n    params = {},\n    stega: _stega,\n    tags = ['sanity'],\n    perspective: _perspective,\n    tag,\n    requestTag = tag ?? 'next-loader.fetch',\n  }: {\n    query: QueryString\n    params?: QueryParams | Promise<QueryParams>\n    stega?: boolean\n    tags?: string[]\n    perspective?: Exclude<ClientPerspective, 'raw'>\n    tag?: string\n    requestTag?: string\n  }) {\n    const stega = _stega ?? (stegaEnabled && studioUrlDefined && (await draftMode()).isEnabled)\n    const perspective = _perspective ?? (await resolveCookiePerspective())\n    const useCdn = perspective === 'published'\n    const revalidate =\n      fetchOptions?.revalidate !== undefined\n        ? fetchOptions.revalidate\n        : process.env.NODE_ENV === 'production'\n          ? false\n          : undefined\n\n    // fetch the tags first, with revalidate to 1s to ensure we get the latest tags, eventually\n    const {syncTags} = await client.fetch(query, await params, {\n      filterResponse: false,\n      perspective: perspective as ClientPerspective,\n      stega: false,\n      returnQuery: false,\n      next: {revalidate, tags: [...tags, 'sanity:fetch-sync-tags']},\n      useCdn,\n      cacheMode: useCdn ? 'noStale' : undefined,\n      tag: [requestTag, 'fetch-sync-tags'].filter(Boolean).join('.'),\n    })\n\n    const cacheTags = [...tags, ...(syncTags?.map((tag) => `sanity:${tag}`) || [])]\n\n    const {result, resultSourceMap} = await client.fetch(query, await params, {\n      filterResponse: false,\n      perspective: perspective as ClientPerspective,\n      stega,\n      token: perspective !== 'published' && serverToken ? serverToken : originalToken,\n      next: {revalidate, tags: cacheTags},\n      useCdn,\n      cacheMode: useCdn ? 'noStale' : undefined,\n      tag: requestTag,\n    })\n    return {data: result, sourceMap: resultSourceMap || null, tags: cacheTags}\n  }\n\n  const SanityLive: React.ComponentType<DefinedSanityLiveProps> = async function SanityLive(props) {\n    const {\n      // handleDraftModeAction = handleDraftModeActionMissing\n      refreshOnMount,\n      refreshOnFocus,\n      refreshOnReconnect,\n      tag,\n      requestTag = tag,\n      onError,\n      onGoAway,\n      intervalOnGoAway,\n      revalidateSyncTags,\n    } = props\n    const {projectId, dataset, apiHost, apiVersion, useProjectHostname, requestTagPrefix} =\n      client.config()\n    const {isEnabled: isDraftModeEnabled} = await draftMode()\n\n    // Preconnect to the Live Event API origin, or at least prefetch the DNS if preconenct is not supported\n    const {origin} = new URL(client.getUrl('', false))\n    preconnect(origin)\n    prefetchDNS(origin)\n\n    return (\n      <SanityLiveClientComponent\n        projectId={projectId}\n        dataset={dataset}\n        apiHost={apiHost}\n        apiVersion={apiVersion}\n        useProjectHostname={useProjectHostname}\n        requestTagPrefix={requestTagPrefix}\n        requestTag={requestTag}\n        token={typeof browserToken === 'string' && isDraftModeEnabled ? browserToken : undefined}\n        draftModeEnabled={isDraftModeEnabled}\n        // handleDraftModeAction={handleDraftModeAction}\n        draftModePerspective={await resolveCookiePerspective()}\n        refreshOnMount={refreshOnMount}\n        refreshOnFocus={refreshOnFocus}\n        refreshOnReconnect={refreshOnReconnect}\n        onError={onError}\n        onGoAway={onGoAway}\n        intervalOnGoAway={intervalOnGoAway}\n        revalidateSyncTags={revalidateSyncTags}\n      />\n    )\n  }\n\n  const SanityLiveStream: DefinedSanityLiveStreamType = async function SanityLiveStream(props) {\n    const {\n      query,\n      params,\n      perspective: _perspective,\n      stega: _stega,\n      tags,\n      children,\n      tag,\n      requestTag = tag ?? 'next-loader.live-stream.fetch',\n    } = props\n    const {\n      data,\n      sourceMap,\n      tags: cacheTags,\n    } = await sanityFetch({\n      query,\n      params,\n      tags,\n      perspective: _perspective,\n      stega: _stega,\n      requestTag,\n    })\n    const {isEnabled: isDraftModeEnabled} = await draftMode()\n\n    if (isDraftModeEnabled) {\n      const stega = _stega ?? (stegaEnabled && studioUrlDefined && (await draftMode()).isEnabled)\n      const perspective = _perspective ?? (await resolveCookiePerspective())\n      const {projectId, dataset} = client.config()\n      return (\n        <SanityLiveStreamClientComponent\n          projectId={projectId}\n          dataset={dataset}\n          query={query}\n          params={await params}\n          perspective={perspective}\n          stega={stega}\n          initial={children({data, sourceMap, tags: cacheTags})}\n          // eslint-disable-next-line react/no-children-prop, @typescript-eslint/no-explicit-any\n          children={children as unknown as any}\n        />\n      )\n    }\n\n    return children({data, sourceMap, tags: cacheTags})\n  }\n\n  // const verifyPreviewSecret: VerifyPreviewSecretType = async (secret) => {\n  //   if (!serverToken) {\n  //     throw new Error(\n  //       '`serverToken` is required to verify a preview secrets and initiate draft mode',\n  //     )\n  //   }\n\n  //   if (typeof secret !== 'string') {\n  //     throw new TypeError('`secret` must be a string')\n  //   }\n  //   if (!secret.trim()) {\n  //     throw new Error('`secret` must not be an empty string')\n  //   }\n\n  //   const client = _client.withConfig({\n  //     // Use the token that is setup to query draft documents, it should also have permission to query for secrets\n  //     token: serverToken,\n  //     // Userland might be using an API version that's too old to use perspectives\n  //     apiVersion,\n  //     // We can't use the CDN, the secret is typically validated right after it's created\n  //     useCdn: false,\n  //     // Don't waste time returning a source map, we don't need it\n  //     resultSourceMap: false,\n  //     // Stega is not needed\n  //     stega: false,\n  //   })\n  //   const {isValid, studioUrl} = await validateSecret(client, secret, false)\n  //   return {isValid, studioUrl}\n  // }\n\n  return {\n    sanityFetch,\n    SanityLive,\n    SanityLiveStream,\n    // verifyPreviewSecret\n  }\n}\n","import type { JwtReturnType } from './types';\n\n// TODO(dimkl): Will be probably be dropped in next major version\nexport function withLegacyReturn<T extends (...args: any[]) => Promise<JwtReturnType<any, any>>>(cb: T) {\n  return async (...args: Parameters<T>): Promise<NonNullable<Awaited<ReturnType<T>>['data']>> | never => {\n    const { data, errors } = await cb(...args);\n    if (errors) {\n      throw errors[0];\n    }\n    return data;\n  };\n}\n\n// TODO(dimkl): Will be probably be dropped in next major version\nexport function withLegacySyncReturn<T extends (...args: any[]) => JwtReturnType<any, any>>(cb: T) {\n  return (...args: Parameters<T>): NonNullable<Awaited<ReturnType<T>>['data']> | never => {\n    const { data, errors } = cb(...args);\n    if (errors) {\n      throw errors[0];\n    }\n    return data;\n  };\n}\n","import {\n  isTruthy\n} from \"./chunk-GGFRMWFO.mjs\";\nimport {\n  parsePublishableKey\n} from \"./chunk-IV7BOO4U.mjs\";\nimport {\n  __privateAdd,\n  __privateGet,\n  __privateMethod,\n  __privateSet\n} from \"./chunk-7ELT755Q.mjs\";\n\n// src/telemetry/throttler.ts\nvar DEFAULT_CACHE_TTL_MS = 864e5;\nvar _storageKey, _cacheTtl, _TelemetryEventThrottler_instances, generateKey_fn, cache_get, isValidBrowser_get;\nvar TelemetryEventThrottler = class {\n  constructor() {\n    __privateAdd(this, _TelemetryEventThrottler_instances);\n    __privateAdd(this, _storageKey, \"clerk_telemetry_throttler\");\n    __privateAdd(this, _cacheTtl, DEFAULT_CACHE_TTL_MS);\n  }\n  isEventThrottled(payload) {\n    if (!__privateGet(this, _TelemetryEventThrottler_instances, isValidBrowser_get)) {\n      return false;\n    }\n    const now = Date.now();\n    const key = __privateMethod(this, _TelemetryEventThrottler_instances, generateKey_fn).call(this, payload);\n    const entry = __privateGet(this, _TelemetryEventThrottler_instances, cache_get)?.[key];\n    if (!entry) {\n      const updatedCache = {\n        ...__privateGet(this, _TelemetryEventThrottler_instances, cache_get),\n        [key]: now\n      };\n      localStorage.setItem(__privateGet(this, _storageKey), JSON.stringify(updatedCache));\n    }\n    const shouldInvalidate = entry && now - entry > __privateGet(this, _cacheTtl);\n    if (shouldInvalidate) {\n      const updatedCache = __privateGet(this, _TelemetryEventThrottler_instances, cache_get);\n      delete updatedCache[key];\n      localStorage.setItem(__privateGet(this, _storageKey), JSON.stringify(updatedCache));\n    }\n    return !!entry;\n  }\n};\n_storageKey = new WeakMap();\n_cacheTtl = new WeakMap();\n_TelemetryEventThrottler_instances = new WeakSet();\n/**\n * Generates a consistent unique key for telemetry events by sorting payload properties.\n * This ensures that payloads with identical content in different orders produce the same key.\n */\ngenerateKey_fn = function(event) {\n  const { sk: _sk, pk: _pk, payload, ...rest } = event;\n  const sanitizedEvent = {\n    ...payload,\n    ...rest\n  };\n  return JSON.stringify(\n    Object.keys({\n      ...payload,\n      ...rest\n    }).sort().map((key) => sanitizedEvent[key])\n  );\n};\ncache_get = function() {\n  const cacheString = localStorage.getItem(__privateGet(this, _storageKey));\n  if (!cacheString) {\n    return {};\n  }\n  return JSON.parse(cacheString);\n};\nisValidBrowser_get = function() {\n  if (typeof window === \"undefined\") {\n    return false;\n  }\n  const storage = window.localStorage;\n  if (!storage) {\n    return false;\n  }\n  try {\n    const testKey = \"test\";\n    storage.setItem(testKey, testKey);\n    storage.removeItem(testKey);\n    return true;\n  } catch (err) {\n    const isQuotaExceededError = err instanceof DOMException && // Check error names for different browsers\n    (err.name === \"QuotaExceededError\" || err.name === \"NS_ERROR_DOM_QUOTA_REACHED\");\n    if (isQuotaExceededError && storage.length > 0) {\n      storage.removeItem(__privateGet(this, _storageKey));\n    }\n    return false;\n  }\n};\n\n// src/telemetry/collector.ts\nfunction isWindowClerkWithMetadata(clerk) {\n  return typeof clerk === \"object\" && clerk !== null && \"constructor\" in clerk && typeof clerk.constructor === \"function\";\n}\nvar VALID_LOG_LEVELS = /* @__PURE__ */ new Set([\"error\", \"warn\", \"info\", \"debug\", \"trace\"]);\nvar DEFAULT_CONFIG = {\n  samplingRate: 1,\n  maxBufferSize: 5,\n  // Production endpoint: https://clerk-telemetry.com\n  // Staging endpoint: https://staging.clerk-telemetry.com\n  // Local: http://localhost:8787\n  endpoint: \"https://clerk-telemetry.com\"\n};\nvar _config, _eventThrottler, _metadata, _buffer, _pendingFlush, _TelemetryCollector_instances, shouldRecord_fn, shouldRecordLog_fn, shouldBeSampled_fn, scheduleFlush_fn, flush_fn, logEvent_fn, getSDKMetadata_fn, preparePayload_fn, sanitizeContext_fn;\nvar TelemetryCollector = class {\n  constructor(options) {\n    __privateAdd(this, _TelemetryCollector_instances);\n    __privateAdd(this, _config);\n    __privateAdd(this, _eventThrottler);\n    __privateAdd(this, _metadata, {});\n    __privateAdd(this, _buffer, []);\n    __privateAdd(this, _pendingFlush, null);\n    __privateSet(this, _config, {\n      maxBufferSize: options.maxBufferSize ?? DEFAULT_CONFIG.maxBufferSize,\n      samplingRate: options.samplingRate ?? DEFAULT_CONFIG.samplingRate,\n      perEventSampling: options.perEventSampling ?? true,\n      disabled: options.disabled ?? false,\n      debug: options.debug ?? false,\n      endpoint: DEFAULT_CONFIG.endpoint\n    });\n    if (!options.clerkVersion && typeof window === \"undefined\") {\n      __privateGet(this, _metadata).clerkVersion = \"\";\n    } else {\n      __privateGet(this, _metadata).clerkVersion = options.clerkVersion ?? \"\";\n    }\n    __privateGet(this, _metadata).sdk = options.sdk;\n    __privateGet(this, _metadata).sdkVersion = options.sdkVersion;\n    __privateGet(this, _metadata).publishableKey = options.publishableKey ?? \"\";\n    const parsedKey = parsePublishableKey(options.publishableKey);\n    if (parsedKey) {\n      __privateGet(this, _metadata).instanceType = parsedKey.instanceType;\n    }\n    if (options.secretKey) {\n      __privateGet(this, _metadata).secretKey = options.secretKey.substring(0, 16);\n    }\n    __privateSet(this, _eventThrottler, new TelemetryEventThrottler());\n  }\n  get isEnabled() {\n    if (__privateGet(this, _metadata).instanceType !== \"development\") {\n      return false;\n    }\n    if (__privateGet(this, _config).disabled || typeof process !== \"undefined\" && process.env && isTruthy(process.env.CLERK_TELEMETRY_DISABLED)) {\n      return false;\n    }\n    if (typeof window !== \"undefined\" && !!window?.navigator?.webdriver) {\n      return false;\n    }\n    return true;\n  }\n  get isDebug() {\n    return __privateGet(this, _config).debug || typeof process !== \"undefined\" && process.env && isTruthy(process.env.CLERK_TELEMETRY_DEBUG);\n  }\n  record(event) {\n    try {\n      const preparedPayload = __privateMethod(this, _TelemetryCollector_instances, preparePayload_fn).call(this, event.event, event.payload);\n      __privateMethod(this, _TelemetryCollector_instances, logEvent_fn).call(this, preparedPayload.event, preparedPayload);\n      if (!__privateMethod(this, _TelemetryCollector_instances, shouldRecord_fn).call(this, preparedPayload, event.eventSamplingRate)) {\n        return;\n      }\n      __privateGet(this, _buffer).push({ kind: \"event\", value: preparedPayload });\n      __privateMethod(this, _TelemetryCollector_instances, scheduleFlush_fn).call(this);\n    } catch (error) {\n      console.error(\"[clerk/telemetry] Error recording telemetry event\", error);\n    }\n  }\n  /**\n   * Records a telemetry log entry if logging is enabled and not in debug mode.\n   *\n   * @param entry - The telemetry log entry to record.\n   */\n  recordLog(entry) {\n    try {\n      if (!__privateMethod(this, _TelemetryCollector_instances, shouldRecordLog_fn).call(this, entry)) {\n        return;\n      }\n      const levelIsValid = typeof entry?.level === \"string\" && VALID_LOG_LEVELS.has(entry.level);\n      const messageIsValid = typeof entry?.message === \"string\" && entry.message.trim().length > 0;\n      let normalizedTimestamp = null;\n      const timestampInput = entry?.timestamp;\n      if (typeof timestampInput === \"number\" || typeof timestampInput === \"string\") {\n        const candidate = new Date(timestampInput);\n        if (!Number.isNaN(candidate.getTime())) {\n          normalizedTimestamp = candidate;\n        }\n      }\n      if (!levelIsValid || !messageIsValid || normalizedTimestamp === null) {\n        if (this.isDebug && typeof console !== \"undefined\") {\n          console.warn(\"[clerk/telemetry] Dropping invalid telemetry log entry\", {\n            levelIsValid,\n            messageIsValid,\n            timestampIsValid: normalizedTimestamp !== null\n          });\n        }\n        return;\n      }\n      const sdkMetadata = __privateMethod(this, _TelemetryCollector_instances, getSDKMetadata_fn).call(this);\n      const logData = {\n        sdk: sdkMetadata.name,\n        sdkv: sdkMetadata.version,\n        cv: __privateGet(this, _metadata).clerkVersion ?? \"\",\n        lvl: entry.level,\n        msg: entry.message,\n        ts: normalizedTimestamp.toISOString(),\n        pk: __privateGet(this, _metadata).publishableKey || null,\n        payload: __privateMethod(this, _TelemetryCollector_instances, sanitizeContext_fn).call(this, entry.context)\n      };\n      __privateGet(this, _buffer).push({ kind: \"log\", value: logData });\n      __privateMethod(this, _TelemetryCollector_instances, scheduleFlush_fn).call(this);\n    } catch (error) {\n      console.error(\"[clerk/telemetry] Error recording telemetry log entry\", error);\n    }\n  }\n};\n_config = new WeakMap();\n_eventThrottler = new WeakMap();\n_metadata = new WeakMap();\n_buffer = new WeakMap();\n_pendingFlush = new WeakMap();\n_TelemetryCollector_instances = new WeakSet();\nshouldRecord_fn = function(preparedPayload, eventSamplingRate) {\n  return this.isEnabled && !this.isDebug && __privateMethod(this, _TelemetryCollector_instances, shouldBeSampled_fn).call(this, preparedPayload, eventSamplingRate);\n};\nshouldRecordLog_fn = function(_entry) {\n  return true;\n};\nshouldBeSampled_fn = function(preparedPayload, eventSamplingRate) {\n  const randomSeed = Math.random();\n  const toBeSampled = randomSeed <= __privateGet(this, _config).samplingRate && (__privateGet(this, _config).perEventSampling === false || typeof eventSamplingRate === \"undefined\" || randomSeed <= eventSamplingRate);\n  if (!toBeSampled) {\n    return false;\n  }\n  return !__privateGet(this, _eventThrottler).isEventThrottled(preparedPayload);\n};\nscheduleFlush_fn = function() {\n  if (typeof window === \"undefined\") {\n    __privateMethod(this, _TelemetryCollector_instances, flush_fn).call(this);\n    return;\n  }\n  const isBufferFull = __privateGet(this, _buffer).length >= __privateGet(this, _config).maxBufferSize;\n  if (isBufferFull) {\n    if (__privateGet(this, _pendingFlush)) {\n      if (typeof cancelIdleCallback !== \"undefined\") {\n        cancelIdleCallback(Number(__privateGet(this, _pendingFlush)));\n      } else {\n        clearTimeout(Number(__privateGet(this, _pendingFlush)));\n      }\n    }\n    __privateMethod(this, _TelemetryCollector_instances, flush_fn).call(this);\n    return;\n  }\n  if (__privateGet(this, _pendingFlush)) {\n    return;\n  }\n  if (\"requestIdleCallback\" in window) {\n    __privateSet(this, _pendingFlush, requestIdleCallback(() => {\n      __privateMethod(this, _TelemetryCollector_instances, flush_fn).call(this);\n      __privateSet(this, _pendingFlush, null);\n    }));\n  } else {\n    __privateSet(this, _pendingFlush, setTimeout(() => {\n      __privateMethod(this, _TelemetryCollector_instances, flush_fn).call(this);\n      __privateSet(this, _pendingFlush, null);\n    }, 0));\n  }\n};\nflush_fn = function() {\n  const itemsToSend = [...__privateGet(this, _buffer)];\n  __privateSet(this, _buffer, []);\n  __privateSet(this, _pendingFlush, null);\n  if (itemsToSend.length === 0) {\n    return;\n  }\n  const eventsToSend = itemsToSend.filter((item) => item.kind === \"event\").map((item) => item.value);\n  const logsToSend = itemsToSend.filter((item) => item.kind === \"log\").map((item) => item.value);\n  if (eventsToSend.length > 0) {\n    const eventsUrl = new URL(\"/v1/event\", __privateGet(this, _config).endpoint);\n    fetch(eventsUrl, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      keepalive: true,\n      method: \"POST\",\n      // TODO: We send an array here with that idea that we can eventually send multiple events.\n      body: JSON.stringify({ events: eventsToSend })\n    }).catch(() => void 0);\n  }\n  if (logsToSend.length > 0) {\n    const logsUrl = new URL(\"/v1/logs\", __privateGet(this, _config).endpoint);\n    fetch(logsUrl, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      keepalive: true,\n      method: \"POST\",\n      body: JSON.stringify({ logs: logsToSend })\n    }).catch(() => void 0);\n  }\n};\n/**\n * If running in debug mode, log the event and its payload to the console.\n */\nlogEvent_fn = function(event, payload) {\n  if (!this.isDebug) {\n    return;\n  }\n  if (typeof console.groupCollapsed !== \"undefined\") {\n    console.groupCollapsed(\"[clerk/telemetry]\", event);\n    console.log(payload);\n    console.groupEnd();\n  } else {\n    console.log(\"[clerk/telemetry]\", event, payload);\n  }\n};\n/**\n * If in browser, attempt to lazily grab the SDK metadata from the Clerk singleton, otherwise fallback to the initially passed in values.\n *\n * This is necessary because the sdkMetadata can be set by the host SDK after the TelemetryCollector is instantiated.\n */\ngetSDKMetadata_fn = function() {\n  const sdkMetadata = {\n    name: __privateGet(this, _metadata).sdk,\n    version: __privateGet(this, _metadata).sdkVersion\n  };\n  if (typeof window !== \"undefined\") {\n    const windowWithClerk = window;\n    if (windowWithClerk.Clerk) {\n      const windowClerk = windowWithClerk.Clerk;\n      if (isWindowClerkWithMetadata(windowClerk) && windowClerk.constructor.sdkMetadata) {\n        const { name, version } = windowClerk.constructor.sdkMetadata;\n        if (name !== void 0) {\n          sdkMetadata.name = name;\n        }\n        if (version !== void 0) {\n          sdkMetadata.version = version;\n        }\n      }\n    }\n  }\n  return sdkMetadata;\n};\n/**\n * Append relevant metadata from the Clerk singleton to the event payload.\n */\npreparePayload_fn = function(event, payload) {\n  const sdkMetadata = __privateMethod(this, _TelemetryCollector_instances, getSDKMetadata_fn).call(this);\n  return {\n    event,\n    cv: __privateGet(this, _metadata).clerkVersion ?? \"\",\n    it: __privateGet(this, _metadata).instanceType ?? \"\",\n    sdk: sdkMetadata.name,\n    sdkv: sdkMetadata.version,\n    ...__privateGet(this, _metadata).publishableKey ? { pk: __privateGet(this, _metadata).publishableKey } : {},\n    ...__privateGet(this, _metadata).secretKey ? { sk: __privateGet(this, _metadata).secretKey } : {},\n    payload\n  };\n};\n/**\n * Best-effort sanitization of the context payload. Returns a plain object with JSON-serializable\n * values or null when the input is missing or not serializable. Arrays are not accepted.\n */\nsanitizeContext_fn = function(context) {\n  if (context === null || typeof context === \"undefined\") {\n    return null;\n  }\n  if (typeof context !== \"object\") {\n    return null;\n  }\n  try {\n    const cleaned = JSON.parse(JSON.stringify(context));\n    if (cleaned && typeof cleaned === \"object\" && !Array.isArray(cleaned)) {\n      return cleaned;\n    }\n    return null;\n  } catch {\n    return null;\n  }\n};\n\n// src/telemetry/events/component-mounted.ts\nvar EVENT_COMPONENT_MOUNTED = \"COMPONENT_MOUNTED\";\nvar EVENT_COMPONENT_OPENED = \"COMPONENT_OPENED\";\nvar EVENT_SAMPLING_RATE = 0.1;\nfunction createPrebuiltComponentEvent(event) {\n  return function(component, props, additionalPayload) {\n    return {\n      event,\n      eventSamplingRate: EVENT_SAMPLING_RATE,\n      payload: {\n        component,\n        appearanceProp: Boolean(props?.appearance),\n        baseTheme: Boolean(props?.appearance?.baseTheme),\n        elements: Boolean(props?.appearance?.elements),\n        variables: Boolean(props?.appearance?.variables),\n        ...additionalPayload\n      }\n    };\n  };\n}\nfunction eventPrebuiltComponentMounted(component, props, additionalPayload) {\n  return createPrebuiltComponentEvent(EVENT_COMPONENT_MOUNTED)(component, props, additionalPayload);\n}\nfunction eventPrebuiltComponentOpened(component, props, additionalPayload) {\n  return createPrebuiltComponentEvent(EVENT_COMPONENT_OPENED)(component, props, additionalPayload);\n}\nfunction eventComponentMounted(component, props = {}) {\n  return {\n    event: EVENT_COMPONENT_MOUNTED,\n    eventSamplingRate: EVENT_SAMPLING_RATE,\n    payload: {\n      component,\n      ...props\n    }\n  };\n}\n\n// src/telemetry/events/method-called.ts\nvar EVENT_METHOD_CALLED = \"METHOD_CALLED\";\nvar EVENT_SAMPLING_RATE2 = 0.1;\nfunction eventMethodCalled(method, payload) {\n  return {\n    event: EVENT_METHOD_CALLED,\n    eventSamplingRate: EVENT_SAMPLING_RATE2,\n    payload: {\n      method,\n      ...payload\n    }\n  };\n}\n\n// src/telemetry/events/framework-metadata.ts\nvar EVENT_FRAMEWORK_METADATA = \"FRAMEWORK_METADATA\";\nvar EVENT_SAMPLING_RATE3 = 0.1;\nfunction eventFrameworkMetadata(payload) {\n  return {\n    event: EVENT_FRAMEWORK_METADATA,\n    eventSamplingRate: EVENT_SAMPLING_RATE3,\n    payload\n  };\n}\n\n// src/telemetry/events/theme-usage.ts\nvar EVENT_THEME_USAGE = \"THEME_USAGE\";\nvar EVENT_SAMPLING_RATE4 = 1;\nfunction eventThemeUsage(appearance) {\n  const payload = analyzeThemeUsage(appearance);\n  return {\n    event: EVENT_THEME_USAGE,\n    eventSamplingRate: EVENT_SAMPLING_RATE4,\n    payload\n  };\n}\nfunction analyzeThemeUsage(appearance) {\n  if (!appearance || typeof appearance !== \"object\") {\n    return {};\n  }\n  const themeProperty = appearance.theme || appearance.baseTheme;\n  if (!themeProperty) {\n    return {};\n  }\n  let themeName;\n  if (Array.isArray(themeProperty)) {\n    for (const theme of themeProperty) {\n      const name = extractThemeName(theme);\n      if (name) {\n        themeName = name;\n        break;\n      }\n    }\n  } else {\n    themeName = extractThemeName(themeProperty);\n  }\n  return { themeName };\n}\nfunction extractThemeName(theme) {\n  if (typeof theme === \"string\") {\n    return theme;\n  }\n  if (typeof theme === \"object\" && theme !== null) {\n    if (\"name\" in theme && typeof theme.name === \"string\") {\n      return theme.name;\n    }\n  }\n  return void 0;\n}\n\nexport {\n  TelemetryCollector,\n  eventPrebuiltComponentMounted,\n  eventPrebuiltComponentOpened,\n  eventComponentMounted,\n  eventMethodCalled,\n  eventFrameworkMetadata,\n  EVENT_THEME_USAGE,\n  EVENT_SAMPLING_RATE4 as EVENT_SAMPLING_RATE,\n  eventThemeUsage\n};\n//# sourceMappingURL=chunk-RHZEJGFD.mjs.map","import {\n  createAuthenticateRequest,\n  createBackendApiClient,\n  verifyToken\n} from \"./chunk-EI3YIHOJ.mjs\";\nimport \"./chunk-LWOXHF4E.mjs\";\nimport {\n  withLegacyReturn\n} from \"./chunk-P263NW7Z.mjs\";\nimport \"./chunk-XJ4RTXJG.mjs\";\nimport \"./chunk-YW6OOOXM.mjs\";\nimport \"./chunk-RPS7XK5K.mjs\";\n\n// src/index.ts\nimport { TelemetryCollector } from \"@clerk/shared/telemetry\";\nvar verifyToken2 = withLegacyReturn(verifyToken);\nfunction createClerkClient(options) {\n  const opts = { ...options };\n  const apiClient = createBackendApiClient(opts);\n  const requestState = createAuthenticateRequest({ options: opts, apiClient });\n  const telemetry = new TelemetryCollector({\n    publishableKey: opts.publishableKey,\n    secretKey: opts.secretKey,\n    samplingRate: 0.1,\n    ...opts.sdkMetadata ? { sdk: opts.sdkMetadata.name, sdkVersion: opts.sdkMetadata.version } : {},\n    ...opts.telemetry || {}\n  });\n  return {\n    ...apiClient,\n    ...requestState,\n    telemetry\n  };\n}\nexport {\n  createClerkClient,\n  verifyToken2 as verifyToken\n};\n//# sourceMappingURL=index.mjs.map","import \"../chunk-BUSYA2B4.js\";\nimport { createClerkClient } from \"@clerk/backend\";\nimport {\n  API_URL,\n  API_VERSION,\n  DOMAIN,\n  IS_SATELLITE,\n  MACHINE_SECRET_KEY,\n  PROXY_URL,\n  PUBLISHABLE_KEY,\n  SDK_METADATA,\n  SECRET_KEY,\n  TELEMETRY_DEBUG,\n  TELEMETRY_DISABLED\n} from \"./constants\";\nconst clerkClientDefaultOptions = {\n  secretKey: SECRET_KEY,\n  publishableKey: PUBLISHABLE_KEY,\n  apiUrl: API_URL,\n  apiVersion: API_VERSION,\n  userAgent: `${\"@clerk/nextjs\"}@${\"6.32.0\"}`,\n  proxyUrl: PROXY_URL,\n  domain: DOMAIN,\n  isSatellite: IS_SATELLITE,\n  machineSecretKey: MACHINE_SECRET_KEY,\n  sdkMetadata: SDK_METADATA,\n  telemetry: {\n    disabled: TELEMETRY_DISABLED,\n    debug: TELEMETRY_DEBUG\n  }\n};\nconst createClerkClientWithOptions = (options) => createClerkClient({ ...clerkClientDefaultOptions, ...options });\nexport {\n  createClerkClientWithOptions\n};\n//# sourceMappingURL=createClerkClient.js.map","import {\n  EVENT_SAMPLING_RATE,\n  EVENT_THEME_USAGE,\n  TelemetryCollector,\n  eventComponentMounted,\n  eventFrameworkMetadata,\n  eventMethodCalled,\n  eventPrebuiltComponentMounted,\n  eventPrebuiltComponentOpened,\n  eventThemeUsage\n} from \"./chunk-RHZEJGFD.mjs\";\nimport \"./chunk-GGFRMWFO.mjs\";\nimport \"./chunk-IV7BOO4U.mjs\";\nimport \"./chunk-TETGTEI2.mjs\";\nimport \"./chunk-KOH7GTJO.mjs\";\nimport \"./chunk-I6MTSTOF.mjs\";\nimport \"./chunk-7ELT755Q.mjs\";\nexport {\n  EVENT_SAMPLING_RATE,\n  EVENT_THEME_USAGE,\n  TelemetryCollector,\n  eventComponentMounted,\n  eventFrameworkMetadata,\n  eventMethodCalled,\n  eventPrebuiltComponentMounted,\n  eventPrebuiltComponentOpened,\n  eventThemeUsage\n};\n//# sourceMappingURL=telemetry.mjs.map"],"names":["revalidateSyncTags","defaultRevalidateSyncTags","tag"],"mappings":"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","ignoreList":[0,1,4,6,9,10,11,13,14,15,16]}