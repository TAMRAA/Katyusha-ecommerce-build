{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/tamra/Desktop/Katyusha-ecommerce/ecommerce-build/lib/stripe.ts"],"sourcesContent":["import Stripe from \"stripe\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error(\"STRIPE_SECRET_KEY is not set\");\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion:\"2025-08-27.basil\", // Use the latest ApiVersion\n});\n\nexport default stripe;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IAClC,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,SAAS,IAAI,mKAAM,CAAC,QAAQ,GAAG,CAAC,iBAAiB,EAAE;IACvD,YAAW;AACb;uCAEe","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///Users/tamra/Desktop/Katyusha-ecommerce/ecommerce-build/sanity/env.ts"],"sourcesContent":["export const apiVersion =\n  process.env.NEXT_PUBLIC_SANITY_API_VERSION || '2025-09-16'\n\nexport const dataset = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_DATASET,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_DATASET'\n)\n\nexport const projectId = assertValue(\n  process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  'Missing environment variable: NEXT_PUBLIC_SANITY_PROJECT_ID'\n)\n\nfunction assertValue<T>(v: T | undefined, errorMessage: string): T {\n  if (v === undefined) {\n    throw new Error(errorMessage)\n  }\n\n  return v\n}\n"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,aACX,QAAQ,GAAG,CAAC,8BAA8B,IAAI;AAEzC,MAAM,UAAU,4DAErB;AAGK,MAAM,YAAY,0DAEvB;AAGF,SAAS,YAAe,CAAgB,EAAE,YAAoB;IAC5D,IAAI,MAAM,WAAW;QACnB,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///Users/tamra/Desktop/Katyusha-ecommerce/ecommerce-build/sanity/lib/backendClient.ts"],"sourcesContent":["import { createClient } from \"next-sanity\";\n\nimport { apiVersion, dataset, projectId } from \"../env\";\n\nexport const backendClient = createClient({\n  projectId,\n  dataset,\n  apiVersion,\n  useCdn: true, // Set to false if statically generating pages, using ISR or tag-based revalidation\n  token: process.env.SANITY_API_TOKEN,\n});\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAEO,MAAM,gBAAgB,IAAA,gMAAY,EAAC;IACxC,WAAA,4HAAS;IACT,SAAA,0HAAO;IACP,YAAA,6HAAU;IACV,QAAQ;IACR,OAAO,QAAQ,GAAG,CAAC,gBAAgB;AACrC","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/tamra/Desktop/Katyusha-ecommerce/ecommerce-build/app/%28store%29/webhook/route.ts"],"sourcesContent":["\"use server\";\nimport { Metadata } from \"@/actions/createCheckoutSession\";\nimport stripe from \"@/lib/stripe\";\nimport { backendClient } from \"@/sanity/lib/backendClient\";\nimport { headers } from \"next/headers\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport Stripe from \"stripe\";\n\nexport async function POST(req: NextRequest) {\n  const body = await req.text();\n  const headersList = await headers();\n  const sig = headersList.get(\"stripe-signature\");\n\n  if (!sig) {\n    return NextResponse.json({ error: \"No signature\" }, { status: 400 });\n  }\n\n  const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n  if (!webhookSecret) {\n    console.log(\"Stripe webhook secret is not set\");\n    return NextResponse.json(\n      { error: \"Webhook secret not configured\" },\n      { status: 400 }\n    );\n  }\n\n  let event: Stripe.Event;\n  try {\n    event = stripe.webhooks.constructEvent(body, sig, webhookSecret);\n  } catch (err) {\n    console.error(\"Webhook signature verification failed:\", err);\n    return NextResponse.json(\n      { error: `Webhook Error: ${err}` },\n      { status: 400 }\n    );\n  }\n\n  if (event.type === \"checkout.session.completed\") {\n    const session = event.data.object as Stripe.Checkout.Session;\n    try {\n      const order = await createOrderInSanity(session);\n      console.log(\"Order created in Sanity:\", order);\n    } catch (err) {\n      console.error(\"Error creating order in Sanity:\", err);\n      return NextResponse.json(\n        { error: \"Error creating order\" },\n        { status: 500 }\n      );\n    }\n  }\n  return NextResponse.json({ received: true });\n}\n\nasync function createOrderInSanity(session: Stripe.Checkout.Session) {\n  const {\n    id,\n    amount_total,\n    currency,\n    metadata,\n    payment_intent,\n    customer,\n    total_details,\n  } = session;\n\n  const { orderNumber, customerName, customerEmail, clerkUserId } =\n    metadata as Metadata;\n\n  const lineItemsWithProduct = await stripe.checkout.sessions.listLineItems(\n    id,\n    {\n      expand: [\"data.price.product\"],\n    }\n  );\n  const sanityProducts = lineItemsWithProduct.data.map((item) => ({\n    _key: crypto.randomUUID(),\n    product: {\n      _type: \"reference\",\n      _ref: (item.price?.product as Stripe.Product)?.metadata?.id,\n    },\n    quantity: item.quantity || 0,\n  }));\n\n  const order = await backendClient.create({\n    _type: \"order\",\n    orderNumber,\n    stripeCheckoutSessionId: id,\n    stripePaymentIntentId: payment_intent,\n    customerName,\n    stripeCustomerId: customer,\n    clerkUserId: clerkUserId,\n    email: customerEmail,\n    currency,\n    amountDiscount: total_details?.amount_discount\n      ? total_details.amount_discount / 100\n      : 0,\n    products: sanityProducts,\n    totalPrice: amount_total ? amount_total / 100 : 0,\n    status: \"paid\",\n    orderDate: new Date().toISOString(),\n  });\n  return order;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AACA;;;;;;;AAGO,eAAe,KAAK,GAAgB;IACzC,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,MAAM,cAAc,MAAM,IAAA,4IAAO;IACjC,MAAM,MAAM,YAAY,GAAG,CAAC;IAE5B,IAAI,CAAC,KAAK;QACR,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,MAAM,gBAAgB,QAAQ,GAAG,CAAC,qBAAqB;IACvD,IAAI,CAAC,eAAe;QAClB,QAAQ,GAAG,CAAC;QACZ,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAgC,GACzC;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;IACJ,IAAI;QACF,QAAQ,0HAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,KAAK;IACpD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,0CAA0C;QACxD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO,CAAC,eAAe,EAAE,KAAK;QAAC,GACjC;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI,MAAM,IAAI,KAAK,8BAA8B;QAC/C,MAAM,UAAU,MAAM,IAAI,CAAC,MAAM;QACjC,IAAI;YACF,MAAM,QAAQ,MAAM,oBAAoB;YACxC,QAAQ,GAAG,CAAC,4BAA4B;QAC1C,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,mCAAmC;YACjD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;IACF;IACA,OAAO,gJAAY,CAAC,IAAI,CAAC;QAAE,UAAU;IAAK;AAC5C;AAEA,eAAe,oBAAoB,OAAgC;IACjE,MAAM,EACJ,EAAE,EACF,YAAY,EACZ,QAAQ,EACR,QAAQ,EACR,cAAc,EACd,QAAQ,EACR,aAAa,EACd,GAAG;IAEJ,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,aAAa,EAAE,WAAW,EAAE,GAC7D;IAEF,MAAM,uBAAuB,MAAM,0HAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CACvE,IACA;QACE,QAAQ;YAAC;SAAqB;IAChC;IAEF,MAAM,iBAAiB,qBAAqB,IAAI,CAAC,GAAG,CAAC,CAAC,OAAS,CAAC;YAC9D,MAAM,OAAO,UAAU;YACvB,SAAS;gBACP,OAAO;gBACP,MAAO,KAAK,KAAK,EAAE,SAA4B,UAAU;YAC3D;YACA,UAAU,KAAK,QAAQ,IAAI;QAC7B,CAAC;IAED,MAAM,QAAQ,MAAM,iJAAa,CAAC,MAAM,CAAC;QACvC,OAAO;QACP;QACA,yBAAyB;QACzB,uBAAuB;QACvB;QACA,kBAAkB;QAClB,aAAa;QACb,OAAO;QACP;QACA,gBAAgB,eAAe,kBAC3B,cAAc,eAAe,GAAG,MAChC;QACJ,UAAU;QACV,YAAY,eAAe,eAAe,MAAM;QAChD,QAAQ;QACR,WAAW,IAAI,OAAO,WAAW;IACnC;IACA,OAAO;AACT;;;IA7FsB;;AAAA,iPAAA","debugId":null}}]
}